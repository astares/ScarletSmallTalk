Object subclass: #StCompilerTestClass	instanceVariableNames: 'instVar1 instVar2 instVar3 value1 value2'	classVariableNames: 'ClassVar1 ClassVar2 ClassVar3'	poolDictionaries: ''	category: 'Compiler-JS-Test'!!StCompilerTestClass methodsFor: 'variables instance' stamp: 'mir 4/9/2018 20:13'!instVar	instVar1! !!StCompilerTestClass methodsFor: 'variables instance' stamp: 'mir 4/9/2018 20:14'!instVarReturn	^instVar1! !!StCompilerTestClass methodsFor: 'initialize-release' stamp: 'mir 4/9/2018 20:15'!initialize	instVar1 := 'instVar1'.	instVar2 := 'instVar2'.	instVar3 := 'instVar3'.! !!StCompilerTestClass methodsFor: 'initialize-release' stamp: 'mir 4/24/2018 16:57'!value1: aValue	value1 := aValue! !!StCompilerTestClass methodsFor: 'initialize-release' stamp: 'mir 4/24/2018 16:57'!value2: aValue	value2 := aValue! !!StCompilerTestClass methodsFor: 'accessing' stamp: 'mir 5/30/2018 13:48'!value1	^value1! !!StCompilerTestClass methodsFor: 'accessing' stamp: 'mir 5/30/2018 13:48'!value2	^value2! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 6/5/2018 15:05'!\\ aNumber	^value1 \\ aNumber! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/9/2018 20:31'!binary	1 + 2! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/9/2018 20:32'!binaryBinaryReturn	^1 + 2 - 3! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/9/2018 20:33'!binaryBracedReturn	^1 + (2 * 3)! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/9/2018 20:31'!binaryReturn	^1 + 2! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/26/2018 10:51'!cascadeKeywordReturn	^value1		add: 1;		add: 2! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/26/2018 10:51'!cascadeKeywordReturnYourself	^value1		add: 1;		add: 2;		yourself! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/26/2018 11:02'!cascadeLiteralReturn	^5		odd;		even! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 5/31/2018 22:51'!cascadeMessageReceiverReturn	^value1 yourself		add: 1;		add: 2! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/26/2018 10:41'!cascadeSelf	self		yourself;		yourself! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/26/2018 10:49'!cascadeUnaryReturn	^value1		yourself;		yourself! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/9/2018 21:04'!keyword	^self keywordMethodReturn: 1! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/30/2018 17:00'!sendSuper	super isNil! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/9/2018 20:21'!unary	'123' size! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 7/16/2018 21:45'!unaryAssignmentReceiver	^(value1 := '123' , '4') size! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/9/2018 20:21'!unaryReturn	^'123' size! !!StCompilerTestClass methodsFor: 'messages' stamp: 'mir 4/9/2018 20:22'!unaryUnaryReturn	^'123' size even! !!StCompilerTestClass methodsFor: 'method' stamp: 'mir 4/9/2018 20:53'!+ something	^something	! !!StCompilerTestClass methodsFor: 'method' stamp: 'mir 4/7/2018 14:39'!emptyMethod! !!StCompilerTestClass methodsFor: 'method' stamp: 'mir 4/9/2018 20:56'!keywordMethod: arg1	! !!StCompilerTestClass methodsFor: 'method' stamp: 'mir 4/9/2018 20:56'!keywordMethod: arg1 with: arg2	! !!StCompilerTestClass methodsFor: 'method' stamp: 'mir 4/9/2018 20:56'!keywordMethod: arg1 with: arg2 with: arg3	! !!StCompilerTestClass methodsFor: 'method' stamp: 'mir 4/9/2018 20:56'!keywordMethodReturn: arg1	^arg1! !!StCompilerTestClass methodsFor: 'method' stamp: 'mir 4/9/2018 20:57'!keywordMethodReturn: arg1 with: arg2	^arg2! !!StCompilerTestClass methodsFor: 'method' stamp: 'mir 4/9/2018 20:57'!keywordMethodReturn: arg1 with: arg2 with: arg3	^arg3! !!StCompilerTestClass methodsFor: 'method' stamp: 'mir 4/9/2018 20:52'!unaryMethod	! !!StCompilerTestClass methodsFor: 'primitives' stamp: 'mir 4/13/2018 18:09'!primitiveWithFollowUpFailed	<primitive: 'primScan' module: 'NKBarcodeScanner'>	self primitiveFailed! !!StCompilerTestClass methodsFor: 'primitives' stamp: 'mir 4/13/2018 18:42'!primitiveWithFollowUpReturn	<primitive: 'primScan' module: 'NKBarcodeScanner'>	^42! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 4/13/2018 19:45'!ifFalse	1 < 2		ifFalse: ['one']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 6/29/2018 21:16'!ifFalseAssignment	| a |	(a := 1 < 2)		ifFalse: ['one']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 8/20/2018 14:42'!ifFalseBlockIfTrueReturn	value1 < value2 ifFalse: [		value1 > value2 ifTrue: [			^ #()]]! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 8/20/2018 14:45'!ifFalseBlockReturnIfTrue	value1 < value2 ifFalse: [		^value1 > value2 ifTrue: [			#()]]! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 4/13/2018 19:47'!ifFalseIfTrue	1 < 2		ifFalse: ['two']		ifTrue: ['one']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 4/24/2018 16:58'!ifFalseReturn	value1 < value2		ifFalse: [^'one']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/30/2018 13:56'!ifNilIfNotNil	value1		ifNil: ['one']		ifNotNil: ['two']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/30/2018 14:00'!ifNilIfNotNilBlocksReturn	^value1		ifNil: ['one' size. 'one']		ifNotNil: [true ifTrue: ['two'] ifFalse: ['three']]! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/30/2018 13:56'!ifNilIfNotNilReturn	^value1		ifNil: ['one']		ifNotNil: ['two']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/30/2018 14:17'!ifNotNilIfNilReturn	^value1		ifNotNil: ['one']		ifNil: ['two']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 4/13/2018 19:43'!ifTrue	1 < 2		ifTrue: ['one']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 4/13/2018 19:10'!ifTrueIfFalse	1 < 2		ifTrue: ['one']		ifFalse: ['two']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 4/24/2018 16:58'!ifTrueIfFalseReturn	value1 < value2		ifTrue: ['one']		ifFalse: [^'two']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 8/15/2018 20:34'!ifTrueIfFalseReturnBlockValue: aBlock	^value1 < value2		ifTrue: aBlock ifFalse: [value1]! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/3/2019 17:10'!ifTrueIfFalseReturnLiteralValue	^value1 < value2		ifTrue: 4 ifFalse: [value1]! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 7/16/2018 21:16'!ifTrueReturn	value1 < value2		ifTrue: [^'one']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 6/1/2018 18:40'!ifTrueReturnBlock	1 < 2		ifTrue: [^ [ :a :block | a with: block]]! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 8/15/2018 20:34'!ifTrueReturnBlockValue: aBlock	^value1 < value2		ifTrue: aBlock ifFalse: [value1]! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 4/24/2018 16:58'!ifTrueReturnIfFalse	value1 < value2		ifTrue: [^'one']		ifFalse: ['two']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/30/2018 14:21'!ifUndefined	value1		ifUndefined: ['one']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/31/2018 09:47'!ifUndefinedReturn	^(self basicAt: value1)		ifUndefined: ['one']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/15/2018 12:42'!inlineIfTrueIfFalse	| result |	result := value1 < value2		ifTrue: [instVar1]		ifFalse: [instVar2].	^result! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/8/2019 11:07'!inlineIfTrueIfFalseBlock: aBlock	| result |	result := value1 < value2		ifTrue: aBlock		ifFalse: [instVar2].	^result! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/15/2018 15:05'!inlineReceiverIfTrueIfFalse	^(value1 < value2		ifTrue: [instVar1]		ifFalse: [instVar2]) yourself! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/15/2018 15:04'!inlineReturnIfTrueIfFalse	^value1 < value2		ifTrue: [instVar1]		ifFalse: [instVar2]! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/30/2018 14:31'!isKindOfReturn	^value1		isKindOf: 'one' class! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 5/25/2018 19:24'!nonLocalReturnIfTrue	value1 < value2		ifTrue: [[^'one'] value]		ifFalse: ['two']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 4/24/2018 17:05'!returnIfFalse	^value1 < value2		ifFalse: ['one']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 4/24/2018 17:00'!returnIfFalseIfTrue	^value1 < value2		ifFalse: ['two']		ifTrue: ['one']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 4/24/2018 17:02'!returnIfTrue	^value1 < value2		ifTrue: ['one']! !!StCompilerTestClass methodsFor: 'rewrite if' stamp: 'mir 4/24/2018 17:04'!returnIfTrueIfFalse	^value1 < value2		ifTrue: ['one']		ifFalse: ['two']! !!StCompilerTestClass methodsFor: 'binding' stamp: 'mir 4/30/2018 17:45'!bindSmalltalkClassName	^StCompilerTestClass name! !!StCompilerTestClass methodsFor: 'variables temp' stamp: 'mir 4/6/2018 18:01'!variable	| var1 |! !!StCompilerTestClass methodsFor: 'variables temp' stamp: 'mir 4/6/2018 18:10'!variableAssign	| var1 |	var1 := 1! !!StCompilerTestClass methodsFor: 'variables temp' stamp: 'mir 4/6/2018 18:10'!variableAssignReturn	| var1 |	var1 := 1.	^var1! !!StCompilerTestClass methodsFor: 'variables temp' stamp: 'mir 4/6/2018 18:03'!variableReturn	| var1 |	^var1! !!StCompilerTestClass methodsFor: 'variables temp' stamp: 'mir 4/6/2018 18:10'!variableReturnAssign	| var1 |	^var1 := 1! !!StCompilerTestClass methodsFor: 'variables temp' stamp: 'mir 4/6/2018 18:01'!variables	| var1 var2 |! !!StCompilerTestClass methodsFor: 'variables temp' stamp: 'mir 4/6/2018 18:11'!variablesAssign	| var1 var2 |	var1 := 1.	var2 := 2! !!StCompilerTestClass methodsFor: 'variables temp' stamp: 'mir 4/6/2018 18:11'!variablesAssignAssignReturn	| var1 var2 |	var1 := 1.	var2 := var1.	^var2! !!StCompilerTestClass methodsFor: 'variables temp' stamp: 'mir 4/6/2018 18:11'!variablesAssignReturn	| var1 var2 |	var1 := 1.	var2 := 2.	^var2! !!StCompilerTestClass methodsFor: 'variables temp' stamp: 'mir 4/6/2018 18:01'!variablesEmpty	|  |! !!StCompilerTestClass methodsFor: 'variables temp' stamp: 'mir 4/6/2018 18:03'!variablesReturn	| var1 var2 |	^var2! !!StCompilerTestClass methodsFor: 'variables temp' stamp: 'mir 4/6/2018 18:11'!variablesReturnAssign	| var1 var2 |	var1 := 1.	^var2 := 2! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/6/2018 18:04'!blockEmpty	[ ]! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/9/2018 22:48'!blockEmptyEval	[ ] value! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/9/2018 22:54'!blockExpressionEval	^[:x | x*x] value: 2! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/9/2018 22:53'!blockExpressionVariableEval	^[:x | 		'123' size.		x*x] value: 3! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 5/3/2019 11:48'!blockLiteral	[5 ]! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 5/12/2018 20:20'!blockLiteralEval	[5 ] value! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 5/12/2018 20:20'!blockLiteralEvalReturn	^[5 ] value! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 5/30/2018 16:35'!blockReturnTemp	^[ | y | y := value1. y] value! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 5/30/2018 16:36'!blockReturnTempBlock	^[ | y | y := value1. y]! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/25/2018 17:22'!blockReturnTempEval	^[ | y | y := value1. y] value! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/25/2018 17:22'!blockReturnVariableTemp	^[:x | | y | y := x. y] value: value1! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 9/3/2018 11:09'!blockSuperSend	| ans |	 [ans := super yourself] 		ensure: [ans := nil].	^ans! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/25/2018 17:12'!blockTemp	[ | y | ]! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/25/2018 17:11'!blockTempEmpty	[ || ]! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/25/2018 17:12'!blockTempVariableEmpty	[:x | || ]! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/6/2018 18:04'!blockVariableEmpty	[:x | ]! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/9/2018 22:49'!blockVariableEmptyEval	[:x | ] value: 1! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/9/2018 22:51'!blockVariableEval	^[:x | x] value: 2! !!StCompilerTestClass methodsFor: 'blocks' stamp: 'mir 4/9/2018 20:20'!blockVariablesEmpty	[:x :y |  ]! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 5/29/2018 10:51'!returnWhileFalse	[	value1 < value2 ifTrue: [^'one']. 	2 > 1] whileFalse! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 5/29/2018 08:47'!returnWhileTrue	[	value1 < value2 ifTrue: [^'one']. 	2 < 1] whileTrue! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 6/13/2018 14:16'!testNonLocal	| repeat |	[1 < 2		ifTrue:  [self primaryExpression ifFalse: [^self expected: 'Argument']]		ifFalse: [^'hello' notNil].	repeat]		whileTrue: [].	^true! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 5/29/2018 10:51'!whileFalse	[2 > 1] whileFalse! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 5/29/2018 13:42'!whileFalseDo	[value1 > value2] whileFalse: [value1 := value1 + 1].	^value1! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 5/29/2018 10:52'!whileFalseReturn	^[2 > 1] whileFalse! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 5/29/2018 13:38'!whileFalseVars	[value1 == value1] whileFalse! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 5/29/2018 08:45'!whileTrue	[2 < 1] whileTrue! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 5/29/2018 13:43'!whileTrueDo	[value1 < value2] whileTrue: [value1 := value1 + 1].	^value1! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 7/16/2018 21:14'!whileTrueDoNonLocalReturn	[value1 < value2] whileTrue: [            value1 > value2                ifTrue:[^nil]]! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 6/13/2018 13:50'!whileTrueNestedNonLocalReturn	[	1 > 2 ifTrue: [		3 > 2			ifTrue: [^3]			ifFalse: ['noting']].	2 < 1] whileTrue! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 6/13/2018 13:47'!whileTrueNonLocalReturn	[	1 > 2 ifTrue: [^3].	2 < 1] whileTrue! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 5/29/2018 08:45'!whileTrueReturn	^[2 < 1] whileTrue! !!StCompilerTestClass methodsFor: 'rewrite loops' stamp: 'mir 9/4/2018 09:45'!whileVariableTrueDo: aBlock	aBlock whileTrue: [value1 := value1 + 1].	^value1! !!StCompilerTestClass methodsFor: 'private' stamp: 'mir 5/30/2018 08:54'!basicAt: varName	"this is only used for the smalltalk tests.	JS code will not call this as the call will be inlined by the compiler"	| index instVarName |	instVarName := varName asString allButFirst.	index := self class instVarIndexFor: instVarName ifAbsent: [-1].	^index < 0		ifTrue: [nil]		ifFalse: [self instVarAt: index]! !!StCompilerTestClass methodsFor: 'private' stamp: 'mir 5/30/2018 12:44'!basicAt: varName ifAbsent: aBlock	"this is only used for the smalltalk tests.	JS code will not call this as the call will be inlined by the compiler"	| index instVarName |	instVarName := varName asString allButFirst.	index := self class instVarIndexFor: instVarName ifAbsent: [^aBlock value].	^index < 0		ifTrue: [nil]		ifFalse: [self instVarAt: index]! !!StCompilerTestClass methodsFor: 'private' stamp: 'mir 5/30/2018 13:49'!basicAt: varName put: value	"this is only used for the smalltalk tests.	JS code will not call this as the call will be inlined by the compiler"	| index instVarName |	instVarName := varName asString allButFirst.	index := self class instVarIndexFor: instVarName ifAbsent: [-1].	^index < 0		ifTrue: [nil]		ifFalse: [self instVarAt: index put: value]! !!StCompilerTestClass methodsFor: 'variables class var' stamp: 'mir 5/31/2018 12:37'!classVar	ClassVar1! !!StCompilerTestClass methodsFor: 'variables class var' stamp: 'mir 5/31/2018 17:52'!classVarAssignment	ClassVar1 := value1.	^ClassVar1! !!StCompilerTestClass methodsFor: 'variables class var' stamp: 'mir 5/31/2018 12:37'!classVarReturn	^ClassVar1! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 4/9/2018 22:55'!blockExpressionVariableReturnEval	[:x | 		'123' size.		^x*x] value: 4! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/8/2019 10:46'!blockReturnBlockCascade	[true		value;		value: [1];		value: [^2]	] value! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/8/2019 10:01'!blockReturnCascade	true		value;		value: [1];		value: [^2]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/8/2019 10:42'!blockReturnCascadeIfTrue	true		value;		value: [true ifTrue: [1]];		value: [2];		value: [true ifTrue: [^1]];		value: [^2]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/8/2019 10:44'!blockReturnCascadeReceiver	([^3] value)		value;		value: [2]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/8/2019 07:32'!blockReturnIfTrueTemp	| oc |	oc := Object new.	(oc size > 1)		ifTrue: [^oc]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/3/2019 11:40'!blockReturnLiteral	[ ^42]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/3/2019 11:51'!blockReturnLiteralReturn	^[ ^42]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/3/2019 11:43'!blockReturnLiteralValue	[ ^42] value! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/3/2019 11:50'!blockReturnLiteralValueReturn	^[ ^42] value! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/3/2019 16:51'!blockReturnMessageReturnIfTrue	self value: [:x | x ifTrue: [^'aa' includes: 'a']]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/3/2019 16:51'!blockReturnMessageReturnIfTrueLiteral	self value: [:x | x ifTrue: [^true]]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/3/2019 16:46'!blockReturnMessageReturnLiteral	self value: [^42]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/3/2019 16:47'!blockReturnMessageReturnVariable	self value: [:x | ^x]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 4/25/2018 17:22'!blockReturnTempReturn	^[ | y | y := value1. ^y]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/8/2019 10:39'!blockReturnValueIfTrue	[		true			ifTrue:[^nil].		^42	] value! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/8/2019 10:40'!blockReturnValueTemp	| i |	i := 42.	[		^i	] value! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 4/25/2018 17:13'!blockTempReturn	[ | y | ^ y]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 4/6/2018 18:05'!blockVariableEmptyReturn	[:x | ^x ]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 4/9/2018 22:50'!blockVariableReturnEval	[:x | ^x] value: 1! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 4/9/2018 20:20'!blockVariablesEmptyReturn	[:x :y | ^y ]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/2/2019 14:57'!ifTrue: successBlock ifFalseBlockValue: failureBlock	^self isNil        ifFalse:            [self               value:                    [:success | |result|                    success                        ifTrue: [^successBlock value]                        ifFalse: [^failureBlock value].            ]].! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/3/2019 14:20'!ifTrue: successBlock ifFalseReturnBlock: failureBlock	^self value: [:success |                     ^success                        ifTrue: successBlock                        ifFalse: failureBlock.            ]! !!StCompilerTestClass methodsFor: 'block returns' stamp: 'mir 5/2/2019 14:58'!ifTrue: successBlock ifFalseReturnBlockValue: failureBlock	^self isNil        ifFalse:            [self               value:                    [:success | |result|                    ^success                        ifTrue: [successBlock value]                        ifFalse: [failureBlock value].            ]].! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/30/2018 12:46'!basicAtIfAbsentReturn	^self basicAt: '@value42' ifAbsent: [value1]! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/30/2018 13:44'!basicAtPut	self basicAt: '@value2' put: value1! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/30/2018 08:49'!basicAtReturn	^self basicAt: '@value2'! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 7/16/2018 18:33'!basicAtVariableIfAbsentBlockReturn	| block |	block := ['one'].	^self basicAt: value1 ifAbsent: block! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/30/2018 12:52'!basicAtVariableIfAbsentReturn	^self basicAt: value1 ifAbsent: ['one']! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/30/2018 08:45'!basicAtVariableReturn	^self basicAt: value1! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/25/2018 16:19'!classAccess	^value1 class! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/30/2018 13:51'!eqEqEq	^value1 === value2! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/28/2018 15:16'!ifNil	value1 ifNil: ['one']! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/28/2018 15:40'!ifNilReturn	value1 ifNil: [^'one']! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/28/2018 18:04'!ifNotNil	value1 ifNil: ['one']! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/28/2018 18:04'!ifNotNilReturn	value1 ifNotNil: [^'one']! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/28/2018 15:39'!returnIfNil	^value1 ifNil: ['one']! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/28/2018 18:04'!returnIfNotNil	^value1 ifNotNil: ['one']! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/25/2018 16:27'!returnIsNil	^value1 isNil! !!StCompilerTestClass methodsFor: 'rewrite' stamp: 'mir 5/25/2018 16:27'!returnNotNil	^value1 notNil! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 8/14/2018 11:02'!literalArrayWithBoolean	^#( true false true )! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 4/9/2018 17:29'!literalArrayWithCharacters	^#( $a $b $c )! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 8/14/2018 11:01'!literalArrayWithNil	^#( nil nil nil )! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 4/25/2018 16:36'!literalArrayWithNumbers	^#( 		42		-42		123.45		"disabled 1.2345e2" "123.45"		2r10010010 "146"		16rA000 "40960"		)! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 4/9/2018 17:30'!literalArrayWithStrings	^#( '1'  '2'  '3' )! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 5/24/2018 12:33'!literalCRString	^'helloworld'! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 4/9/2018 17:30'!literalCharacter	^$a! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 5/25/2018 16:21'!literalFalse	^false! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 5/25/2018 16:21'!literalNil	^nil! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 4/9/2018 17:30'!literalNumber	^42! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 5/25/2018 16:21'!literalSelf	^self! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 4/9/2018 17:30'!literalString	^'hello world'! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 4/9/2018 17:30'!literalSymbol	^#symbolic! !!StCompilerTestClass methodsFor: 'literals' stamp: 'mir 5/25/2018 16:21'!literalTrue	^true! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!StCompilerTestClass class	instanceVariableNames: 'classInstVar1 classInstVar2'!!StCompilerTestClass class methodsFor: 'class initialization' stamp: 'mir 6/11/2018 16:08'!classVar1	^ClassVar1! !!StCompilerTestClass class methodsFor: 'class initialization' stamp: 'mir 6/11/2018 16:05'!initialize	self initializeClassVars.	classInstVar1 := 'classInstVar1'.	classInstVar2 := 'classInstVar2'! !!StCompilerTestClass class methodsFor: 'class initialization' stamp: 'mir 6/11/2018 16:05'!initializeClassVars	ClassVar1 := 'classVar1'.	ClassVar2 := 'classVar2'.	ClassVar3 := 'classVar3'! !!StCompilerTestClass class methodsFor: 'class initialization' stamp: 'mir 6/11/2018 16:48'!tearDown	ClassVar1 := nil.	ClassVar2 := nil.	ClassVar3 := nil.	classInstVar1 := nil.	classInstVar2 := nil! !!StCompilerTestClass class methodsFor: 'accessing' stamp: 'mir 5/31/2018 17:56'!classInstVar1	^classInstVar1! !!StCompilerTestClass class methodsFor: 'class inst vars' stamp: 'mir 5/31/2018 17:57'!classInstVarAssignment	classInstVar1 := ClassVar1! !!StCompilerTestClass class methodsFor: 'class inst vars' stamp: 'mir 5/31/2018 17:57'!classInstVarReturn	^classInstVar1! !!StCompilerTestClass class methodsFor: 'instance creation' stamp: 'mir 4/9/2018 20:15'!new	^super new initialize! !StCompilerTestClass initialize!