// SK version LWM2-372 479 Tue 27 Aug 2019 22:49:25 UTC
/*
Scarlet SmallTalk
A New Smalltalk->JavaScript compiler based on Squeak, 
parts Copyright (c) 1996-2016 The individual, corporate, and institutional contributors who have collectively contributed elements to this software ("The Squeak Community"). All rights reserved.

Copyright 2012-2019 LabWare Inc.
Copyright 2016-2019 Andience Ltd. - Michael Rueger
Copyright 2016 Corporate Smalltalk Consulting Ltd - John M McIntosh

Amber is released under the MIT license. All contributions made for inclusion are considered to be under MIT.
Copyright 2011-2015 Nicolas Petton
Copyright 2014-2018 Herbert Vojčík and Amber contributors
Copyright (C) 2011 Jtalk contributors
	David Graham <dgraham@iphouse.com>
	Goran Krampe <goran@krampe.se>
	Laurent Laffont <laurent.laffont@gmail.com>
Code and ideas from Clamato (http://clamato.net), written by Avi Bryant.


----------------------------------------------------------------------
MIT License
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
----------------------------------------------------------------------
*/
function SmalltalkModuleWrapper(module) {
	this.module = module
}

SmalltalkModuleWrapper.prototype.send = function (receiver, selector, arguments) {
	//A smalltalk message send
	return this.module.perform_withArguments_(selector, [receiver, arguments]);
}

function PrimitiveManager(_platform = 'common') {
	this.platform = _platform;
	this.modules = {};
	this.current = this;
	this.primFailValue = {};
}

//temporary for unit tests
PrimitiveManager.prototype.setPlatformName = function (_platform) {
	this.platform = _platform;
}

PrimitiveManager.prototype.primSetPlatformName = function(receiver, args) {
	return this.setPlatformName(args[0]);
}

PrimitiveManager.prototype.registerModule = function (module, name) {
	this.modules[name] = module;
}

PrimitiveManager.prototype.hasModule = function (moduleName) {
	return this.modules[moduleName] === undefined;
}

PrimitiveManager.prototype.callPrimitive = function (moduleName, primitiveName, receiver, args) {
	var module = this.modules[moduleName];
	if (module && module[primitiveName]) {
		const result = module[primitiveName](receiver, args);
		// if (result === this.primFailValue) {
		// 	console.log(moduleName + ':' + primitiveName);
		// }
		return result;
	}
	return this.primFailValue;
}

PrimitiveManager.prototype.newPrimitiveSpec = function() {
	const spec = {};
	spec.Android = {};
	spec.iOS = {};
	spec.NodeJS = {};
	spec.common = {};
	return spec;
}

PrimitiveManager.prototype.primNewPrimitiveSpec = function(receiver, args) {
	return this.newPrimitiveSpec();
}

PrimitiveManager.prototype.registerSpec = function (spec, name) {
	const module = {};
	Object.assign(module, spec.common, spec[this.platform]);
	this.registerModule(module, name);
}

PrimitiveManager.prototype.primRegisterSpec = function(receiver, args) {
	var spec = args[0];
	var specName = args[1];
	return this.registerSpec(spec, specName);
}

PrimitiveManager.prototype.primRegisterSmalltalkModule = function (receiver, args) {
	var smalltalkModule = args[0];
	var moduleName = args[1];
	var primitiveMapDictionary = args[2];
	var module = new SmalltalkModuleWrapper(smalltalkModule);

	try {
		//Smalltalk code happens in this try/catch
		//This block constructs primitive methods for each of the primitives that need to be registered
		//and adds them to a wrapper for the Smalltalk object.
		primitiveMapDictionary.keysAndValuesDo_(function (primitive, selector) {
			module[primitive] = function (receiverForPrimitive, argsForPrimitive) {
				var primitiveReceiver = receiverForPrimitive;
				var primitiveArguments = Array.prototype.slice.call(argsForPrimitive);
				var result =  module.send(primitiveReceiver, selector, primitiveArguments);
				if (result === smalltalkModule.primFailValue()) { //Smalltalk message send
					return smalltalk.primitiveManager.primFailValue;
				}
				return result;
			}
		});
	} catch (e) {
		return smalltalk.primitiveManager.primFailValue;
	}
	this.registerModule(module, moduleName);
}

//This is a primitive
PrimitiveManager.prototype.primDeregisterSmalltalkModule = function (receiver, args) {
	try {
		var moduleName = args[0].moduleName(); //Smalltalk message send
		this.deregisterModule(moduleName)
		return receiver;
	} catch (e) {
		return smalltalk.primitiveManager.primFailValue;
	}
}


StObject = function StObject(){};
StBehavior = function StBehavior(){};
StClass = function StClass(){};
StMetaclass = function StMetaclass(){ this.$meta = true; };
StMethod = function StMethod(){};
StUndefinedObject = function StUndefinedObject(){};
nil = new StUndefinedObject();
nil.toString = function() { return 'nil'; }
nil.isNil_ = function(x) {
	switch(typeof x) {
		case "undefined":
			return true;
		case "string": case "boolean":
		case "number": case "function":
			return false;
	};
	if ((x===null) || (x === this)) return true;
	if (x===smalltalk) return false;
	if ((x.$klass) && ("function" === typeof x.isNil)) return x.isNil();
	return false;
}
nil.is_eqeq_ = function(a,b) {
 if (a === b) return true;
 if (nil.isNil_(a) || nil.isNil_(b)) return false;
 if (a.constructor !== b.constructor) return false;
 if (a.constructor === Date) return a === b;
 return a.valueOf() === b.valueOf();
}

StSystemDictionary = function StSystemDictionary(){
	var st = this;
	st.$imageFileName = "image.js";
	st.isNil = function(x) { return (x || nil) === nil; }

	st.klass = function(spec) { // Private
		var aClass;
		if(spec.meta) {
			aClass = new StMetaclass();
		} else {
			var metaSpec = {meta:true};
			metaSpec.className = spec.className + " class";
			if (!st.isNil(spec.superclass)) {
				metaSpec.superclass = spec.superclass.$klass;
			}
			var metaClass = st.klass(metaSpec);
			aClass = new metaClass.$fn();
		}
		st.setClass(aClass,spec);
		aClass.$fn.prototype.$klass = aClass;
		aClass.$fn.prototype.$methods = {};
		if (aClass.$className == "Metaclass") { st.bindRoots(aClass); }
		return aClass;
	}
	st.setProtoOf_to_ = function(jsObject, proto) {
		jsObject.__proto__ = proto;
	}
	st.bindRoots = function(metaclass){ // Private
		var objectClassPrototype = st.Object.$klass.$fn.prototype;
		st.setProtoOf_to_(objectClassPrototype,st.Class.$fn.prototype);
		st.setProtoOf_to_(st.Smalltalk.$klass.$fn.prototype,objectClassPrototype);
		st.setProtoOf_to_(st.Behavior.$klass.$fn.prototype,objectClassPrototype);
		st.Object.$klass.$superclass = st.Class;
		metaclass.$superclass = st.Behavior;
	}
	st.setVarNames = function(aClass, iVarNames, aValue) { // Private
		aClass.$iVarNames = iVarNames;
		var i=iVarNames.length;while(i--){
			aClass.$fn.prototype["@"+iVarNames[i]] = aValue;
		}
	}
	st.setClass = function(aClass, spec) { // Private
		aClass.$className = spec.className;
		if(!spec.meta) { aClass.$klass["@instanceClass"] = aClass; }
		aClass.$category = spec.category || "";
		aClass.$superclass = spec.superclass || nil;
		if(!st.isNil(aClass.$superclass)) {
			delete aClass.$superclass["@subclasses"];
			if(!st.isNil(aClass.$klass)) {
				if(!spec.meta) aClass.$klass.$superclass = aClass.$superclass.$klass;
				if(aClass.$klass.$superclass)
					delete aClass.$klass.$superclass["@subclasses"];
			}
		}
		aClass.$fn = st.fnInSpec(spec);
		st.setVarNames(aClass,spec.iVarNames||[],nil);
		return aClass;
	}
	st.fnInSpec = function(spec) { // Private
		if (spec.meta && (st.isNil(spec.superclass))) {
			spec.superclass = st.Class;
		}
		if (spec.fn) {
			if (!st.isNil(spec.superclass))
				st.setProtoOf_to_(spec.fn.prototype,spec.superclass.$fn.prototype);
			return spec.fn;
		}
		var $stConstructor = function(){};
		if (!st.isNil(spec.superclass))
			$stConstructor.prototype = new spec.superclass.$fn();
		return $stConstructor;
	}
	st.classes = function() {
		var classes = [];
		for (var i in st){ if (st.hasOwnProperty(i) && (i != "$klass")) {
		    var cls = st[i]; if(!st.isNil(cls)){
			if(cls.$klass && cls.$className){ classes.push(cls); }
		    } }
		}
		return classes;
	}
	st.subclasses = function(aClass) {
		if(aClass.hasOwnProperty("@subclasses")) return aClass["@subclasses"];
		var result = [];
		var classes = st.classes();
		var i=classes.length;while(i--){
		    if(classes[i].$fn) {
			if(classes[i].$klass
				&& classes[i].$klass.$superclass === aClass)
				{ result.push(classes[i].$klass); }
			if(classes[i].$superclass === aClass)
				{ result.push(classes[i]); }
		    }
		}
		if(st.Class){ // Class linked to Object.$klass
			if(aClass === st.Class) { var k;
				for(var i in result) {
					if(result[i] === st.Object.$klass) { k = i; }
				}
				if(k) result.splice(k,1);
			}
		}
		aClass["@subclasses"] = result;
		return result;
	}
	st.allSubclassesDo = function(aClass,aBlock) {
		var subclasses = st.subclasses(aClass);
		var i=subclasses.length;while(i--){
			var cls = subclasses[i];
			aBlock(cls);
			st.allSubclassesDo(cls,aBlock);
		}
		return st;
	}
	st.mapClassName = function(className, category, fn, superclass) {
		var spec = {
			className: className,
			category: category,
			superclass: superclass,
			fn: fn };
		if (st[className]) return st.setClass(st[className],spec);
		st[className] = st.klass(spec);
		return st[className];
	}
	st.addClass = function(className, superclass, iVarNames, category) {
		st.debugAddClass(className, superclass, iVarNames, category);
		if(st[className]) {
			var aClass = st[className];
			var sameShape = (aClass.$superclass == superclass)
				&& (aClass.$iVarNames == iVarNames);
			if (sameShape && (aClass.$category == category) ) return aClass;
			if(aClass.$superclass) {
				delete aClass.$superclass["@subclasses"];
				var aMeta = aClass.$klass;
				if (aMeta && superclass) {
					delete  aMeta.$superclass["@subclasses"];
					aMeta.$superclass = superclass.$klass;
				}
			}
			aClass.$superclass = superclass;
			if(superclass && (superclass["@subclasses"])) {
				if(st.isNil(superclass["@subclasses"])) { superclass["@subclasses"] = []; }
				superclass["@subclasses"].push(aClass);
			}
			st.setVarNames(aClass,iVarNames||[],nil);
			aClass.$category = category || aClass.$category;
		} else {
			st[className] = st.klass({
				className: className,
				iVarNames: iVarNames,
				superclass: superclass
			});
			st[className].$category = category || "";
		}
		return st[className];
	}
	st.renameClass = function(aClass,aString) {
		delete st[aClass.$className];
		aClass.$className = aString;
		st[aString] = aClass;
	}
	st.removeClass = function(aClass) {
		var deleted = "Deleted-";
		if(aClass.$superclass) { delete aClass.$superclass["@subclasses"]; }
		delete st[aClass.$className];
		aClass.$className = deleted + aClass.$className;
		aClass.$klass.$className = deleted + aClass.$klass.$className;
	}
	st.metaVarNames = function(aMetaClass,iVarNames) {
		if (aMetaClass.$iVarNames == iVarNames) return false;
		st.setVarNames(aMetaClass,iVarNames||[],nil);
		return true;
	}

	st.whoImplements = function(klass,jsSelector) {
		var cls = klass;
		do {	if(cls.$fn.prototype.hasOwnProperty(jsSelector)) return cls;
			cls = cls.$superclass;
		} while (cls);
		return nil;
	}
	st.superImplementor = function(klass,jsSelector) {
		if (st.isNil(klass.$superclass)
			|| st.isNil(klass.$superclass.$fn))
			return klass.missingImplementorFor_(jsSelector);
		var cls = st.whoImplements(klass.$superclass,jsSelector);
		if (st.isNil(cls))
			return klass.$superclass.missingImplementorFor_(jsSelector);
		return cls.$fn.prototype[jsSelector];
	}
	st.addMethod = function(jsSelector, method, klass) {
		klass.$fn.prototype[jsSelector] = method.$fn;
		klass.$fn.prototype.$methods[method.$selector] = method;
		method["@classField"] = klass;
		return method;
	}

	st.bind = function(klass,stSelector,jsSelector,jsFunction,category,stSource) {
		st.debugBind(klass,stSelector,jsSelector,jsFunction,category,stSource);
		var method = new StMethod();
		method.$selector = stSelector;
		method.$fn	 = jsFunction;
		method.$category = category;
		method.$source   = stSource;
		method.$generation = st.$state;
		if(!st.isNil(klass)) {
			if(st.isNil(jsSelector)) { jsSelector = stSelector.replace(/\:/g,"_"); }
			st.addMethod(jsSelector,method,klass);
		}
		return method;
	}

	st.removeMethod = function(aClass,aMethod) {
		delete aClass.$fn.prototype[aMethod.$selector.asSelector()];
		delete aClass.$fn.prototype.$methods[aMethod.$selector]
		return aMethod;
	}

	st.newMethod = function(currentClass,selector,fn,source) {
		return st.bind(nil,selector,nil,fn,nil,source);
	}
	st.method = function(spec) { // OBSOLETE
		return st.bind(nil,spec.selector,nil,spec.fn,spec.category,spec.source);
	}

	st.readJSObject = function(js) {
		if(!js) return nil;
		var object = js;
		var readObject = (js.constructor === Object);
		var readArray = (js.constructor === Array);
		if(readObject) { object = st.Dictionary.$$new(); }
		for(var i in js) {
			if (!js.hasOwnProperty(i)) break;
			if(readObject) { object.at_put_(i, st.readJSObject(js[i])); }
			if(readArray) { object[i] = st.readJSObject(js[i]); }
		}
		return object;
	}

	st.globalsDo = function(action) {
		for (key in st) {
			if (!st.hasOwnProperty(key)) break;
			var aValue = st[key];
			if((typeof(aValue) != "function")
			 && (aValue.isClass
			 && (!aValue.isClass()))) { action(key) } }
		return st;
	}

	st.launchImage = function(imageName) {
		if(!st.isNil(imageName)) {
			st.$imageFileName = imageName;
			load(imageName);
		}
		st.$state = "launching";
		if(st.launch && typeof st.launch == "function") { st.launch(); }
		st.$state = "running";
		return st;
	}

	st.is_kindOf_ = function(anObject,aClass) {
		if(st.isNil(anObject) || ("undefined" === typeof anObject.isKindOf_)) return false;
		return anObject.isKindOf_(aClass);
	}
	st.responds_to_ = function(anObject,aSelector) {
		if(st.isNil(anObject) || ("undefined" === typeof anObject.respondsTo_)) return false;
		return anObject.respondsTo_(aSelector);
	}

	st.debugBind = function(klass,stSelector,jsSelector,jsFunction,category,stSource) { return st; }
	st.debugAddClass = function(className, superclass, iVarNames, category) { return st; }

	st.initClass = function(aClass) { return "DEPRECATED"; }
	st.initWithSubclasses = function(aClass) { return aClass; }
	st.init = function(aClass) { return "DEPRECATED"; }
	st.initRoots = function(){ return "DEPRECATED"; }

	st.primitiveManager = new PrimitiveManager();
} // Smalltalk definition

smalltalk = new StSystemDictionary();
smalltalk.primitiveManager.registerModule(smalltalk.primitiveManager, "RuntimePrimitiveManager");

smalltalk.toString = function() { return "smalltalk"; }

smalltalk.emptyJSONObject = function(js) {return {};}
smalltalk.readJSObject_ = smalltalk.readJSObject;
smalltalk.subclasses_ = smalltalk.subclasses;
smalltalk.allSubclassesDo_ = smalltalk.allSubclassesDo;
smalltalk.allSubclassesDo_value_ = smalltalk.allSubclassesDo;
smalltalk.removeMethod_ = smalltalk.removeMethod;
smalltalk.removeMethod_method_ = smalltalk.removeMethod;
smalltalk.renameClass_ = smalltalk.renameClass;
smalltalk.removeClass_ = smalltalk.removeClass;
smalltalk.metaVarNames_array_ = smalltalk.metaVarNames;
smalltalk.addMethod_method_to_ = smalltalk.addMethod;
smalltalk.globalsDo_ = smalltalk.globalsDo;

smalltalk.jsGlobal = function(js) {return (function test(){return this;}).call(null);}

smalltalk.$state = "booting";
smalltalk.OverwriteMethods = smalltalk.OverwriteMethods || nil;
smalltalk.DumpOverwritenMethods = smalltalk.DumpOverwritenMethods || nil;

smalltalk.mapClassName("Object", "Kernel", StObject);
smalltalk.mapClassName("Smalltalk", "Kernel", StSystemDictionary, smalltalk.Object);
smalltalk.mapClassName("Behavior", "Kernel", StBehavior, smalltalk.Object);
smalltalk.mapClassName("Class", "Kernel", StClass, smalltalk.Behavior);
smalltalk.mapClassName("Metaclass", "Kernel", StMetaclass, smalltalk.Behavior);
smalltalk.mapClassName("CompiledMethod", "Kernel", StMethod, smalltalk.Object);

smalltalk.mapClassName("Number", "Kernel", Number, smalltalk.Object);
smalltalk.mapClassName("BlockClosure", "Kernel", Function, smalltalk.Object);
smalltalk.mapClassName("Boolean", "Kernel", Boolean, smalltalk.Object);
smalltalk.mapClassName("DateTime", "Kernel", Date, smalltalk.Object);
smalltalk.mapClassName("UndefinedObject", "Kernel", StUndefinedObject, smalltalk.Object);

smalltalk.mapClassName("Collection", "Kernel", undefined, smalltalk.Object);
smalltalk.mapClassName("SequenceableCollection", "Kernel", undefined, smalltalk.Collection);
smalltalk.mapClassName("String", "Kernel", String, smalltalk.SequenceableCollection);
smalltalk.mapClassName("Array", "Kernel", Array, smalltalk.SequenceableCollection);
smalltalk.mapClassName("RegularExpression", "Kernel", RegExp, smalltalk.Object);

smalltalk.$state = "startup";

// Return the result of evaluating a smalltalk expression.
smalltalk.st = function(code) { return code.evaluate(); }

// Return the result of evaluating a smalltalk expression (or a description of the error occurred).
smalltalk.doIt = function(code) { return code.doIt() }

// FileIn the contents of file at fileName
fileIn = function(fileName) { return read(fileName).fileIn(); }

// FileIn smalltalk code at fileName emmiting generated code in a .js file
emmit = function(fileName) { return smalltalk.emmit_(fileName); }

// Eval the contents of file at fileName
fileInJS = function(fileName) { return eval(read(fileName)); }

// Export category
exportCategory = function(aString) { return smalltalk.Exporter.exportCategory_(aString); }

// Save Image functionality
saveImage = function() { return smalltalk.saveImage(); }
saveImageAs = function(fileName) { return smalltalk.saveImageAs_(fileName); }
smalltalk.$imageFileName = smalltalk.$imageFileName  || "image.js";
'use strict';
smalltalk.SKPrimitiveModule = {
	primFailValue: smalltalk.primitiveManager.primFailValue
}
'use strict';
const SKArray = Object.create(smalltalk.SKPrimitiveModule);

smalltalk.primitiveManager.registerModule(SKArray, "SKArray");

SKArray.primBasicNew = function (receiver, args) {
	const size = args[0].valueOf();
	if (!Number.isInteger(size)) {
		return this.primFailValue;
	}
	return new Array(size).fill(nil);
}

SKArray.primSize = function(receiver, args) {
	return receiver.length;
}

SKArray.primAtPut = function (receiver, args) {
	const pos = args[0].valueOf();
	const val = args[1];
	// The final check in this if statement is commented out to be fixed at a later time
	// For now we rely on Javascripts arrays to grow dynamically, and this check messes with that abillity
	if (!Number.isInteger(pos) || pos < 1 ) { //|| pos > receiver.length) {
		return this.primFailValue;
	}
	return receiver[pos-1] = val;
}

SKArray.primAt = function (receiver, args) {
	const index = args[0].valueOf();
	const value = receiver[index - 1];
	if(value === undefined) { 
		return this.primFailValue; 
	}
	return value;
}

SKArray.primAtIfAbsent = function (receiver, args) {
	const index = args[0].valueOf();
	const block = args[1].valueOf();
	var value = receiver[index - 1];
	if(value === undefined) { return block(); }
	return value;
}

SKArray.primDo = function (receiver, args) {
	const block = args[0].valueOf();
	if (typeof block != 'function') {
		return this.primFailValue;
	}
	for(var i=0;i<receiver.length;i++){ 
		block(receiver[i]);
	}
}

SKArray.primAddAll = function (receiver, args) {
	const collection = args[0];
	if (collection.constructor != Array) {
		return this.primFailValue;
	}
	const arr = Array.from(collection.valueOf());
	receiver.push.apply(receiver, arr);
}

SKArray.primShallowCopy = function(receiver, args) {
	return receiver.slice(0);
}

SKArray.primCopyWithAll = function (receiver, args) {
	const collection = args[0];
	if (collection.constructor != Array) {
		return this.primFailValue;
	}
	const arr = Array.from(collection.valueOf());
	return receiver.concat(arr);
}

SKArray.primJoin = function (receiver, args) {
	const aString = args[0].valueOf();
	if (typeof aString != 'string') {
		return this.primFailValue;
	}
	return receiver.join(aString);
}

SKArray.primSort = function (receiver, args) {
	const aBlock = args[0].valueOf();
	if (typeof aBlock != 'function' || aBlock.length != 2 ) {
		return this.primFailValue;
	}
	return receiver.sort((a, b) => aBlock(a, b) ? -1 : 1);
}

function primitiveForm(anObject) {
	if (anObject == null) {
		return nil;
	} else if (anObject.constructor == Date) {
		return anObject;
	} else {
		return anObject.valueOf();
	}
}

SKArray.primRemoveIfAbsent = function (receiver, args) {
	const anObject = primitiveForm(args[0]);
	const aBlock = primitiveForm(args[1]);
	if (typeof aBlock != 'function') {
		return this.primFailValue;
	}
	for(var i=0;i<receiver.length;i++) {
		if(receiver[i] == anObject) {
			receiver.splice(i,1); 
			return anObject;
		}
	}
	return aBlock.value();
}

SKArray.primAddLast = function (receiver, args) {
	const value = args[0];
	receiver.push(value);
	return value;
}

SKArray.primAddFirst = function (receiver, args) {
	const anObject = args[0];
	receiver.splice(0,0,anObject);
	return anObject;
}

SKArray.primRemoveFirst = function (receiver, args) {
	if (receiver.length < 1) {
		return this.primFailValue;
	}
	const first = receiver[0];
	receiver.splice(0,1);
	return first;
}

SKArray.primRemoveAll = function (receiver, args) {
	if (receiver.length < 1) {
		return [];
	}
	receiver.splice(0,receiver.length);
}

SKArray.primRemoveIndex = function (receiver, args) {
	const index = args[0].valueOf();
	if(!Number.isInteger(index) || (index < 1 || index > receiver.length)) {
		return this.primFailValue;
	}
	receiver.splice(index-1, 1);
}

SKArray.primAtAllPut = function (receiver, args) {
	const anObject = args[0];
	for(var i=0;i<receiver.length;i++){ 
		receiver[i] = anObject;
	}
	return receiver;
}

SKArray.primWithIndexDo = function (receiver, args) {
	const aBlock = args[0].valueOf();
	if (typeof aBlock != 'function' || aBlock.length != 2) {
		return this.primFailValue;
	}
	for(var i=0;i<receiver.length;i++){
		aBlock(receiver[i], i+1);
	}
}
'use strict';
const SKByteArray = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKByteArray, "SKByteArray");

SKByteArray.primInitializeStorage = function (receiver, args) {
	var size = args[0].valueOf();
	if (typeof size == "number") {
		receiver.__contents = new Uint8Array(size);
		return receiver;
	}
	return this.primFailValue;
}

SKByteArray.primSize = function (receiver, args) {
	var contents = receiver.__contents;
	return contents
		? contents.length
		: this.primFailValue;
}

SKByteArray.primAt = function (receiver, args) {
	var contents = receiver.__contents;
	var index = args[0].valueOf();
	if (contents
		&& Number.isInteger(index)
		&& index >= 1
		&& index <= contents.length) {
			return contents[index - 1];
	}
	return this.primFailValue;
}

SKByteArray.primAtPut = function (receiver, args) {
	var contents = receiver.__contents;
	var index = args[0].valueOf();
	var byte = args[1].valueOf();
	if (contents
		&& Number.isInteger(index)
		&& index >= 1
		&& index <= contents.length
		&& Number.isInteger(byte)
		&& byte >= 0
		&& byte <= 255) {
			contents[index - 1] = byte;
			return byte;
	}
	return this.primFailValue;
}

SKByteArray.primUTF8ToString = function(receiver, args) {
	//https://stackoverflow.com/questions/8936984/uint8array-to-string-in-javascript
	var utf8ArrayToStr = (function() {
		var charCache = new Array(128); // Preallocate the cache for the common single byte chars
		var charFromCodePt = String.fromCodePoint || String.fromCharCode;
		var result = [];

		return function(array) {
			var codePt, byte1;
			var buffLen = array.length;

			result.length = 0;

			for (var i = 0; i < buffLen;) {
				byte1 = array[i++];

				if (byte1 <= 0x7F) {
					codePt = byte1;
				} else if (byte1 <= 0xDF) {
					codePt = ((byte1 & 0x1F) << 6) | (array[i++] & 0x3F);
				} else if (byte1 <= 0xEF) {
					codePt = ((byte1 & 0x0F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);
				} else if (String.fromCodePoint) {
					codePt = ((byte1 & 0x07) << 18) | ((array[i++] & 0x3F) << 12) | ((array[i++] & 0x3F) << 6) | (array[i++] & 0x3F);
				} else {
					codePt = 63; // Cannot convert four byte code points, so use "?" instead
					i += 3;
				}
				result.push(charCache[codePt] || (charCache[codePt] = charFromCodePt(codePt)));
			}

			return result.join("");
		};
	})();
	return utf8ArrayToStr(receiver.__contents);
}

SKByteArray.primFromUint8Array = function (receiver, args) {
	
	var bytes = args[0];
	if (bytes && bytes.constructor == Uint8Array) {
		var byteArray = smalltalk.ByteArray.basicNew();
		byteArray.__contents = bytes;
		return byteArray;
	}
	return this.primFailValue;
}

SKByteArray.primContents = function (receiver, args) {
	
	if (typeof(receiver.__contents) != "undefined") {
		return receiver.__contents;
	}
	return this.primFailValue;
}

SKByteArray.primAsByteArray = function(receiver, args) {
	//https://gist.github.com/joni/3760795
	function toUTF8Array(str) {
		var utf8 = [];
		for (var i=0; i < str.length; i++) {
			var charcode = str.charCodeAt(i);
			if (charcode < 0x80) {
				utf8.push(charcode);
			} else if (charcode < 0x800) {
				utf8.push(0xc0 | (charcode >> 6), 
					0x80 | (charcode & 0x3f));
			} else if (charcode < 0xd800 || charcode >= 0xe000) {
				utf8.push(0xe0 | (charcode >> 12), 
					0x80 | ((charcode>>6) & 0x3f), 
					0x80 | (charcode & 0x3f));
			} else { // surrogate pair
				i++;
				// UTF-16 encodes 0x10000-0x10FFFF by
				// subtracting 0x10000 and splitting the
				// 20 bits of 0x0-0xFFFFF into two halves
				charcode = 0x10000 + (((charcode & 0x3ff)<<10)
					| (str.charCodeAt(i+1) & 0x3ff))
				utf8.push(0xf0 | (charcode >>18), 
					0x80 | ((charcode>>12) & 0x3f), 
					0x80 | ((charcode>>6) & 0x3f), 
					0x80 | (charcode & 0x3f));
			}
		}
		return utf8 ;
	}
	var bytes = smalltalk.ByteArray.basicNew();
	bytes.__contents = new Uint8Array(toUTF8Array(receiver.valueOf()));
	return bytes;
}

SKByteArray.primAsByteArrayNoEncoding = function(receiver, args) {
	function toArray(str) {
		var byte = [];
		for (var i=0; i < str.length; i++) {
			byte.push(str.charCodeAt(i));
		}
		return byte ;
	}
	var bytes = smalltalk.ByteArray.basicNew();
	bytes.__contents = new Uint8Array(toArray(receiver));
	return bytes;
}

'use strict';
const SKBehavior = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKBehavior, "SKBehavior");

SKBehavior.primPrototype = function (receiver, args) {
	return (receiver['$fn'])['prototype'];
}

SKBehavior.primConstructor = function (receiver, args) {
	return receiver['$fn'];
}

SKBehavior.primMethodsDo = function (receiver, args) {
	const aBlock = args[0];
	if (typeof aBlock != 'function') {
		return primitveManager.primFailValue;
	}
	var methods = receiver.$fn.prototype.$methods;
	for(var i in methods) {
		if (!methods.hasOwnProperty(i)) break;
		aBlock(methods[i]);
	}
}

SKBehavior.primSelectorsDo = function (receiver, args) {
	const aBlock = args[0];
	if (typeof aBlock != 'function') {
		return this.primFailValue;
	}
	var methods = receiver.$fn.prototype.$methods;
	for(var i in methods) {
		if (!methods.hasOwnProperty(i)) break;
		aBlock(methods[i].$selector);
	}
}

SKBehavior.primImplements = function (receiver, args) {
	const aSymbol = args[0];
	if (typeof aSymbol != 'string') {
		return this.primFailValue;
	}
	return (aSymbol in receiver.$fn.prototype.$methods);
}

SKBehavior.primCompiledMethodAt = function (receiver, args) {
	const aSymbol = args[0];
	if (typeof aSymbol != 'string') {
		return this.primFailValue;
	}
	return receiver.$fn.prototype.$methods[aSymbol] || nil;
}
'use strict';
const SKBlockClosure = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKBlockClosure, "SKBlockClosure");

SKBlockClosure.primWhileTrue = function (receiver, args) {
	const block = args[0];
	if (typeof block != 'function') {
		return this.primFailValue;
	}
	while (receiver().valueOf() === true) {
		block();
	}
	return nil;
}

SKBlockClosure.primValue = function (receiver, args) {
	if (args.length != 0) {
		return this.primFailValue;
	}
	return receiver();
}

SKBlockClosure.primValueWith = function (receiver, args) {
	if ( args.length != 1) {
		return this.primFailValue;
	}
	const object = args[0];
	return receiver(object);
}

SKBlockClosure.primValueWith2Objects = function (receiver, args) {
	if ( args.length != 2){
		return this.primFailValue;
	}
	const object = args[0];
	const anotherObject = args[1];
	return receiver(object, anotherObject);
}

SKBlockClosure.primValueWith3Objects = function (receiver, args) {
	if ( args.length != 3){
		return this.primFailValue;
	}
	const firstObject = args[0];
	const secondObject = args[1];
	const thirdObject = args[2];
	return receiver(firstObject, secondObject, thirdObject);
}

SKBlockClosure.primValueWith4Objects = function (receiver, args) {
	if ( args.length != 4){
		return this.primFailValue;
	}
	const firstObject = args[0];
	const secondObject = args[1];
	const thirdObject = args[2];
	const fourthObject = args[3];
	return receiver(firstObject, secondObject, thirdObject, fourthObject);
}

SKBlockClosure.primValueWithArguments = function (receiver, args) {
	const valueArray = args[0];
	if (!Array.isArray(valueArray) || (receiver.length != valueArray.length)) {
		return this.primFailValue;
	}
	if (valueArray.length == 0) {
		return receiver();
	}
	return receiver.apply(null,valueArray);
}

SKBlockClosure.primTryCatch = function (receiver, args) {
	const protectedBlock = args[0];
	const handlerBlock = args[1];
	if (protectedBlock.constructor !== Function
		|| handlerBlock.constructor !== Function)
	{
		return this.primFailValue;
	}
	try {
		return protectedBlock();
	} catch (e) {
		if (e != null && e.name == "stReturn") {
			throw e; // non-local return
		} else {
			return handlerBlock(receiver.smalltalkErrorOf_(e));
		}
	}
}

SKBlockClosure.primEnsure = function (receiver, args) {
	const ensureBlock = args[0];
	if (ensureBlock.constructor !== Function) {
		return this.primFailValue;
	}
	try {
		return receiver();
	} finally {
		ensureBlock();
	}
}

SKBlockClosure.primArgumentsCount = function (receiver, args) {
	return receiver.length;
}
'use strict';
const SKBoolean = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKBoolean, "SKBoolean");

SKBoolean.primEquals = function (receiver, args) {
	const object = args[0];
	return (receiver.valueOf() === object.valueOf());
}

SKBoolean.primPrintString = function (receiver, args) {
	if (receiver.valueOf()) {
		return 'true';
	} else {
		return 'false';
	}
}

SKBoolean.primIfTrue = function (receiver, args) {
	const trueBlock = args[0];
	// if (trueBlock.constructor !== Function) {
	// 	return this.primFailValue;
	// }
	return receiver.valueOf()
		? trueBlock.value()
		: nil;
}

SKBoolean.primIfFalse = function (receiver, args) {
	const falseBlock = args[0];
	// if (falseBlock.constructor !== Function) {
	// 	return this.primFailValue;
	// }
	return receiver.valueOf()
		? nil
		: falseBlock.value();
}

SKBoolean.primTrueFalse = function (receiver, args) {
	const trueBlock = args[0];
	const falseBlock = args[1];
	// if (trueBlock.constructor !== Function || falseBlock.constructor !== Function) {
	// 	return this.primFailValue;
	// }
	return receiver.valueOf()
		? trueBlock.value()
		: falseBlock();
}

SKBoolean.primFalseTrue = function (receiver, args) {
	const falseBlock = args[0];
	const trueBlock = args[1];
	// if (falseBlock.constructor !== Function || trueBlock.constructor !== Function) {
	// 	return this.primFailValue;
	// }
	return receiver.valueOf()
		? trueBlock.value()
		: falseBlock();
}

SKBoolean.primAnd = function (receiver, args) {
	const block = args[0];
	if (block.constructor !== Function) {
		return this.primFailValue;
	}
	return receiver.valueOf()
		? block()
		: false;
}

SKBoolean.primOr = function (receiver, args) {
	const block = args[0];
	if (block.constructor !== Function) {
		return this.primFailValue;
	}
	return receiver.valueOf()
		? true
		: block();
}

SKBoolean.primNot = function (receiver, args) {
	return receiver.valueOf() === false;
}

SKBoolean.primAmpersand = function (receiver, args) {
	const operand = args[0];
	if (operand.constructor !== Boolean) {
		return this.primFailValue;
	}
	return receiver.valueOf() && operand.valueOf();
}

SKBoolean.primPipeSymbol = function (receiver, args) {
	const operand = args[0];
	if (operand.constructor !== Boolean) {
		return this.primFailValue;
	}
	return receiver.valueOf() || operand.valueOf();
}
'use strict';
const SKClassBuilder = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKClassBuilder, "SKClassBuilder");

SKClassBuilder.primAddSubclassOfNamedInstanceVariableNames = function (receiver, args) {
	const aClass = args[0];
	const aString = args[1].valueOf();
	const aCollection = args[2].valueOf();
	smalltalk.addClass(aString, aClass, aCollection);
	return smalltalk[aString]
}
'use strict';
const SKDateTime = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKDateTime, "SKDateTime");

SKDateTime.primGetUtcOffsetSeconds = function (receiver, args) {
	return new Date().getTimezoneOffset() * 60;
}

SKDateTime.primGetYear = function (receiver, args) {
	return receiver.getFullYear();
}

SKDateTime.primSetYear = function (receiver, args) {
	const year = args[0].valueOf();
	if (typeof year != 'number' || !year.isInteger()) {
		return this.primFailValue;
	}
	receiver.setFullYear(year);
}

SKDateTime.primGetMonth = function (receiver, args) {
	return receiver.getMonth() + 1;
}

SKDateTime.primSetMonth = function (receiver, args) {
	const month = args[0].valueOf();
	if (typeof month != 'number' || !month.isInteger() || !((month >= 1) && (month <= 12))) {
		return this.primFailValue;
	}
	receiver.setMonth(month - 1);
}

SKDateTime.primGetDayOfWeek = function (receiver, args) {
	return receiver.getDay() + 1;
}

SKDateTime.primGetDayOfMonth = function (receiver, args) {
	return receiver.getDate();
}

SKDateTime.primSetDayOfMonth = function (receiver, args) {
	const day = args[0].valueOf();
	if (typeof day != 'number' || !day.isInteger() || !((day >= 1) && (day <= 31)) ) {
		return this.primFailValue;
	}
	receiver.setDate(day);
}

SKDateTime.primAsString = function (receiver, args) {
	return receiver.toString();
}

SKDateTime.primGetTime = function (receiver, args) {
	return receiver.getTime();
}

SKDateTime.primSetTime = function (receiver, args) {
	const time = args[0].valueOf();
	if(typeof time != 'number' || !time.isInteger) {
		return this.primFailValue;
	}
	receiver.setTime(time);
}

SKDateTime.primAsDateString = function (receiver, args) {
	return receiver.toDateString();
}

SKDateTime.primAsTimeString = function (receiver, args) {
	return receiver.toTimeString();
}

SKDateTime.primAsLocaleString = function (receiver, args) {
	return receiver.toLocaleString();
}

SKDateTime.primSetHours = function (receiver, args) {
	const hour = args[0].valueOf();
	if (typeof hour != 'number' || !hour.isInteger() || !((hour >= 0) && (hour <= 23)) ) {
		return this.primFailValue;
	}
	receiver.setHours(hour);
}

SKDateTime.primSetMinutes = function (receiver, args) {
	const minutes = args[0].valueOf();
	if (typeof minutes != 'number' || !minutes.isInteger() || !((minutes >= 0) && (minutes <= 59)) ) {
		return this.primFailValue;
	}
	receiver.setMinutes(minutes);
}

SKDateTime.primSetSeconds = function (receiver, args) {
	const seconds = args[0].valueOf();
	if (typeof seconds != 'number' || !seconds.isInteger() || !((seconds >= 0) && (seconds <= 59)) ) {
		return this.primFailValue;
	}
	receiver.setSeconds(seconds);
}

SKDateTime.primSetMilliseconds = function (receiver, args) {
	const milliseconds = args[0].valueOf();
	if (typeof milliseconds != 'number' || !milliseconds.isInteger() || !((milliseconds >= 0) && (milliseconds <= 999)) ) {
		return this.primFailValue;
	}
	receiver.setMilliseconds(milliseconds);
}

SKDateTime.primGetHours = function (receiver, args) {
	return receiver.getHours();
}

SKDateTime.primGetSeconds = function (receiver, args) {
	return receiver.getSeconds();
}

SKDateTime.primGetMilliseconds = function (receiver, args) {
	return receiver.getMilliseconds();
}

SKDateTime.primEquality = function (receiver, args) {
	const date = args[0];
	if (date.constructor !== Date) {
		return this.primFailValue;
	}
	return receiver.getTime() == date.getTime();
}

SKDateTime.primLessThan = function (receiver, args) {
	const date = args[0];
	if (date == null || date.constructor !== Date) {
		return this.primFailValue;
	}
	return receiver < date;
}

SKDateTime.primGreaterThan = function (receiver, args) {
	const date = args[0];
	if (date == null || date.constructor !== Date) {
		return this.primFailValue;
	}
	return receiver > date;
}

SKDateTime.primLessThanEqualTo = function (receiver, args) {
	const date = args[0];
	if (date == null || date.constructor !== Date) {
		return this.primFailValue;
	}
	return receiver <= date;
}

SKDateTime.primGreaterThanEqualTo = function (receiver, args) {
	const date = args[0];
	if (date == null || date.constructor !== Date) {
		return this.primFailValue;
	}
	return receiver >= date;
}

SKDateTime.primIsValid = function (receiver, args) {
	return isFinite(receiver);
}

SKDateTime.primNew = function (receiver, args) {
	const argument = args[0].valueOf();
	const accepted = ['string', 'number'];
	if (!accepted.includes(typeof argument)) {
		return this.primFailValue;
	}
	return new Date(argument);
}
 'use strict';
const SKException = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKException, "SKException");

SKException.primSignal = function (receiver, args) {
	var stk = (new Error()).stack;
	receiver["@nativeException"] = (new Error());
	throw(receiver);
}
'use strict';
const SKNumber = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKNumber, "SKNumber");

SKNumber.primRandom = function (receiver, args) {
	return Math.random();
}

SKNumber.primEquality = function (receiver, args) {
	const object = args[0];
	if (object.constructor !== Number) {
		return this.primFailValue;
	}
	return receiver.valueOf() === object.valueOf();
}

SKNumber.primAddition = function (receiver, args) {
	const operand = args[0];
	if (operand.constructor !== Number) {
		return this.primFailValue;
	}
	return receiver + operand;
}

SKNumber.primSubtraction = function (receiver, args) {
	const operand = args[0];
	if (operand.constructor !== Number) {
		return this.primFailValue;
	}
	return receiver - operand;
}

SKNumber.primMultiplication = function (receiver, args) {
	const operand = args[0];
	if (operand.constructor !== Number) {
		return this.primFailValue;
	}
	return receiver * operand;
}

SKNumber.primDivide = function (receiver, args) {
	const operand = args[0];
	if (operand.constructor !== Number || operand == 0) {
		return this.primFailValue;
	}
	return receiver / operand;
}

SKNumber.primGreaterThan = function (receiver, args) {
	const operand = args[0];
	if (operand.constructor !== Number) {
		return this.primFailValue;
	}
	return receiver > operand;
}

SKNumber.primLessThan = function (receiver, args) {
	const operand = args[0];
	if (operand.constructor !== Number) {
		return this.primFailValue;
	}
	return receiver < operand;
}

SKNumber.primGreaterThanEqualTo = function (receiver, args) {
	const operand = args[0];
	if (operand.constructor !== Number) {
		return this.primFailValue;
	}
	return receiver >= operand;
}

SKNumber.primLessThanEqualTo = function (receiver, args) {
	const operand = args[0];
	if (operand.constructor !== Number) {
		return this.primFailValue;
	}
	return receiver <= operand;
}

SKNumber.primBitAnd = function (receiver, args) {
	const value = args[0];
	if (value.constructor !== Number) {
		return this.primFailValue;
	}
	const base = receiver.valueOf();
	const operand = value.valueOf();
	if (!(Number.isInteger(base) && Number.isInteger(operand))) {
		return this.primFailValue;
	}
	return base & operand;
}

SKNumber.primBitOr = function (receiver, args) {
	const value = args[0];
	if (value.constructor !== Number) {
		return this.primFailValue;
	}
	const base = receiver.valueOf();
	const operand = value.valueOf();
	if (!(Number.isInteger(base) && Number.isInteger(operand))) {
		return this.primFailValue;
	}
	return base | operand;
}

SKNumber.primBitXor = function (receiver, args) {
	const value = args[0];
	if (value.constructor !== Number) {
		return this.primFailValue;
	}
	const base = receiver.valueOf();
	const operand = value.valueOf();
	if (!(Number.isInteger(base) && Number.isInteger(operand))) {
		return this.primFailValue;
	}
	return base ^ operand;
}

SKNumber.primBitShiftLeft = function (receiver, args) {
	const value = args[0];
	if (value.constructor !== Number) {
		return this.primFailValue;
	}
	const base = receiver.valueOf();
	const operand = value.valueOf();
	if (!(Number.isInteger(base) && Number.isInteger(operand))) {
		return this.primFailValue;
	}
	return base << operand;
}

SKNumber.primBitShiftRight = function (receiver, args) {
	const value = args[0];
	if (value.constructor !== Number) {
		return this.primFailValue;
	}
	const base = receiver.valueOf();
	const operand = value.valueOf();
	if (!(Number.isInteger(base) && Number.isInteger(operand))) {
		return this.primFailValue;
	}
	return base >> operand;
}

SKNumber.primFloor = function (receiver, args) {
	return Math.floor(receiver.valueOf());
}

SKNumber.primCeiling = function (receiver, args) {
	return Math.ceil(receiver.valueOf());
}

SKNumber.primLn = function (receiver, args) {
	const receiverNumber = receiver.valueOf();
	if (receiverNumber <= 0) {
		return this.primFailValue;
	}
	return Math.log(receiverNumber);
}

SKNumber.primRaisedTo = function (receiver, args) {
	const operand = args[0];
	if (operand.constructor !== Number) {
		return this.primFailValue;
	}
	const base = receiver.valueOf();
	const power = operand.valueOf();
	return Math.pow(base, power);
}

SKNumber.primSin = function (receiver, args) {
	return Math.sin(receiver.valueOf());
}

SKNumber.primCos = function (receiver, args) {
	return Math.cos(receiver.valueOf());
}

SKNumber.primTan = function (receiver, args) {
	return Math.tan(receiver.valueOf());
}

SKNumber.primAtan2 = function (receiver, args) {
	const object = args[0];
	if (object == null) {
		return this.primFailValue;
	}
	const primitiveNumber = object.valueOf();
	if (typeof primitiveNumber != 'number') {
		return this.primFailValue;
	}
	return Math.atan2(receiver.valueOf(), primitiveNumber);
}

SKNumber.primArctan = function (receiver, args) {
	return Math.atan(receiver.valueOf());
}

SKNumber.primArcsin = function (receiver, args) {
	return Math.asin(receiver.valueOf());
}

SKNumber.primArccos = function (receiver, args) {
	return Math.acos(receiver.valueOf());
}

SKNumber.primSqrt = function (receiver, args){
	const receiverNumber = receiver.valueOf();
	if (receiverNumber < 0) {
		return this.primFailValue;
	}
	return Math.sqrt(receiverNumber);
}

SKNumber.primToDo = function (receiver, args) {
	let upperBound = args[0];
	const block = args[1];
	if (upperBound.constructor !== Number 
		|| block.constructor !== Function)
	{
		return this.primFailValue;
	}
	const start = receiver.valueOf();
	upperBound = upperBound.valueOf();
	for (let i=start; i<=upperBound; i++) {
		block(i);
	}
	return receiver;
}

SKNumber.primToByDo = function (receiver, args) {
	let upperBound = args[0];
	let step = args[1];
	const block = args[2];
	if (upperBound.constructor !== Number
		|| step.constructor !== Number
		|| block.constructor !== Function)
	{
		return this.primFailValue;
	}
	const start = receiver.valueOf();
	upperBound = upperBound.valueOf();
	step = step.valueOf();
	if (step > 0) {
		for (let i=start; i<=upperBound; i+=step) {
			block(i);
		}
	}
	return receiver;
}

SKNumber.primIsNumber = function (receiver, args) {
	return !isNaN(receiver.valueOf());
}

SKNumber.primPi = function (receiver, args) {
	return Math.PI;
}

SKNumber.primE = function (receiver, args) {
	return Math.E;
}

SKNumber.primIsInteger = function (receiver, args) {
	return Number.isInteger(receiver.valueOf());
}

SKNumber.primRounded = function (receiver, args) {
	const receiverValue = receiver.valueOf();
	if (receiverValue < 0) {
		return (Math.round(Math.abs(receiverValue))) * -1;
	}
	else {
		return Math.round(receiverValue);
	}
}

SKNumber.primIsNaN = function (receiver, args) {
	return isNaN(receiver.valueOf());
}

SKNumber.primIsInfinite = function (receiver, args) {
	return !isFinite(receiver.valueOf());
}

SKNumber.primRound = function (receiver, args) {
	const object = args[0];
	if (object == null) {
		return this.primFailValue;
	}
	const positions = object.valueOf();
	if (typeof positions != 'number') {
		return this.primFailValue;
	}
	return Number(receiver.toFixed(positions));
}

SKNumber.primExp = function (receiver, args) {
	return Math.exp(receiver.valueOf());
}

SKNumber.primRadiansToDegrees = function (receiver, args) {
	return receiver.valueOf() * 180.0 / Math.PI;
}

SKNumber.primDegreesToRadians = function (receiver, args) {
	return receiver.valueOf() * Math.PI / 180.0;
}

SKNumber.primNegativeInfinity = function (receiver, args) {
	return Number.NEGATIVE_INFINITY;
}

SKNumber.primInfinity = function (receiver, args) {
	return Number.POSITIVE_INFINITY;
}

SKNumber.primNaN = function (receiver, args) {
	return Number.NaN;
}

SKNumber.primNumberFrom = function (receiver, args) {
	const aString = args[0].valueOf();
	if (typeof aString != 'string') {
		return this.primFailValue;
	}
	return Number(aString);
}

'use strict';
const SKObject = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKObject, "SKObject");

SKObject.primBasicNew = function (receiver, args) {
	return new receiver.$fn();
}

SKObject.primPerform = function (receiver, args) {
	const jsSelector = args[0].valueOf();
	if (typeof jsSelector != 'string') {
		return this.primFailValue;
	}
	const performArgs = args[1];

	const fn = receiver[jsSelector];
	if (typeof fn === "undefined") {
		return receiver.dnu_withArguments_((jsSelector.asStSelector()),performArgs);
	}
	return fn.apply(receiver, performArgs);
}

SKObject.primBasicAt = function (receiver, args) {
	const aString = args[0];
	if (aString.constructor !== String || aString.length == 0) {
		return this.primFailValue;
	}
	const property = receiver[aString];
	if (((nil.isNil_(property))).valueOf()) {
		return nil
	}
	return property;
}

SKObject.primBasicAtIfAbsent = function (receiver, args) {
	const aString = args[0];
	const aBlock = args[1];
	if (aString.constructor !== String || aString.length == 0) {
		return this.primFailValue;
	}
	const property = receiver[aString];
	if (((nil.isNil_(property))).valueOf()) {
		return aBlock();
	}
	return property;
}

SKObject.primBasicAtPut = function (receiver, args) {
	const aString = args[0];
	const aValue = args[1];
	if (aString.constructor !== String || aString.length == 0) {
		return this.primFailValue;
	}
	receiver[aString] = aValue;
	return aValue;
}

SKObject.primSmalltalk = function (receiver, args) {
	//Return the smalltalk system containing the receiver
	return smalltalk;
}

SKObject.primHalt = function (receiver, args) {
	debugger;
}

SKObject.primAsJSON = function (receiver, args) {
	// JSON - Return the JSON representation of the receiver
	return JSON.stringify(receiver.asJSONObject());
}

SKObject.primPrint = function (receiver, args) {
	var valueToPrint = args[0].asString().valueOf();
	print(valueToPrint);
	return receiver;
}

SKObject.primFileIn = function (receiver, args) {
	var fileName = args[0].valueOf();
	try {
		this.print("// fileIn(\"" + fileName + "\");");
		return fileIn(fileName);
	} catch (e) {
		return this.primFailValue;
	}
}

SKObject.primFileInJS = function (receiver, args) {
	var fileName = args[0].valueOf();
	try {
		this.print("// fileInJS(\"" + fileName + "\");");
		fileInJS(fileName);
	} catch (e) {
//		this.print(e.stack);
		return this.primFailValue;
	}
}

SKObject.primTypeOf = function (receiver, args) {
	var object = args[0];
	return typeof object;
}

SKObject.primJsPropertyNames = function (receiver, args) {
	var array = [];
	Object.getOwnPropertyNames(receiver).forEach(
		function (each, idx, properties) {
			array.push(each);
		});
	return array;
}

SKObject.primPropertyAtIfAbsent = function (receiver, args) {
	const aKey = args[0];
	const aBlock = args[1];
	if (aKey.constructor !== String) {
		return this.primFailValue;
	}
	const propertyName = '@p_' + aKey;
	const storedValue = receiver[propertyName];
	return storedValue == null
			? aBlock()
			: storedValue;
}

SKObject.primPropertyAtPut = function (receiver, args) {
	const aKey = args[0];
	const aValue = args[1];
	if (aKey.constructor !== String || aKey.length == 0) {
		return this.primFailValue;
	}
	const propertyName = "@p_" + aKey;
	receiver[propertyName] = aValue;
	return aValue;
}

SKObject.primIsObject = function (receiver, args) {
	const object = args[0].valueOf();
	if (object == nil) {
		return object == nil;
	}
	return (object.$klass)?true:false;
}

SKObject.primBasicDelete = function (receiver, args) {
	const aString = args[0].valueOf();
	if (typeof aString != 'string') {
		return this.primFailValue;
	}
	delete receiver[aString];
	return receiver;
}
'use strict';
const SKPoolDictionary = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKPoolDictionary, "SKPoolDictionary");

SKPoolDictionary.primInitializeHash = function (receiver, args) {
	receiver["_hash"] = {};
	return receiver;
}

SKPoolDictionary.primRemoveKeyIfAbsent = function (receiver, args) {
	const aKey = args[0].valueOf();
	const aBlock = args[1];
	const hash = receiver["_hash"];
	const keyType = typeof aKey;
	if (typeof aBlock != 'function') {
		return this.primFailValue;
	}
	if ((keyType != 'string' && keyType != 'number') || !(aKey in hash)) {	
		return aBlock();
	}
	receiver["@size"] = nil;
	delete hash[aKey];
	return receiver;
}

SKPoolDictionary.primAtIfAbsent = function (receiver, args) {
	const aKey = args[0].valueOf();
	const aBlock = args[1];
	const keyType = typeof aKey;
	if(typeof aBlock != 'function') {
		return primitveManager.primFailValue;
	}
	const hash = receiver["_hash"];
	if ((keyType != 'string' && keyType != 'number') || !(aKey in hash)) {
		return aBlock();
	}
	return hash[aKey];
}

SKPoolDictionary.primKeys = function (receiver, args) {
	return Object.getOwnPropertyNames(receiver["_hash"]);
}

SKPoolDictionary.primAtPut = function (receiver, args) {
	const key = args[0].valueOf();
	const value = args[1].valueOf();
	const keyType = typeof key;
	if (keyType != 'string' && keyType != 'number') {
		return this.primFailValue;
	}
	receiver["@size"] = nil;
	return receiver["_hash"][key] = value;
}
'use strict';
const SKRegularExpression = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKRegularExpression, "SKRegularExpression");

SKRegularExpression.primFromString = function(receiver, args) {
	const aString = args[0].valueOf();
	const flag = args[1].valueOf();
	if (typeof aString != 'string' || typeof flag != 'string') {
		return this.primFailValue;
	}
	return new RegExp(aString, flag);
}

SKRegularExpression.primExec = function (receiver, args) {
	const aString = args[0].valueOf();
	if(typeof aString != 'string') {
		return primitveManager.primFailValue;
	}
	return receiver.exec(aString);
}

SKRegularExpression.primTest = function (receiver, args) {
	const aString = args[0].valueOf();
	if (typeof aString != 'string') {
		return this.primFailValue;
	}
	return receiver.test(aString);
}

SKRegularExpression.primCompile = function (receiver, args) {
	const aString = args[0].valueOf();
	if (typeof aString != 'string') {
		return this.primFailValue;
	}
	return receiver.compile(aString);
}
'use strict';
const SKSequenceableCollection = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKSequenceableCollection, "SKSequenceableCollection");

SKSequenceableCollection.primIndexOfIfAbsent = function (receiver, args) {
	const object = args[0].valueOf();
	const block = args[1].valueOf();
	if (typeof block != 'function') {
		return this.primFailValue;
	}
	for(var i=0;i<receiver.length;i++){ 
		if (receiver[i]._eq(object)) { 
			return i + 1; 
		} 
	}
	return block();
}

SKSequenceableCollection.primDo = function (receiver, args) {
	const block = args[0].valueOf();
	if (typeof block != 'function') {
		return this.primFailValue;
	}
	for(var i=0;i<receiver.length;i++){
		block(receiver[i]);
	}
}

SKSequenceableCollection.primDetectIfNone = function (receiver, args) {
	const block1 = args[0].valueOf();
	const block2 = args[1].valueOf();
	if (typeof block1 != 'function' || typeof block2 != 'function' || block1.length != 1 || block2.length != 0) {
		return this.primFailValue;
	}
	for (var i = 0; i < receiver.length; i++) { 
		if (block1(receiver[i])) { 
			return receiver[i];
		}
	}
	return block2();
}

SKSequenceableCollection.primReversed = function (receiver, args) {
	var result = new Array();
	var len = receiver.length; 
	var i = len;
	while(i--){
		result[len-i-1] = receiver[i];
	}
	return result;
}

SKSequenceableCollection.primIsEmpty = function (receiver, args) {
	return (receiver.length)?false:true;
}

SKSequenceableCollection.primReverseDo = function (receiver, args) {
	const block = args[0].valueOf();
	if (typeof block != 'function') {
		return this.primFailValue;
	}
	var i = receiver.length;
	while(i--) {
		block(receiver[i]);
	}
}

SKSequenceableCollection.primOccurrencesOf = function (receiver, args) {
	const object = args[0].valueOf();
	var i = receiver.length; 
	var count = 0;
	while (i--) { 
		if (receiver[i]._eq(object)) { 
			count++; 
		} 
	}
	return count;
}
// Strict mode shouldn't be enabled for this primitive
// 'use strict';
const SKSmalltalk = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKSmalltalk, "SKSmalltalk");

SKSmalltalk.primEval = function (receiver, args) {
	const jsExpression = args[0];
	return eval(jsExpression);
}
'use strict';
const SKStream = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKStream, "SKStream");

SKStream.primStringPrimPeekForAll = function (receiver, args) {
	const aString = args[0].valueOf();
	if (aString.constructor != String) {
		return this.primFailValue;
	}
	var start = receiver.position();
	for (var i=0;i<aString.length; i++){
		if (receiver["@collection"].charCodeAt(start+i) != aString.charCodeAt(i)) {
			return false;
		}
	}
	receiver.position_(receiver.position() + aString.length());
	return true;
}
'use strict';
const SKString = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKString, "SKString");

SKString.primEquals = function (receiver, args) {
	const string = args[0].valueOf();
	if (typeof string != 'string') {
		return this.primFailValue;
	}
	return (receiver.valueOf() === string);
}

SKString.primSize = function (receiver, args) {
	return receiver.length;
}

SKString.primAt = function (receiver, args) {
	const pos = args[0].valueOf();
	if (typeof pos != 'number' || !Number.isInteger(pos) || pos > receiver.length || pos < 1) {
		return this.primFailValue;
	}
	return receiver.charAt(pos-1);
}

SKString.primDo = function (receiver, args) {
	const block = args[0].valueOf();
	if (typeof block != 'function' || block.length != 1) {
		return this.primFailValue;
	}
	for (var i=0;i<receiver.length;i++){block(receiver.charAt(i));}
}

SKString.primDetectIfNone = function (receiver, args) {
	const block = args[0].valueOf();
	const block2 = args[1].valueOf();
	if (typeof block != 'function' || block.length != 1 || typeof block2 != 'function' || block2.length != 0) {
		return this.primFailValue;
	}
	for (var i = 0; i < receiver.length; i++) {
		if (block(receiver.charAt(i))) {
			return receiver.charAt(i);
		}
	}
	return block2();
}

SKString.primWithIndexDo = function (receiver, args) {
	const block = args[0].valueOf();
	if (typeof block != 'function' || block.length != 2) {
		return this.primFailValue;
	}
	for (var i=0;i<receiver.length;i++){block(receiver.charAt(i), i+1);}
}

SKString.primEscaped = function (receiver, args) {
	return escape(receiver);
}

SKString.primUnescaped = function (receiver, args) {
	return unescape(receiver);
}

SKString.primURIEncode = function (receiver, args) {
	return encodeURIComponent(receiver);
}

SKString.primURIDecode = function (receiver, args) {
	return decodeURIComponent(receiver);
}

SKString.primConcat = function (receiver, args) {
	const aString = args[0].valueOf();
	if (aString === undefined
		|| aString === nil
		|| aString === smalltalk.nil) {
		return receiver;
	}
	if (typeof aString != 'string') {
		return this.primFailValue;
	}
	return receiver + aString;
}

SKString.primCopyWith = function (receiver, args) {
	return receiver + args[0].valueOf().toString()
}

SKString.primCopyFromTo = function (receiver, args) {
	const start = args[0].valueOf();
	const end = args[1].valueOf();
	const receiverLength = receiver.length;
	if (!Number.isInteger(start) || !Number.isInteger(end)) {
		return this.primFailValue;
	}
	// javascript substring method doesn't return an error if the start or end is greater than the length
	// the end can also be less than the start
	return receiver.substring(start-1,end);
}

SKString.primIndexOf = function (receiver, args) {
	const subString = args[0].valueOf();
	if (typeof subString != 'string') {
		return this.primFailValue;
	}
	return receiver.indexOf(subString) + 1;
}

SKString.primIndexOfStartingAt = function (receiver, args) {
	const subString = args[0].valueOf();
	const start = args[1].valueOf();
	if (typeof subString != 'string' || !Number.isInteger(start)) {
		return this.primFailValue;
	}
	return receiver.indexOf(subString, start-1) + 1;
}

SKString.primLastIndexOf = function (receiver, args) {
	const subString = args[0].valueOf();
	if (typeof subString != 'string') {
		return this.primFailValue;
	}
	return receiver.lastIndexOf(subString) + 1;
}

SKString.primLastIndexOfStartingAt = function (receiver, args){
	const subString = args[0].valueOf();
	const start = args[1].valueOf();
	if (typeof subString != 'string' || !Number.isInteger(start)) {
		return this.primFailValue;
	}
	return receiver.lastIndexOf(subString, start-1) + 1;
}

SKString.primAsJavascript = function (receiver, args) {
	if(receiver.search(/^[a-zA-Z0-9_:.$ ]*$/) == -1)
			return "unescape(\"" + escape(receiver) + "\")";
		else
			return "\"" + receiver + "\"";
}

SKString.primTokenize = function (receiver, args) {
	const token = args[0].valueOf();
	return receiver.split(token);
}

SKString.primIsLetter = function (receiver, args) {
	return receiver.search('[A-Za-z]$') == 0;
}

SKString.primIsDigit = function (receiver, args) {
	return receiver.search('[0-9]$') == 0;
}

SKString.primAsUppercase = function (receiver, args) {
	return receiver.toUpperCase();
}

SKString.primAsLowercase = function (receiver, args) {
	return receiver.toLowerCase();
}

SKString.primGreaterThan = function (receiver, args) {
	const argument = args[0].valueOf();
	if (typeof argument != 'string') {
		return this.primFailValue;
	}
	return receiver.valueOf() > argument;
}

SKString.primLessThan = function (receiver, args) {
	const argument = args[0].valueOf();
	if (typeof argument != 'string') {
		return this.primFailValue;
	}
	return receiver.valueOf() < argument;
}

SKString.primGreaterThanEqualTo = function (receiver, args) {
	const argument = args[0].valueOf();
	if (typeof argument != 'string') {
		return this.primFailValue;
	}
	return receiver.valueOf() >= argument;
}

SKString.primLessThanEqualTo = function (receiver, args) {
	const argument = args[0].valueOf();
	if (typeof argument != 'string') {
		return this.primFailValue;
	}
	return receiver.valueOf() <= argument;
}

SKString.primIsCharacter = function (receiver, args) {
	return receiver.length == 1;
}

SKString.primAsciiValue = function (receiver, args) {
	return receiver.charCodeAt(0);
}

SKString.primIsSeparator = function (receiver, args) {
	return (new RegExp("\\s")).test(receiver);
}

SKString.primFromString = function (receiver, args) {
	const aString = args[0].valueOf();
	if (typeof aString != 'string') {
		return this.primFailValue;
	}
	return new receiver.$fn(aString);
}

SKString.primReplaceRegExp = function (receiver, args) {
	const regEx = args[0].valueOf();
	const replacementString = args[1].valueOf();
	if (!(regEx instanceof RegExp) || typeof replacementString != 'string') {
		return this.primFailValue;
	}
	return receiver.replace(regEx, replacementString);
}

SKString.primReplaceWith = function (receiver, args) {
	const toReplace = args[0].valueOf();
	const replacementString = args[1].valueOf();
	if (typeof toReplace != 'string' || typeof replacementString != 'string') {
		return this.primFailValue;
	}
	const regexString = toReplace.replace(/[\\^$*+?.()|[\]{}]/g, "\\$&");
	return receiver.replace(new RegExp(regexString,'g'), replacementString);
}

SKString.primFromCharCode = function (receiver, args) {
	const numberOrArray = args[0].valueOf();
	if (Number.isInteger(numberOrArray)) {
		return String.fromCharCode(numberOrArray);
	} 
	else if (Array.isArray(numberOrArray)) {
		return String.fromCharCode.apply(null, numberOrArray);
	}
	else {
		return this.primFailValue;
	}
}

SKString.primAsSelector = function (receiver, args) {
	var receiverVal = receiver.valueOf();
	if (receiverVal === '') { return '$' }
	else if (receiverVal[0] == '#') { 
		var end = receiverVal.indexOf(':');
		if (end == -1) {
			end = receiverVal.length;
		}
		return receiverVal.substring(1,end);
	}
//	else if (receiverVal === '\\') { return '_bk'; }
	return receiverVal
		.replace(/:/g,"_")
		.replace(/[+]/g,"_plus")
		.replace(/-/g,"_minus")
		.replace(/[*]/g,"_star")
		.replace(/[/]/g,"_slash")
		.replace(/[|]/g,"_bar")
		.replace(/[&]/g,"_amp")
		.replace(/>/g,"_gt")
		.replace(/</g,"_lt")
		.replace(/=/g,"_eq")
		.replace(/,/g,"_comma")
		.replace(/[@]/g,"_at")
		.replace(/~/g,"_no")
		.replace(/\\/g,"_bk")
		.asJavascriptName();
}

SKString.primMatch = function (receiver, args) {
	return receiver.match(args[0].valueOf());
}

SKString.primMatchRegExp = function (receiver, args) {
	const aString = args[0].valueOf();
	if (aString.constructor != String) {
		return this.primFailValue;
	}
	return receiver.search(aString) != -1;
}

SKString.primAsNumber = function (receiver, args) {
	if (receiver.includes('r')) {
		return this.primFailValue;
	}
	const value = Number(receiver);
	if (isNaN(value)) {
		return 0;
	} else {
		return value;
	}
}
'use strict';
const SKUndefinedObject = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKUndefinedObject, "SKUndefinedObject");

SKUndefinedObject.primAsJSONObject = function (receiver, args) {
	return null;
}
'use strict';
const SKTranscript = Object.create(smalltalk.SKPrimitiveModule);
smalltalk.primitiveManager.registerModule(SKTranscript, "SKTranscript");

SKTranscript.primNextPutAll = function (receiver, args) {
	const aString = args[0].valueOf();
	if (aString.constructor != String) {
		return this.primFailValue;
	}
	console.log(aString);
}
smalltalk.bind(smalltalk.Object, unescape("print%3A"), "print_", function Object__print_(what){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primPrint(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self;
return self;
}
, "printing", unescape("print%3A%20what%0D%09%22%20Output%20what%20to%20console.%20%22%0D%0D%09%3Cprimitive%3A%20%27primPrint%27%20module%3A%20%27SKObject%27%3E"));
smalltalk.bind(smalltalk.Object, unescape("fileIn%3A"), "fileIn_", function Object__fileIn_(fileName){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primFileIn(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "fileIn", unescape("fileIn%3A%20fileName%0D%09%22%20FileIn%20contents%20of%20file%20at%20fileName.%20%22%0D%0D%09%3Cprimitive%3A%20%27primFileIn%27%20module%3A%20%27SKObject%27%3E%0D%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.Object, unescape("fileInJS%3A"), "fileInJS_", function Object__fileInJS_(fileName){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primFileInJS(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "fileIn", unescape("fileInJS%3A%20fileName%0D%09%22%20FileIn%20javascript%20code%20from%20file%20at%20fileName.%20%22%0D%0D%09%3Cprimitive%3A%20%27primFileInJS%27%20module%3A%20%27SKObject%27%3E%0D%09self%20primitiveFailed"));
smalltalk.addClass("Interval", smalltalk.SequenceableCollection, ['start', 'stop', 'step'], 'Kernel');
smalltalk.Interval.$classVariableNames=("");
smalltalk.bind(smalltalk.Interval.$klass, unescape("from%3Ato%3Aby%3A"), "from_to_by_", function Interval_class__from_to_by_(startNum,stopNum,stepNum){
var interval = nil;
const self = this; interval=smalltalk.Interval.$$new();
interval.start_(startNum);
interval.stop_(stopNum);
interval.step_(stepNum);
return interval;
}
, "Instantiation", unescape("from%3A%20startNum%20to%3A%20stopNum%20by%3A%20stepNum%0D%0D%09%7C%20interval%20%7C%0D%09interval%20%3A%3D%20Interval%20new.%0D%09interval%20start%3A%20startNum.%0D%09interval%20stop%3A%20stopNum.%0D%09interval%20step%3A%20stepNum.%0D%09%5Einterval%20"));
smalltalk.bind(smalltalk.Interval.$klass, unescape("from%3Ato%3A"), "from_to_", function Interval_class__from_to_(startNum,stopNum){
const self = this; return smalltalk.Interval.from_to_by_(startNum,stopNum,(1));
}
, "Instantiation", unescape("from%3A%20startNum%20to%3A%20stopNum%0D%0D%09%5EInterval%20from%3A%20startNum%20to%3A%20stopNum%20by%3A%201%20"));
smalltalk.bind(smalltalk.Interval, unescape("start"), "start", function Interval__start(){
const self = this; return self['@start'];
}
, "accessing", unescape("start%0D%0D%09%5Estart%20"));
smalltalk.bind(smalltalk.Interval, unescape("stop"), "stop", function Interval__stop(){
const self = this; return self['@stop'];
}
, "accessing", unescape("stop%0D%0D%09%5Estop%20"));
smalltalk.bind(smalltalk.Interval, unescape("step"), "step", function Interval__step(){
const self = this; return self['@step'];
}
, "accessing", unescape("step%0D%0D%09%5Estep%20"));
smalltalk.bind(smalltalk.Interval, unescape("start%3A"), "start_", function Interval__start_(aNum){
const self = this; self['@start']=aNum;
return self;
}
, "accessing", unescape("start%3A%20aNum%0D%0D%09start%20%3A%3D%20aNum%20"));
smalltalk.bind(smalltalk.Interval, unescape("stop%3A"), "stop_", function Interval__stop_(aNum){
const self = this; self['@stop']=aNum;
return self;
}
, "accessing", unescape("stop%3A%20aNum%0D%0D%09stop%20%3A%3D%20aNum%20"));
smalltalk.bind(smalltalk.Interval, unescape("step%3A"), "step_", function Interval__step_(aNum){
const self = this; self['@step']=aNum;
return self;
}
, "accessing", unescape("step%3A%20aNum%0D%0D%09step%20%3A%3D%20aNum%20"));
smalltalk.bind(smalltalk.Interval, unescape("size"), "size", function Interval__size(){
const self = this; return ((((self.stop())._minus((self.start())))._slash((self.step())))._plus((1))).floor();
}
, "accessing", unescape("size%0D%09%5E%28%28%28self%20stop%20-%20%28self%20start%29%29%20/%20self%20step%29%20+%201%29%20floor%20"));
smalltalk.bind(smalltalk.Interval, unescape("do%3A"), "do_", function Interval__do_(aBlock){
var current = nil;
const self = this; current=self.start();
while((current._no_eq((self.stop()))).valueOf()){if (((self.step())._gt((0))).valueOf()) {if ((current._gt(self['@stop'])).valueOf()) {return self}} else {if ((current._lt(self['@stop'])).valueOf()) {return self}};
aBlock.value_(current);
current=current._plus((self.step()))};;
aBlock.value_(current);
return self;
}
, "enumerating", unescape("do%3A%20aBlock%0D%0D%09%7C%20current%20%7C%0D%09current%20%3A%3D%20self%20start.%0D%09%5Bcurrent%20%7E%3D%20%28self%20stop%29%5D%0D%09%09whileTrue%3A%20%0D%09%09%09%5B%20self%20step%20%3E%200%0D%09%09%09%09ifTrue%3A%0D%09%09%09%09%09%5Bcurrent%20%3E%20stop%20ifTrue%3A%5B%5Eself%5D%5D%0D%09%09%09%09ifFalse%3A%0D%09%09%09%09%09%5Bcurrent%20%3C%20stop%20ifTrue%3A%5B%5Eself%5D%5D.%20%0D%09%09%09aBlock%20value%3A%20current.%20%0D%09%09%09current%20%3A%3D%20current%20+%20self%20step%20%5D.%0D%09aBlock%20value%3A%20current%20"));
smalltalk.bind(smalltalk.Interval, unescape("%3D"), "_eq", function Interval___eq(anInterval){
const self = this; return ((self.$klass)._eq((anInterval.$klass))).and_((function Interval__(){
return ((self.start())._eq((anInterval.start()))).and_((function Interval__(){
return ((self.stop())._eq((anInterval.stop()))).and_((function Interval__(){
return (self.step())._eq((anInterval.step()));
}
));
}
));
}
));
}
, "testing", unescape("%3D%20anInterval%0D%0D%09%5Eself%20class%20%3D%20anInterval%20class%20%0D%09%09and%3A%20%5Bself%20start%20%3D%20anInterval%20start%20%0D%09%09and%3A%20%5Bself%20stop%20%3D%20anInterval%20stop%20%0D%09%09and%3A%5Bself%20step%20%3D%20anInterval%20step%5D%5D%5D%20"));
smalltalk.bind(smalltalk.Interval, unescape("%2C"), "_comma", function Interval___comma(anInterval){
var result = nil;
var index = nil;
const self = this; index=(1);
result=smalltalk.Array.new_(((self.size())._plus((anInterval.size()))));
self.do_((function Interval__(each){
result.at_put_(index,each);
return index=index._plus((1));
}
));
anInterval.do_((function Interval__(each){
result.at_put_(index,each);
return index=index._plus((1));
}
));
return result;
}
, "copying", unescape("%2C%20anInterval%0D%0D%09%7C%20result%20index%20%7C%0D%09index%20%3A%3D%201.%0D%09result%20%3A%3D%20Array%20new%3A%20%28self%20size%20+%20anInterval%20size%29.%0D%09self%20do%3A%20%0D%09%09%5B%20%3Aeach%20%7C%20result%20at%3A%20index%20put%3A%20each.%20%0D%09%09index%20%3A%3D%20index%20+%201%5D.%0D%09anInterval%20do%3A%20%0D%09%09%5B%20%3Aeach%20%7C%20result%20at%3A%20index%20put%3A%20each.%20%0D%09%09index%20%3A%3D%20index%20+%201%5D.%0D%09%5Eresult%20"));
smalltalk.bind(smalltalk.Interval, unescape("collect%3A"), "collect_", function Interval__collect_(aBlock){
var result = nil;
const self = this; result=smalltalk.Array.new_((self.size()));
(self.asArray()).withIndexDo_((function Interval__(each,index){
return result.at_put_(index,(aBlock.value_(each)));
}
));
return result;
}
, "copying", unescape("collect%3A%20aBlock%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20Array%20new%3A%20self%20size.%0D%09self%20asArray%20withIndexDo%3A%20%5B%3Aeach%20%3Aindex%7C%20result%20at%3A%20index%20put%3A%20%28aBlock%20value%3A%20each%29%5D.%0D%09%5Eresult%20"));
smalltalk.bind(smalltalk.Interval, unescape("copyFrom%3Ato%3A"), "copyFrom_to_", function Interval__copyFrom_to_(start,stop){
const self = this; if (((start._lt((self.start()))).or_((function Interval__(){
return start._gt((self.stop()));
}
))).valueOf()) {return self.error_("Start argument must be in the range of the interval start and end")};
if (((stop._lt(start)).or_((function Interval__(){
return stop._gt((self.stop()));
}
))).valueOf()) {return self.error_(unescape("Stop%20argument%20must%20be%20in%20the%20range%20of%20the%20start%20argument%20and%20the%20interval%27s%20end"))};
return smalltalk.Interval.from_to_by_(start,stop,(self.step()));
}
, "copying", unescape("copyFrom%3A%20start%20to%3A%20stop%0D%0D%09%28start%20%3C%20self%20start%20or%3A%20%5Bstart%20%3E%20self%20stop%5D%29%0D%09%09ifTrue%3A%20%5B%5Eself%20error%3A%20%27Start%20argument%20must%20be%20in%20the%20range%20of%20the%20interval%20start%20and%20end%27%5D.%0D%09%28stop%20%3C%20start%20or%3A%20%5Bstop%20%3E%20self%20stop%5D%29%0D%09%09ifTrue%3A%20%5B%5Eself%20error%3A%27Stop%20argument%20must%20be%20in%20the%20range%20of%20the%20start%20argument%20and%20the%20interval%27%27s%20end%27%5D.%0D%09%5EInterval%20from%3A%20start%20to%3A%20stop%20by%3A%20self%20step%20"));
smalltalk.bind(smalltalk.Interval, unescape("copyReplaceAll%3Awith%3A"), "copyReplaceAll_with_", function Interval__copyReplaceAll_with_(aCollection,anotherCollection){
var selfArray = nil;
var replacingArray = nil;
var replacementArray = nil;
var startIndex = nil;
const self = this; selfArray=self.asArray();
replacingArray=aCollection.asArray();
if ((selfArray.includesAll_(replacingArray)).not()) {return selfArray};
replacementArray=anotherCollection.asArray();
startIndex=selfArray.indexOf_((replacingArray.first()));
if (((selfArray.indexOfCollection_(replacingArray))._eq((0))).valueOf()) {return selfArray};
return selfArray.copyReplaceFrom_to_with_(startIndex,((replacingArray.size())._plus((1))),replacementArray);
}
, "copying", unescape("copyReplaceAll%3A%20aCollection%20with%3A%20anotherCollection%0D%0D%09%7C%20selfArray%20replacingArray%20replacementArray%20startIndex%20%7C%0D%09selfArray%20%3A%3D%20self%20asArray.%0D%09replacingArray%20%3A%3D%20aCollection%20asArray.%0D%09%28selfArray%20includesAll%3A%20replacingArray%29%0D%09%09ifFalse%3A%20%5B%5EselfArray%5D.%0D%09replacementArray%20%3A%3D%20anotherCollection%20asArray.%0D%09startIndex%20%3A%3D%20selfArray%20indexOf%3A%20replacingArray%20first.%0D%09%28selfArray%20indexOfCollection%3A%20replacingArray%29%20%3D%200%0D%09%09ifTrue%3A%20%5B%5EselfArray%5D.%0D%09%5EselfArray%20copyReplaceFrom%3A%20startIndex%20to%3A%20replacingArray%20size%20+%201%20with%3A%20replacementArray%20"));
smalltalk.bind(smalltalk.Interval, unescape("copyReplaceFrom%3Ato%3Awith%3A"), "copyReplaceFrom_to_with_", function Interval__copyReplaceFrom_to_with_(start,stop,aCollection){
var oCollection = nil;
var selfArray = nil;
var begin = nil;
var end = nil;
const self = this; if (((stop._eq((start._minus((1))))).and_((function Interval__(){
return start._lt(((self.size())._plus((1))));
}
))).valueOf()) {selfArray=self.asArray();
if ((stop._eq((0))).valueOf()) {begin=[]} else {begin=selfArray.copyFrom_to_((1),stop)};
end=selfArray.copyFrom_to_(start,(selfArray.size()));
return (begin._comma(aCollection))._comma(end)};
if (((stop._eq((self.size()))).and_((function Interval__(){
return start._eq((stop._plus((1))));
}
))).valueOf()) {oCollection=self.asOrderedCollection();
aCollection.do_((function Interval__(each){
return oCollection.add_(each);
}
));
return oCollection.asArray()};
if (((start._lt((1))).or_((function Interval__(){
return start._gt(stop);
}
))).valueOf()) {return self.error_("start argument outside of valid range")};
if ((stop._gt(((self.size())._plus((1))))).valueOf()) {return self.error_("stop argument outisde of valid range")};
selfArray=self.asArray();
return selfArray.copyReplaceFrom_to_with_(start,stop,(aCollection.asArray()));
}
, "copying", unescape("copyReplaceFrom%3A%20start%20to%3A%20stop%20with%3A%20aCollection%0D%0D%09%7C%20oCollection%20selfArray%20begin%20end%20%7C%0D%09%22Case%20for%20Insertion%22%0D%09%28stop%20%3D%20%28start%20-%201%29%20and%3A%20%5Bstart%20%3C%20%28self%20size%20+%201%29%5D%29%0D%09%09ifTrue%3A%20%0D%09%09%09%5BselfArray%20%3A%3D%20self%20asArray.%0D%09%09%09stop%20%3D%200%0D%09%09%09%09ifTrue%3A%20%5Bbegin%20%3A%3D%20%23%28%29%5D%0D%09%09%09%09ifFalse%3A%20%5Bbegin%20%3A%3D%20selfArray%20copyFrom%3A%201%20to%3A%20stop%5D.%0D%09%09%09%09end%20%3A%3D%20selfArray%20copyFrom%3A%20start%20to%3A%20selfArray%20size.%0D%09%09%09%09%5Ebegin%2CaCollection%2Cend%5D.%0D%09%22Case%20for%20appending%22%0D%09%28stop%20%3D%20self%20size%20and%3A%20%5Bstart%20%3D%20%28stop%20+%201%29%5D%29%0D%09%09ifTrue%3A%20%0D%09%09%09%5BoCollection%20%3A%3D%20self%20asOrderedCollection.%0D%09%09%09%20aCollection%20do%3A%20%5B%3Aeach%20%7C%20oCollection%20add%3A%20each%5D.%0D%09%09%09%20%5EoCollection%20asArray%5D.%0D%09%28start%20%3C%201%20or%3A%20%5Bstart%20%3E%20stop%5D%20%29%0D%09%09ifTrue%3A%20%5B%5Eself%20error%3A%20%27start%20argument%20outside%20of%20valid%20range%27%5D.%0D%09%28stop%20%3E%20%28self%20size%20+%201%29%29%0D%09%09ifTrue%3A%20%5B%5Eself%20error%3A%20%27stop%20argument%20outisde%20of%20valid%20range%27%5D.%0D%09selfArray%20%3A%3D%20self%20asArray.%0D%09%5EselfArray%20copyReplaceFrom%3A%20start%20to%3A%20stop%20with%3A%20aCollection%20asArray%20"));
smalltalk.bind(smalltalk.Interval, unescape("copyReplaceFrom%3Ato%3AwithObject%3A"), "copyReplaceFrom_to_withObject_", function Interval__copyReplaceFrom_to_withObject_(start,stop,anObject){
var oCollection = nil;
var selfArray = nil;
var begin = nil;
var insert = nil;
var end = nil;
const self = this; oCollection=self.asOrderedCollection();
if (((stop._eq((start._minus((1))))).and_((function Interval__(){
return start._lt(((oCollection.size())._plus((1))));
}
))).valueOf()) {selfArray=self.asArray();
if ((stop._eq((0))).valueOf()) {begin=[]} else {begin=selfArray.copyFrom_to_((1),stop)};
insert=smalltalk.Array.with_(anObject);
end=selfArray.copyFrom_to_(start,(selfArray.size()));
return (begin._comma(insert))._comma(end)};
if (((stop._eq((oCollection.size()))).and_((function Interval__(){
return start._eq((stop._plus((1))));
}
))).valueOf()) {oCollection.add_(anObject);
return oCollection.asArray()};
if (((start._gt((self.stop()))).or_((function Interval__(){
return start._gt(stop);
}
))).valueOf()) {return self.error_("start argument outside of valid range")};
if ((stop._gt(((self.size())._plus((1))))).valueOf()) {return self.error_("stop argument outside of valide range")};
selfArray=self.asArray();
selfArray.replaceFrom_to_withObject_(start,stop,anObject);
return selfArray;
}
, "copying", unescape("copyReplaceFrom%3A%20start%20to%3A%20stop%20withObject%3A%20anObject%0D%0D%09%7C%20oCollection%20selfArray%20begin%20insert%20end%7C%0D%09oCollection%20%3A%3D%20self%20asOrderedCollection.%0D%09%22case%20for%20Insertion%22%0D%09%28stop%20%3D%20%28start%20-%201%29%20and%3A%20%5Bstart%20%3C%20%28oCollection%20size%20+%201%29%5D%29%0D%09%09ifTrue%3A%20%0D%09%09%09%5B%20selfArray%20%3A%3D%20self%20asArray.%0D%09%09%09%28stop%20%3D%200%29%0D%09%09%09%09ifTrue%3A%20%5Bbegin%20%3A%3D%20%23%28%29%5D%0D%09%09%09%09ifFalse%3A%20%5Bbegin%20%3A%3D%20selfArray%20copyFrom%3A%201%20to%3A%20stop%5D.%0D%09%09%09insert%20%3A%3D%20Array%20with%3A%20anObject.%0D%09%09%09end%20%3A%3D%20selfArray%20copyFrom%3A%20start%20to%3A%20selfArray%20size.%0D%09%09%09%5Ebegin%2Cinsert%2Cend%5D.%0D%09%22case%20for%20Appending%22%0D%09%28stop%20%3D%20oCollection%20size%20and%3A%20%5Bstart%20%3D%20%28stop%20+%201%29%5D%29%0D%09%09ifTrue%3A%0D%09%09%09%5BoCollection%20add%3A%20anObject.%20%0D%09%09%09%5EoCollection%20asArray%5D.%0D%09%28start%20%3E%20self%20stop%20or%3A%20%5Bstart%20%3E%20stop%5D%29%0D%09%09ifTrue%3A%20%5B%5Eself%20error%3A%20%27start%20argument%20outside%20of%20valid%20range%27%5D.%0D%09%28stop%20%3E%20%28self%20size%20+%201%29%29%0D%09%09ifTrue%3A%20%5B%5Eself%20error%3A%20%27stop%20argument%20outside%20of%20valide%20range%27%5D.%0D%09%22case%20for%20replacement%22%0D%09selfArray%20%3A%3D%20self%20asArray.%0D%09selfArray%20replaceFrom%3A%20start%20to%3A%20stop%20withObject%3A%20anObject.%0D%09%5EselfArray%20"));
smalltalk.bind(smalltalk.Interval, unescape("copyReplacing%3AwithObject%3A"), "copyReplacing_withObject_", function Interval__copyReplacing_withObject_(anObject,replacementObject){
var result = nil;
const self = this; result=smalltalk.Array.new_((self.size()));
(self.asArray()).withIndexDo_((function Interval__(val,index){
if ((anObject._eq(val)).valueOf()) {return result.at_put_(index,replacementObject)} else {return result.at_put_(index,val)};
}
));
return result;
}
, "copying", unescape("copyReplacing%3A%20anObject%20withObject%3A%20replacementObject%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20%28Array%20new%3A%20self%20size%29.%0D%09self%20asArray%20withIndexDo%3A%20%5B%3Aval%20%3Aindex%20%7C%20anObject%20%3D%20val%20ifTrue%3A%20%5Bresult%20at%3A%20index%20put%3A%20replacementObject%5D%20ifFalse%3A%20%5Bresult%20at%3A%20index%20put%3A%20val%5D%5D.%0D%09%5Eresult%20"));
smalltalk.bind(smalltalk.Interval, unescape("copyWithout%3A"), "copyWithout_", function Interval__copyWithout_(anObject){
var result = nil;
const self = this; result=smalltalk.OrderedCollection.$$new();
self.do_((function Interval__(each){
if ((anObject._eq(each)).not()) {return result.add_(each)} else {return nil};
}
));
return result.asArray();
}
, "copying", unescape("copyWithout%3A%20anObject%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20OrderedCollection%20new.%0D%09self%20do%3A%20%5B%3Aeach%20%7C%20anObject%20%3D%20each%20ifFalse%3A%5Bresult%20add%3A%20each%5D%5D.%0D%09%5Eresult%20asArray%20"));
smalltalk.bind(smalltalk.Interval, unescape("reject%3A"), "reject_", function Interval__reject_(aBlock){
var result = nil;
const self = this; result=smalltalk.OrderedCollection.$$new();
self.do_((function Interval__(each){
if ((aBlock.value_(each)).not()) {return result.add_(each)} else {return nil};
}
));
return result.asArray();
}
, "testing", unescape("reject%3A%20aBlock%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20OrderedCollection%20new.%0D%09self%20do%3A%20%5B%3Aeach%20%7C%20%28aBlock%20value%3A%20each%29%20ifFalse%3A%20%5Bresult%20add%3A%20each%5D%5D.%0D%09%5Eresult%20asArray%20"));
smalltalk.bind(smalltalk.Interval, unescape("reverse"), "reverse", function Interval__reverse(){
const self = this; return smalltalk.Interval.from_to_by_((self.stop()),(self.start()),((self.step())._star((-1))));
}
, "copying", unescape("reverse%0D%0D%09%5EInterval%20from%3A%20self%20stop%20to%3A%20self%20start%20by%3A%20%28self%20step%20*%20-1%29%20"));
smalltalk.bind(smalltalk.Interval, unescape("select%3A"), "select_", function Interval__select_(aBlock){
var result = nil;
const self = this; result=smalltalk.OrderedCollection.$$new();
self.do_((function Interval__(each){
if ((aBlock.value_(each)).valueOf()) {return result.add_(each)} else {return nil};
}
));
return result.asArray();
}
, "copying", unescape("select%3A%20aBlock%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20OrderedCollection%20new.%0D%09self%20do%3A%20%5B%3Aeach%20%7C%20%28aBlock%20value%3A%20each%29%20ifTrue%3A%20%5Bresult%20add%3A%20each%5D%5D.%0D%09%5Eresult%20asArray%20"));
smalltalk.addClass("Exception", smalltalk.Object, ['messageText'], 'Kernel');
smalltalk.Exception.$classVariableNames=("");
smalltalk.addClass("Error", smalltalk.Exception, [], 'Kernel');
smalltalk.Error.$classVariableNames=("");
smalltalk.bind(smalltalk.Object, unescape("smalltalk"), "smalltalk", function Object__smalltalk(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primSmalltalk(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "system", unescape("smalltalk%0D%20%09%22%20Return%20the%20smalltalk%20system%20containing%20the%20receiver.%20%22%0D%0D%20%09%3Cprimitive%3A%20%27primSmalltalk%27%20module%3A%20%27SKObject%27%3E%0D%20%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.Object, unescape("halt"), "halt", function Object__halt(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primHalt(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "debug", unescape("halt%0D%20%09%22%20Private%20-%20Halt%20execution%20entering%20debugger.%20%22%0D%0D%20%09%3Cprimitive%3A%20%27primHalt%27%20module%3A%20%27SKObject%27%3E%0D%20%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.Object, unescape("notImplementedYet"), "notImplementedYet", function Object__notImplementedYet(){
const self = this; self.error_(("Not implemented. Yet".halt()));
return self;
}
, "development", unescape("notImplementedYet%0D%09%22%20Private%20-%20Halt%20execution%20and/or%20generate%20an%20error%20reporting%20implementation%20incomplete.%20%22%0D%0D%09self%20error%3A%20%27Not%20implemented.%20Yet%27%20halt"));
smalltalk.bind(smalltalk.Object, unescape("notYetImplemented"), "notYetImplemented", function Object__notYetImplemented(){
const self = this; return self.notImplementedYet();
}
, "development", unescape("notYetImplemented%0D%09%22Error%20since%20a%20method%20has%20not%20yet%20been%20implemented.%22%0D%0D%09%5Eself%20notImplementedYet"));
smalltalk.bind(smalltalk.Object, unescape("notYetImplemented%3A"), "notYetImplemented_", function Object__notYetImplemented_(aSelector){
const self = this; return self.notImplementedYet_(aSelector);
}
, "development", unescape("notYetImplemented%3A%20aSelector%0D%09%22Error%20since%20a%20method%20has%20not%20yet%20been%20implemented.%22%0D%0D%09%5Eself%20notImplementedYet%3A%20aSelector"));
smalltalk.bind(smalltalk.Object, unescape("notImplementedYet%3A"), "notImplementedYet_", function Object__notImplementedYet_(aSelector){
var message = nil;
const self = this; message=((((self.$klass).name())._comma(unescape("%3E%3E")))._comma((aSelector.asLiteral())))._comma(" is not yet implemented.");
self.error_(message);
return self;
}
, "development", unescape("notImplementedYet%3A%20aSelector%0D%09%22%20Private%20-%20Halt%20execution%20and/or%20generate%20an%20error%20reporting%20implementation%20incomplete.%20%22%0D%0D%09%7C%20message%20%7C%0D%09message%20%3A%3D%20self%20class%20name%2C%20%27%3E%3E%27%2C%20aSelector%20asLiteral%2C%20%27%20is%20not%20yet%20implemented.%27.%0D%09self%20error%3A%20message"));
smalltalk.bind(smalltalk.Object, unescape("accept%3A"), "accept_", function Object__accept_(what){
const self = this; self.print_((((unescape("%5Bbug%5D%20")._comma((self.asString())))._comma(" accept: "))._comma((what.asString()))));
return self.error_(unescape("%23accept%3A%20out%20of%20control."));
}
, "parserBug", unescape("accept%3A%20what%0D%09%22%20Private%20-%20Report%20buggy%20send%20by%20compiler.%20%22%0D%0D%09self%20print%3A%20%27%5Bbug%5D%20%27%2Cself%20asString%2C%27%20accept%3A%20%27%2Cwhat%20asString.%0D%09%5Eself%20error%3A%20%27%23accept%3A%20out%20of%20control.%27"));
smalltalk.bind(smalltalk.Object, unescape("%3D"), "_eq", function Object___eq(anObject){
const self = this; return (nil.is_eqeq_(self,anObject));
}
, "comparing", unescape("%3D%20anObject%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20equal%20to%20anObject.%20%22%0D%0D%09%5Eself%20%3D%3D%20anObject"));
smalltalk.bind(smalltalk.Object, unescape("%7E%3D"), "_no_eq", function Object___no_eq(anObject){
const self = this; return (nil.is_eqeq_(self._eq(anObject),false));
}
, "comparing", unescape("%7E%3D%20anObject%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20not%20equal%20to%20anObject.%20%22%0D%0D%09%5E%28self%20%3D%20anObject%29%20%3D%3D%20false"));
smalltalk.bind(smalltalk.Object, unescape("initialize"), "initialize", function Object__initialize(){
const self = this; self;
return self;
}
, "initialize", unescape("initialize%0D%09%22%20Private%20-%20Initialize%20the%20receiver.%0D%09The%20default%20implementation%20do%20nothing.%0D%09This%20method%20can%20be%20refined%20by%20subclasses%20to%20support%20creation%20time%20initialization%20of%20collaborators.%0D%09%22"));
smalltalk.bind(smalltalk.Object, unescape("value"), "value", function Object__value(){
const self = this; return self;
}
, "accessing", unescape("value%0D%09%22%20Return%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Object, unescape("yourself"), "yourself", function Object__yourself(){
const self = this; return self;
}
, "identity", unescape("yourself%0D%09%22%20Return%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Object, unescape("class"), "$$class", function Object__$$class(){
const self = this; return (function(){var $1$; $1$ = self["$klass"]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("class%0D%09%22%20Return%20the%20class%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24klass%27"));
smalltalk.bind(smalltalk.Object, unescape("size"), "size", function Object__size(){
const self = this; return (0);
}
, "accessing", unescape("size%0D%09%22%20Return%20the%20size%20of%20the%20receiver.%0D%09The%20default%20implementation%20return%20zero.%0D%09This%20method%20can%20be%20refined%20by%20subclasses%20to%20support%20indexed%20access.%0D%09%22%0D%0D%09%5E0"));
smalltalk.bind(smalltalk.Object, unescape("copy"), "copy", function Object__copy(){
const self = this; return self.shallowCopy();
}
, "copying", unescape("copy%0D%09%22%20Return%20a%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20shallowCopy"));
smalltalk.bind(smalltalk.Object, unescape("shallowCopy"), "shallowCopy", function Object__shallowCopy(){
var result = nil;
const self = this; result=(self.$klass).basicNew();
(self.$klass).allInstVarNamesDo_((function Object__(instVarName){
return (result[unescape("@")._comma(instVarName)]=(function(){var $1$; $1$ = self[unescape("@")._comma(instVarName)]; return nil.isNil_($1$) ? nil : $1$})());
}
));
return result;
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20class%20basicNew.%0D%09self%20class%20allInstVarNamesDo%3A%20%5B%3AinstVarName%7C%0D%09%09result%09basicAt%3A%20%24@%2CinstVarName%0D%09%09%09put%3A%20%28self%20basicAt%3A%20%24@%2CinstVarName%29%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Object, unescape("deepCopyOf%3A"), "deepCopyOf_", function Object__deepCopyOf_(what){
const self = this; if (((nil.isNil_(what))).valueOf()) {return what};
if ((self.isObject_(what)).valueOf()) {return what.deepCopy()};
return what;
}
, "copying", unescape("deepCopyOf%3A%20what%0D%09%22%20Private%20-%20Returns%20a%20deep%20copy%20of%20what.%20%22%0D%0D%09what%20isNil%20ifTrue%3A%20%5B%20%5Ewhat%20%5D.%0D%09%28self%20isObject%3A%20what%29%20ifTrue%3A%20%5B%20%5Ewhat%20deepCopy%20%5D.%0D%09%5Ewhat"));
smalltalk.bind(smalltalk.Object, unescape("deepCopy"), "deepCopy", function Object__deepCopy(){
var result = nil;
var value = nil;
const self = this; result=(self.$klass).basicNew();
(self.$klass).allInstVarNamesDo_((function Object__(iv){
value=self.deepCopyOf_(((function(){var $1$; $1$ = self[unescape("@")._comma(iv)]; return nil.isNil_($1$) ? nil : $1$})()));
return (result[unescape("@")._comma(iv)]=value);
}
));
return result;
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%7C%20result%20value%20%7C%0D%09result%20%3A%3D%20self%20class%20basicNew.%0D%09self%20class%20allInstVarNamesDo%3A%20%5B%3Aiv%7C%0D%09%09value%20%3A%3D%20self%20deepCopyOf%3A%20%28self%20basicAt%3A%20%24@%2Civ%29.%0D%09%09result%09basicAt%3A%20%24@%2Civ%20put%3A%20value%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Object, unescape("-%3E"), "_minus_gt", function Object___minus_gt(anObject){
const self = this; return smalltalk.Association.key_value_(self,anObject);
}
, "converting", unescape("-%3E%20anObject%0D%09%22%20Return%20an%20association%20of%20the%20receiver%20to%20anObject.%20%22%0D%0D%09%5EAssociation%20key%3A%20self%20value%3A%20anObject"));
smalltalk.bind(smalltalk.Object, unescape("asString"), "asString", function Object__asString(){
const self = this; return self.printString();
}
, "converting", unescape("asString%0D%09%22%20Return%20the%20receiver%20as%20a%20String.%20%22%0D%0D%09%5Eself%20printString"));
smalltalk.bind(smalltalk.Object, unescape("toString"), "toString", function Object__toString(){
const self = this; return (unescape("%7Bst%3Aa")._comma(((self.$klass).name())))._comma(unescape("%7D"));
}
, "converting", unescape("toString%0D%09%22%20Convert%20the%20receiver%20to%20a%20String.%20%22%0D%0D%09%5E%27%7Bst%3Aa%27%2Cself%20class%20name%2C%24%7D"));
smalltalk.bind(smalltalk.Object, unescape("asJavascript"), "asJavascript", function Object__asJavascript(){
const self = this; return self.asString();
}
, "converting", unescape("asJavascript%0D%09%22%20Return%20the%20javascript%20representation%20of%20the%20receiver.%0D%09The%20default%20implementation%20return%20the%20receiver%20as%20a%20String.%0D%09This%20method%20must%20be%20refined%20by%20subclasses%20implementing%20literal%20representation%20in%20javascript.%0D%09%22%0D%0D%09%5Eself%20asString"));
smalltalk.bind(smalltalk.Object, unescape("asJSON"), "asJSON", function Object__asJSON(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primAsJSON(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("asJSON%0D%09%22%20JSON%20-%20Return%20the%20JSON%20representation%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAsJSON%27%20module%3A%20%27SKObject%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Object, unescape("escapedCode"), "escapedCode", function Object__escapedCode(){
const self = this; return self.asJavascript();
}
, "converting", unescape("escapedCode%0D%09%22%20Return%20the%20code%20to%20reproduce%20receiver%20from%20%28javascript%29%20code.%20%22%0D%0D%09%5Eself%20asJavascript"));
smalltalk.bind(smalltalk.Object, unescape("basicPerform%3AwithArguments%3A"), "basicPerform_withArguments_", function Object__basicPerform_withArguments_(jsSelector,anArray){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primPerform(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "private", unescape("basicPerform%3A%20jsSelector%20withArguments%3A%20anArray%0D%09%22%20Private%20-%20Basic%20implementation%20of%20%23perform...%20%22%0D%09%3Cprimitive%3A%20%27primPerform%27%20module%3A%20%27SKObject%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Object, unescape("perform%3A"), "perform_", function Object__perform_(aSymbol){
const self = this; return self.perform_withArguments_(aSymbol,[]);
}
, "perform", unescape("perform%3A%20aSymbol%0D%09%22%20Return%20the%20result%20of%20sending%20message%20aSymbol%20to%20the%20receiver.%20%22%0D%0D%09%5Eself%20perform%3A%20aSymbol%20withArguments%3A%20%23%28%29"));
smalltalk.bind(smalltalk.Object, unescape("perform%3Awith%3A"), "perform_with_", function Object__perform_with_(aSymbol,argument){
const self = this; return self.perform_withArguments_(aSymbol,(smalltalk.Array.with_(argument)));
}
, "perform", unescape("perform%3A%20aSymbol%20with%3A%20argument%0D%09%22%20Return%20the%20result%20of%20sending%20message%20aSymbol%20to%20the%20receiver.%20%22%0D%0D%09%5Eself%20perform%3A%20aSymbol%20withArguments%3A%20%28Array%20with%3A%20argument%29"));
smalltalk.bind(smalltalk.Object, unescape("perform%3AwithArguments%3A"), "perform_withArguments_", function Object__perform_withArguments_(aSymbol,aCollection){
const self = this; if (((aSymbol.numberOfArguments())._eq((aCollection.size()))).not()) {return self.error_("Invalid arguments size")};
return self.basicPerform_withArguments_((aSymbol.asSelector()),(aCollection.asArray()));
}
, "perform", unescape("perform%3A%20aSymbol%20withArguments%3A%20aCollection%0D%09%22%20Return%20the%20result%20of%20sending%20message%20aSymbol%20to%20the%20receiver.%20%22%0D%0D%09aSymbol%20numberOfArguments%20%3D%20aCollection%20size%20ifFalse%3A%20%5B%0D%09%09%5Eself%20error%3A%20%27Invalid%20arguments%20size%27%0D%09%5D.%0D%09%5Eself%20basicPerform%3A%20aSymbol%20asSelector%20withArguments%3A%20aCollection%20asArray"));
smalltalk.bind(smalltalk.Object, unescape("basicAt%3A"), "basicAt_", function Object__basicAt_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primBasicAt(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("basicAt%3A%20aString%0D%09%22%20Return%20the%20property%20of%20the%20receiver%20known%20as%20aString%20%28or%20nil%29.%20%22%0D%0D%09%3Cprimitive%3A%20%27primBasicAt%27%20module%3A%20%27SKObject%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Object, unescape("basicAt%3AifAbsent%3A"), "basicAt_ifAbsent_", function Object__basicAt_ifAbsent_(aString,aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primBasicAtIfAbsent(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("basicAt%3A%20aString%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20property%20of%20the%20receiver%20known%20as%20aString%20%28or%20the%20result%20of%20evaluating%20aBlock%29.%20%22%0D%0D%09%3Cprimitive%3A%20%27primBasicAtIfAbsent%27%20module%3A%20%27SKObject%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Object, unescape("basicAt%3Aput%3A"), "basicAt_put_", function Object__basicAt_put_(aString,anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primBasicAtPut(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("basicAt%3A%20aString%20put%3A%20anObject%0D%09%22%20Set%20the%20property%20of%20the%20receiver%20known%20as%20aString.%20%22%0D%0D%09%3Cprimitive%3A%20%27primBasicAtPut%27%20module%3A%20%27SKObject%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Object, unescape("basicAt%3AifAbsentPut%3A"), "basicAt_ifAbsentPut_", function Object__basicAt_ifAbsentPut_(aString,aBlock){
const self = this; return (function(){var $1$; $1$ = self[aString]; return nil.isNil_($1$) ? (self[aString]=aBlock.value()) : $1$})();
}
, "accessing", unescape("basicAt%3A%20aString%20ifAbsentPut%3A%20aBlock%0D%09%22%20Return%20the%20property%20of%20the%20receiver%20known%20as%20aString%20%28or%20set%20it%20with%20the%20result%20of%20evaluating%20aBlock%29.%20%22%0D%0D%09%5Eself%20basicAt%3A%20aString%20ifAbsent%3A%20%5B%20self%20basicAt%3A%20aString%20put%3A%20aBlock%20value%20%5D"));
smalltalk.bind(smalltalk.Object, unescape("instVarAt%3A"), "instVarAt_", function Object__instVarAt_(instVarName){
const self = this; if ((instVarName.isNumber()).valueOf()) {return self.instVarAt_((((self.$klass).allInstVarNames()).at_(instVarName)))};
return (function(){var $1$; $1$ = self[unescape("@")._comma(instVarName)]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("instVarAt%3A%20instVarName%0D%09%22%20Return%20the%20internal%20collaborator%20of%20the%20receiver%20known%20as%20instVarName.%20%22%0D%0D%09instVarName%20isNumber%20ifTrue%3A%20%5B%0D%09%09%5Eself%20instVarAt%3A%20%28self%20class%20allInstVarNames%20at%3A%20instVarName%29%0D%09%5D.%0D%09%5Eself%20basicAt%3A%20%27@%27%2C%20instVarName"));
smalltalk.bind(smalltalk.Object, unescape("instVarAt%3Aput%3A"), "instVarAt_put_", function Object__instVarAt_put_(instVarName,anObject){
const self = this; if ((instVarName.isNumber()).valueOf()) {return self.instVarAt_put_((((self.$klass).allInstVarNames()).at_(instVarName)),anObject)};
return (self[unescape("@")._comma(instVarName)]=anObject);
}
, "accessing", unescape("instVarAt%3A%20instVarName%20put%3A%20anObject%0D%09%22%20Set%20the%20internal%20collaborator%20of%20the%20receiver%20known%20as%20instVarName%20to%20anObject.%20%22%0D%0D%09instVarName%20isNumber%20ifTrue%3A%20%5B%0D%09%09%5Eself%20instVarAt%3A%20%28self%20class%20allInstVarNames%20at%3A%20instVarName%29%20put%3A%20anObject%0D%09%5D.%0D%09%5Eself%20basicAt%3A%20%27@%27%2C%20instVarName%20put%3A%20anObject"));
smalltalk.bind(smalltalk.Object, unescape("stPropertyPrefix"), "stPropertyPrefix", function Object__stPropertyPrefix(){
const self = this; return unescape("@property_");
}
, "accessing", unescape("stPropertyPrefix%0D%09%22The%20prefix%20used%20to%20namespace%20Smalltalk%20properties.%22%0D%0D%09%5E%27@property_%27"));
smalltalk.bind(smalltalk.Object, unescape("jsPropertyNames"), "jsPropertyNames", function Object__jsPropertyNames(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primJsPropertyNames(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("jsPropertyNames%0D%09%22Return%20the%20names%20of%20all%20of%20the%20javascript%20properties.%22%0D%0D%09%3Cprimitive%3A%27primJsPropertyNames%27%20module%3A%27SKObject%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Object, unescape("propertyTable"), "propertyTable", function Object__propertyTable(){
var properties = nil;
var propertyNames = nil;
var table = nil;
const self = this; properties=(self.jsPropertyNames()).select_((function Object__(each){
return each.beginsWith_((self.stPropertyPrefix()));
}
));
propertyNames=properties.collect_((function Object__(each){
return each.copyFrom_to_((((self.stPropertyPrefix()).size())._plus((1))),(each.size()));
}
));
table=smalltalk.Dictionary.$$new();
propertyNames.do_((function Object__(each){
return table.at_put_(each,(self.propertyAt_(each)));
}
));
return table;
}
, "accessing", unescape("propertyTable%0D%09%22Access%20a%20read-only%20copy%20of%20all%20of%20the%0D%09properties%20of%20the%20receiver.%22%0D%0D%09%7C%20properties%20propertyNames%20table%20%7C%0D%09properties%20%3A%3D%20self%20jsPropertyNames%0D%09%09select%3A%0D%09%09%09%5B%3Aeach%20%7C%20each%20beginsWith%3A%20self%20stPropertyPrefix%5D.%0D%09propertyNames%20%3A%3D%20properties%0D%09%09collect%3A%0D%09%09%09%5B%3Aeach%20%7C%20each%20copyFrom%3A%20self%20stPropertyPrefix%20size%20+%201%20to%3A%20each%20size%5D.%0D%09table%20%3A%3D%20Dictionary%20new.%0D%09propertyNames%20do%3A%20%5B%3Aeach%20%7C%20table%20at%3A%20each%20put%3A%20%28self%20propertyAt%3A%20each%29%5D.%0D%09%5Etable"));
smalltalk.bind(smalltalk.Object, unescape("propertyAt%3A"), "propertyAt_", function Object__propertyAt_(aString){
const self = this; return self.propertyAt_ifAbsent_(aString,(function Object__(){
return nil;
}
));
}
, "accessing", unescape("propertyAt%3A%20aString%0D%09%22Access%20a%20the%20specified%20property.%20Return%20nil%20if%20it%0D%09does%20not%20exist.%22%0D%0D%09%5Eself%20propertyAt%3A%20aString%20ifAbsent%3A%20%5Bnil%5D"));
smalltalk.bind(smalltalk.Object, unescape("propertyAt%3AifAbsent%3A"), "propertyAt_ifAbsent_", function Object__propertyAt_ifAbsent_(aString,aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primPropertyAtIfAbsent(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("propertyAt%3A%20aString%20ifAbsent%3A%20aBlock%0D%09%22Access%20a%20property%20value.%20If%20the%20property%2C%0D%09does%20not%20exist%2C%20return%20the%20value%20of%20aBlock.%22%0D%0D%09%3Cprimitive%3A%20%27primPropertyAtIfAbsent%27%20module%3A%20%27SKObject%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Object, unescape("propertyAt%3Aput%3A"), "propertyAt_put_", function Object__propertyAt_put_(aString,aValue){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primPropertyAtPut(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("propertyAt%3A%20aString%20put%3A%20aValue%0D%09%22Set%20the%20value%20of%20a%20property.%22%0D%0D%09%3Cprimitive%3A%20%27primPropertyAtPut%27%20module%3A%20%27SKObject%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Object, unescape("propertyAt%3AifAbsentPut%3A"), "propertyAt_ifAbsentPut_", function Object__propertyAt_ifAbsentPut_(aString,aBlock){
const self = this; return self.propertyAt_ifAbsent_(aString,(function Object__(){
return self.propertyAt_put_(aString,(aBlock.value()));
}
));
}
, "accessing", unescape("propertyAt%3A%20aString%20ifAbsentPut%3A%20aBlock%0D%09%22Attempt%20to%20access%20an%20object%20property.%20If%20it%20does%20not%20exist%2C%0D%09evalaute%20aBlock%2C%20setting%20the%20property%20to%20that%20value.%20Return%20the%0D%09value%20of%20the%20property.%22%0D%0D%09%5Eself%0D%09%09propertyAt%3A%20aString%0D%09%09ifAbsent%3A%20%5Bself%20propertyAt%3A%20aString%20put%3A%20aBlock%20value%5D"));
smalltalk.bind(smalltalk.Object, unescape("error%3A"), "error_", function Object__error_(aString){
const self = this; return smalltalk.Error.signal_(aString);
}
, "error", unescape("error%3A%20aString%0D%09%22%20Return%20the%20result%20of%20managing%20error%28aString%29%20in%20the%20receiver.%20%22%0D%0D%09%5EError%20signal%3A%20aString"));
smalltalk.bind(smalltalk.Object, unescape("osError"), "osError", function Object__osError(){
const self = this; return self.error_("OS Error");
}
, "error", unescape("osError%0D%09%22An%20error%20has%20occurred%20related%20to%20the%20native%20operating%20system.%22%0D%0D%09%5Eself%20error%3A%20%27OS%20Error%27"));
smalltalk.bind(smalltalk.Object, unescape("subclassResponsibility"), "subclassResponsibility", function Object__subclassResponsibility(){
const self = this; return self.subclassResponsibility_(nil);
}
, "error", unescape("subclassResponsibility%0D%09%22%20Private%20-%20The%20concrete%20implementation%20on%20the%20receiver%20is%20not%20complete.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20nil"));
smalltalk.bind(smalltalk.Object, unescape("implementedBySubclass"), "implementedBySubclass", function Object__implementedBySubclass(){
const self = this; return self.subclassResponsibility();
}
, "error", unescape("implementedBySubclass%0D%09%22%20Private%20-%20The%20concrete%20implementation%20on%20the%20receiver%20is%20not%20complete.%20%22%0D%0D%09%5Eself%20subclassResponsibility"));
smalltalk.bind(smalltalk.Object, unescape("shouldNotImplement"), "shouldNotImplement", function Object__shouldNotImplement(){
const self = this; return self.shouldNotImplement_(nil);
}
, "error", unescape("shouldNotImplement%0D%09%22%20The%20receiver%20received%20a%20message%20that%20is%20not%20expected.%20%22%0D%0D%09%5Eself%20shouldNotImplement%3A%20nil"));
smalltalk.bind(smalltalk.Object, unescape("invalidMessage"), "invalidMessage", function Object__invalidMessage(){
const self = this; return self.invalidMessage_(nil);
}
, "error", unescape("invalidMessage%0D%09%22%20The%20receiver%20received%20a%20message%20that%20is%20invalid%20%28not%20expected%20for%20this%20object%29.%20%22%0D%0D%09%5Eself%20invalidMessage%3A%20nil"));
smalltalk.bind(smalltalk.Object, unescape("subclassResponsibility%3A"), "subclassResponsibility_", function Object__subclassResponsibility_(aSelector){
const self = this; return self.error_((((("Implementation of"._comma((((nil.isNil_(aSelector))).ifTrue_ifFalse_((function Object__(){
return " ";
}
),(function Object__(){
return unescape("%20%23")._comma(aSelector);
}
)))))._comma(unescape("%20is%20a%20responsibility%20of%20the%20subclass%28")))._comma(((self.$klass).name())))._comma(unescape("%29."))));
}
, "error", unescape("subclassResponsibility%3A%20aSelector%0D%09%22%20Private%20-%20The%20concrete%20implementation%20on%20the%20receiver%20is%20not%20complete.%20%22%0D%0D%09%5Eself%20error%3A%0D%09%09%20%27Implementation%20of%27%0D%09%09%2C%28aSelector%20isNil%20ifTrue%3A%20%5B%27%20%27%5D%20ifFalse%3A%20%5B%27%20%23%27%2CaSelector%5D%29%0D%09%09%2C%27%20is%20a%20responsibility%20of%20the%20subclass%28%27%2Cself%20class%20name%2C%27%29.%27"));
smalltalk.bind(smalltalk.Object, unescape("implementedBySubclass%3A"), "implementedBySubclass_", function Object__implementedBySubclass_(aSelector){
const self = this; return self.subclassResponsibility_(aSelector);
}
, "error", unescape("implementedBySubclass%3A%20aSelector%0D%09%22%20Private%20-%20The%20concrete%20implementation%20on%20the%20receiver%20is%20not%20complete.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20aSelector"));
smalltalk.bind(smalltalk.Object, unescape("shouldNotImplement%3A"), "shouldNotImplement_", function Object__shouldNotImplement_(aSelector){
const self = this; return self.error_(((("Message"._comma((((nil.isNil_(aSelector))).ifTrue_ifFalse_((function Object__(){
return " ";
}
),(function Object__(){
return unescape("%20%23")._comma(aSelector);
}
)))))._comma(" should not be implemented for instances of "))._comma(((self.$klass).name()))));
}
, "error", unescape("shouldNotImplement%3A%20aSelector%0D%09%22%20The%20receiver%20received%20a%20message%20that%20is%20not%20expected.%20%22%0D%0D%09%5Eself%20error%3A%0D%09%09%20%27Message%27%0D%09%09%2C%28aSelector%20isNil%20ifTrue%3A%20%5B%27%20%27%5D%20ifFalse%3A%20%5B%27%20%23%27%2CaSelector%5D%29%0D%09%09%2C%27%20should%20not%20be%20implemented%20for%20instances%20of%20%27%2C%20self%20class%20name"));
smalltalk.bind(smalltalk.Object, unescape("invalidMessage%3A"), "invalidMessage_", function Object__invalidMessage_(aSelector){
const self = this; return self.error_(((("Message"._comma((((nil.isNil_(aSelector))).ifTrue_ifFalse_((function Object__(){
return " ";
}
),(function Object__(){
return unescape("%20%23")._comma(aSelector);
}
)))))._comma(" should not be sent to instances of "))._comma(((self.$klass).name()))));
}
, "error", unescape("invalidMessage%3A%20aSelector%0D%09%22%20The%20receiver%20received%20a%20message%20that%20is%20invalid%20%28not%20expected%20for%20this%20object%29.%20%22%0D%0D%09%5Eself%20error%3A%0D%09%09%20%27Message%27%0D%09%09%2C%28aSelector%20isNil%20ifTrue%3A%20%5B%27%20%27%5D%20ifFalse%3A%20%5B%27%20%23%27%2CaSelector%5D%29%0D%09%09%2C%27%20should%20not%20be%20sent%20to%20instances%20of%20%27%2C%20self%20class%20name"));
smalltalk.bind(smalltalk.Object, unescape("smalltalkErrorOf%3A"), "smalltalkErrorOf_", function Object__smalltalkErrorOf_(aNativeException){
var result = nil;
const self = this; if ((self.isObject_(aNativeException)).valueOf()) {if (((smalltalk.is_kindOf_(aNativeException,smalltalk.Exception))).valueOf()) {return aNativeException};
return (smalltalk.Error.$$new()).messageText_(aNativeException)};
result=(function(){var $1$; $1$ = aNativeException["smalltalkError"]; return nil.isNil_($1$) ? nil : $1$})();
if (((nil.isNil_(result)===false)).valueOf()) {return result};
return (function Object__($2$){
$2$.messageText_((((function(){var $3$; $3$ = aNativeException["description"]; return nil.isNil_($3$) ? nil : $3$})() || (function(){var $4$; $4$ = aNativeException["message"]; return nil.isNil_($4$) ? nil : $4$})())));
$2$.nativeException_(aNativeException);
return $2$.yourself()}
)(smalltalk.Error.$$new());
}
, "private", unescape("smalltalkErrorOf%3A%20aNativeException%0D%09%22%20Private%2C%20Internal%20-%20Return%20anException%20associated%20with%20a%20native%28javascript%29%20exception.%20%22%0D%0D%09%7C%20result%20%7C%0D%09%28self%20isObject%3A%20aNativeException%29%20ifTrue%3A%20%5B%0D%09%09%28aNativeException%20isKindOf%3A%20Exception%29%20ifTrue%3A%20%5B%20%5EaNativeException%20%5D.%0D%09%09%5EError%20new%20messageText%3A%20aNativeException%0D%09%5D.%0D%09result%20%3A%3D%20aNativeException%20basicAt%3A%20%23smalltalkError.%0D%09result%20notNil%20ifTrue%3A%20%5B%20%5Eresult%20%5D.%0D%09%5EError%20new%0D%09%09messageText%3A%20%28aNativeException%20basicAt%3A%20%23description%29%20%7C%7C%20%28aNativeException%20basicAt%3A%20%23message%29%3B%0D%09%09nativeException%3A%20aNativeException%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Exception, unescape("nativeException"), "nativeException", function Exception__nativeException(){
const self = this; return (function(){var $1$; $1$ = self[unescape("@nativeException")]; return nil.isNil_($1$) ? nil : $1$})();
}
, "private", unescape("nativeException%0D%09%22%20Private%2C%20Internal%20-%20Return%20the%20native%20exception%20associated%20with%20the%20receiver%20%28or%20nil%29.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27@nativeException%27"));
smalltalk.bind(smalltalk.Exception, unescape("nativeException%3A"), "nativeException_", function Exception__nativeException_($$native){
const self = this; return (self[unescape("@nativeException")]=$$native);
}
, "private", unescape("nativeException%3A%20native%0D%09%22%20Private%2C%20Internal%20-%20Set%20the%20native%20exception%20associated%20with%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27@nativeException%27%20put%3A%20native"));
smalltalk.bind(smalltalk.Exception, unescape("stack"), "stack", function Exception__stack(){
var $$native = nil;
const self = this; $$native=self.nativeException();
if (((nil.isNil_($$native))).valueOf()) {return ""};
return ((function(){var $1$; $1$ = $$native["stack"]; return nil.isNil_($1$) ? nil : $1$})() || "");
}
, "stack", unescape("stack%0D%09%22%20Return%20a%20stack%20trace%20string.%20%22%0D%0D%09%7C%20native%20%7C%0D%09native%20%3A%3D%20self%20nativeException.%0D%09native%20isNil%20ifTrue%3A%20%5B%20%5E%27%27%20%5D.%0D%09%5E%28native%20basicAt%3A%20%23stack%29%20%7C%7C%20%27%27"));
smalltalk.bind(smalltalk.Exception, unescape("toString"), "toString", function Exception__toString(){
var txt = nil;
var stk = nil;
const self = this; txt=self.messageText();
if (((nil.isNil_(txt))).valueOf()) {txt=""};
stk=self.stack();
if (((nil.isNil_(stk))).valueOf()) {stk=""} else {stk=unescape("%0D")._comma(stk)};
return ((((unescape("%7Bst%3Aa")._comma(((self.$klass).name())))._comma(unescape("%20-%20")))._comma(txt))._comma(unescape("%7D")))._comma(stk);
}
, "converting", unescape("toString%0D%09%22%20Convert%20the%20receiver%20to%20a%20String.%20%22%0D%0D%09%7C%20txt%20stk%20%7C%0D%09txt%20%3A%3D%20self%20messageText.%20txt%20isNil%20ifTrue%3A%20%5B%20txt%20%3A%3D%20%27%27%20%5D.%0D%09stk%20%3A%3D%20self%20stack.%0D%09stk%20isNil%20ifTrue%3A%20%5B%20stk%20%3A%3D%20%27%27%20%5D%20ifFalse%3A%20%5B%20stk%20%3A%3D%20%27%0D%27%2Cstk%20%5D.%0D%09%5E%27%7Bst%3Aa%27%20%2Cself%20class%20name%20%2C%27%20-%20%27%20%2Ctxt%20%2C%24%7D%20%2Cstk"));
smalltalk.bind(smalltalk.Object, unescape("printOn%3A"), "printOn_", function Object__printOn_(aStream){
const self = this; (function Object__($1$){
$1$.nextPutAll_("a ");
return $1$.nextPutAll_(((self.$klass).name()))}
)(aStream);
return self;
}
, "printing", unescape("printOn%3A%20aStream%0D%09%22Print%20the%20receiver%20onto%20the%20provided%20Stream.%22%0D%0D%09aStream%0D%09%09nextPutAll%3A%20%27a%20%27%3B%0D%09%09nextPutAll%3A%20self%20class%20name"));
smalltalk.bind(smalltalk.Object, unescape("printString"), "printString", function Object__printString(){
var stream = nil;
const self = this; stream="".stream();
self.printOn_(stream);
return stream.contents();
}
, "printing", unescape("printString%0D%09%22%20Return%20a%20printable%20representation%20of%20the%20receiver.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20%27%27%20stream.%0D%09self%20printOn%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Object, unescape("isKindOf%3A"), "isKindOf_", function Object__isKindOf_(aClass){
const self = this; return (self.$klass).inheritsFrom_(aClass);
}
, "testing", unescape("isKindOf%3A%20aClass%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20kind%20of%20aClass.%20%22%0D%0D%09%5Eself%20class%20inheritsFrom%3A%20aClass"));
smalltalk.bind(smalltalk.Object, unescape("isMemberOf%3A"), "isMemberOf_", function Object__isMemberOf_(aClass){
const self = this; return (nil.is_eqeq_(self.$klass,aClass));
}
, "testing", unescape("isMemberOf%3A%20aClass%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20member%20of%20aClass.%20%22%0D%0D%09%5Eself%20class%20%3D%3D%20aClass"));
smalltalk.bind(smalltalk.Object, unescape("ifNil%3A"), "ifNil_", function Object__ifNil_(aBlock){
const self = this; return self;
}
, "testing", unescape("ifNil%3A%20aBlock%0D%09%22%20Return%20the%20receiver%20if%20it%20is%20not%20nil%2C%20or%20the%20result%20of%20evaluating%20aBlock%20%28if%20it%20is%20nil%29.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Object, unescape("ifNil%3AifNotNil%3A"), "ifNil_ifNotNil_", function Object__ifNil_ifNotNil_(aBlock,anotherBlock){
const self = this; return anotherBlock.value();
}
, "testing", unescape("ifNil%3A%20aBlock%20ifNotNil%3A%20anotherBlock%0D%09%22%20Return%20the%20result%20of%20evaluating%20aBlock%20if%20the%20receiver%20is%20nil%20or%20the%20result%20of%20evaluating%20anotherBlock%20%28if%20not%20nil%29.%20%22%0D%0D%09%5EanotherBlock%20value"));
smalltalk.bind(smalltalk.Object, unescape("ifNotNil%3A"), "ifNotNil_", function Object__ifNotNil_(aBlock){
const self = this; return aBlock.value();
}
, "testing", unescape("ifNotNil%3A%20aBlock%0D%09%22%20Return%20the%20result%20of%20evaluating%20aBlock%20if%20the%20receiver%20is%20not%20nil%2C%20or%20nil%20if%20it%20is%20nil.%20%22%0D%0D%09%5EaBlock%20value"));
smalltalk.bind(smalltalk.Object, unescape("ifNotNil%3AifNil%3A"), "ifNotNil_ifNil_", function Object__ifNotNil_ifNil_(aBlock,anotherBlock){
const self = this; return aBlock.value();
}
, "testing", unescape("ifNotNil%3A%20aBlock%20ifNil%3A%20anotherBlock%0D%09%22%20Return%20the%20result%20of%20evaluating%20aBlock%20if%20the%20receiver%20is%20not%20nil%2C%20or%20the%20result%20of%20evaluating%20anotherBlock%20if%20it%20is%20nil.%20%22%0D%0D%09%5EaBlock%20value"));
smalltalk.bind(smalltalk.Object, unescape("isNil"), "isNil", function Object__isNil(){
const self = this; return false;
}
, "testing", unescape("isNil%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20nil.%20%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("notNil"), "notNil", function Object__notNil(){
const self = this; return ((nil.isNil_(self))).not();
}
, "testing", unescape("notNil%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20not%20nil.%20%22%0D%0D%09%5Eself%20isNil%20not"));
smalltalk.bind(smalltalk.Object, unescape("isClass"), "isClass", function Object__isClass(){
const self = this; return false;
}
, "testing", unescape("isClass%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20Class.%20%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("isMetaclass"), "isMetaclass", function Object__isMetaclass(){
const self = this; return false;
}
, "testing", unescape("isMetaclass%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20metaclass.%20%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("isNumber"), "isNumber", function Object__isNumber(){
const self = this; return false;
}
, "testing", unescape("isNumber%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20Number.%20%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("isString"), "isString", function Object__isString(){
const self = this; return false;
}
, "testing", unescape("isString%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20String.%20%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("isArray"), "isArray", function Object__isArray(){
const self = this; return false;
}
, "testing", unescape("isArray%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20an%20Array.%20%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("isObject%3A"), "isObject_", function Object__isObject_(anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primIsObject(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "testing", unescape("isObject%3A%20anObject%0D%09%22%20Return%20true%20if%20anObject%20is%20a%20smalltalk%20object.%0D%09Return%20false%20if%20the%20object%20is%20foreign%20%28e.g.%20javascript%29%20object.%22%0D%0D%09%3Cprimitive%3A%20%27primIsObject%27%20module%3A%20%27SKObject%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Object, unescape("isCollection"), "isCollection", function Object__isCollection(){
const self = this; return false;
}
, "testing", unescape("isCollection%0D%09%22Return%20true%20if%20the%20receiver%20is%20a%20Collection.%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("isDateTime"), "isDateTime", function Object__isDateTime(){
const self = this; return false;
}
, "testing", unescape("isDateTime%0D%09%22Return%20true%20if%20the%20receiver%20is%20a%20DateTime.%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("isInteger"), "isInteger", function Object__isInteger(){
const self = this; return false;
}
, "testing", unescape("isInteger%0D%09%22Return%20true%20if%20the%20receiver%20is%20an%20Integer.%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("isFloat"), "isFloat", function Object__isFloat(){
const self = this; return false;
}
, "testing", unescape("isFloat%0D%09%22Return%20true%20if%20the%20receiver%20is%20a%20Float.%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("isBoolean"), "isBoolean", function Object__isBoolean(){
const self = this; return false;
}
, "testing", unescape("isBoolean%0D%09%22Return%20true%20if%20the%20receiver%20is%20a%20Boolean.%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("isMagnitude"), "isMagnitude", function Object__isMagnitude(){
const self = this; return false;
}
, "testing", unescape("isMagnitude%0D%09%22Return%20true%20if%20the%20receiver%20is%20a%20Magnitude.%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("isDictionary"), "isDictionary", function Object__isDictionary(){
const self = this; return false;
}
, "testing", unescape("isDictionary%0D%09%22Return%20true%20if%20the%20receiver%20is%20a%20Float.%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("isSymbol"), "isSymbol", function Object__isSymbol(){
const self = this; return false;
}
, "testing", unescape("isSymbol%0D%09%22Return%20true%20if%20the%20receiver%20is%20a%20Symbol.%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Number, unescape("isFloat"), "isFloat", function Number__isFloat(){
const self = this; return (self.isInteger()).not();
}
, "testing", unescape("isFloat%0D%09%22Return%20whether%20the%20reciever%20is%20a%20Float.%22%0D%0D%09%5Eself%20isInteger%20not"));
smalltalk.bind(smalltalk.Number, unescape("isInteger"), "isInteger", function Number__isInteger(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primIsInteger(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self;
return self;
}
, "testing", unescape("isInteger%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20an%20Integer.%20%22%0D%0D%09%3Cprimitive%3A%20%27primIsInteger%27%20module%3A%20%27SKNumber%27%3E%20"));
smalltalk.bind(smalltalk.Number, unescape("isMagnitude"), "isMagnitude", function Number__isMagnitude(){
const self = this; return true;
}
, "testing", unescape("isMagnitude%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20magnitude.%20%22%0D%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Number, unescape("positive"), "positive", function Number__positive(){
const self = this; return self._gt_eq((0));
}
, "testing", unescape("positive%0D%09%22Return%20whether%20the%20receiver%20is%20%3E%3D%200.%22%0D%0D%09%5Eself%20%3E%3D%200"));
smalltalk.bind(smalltalk.Number, unescape("strictlyPositive"), "strictlyPositive", function Number__strictlyPositive(){
const self = this; return self._gt((0));
}
, "testing", unescape("strictlyPositive%0D%09%22Return%20whether%20the%20receiver%20is%20%3E0.%22%0D%0D%09%5Eself%20%3E%200"));
smalltalk.bind(smalltalk.Object, unescape("typeOf%3A"), "typeOf_", function Object__typeOf_(jsObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primTypeOf(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "utilities", unescape("typeOf%3A%20jsObject%0D%09%22%20Return%20the%20type%20of%20%28javascript%29Object.%20%22%0D%0D%09%3Cprimitive%3A%20%27primTypeOf%27%20module%3A%20%27SKObject%27%3E%0D%09%5Eself%20primitiveFailed%20"));
smalltalk.bind(smalltalk.Object, unescape("methodFor%3A"), "methodFor_", function Object__methodFor_(aSymbol){
const self = this; return (self.$klass)._gt_gt_gt(aSymbol);
}
, "messages", unescape("methodFor%3A%20aSymbol%0D%09%22%20Return%20the%20method%20implementing%20aSymbol%20%28or%20nil%29.%20%22%0D%0D%09%5Eself%20class%20%3E%3E%3E%20aSymbol"));
smalltalk.bind(smalltalk.Object, unescape("respondsTo%3A"), "respondsTo_", function Object__respondsTo_(aSymbol){
const self = this; return (nil.isNil_(self.methodFor_(aSymbol))===false);
}
, "messages", unescape("respondsTo%3A%20aSymbol%0D%09%22%20Return%20true%20if%20the%20receiver%20respond%20to%20message%20aSymbol.%20%22%0D%0D%09%5E%28self%20methodFor%3A%20aSymbol%29%20notNil"));
smalltalk.bind(smalltalk.Object, unescape("basicDelete%3A"), "basicDelete_", function Object__basicDelete_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primBasicDelete(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("basicDelete%3A%20aString%0D%09%22%20Private%20-%20Basic%20implementation%20of%20deletion%20of%20property%20aString%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primBasicDelete%27%20module%3A%20%27SKObject%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Object, unescape("doesNotUnderstand%3A"), "doesNotUnderstand_", function Object__doesNotUnderstand_(aMessage){
const self = this; return (function Object__($1$){
$1$.receiver_(self);
$1$.message_(aMessage);
return $1$.signal()}
)(smalltalk.MessageNotUnderstood.$$new());
}
, "dnu", unescape("doesNotUnderstand%3A%20aMessage%0D%09%22%20Private%20-%20Basic%20implementation%20of%20a%20message%20sent%20and%20not%20understood%20by%20the%20receiver.%20%22%0D%0D%09%5EMessageNotUnderstood%20new%0D%09%09receiver%3A%20self%3B%0D%09%09message%3A%20aMessage%3B%0D%09%09signal"));
smalltalk.bind(smalltalk.Object, unescape("dnu%3AwithArguments%3A"), "dnu_withArguments_", function Object__dnu_withArguments_(selector,anArray){
const self = this; return self.doesNotUnderstand_((smalltalk.Message.selector_arguments_(selector,anArray)));
}
, "dnu", unescape("dnu%3A%20selector%20withArguments%3A%20anArray%0D%09%22%20Private%20-%20Basic%20implementation%20of%20a%20message%20sent%20and%20not%20understood%20by%20the%20receiver.%20%22%0D%0D%09%5Eself%20doesNotUnderstand%3A%20%28Message%0D%09%09selector%3A%20selector%0D%09%09arguments%3A%20anArray%29"));
smalltalk.bind(smalltalk.Object, unescape("json"), "json", function Object__json(){
const self = this; return self.asJSONObject();
}
, "converting", unescape("json%0D%09%22%20Return%20the%20receiver%20as%20a%20hash%20object.%20%22%0D%0D%09%5Eself%20asJSONObject"));
smalltalk.bind(smalltalk.Object, unescape("asJson%3A"), "asJson_", function Object__asJson_(anObject){
const self = this; if (((nil.isNil_(anObject))).valueOf()) {return nil.json()};
if ((self.isObject_(anObject)).valueOf()) {return anObject.json()} else {return anObject};
}
, "converting", unescape("asJson%3A%20anObject%0D%09%22%20Return%20anObject%20as%20a%20hash%20object.%20%22%0D%0D%09anObject%20isNil%20ifTrue%3A%20%5B%20%5Enil%20json%20%5D.%0D%09%5E%28self%20isObject%3A%20anObject%29%0D%09%09ifTrue%3A%20%5B%20anObject%20json%20%5D%0D%09%09ifFalse%3A%20%5B%20anObject%20%5D"));
smalltalk.bind(smalltalk.Object, unescape("asJSONObject"), "asJSONObject", function Object__asJSONObject(){
var result = nil;
const self = this; result=(self.smalltalk()).emptyJSONObject();
self.jsonFieldsDo_ignoring_((function Object__(field,value){
if ((((nil.isNil_(value)===false)).or_((function Object__(){
return self.jsonExportNil();
}
))).valueOf()) {return (result[field]=self.asJson_(value))} else {return nil};
}
),(self.jsonHiddenNames()));
return result;
}
, "converting", unescape("asJSONObject%0D%09%22%20Return%20the%20mapping%20of%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20smalltalk%20emptyJSONObject.%0D%09self%20jsonFieldsDo%3A%20%5B%3Afield%20%3Avalue%7C%0D%09%09%28value%20notNil%20or%3A%20%5B%20self%20jsonExportNil%20%5D%29%20ifTrue%3A%20%5B%0D%09%09%09result%20basicAt%3A%20field%20put%3A%20%28self%20asJson%3A%20value%29%0D%09%09%5D.%0D%09%5D%09ignoring%3A%20self%20jsonHiddenNames.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Object, unescape("jsonHiddenNames"), "jsonHiddenNames", function Object__jsonHiddenNames(){
const self = this; return [];
}
, "converting", unescape("jsonHiddenNames%0D%09%22%20Private%20-%20Return%20the%20names%20of%20the%20fields%20to%20skip%20when%20mapping%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%5E%23%28%29"));
smalltalk.bind(smalltalk.Object, unescape("jsonFieldsDo%3Aignoring%3A"), "jsonFieldsDo_ignoring_", function Object__jsonFieldsDo_ignoring_(aBlock,ignored){
const self = this; return (self.$klass).allInstVarNamesDo_((function Object__(each){
if ((((nil.isNil_(ignored)===false)).and_((function Object__(){
return ignored.includes_(each);
}
))).not()) {return aBlock.value_value_(each,(self.instVarAt_(each)))} else {return nil};
}
));
}
, "converting", unescape("jsonFieldsDo%3A%20aBlock%20ignoring%3A%20ignored%0D%09%22%20Private%20-%20Evaluates%20a%28TwoArguments%29Block%20with%20the%20fields%20to%20map%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%5Eself%20class%20allInstVarNamesDo%3A%20%5B%3Aeach%7C%0D%09%09%28ignored%20notNil%20and%3A%20%5B%20ignored%20includes%3A%20each%20%5D%29%20ifFalse%3A%20%5B%0D%09%09%09aBlock%20value%3A%20each%20value%3A%20%28self%20instVarAt%3A%20each%29%0D%09%09%5D.%0D%09%5D"));
smalltalk.bind(smalltalk.Object, unescape("jsonExportNil"), "jsonExportNil", function Object__jsonExportNil(){
const self = this; return false;
}
, "converting", unescape("jsonExportNil%0D%09%22%20Private%20-%20Return%20true%20if%20the%20receiver%20export%20nil%20values.%20%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("mustBeBoolean"), "mustBeBoolean", function Object__mustBeBoolean(){
const self = this; return self.error_("Must be boolean.");
}
, "testing", unescape("mustBeBoolean%0D%09%22%20Signal%20an%20error%20if%20the%20receiver%20is%20not%20a%20Boolean.%20%22%0D%0D%09%5Eself%20error%3A%20%27Must%20be%20boolean.%27"));
smalltalk.bind(smalltalk.Boolean, unescape("mustBeBoolean"), "mustBeBoolean", function Boolean__mustBeBoolean(){
const self = this; return self;
}
, "testing", unescape("mustBeBoolean%0D%09%22%20Signal%20an%20error%20if%20the%20receiver%20is%20not%20a%20Boolean.%20%22%0D%0D%09%5Eself"));
smalltalk.addClass("Smalltalk", smalltalk.Object, [], 'Kernel');
smalltalk.Smalltalk.$classVariableNames=("");
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("current"), "current", function Smalltalk_class__current(){
const self = this; return self.smalltalk();
}
, "accessing", unescape("current%0D%09%22%20Return%20the%20current%20smalltalk%20system%20instance.%20%22%0D%0D%09%5Eself%20smalltalk"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("at%3AifAbsent%3A"), "at_ifAbsent_", function Smalltalk_class__at_ifAbsent_(aGlobalName,aBlock){
const self = this; return (function(){var $1$; $1$ = self.current()[aGlobalName]; return nil.isNil_($1$) ? aBlock.value() : $1$})();
}
, "accessing", unescape("at%3A%20aGlobalName%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20global%20known%20as%20aGlobalName%20in%20the%20receiver%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%5Eself%20current%20basicAt%3A%20aGlobalName%20ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("includesKey%3A"), "includesKey_", function Smalltalk_class__includesKey_(aGlobalName){
const self = this; return ((nil.isNil_((function(){var $1$; $1$ = smalltalk.Smalltalk.current()[aGlobalName]; return nil.isNil_($1$) ? nil : $1$})()))).not();
}
, "accessing", unescape("includesKey%3A%20aGlobalName%0D%09%22%20Returns%20true%20if%20the%20global%20aGlobalName%20is%20defined%20in%20the%20receiver.%20%22%0D%0D%09%5E%28%28Smalltalk%20current%0D%09%09basicAt%3A%20aGlobalName%20ifAbsent%3A%20%5Bnil%5D%29%0D%09%09isNil%29%20not"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("at%3A"), "at_", function Smalltalk_class__at_(aGlobalName){
const self = this; return (function(){var $1$; $1$ = self.current()[aGlobalName]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("at%3A%20aGlobalName%0D%09%22%20Return%20the%20global%20known%20as%20aGlobalName%20in%20the%20receiver%20or%20nil.%20%22%0D%0D%09%5Eself%20current%20basicAt%3A%20aGlobalName%20ifAbsent%3A%20%5B%20nil%20%5D"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("at%3Aput%3A"), "at_put_", function Smalltalk_class__at_put_(aGlobalName,anObject){
const self = this; return ((self.current())[aGlobalName]=anObject);
}
, "accessing", unescape("at%3A%20aGlobalName%20put%3A%20anObject%0D%09%22%20Set%20the%20global%20known%20as%20aGlobalName%20in%20the%20receiver%20top%20anObject.%20%22%0D%0D%09%5Eself%20current%20basicAt%3A%20aGlobalName%20put%3A%20anObject"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("at%3AifAbsentPut%3A"), "at_ifAbsentPut_", function Smalltalk_class__at_ifAbsentPut_(aGlobalName,aBlock){
const self = this; return self.at_ifAbsent_(aGlobalName,(function Smalltalk_class__(){
return self.at_put_(aGlobalName,(aBlock.value()));
}
));
}
, "accessing", unescape("at%3A%20aGlobalName%20ifAbsentPut%3A%20aBlock%0D%09%22%20Return%20the%20global%20known%20as%20aGlobalName%20in%20the%20receiver%20or%20the%20result%20of%20evaluating%20aBlock.%0D%09Set%20the%20global%20to%20return%20value%20if%20was%20absent.%0D%09%22%0D%0D%09%5Eself%20at%3A%20aGlobalName%20ifAbsent%3A%20%5B%0D%09%09self%20at%3A%20aGlobalName%20put%3A%20aBlock%20value%0D%09%5D"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("removeKey%3AifAbsent%3A"), "removeKey_ifAbsent_", function Smalltalk_class__removeKey_ifAbsent_(aKey,aBlock){
const self = this; return (self.current()).removeKey_ifAbsent_(aKey,aBlock);
}
, "removing", unescape("removeKey%3A%20aKey%20ifAbsent%3A%20aBlock%0D%09%22%20Remove%20the%20binding%20at%20aKey.%20%22%0D%0D%09%5Eself%20current%20removeKey%3A%20aKey%20ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("@"), "_at", function Smalltalk_class___at(aGlobalName){
var binding = nil;
const self = this; var $early={name:"stReturn"};
try {
binding=self.at_ifAbsent_(aGlobalName,(function Smalltalk_class__(){
$early.result=smalltalk.Array.$$new(); throw ($early);
}
));
return smalltalk.Array.with_(binding);
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "accessing", unescape("@%20aGlobalName%0D%09%22%20Return%20a%20collection%20with%20the%20objects%20bound%20to%20aGlobalName%20%28or%20an%20empty%20collection%20if%20global%20is%20not%20defined%29.%0D%09It%20is%20used%20in%20expressions%20like%3A%0D%09%09Smalltalk%20@%20%23MyGlobal%20do%3A%20%5B%3Aglobal%7C%20...%20%5D%0D%09%22%0D%0D%09%7C%20binding%20%7C%0D%09binding%20%3A%3D%20self%20at%3A%20aGlobalName%20ifAbsent%3A%20%5B%20%5EArray%20new%20%5D.%0D%09%5EArray%20with%3A%20binding"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("definePool%3Awith%3A"), "definePool_with_", function Smalltalk_class__definePool_with_(poolName,tuples){
const self = this; return (self.current()).definePool_with_(poolName,tuples);
}
, "accessing", unescape("definePool%3A%20poolName%20with%3A%20tuples%0D%09%22%20Define%20the%20pool%20dictionary%20from%20tuples%20specification.%20%22%0D%0D%09%5Eself%20current%20definePool%3A%20poolName%20with%3A%20tuples"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("poolDictionary%3AifAbsent%3A"), "poolDictionary_ifAbsent_", function Smalltalk_class__poolDictionary_ifAbsent_(aPoolName,aBlock){
const self = this; return (self.current()).poolDictionary_ifAbsent_(aPoolName,aBlock);
}
, "accessing", unescape("poolDictionary%3A%20aPoolName%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20pool%20dictionary%20named%20aPoolName%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%5Eself%20current%20poolDictionary%3A%20aPoolName%20ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("objectAt%3AifAbsent%3A"), "objectAt_ifAbsent_", function Smalltalk_class__objectAt_ifAbsent_(aName,aBlock){
const self = this; return (self.current()).objectAt_ifAbsent_(aName,aBlock);
}
, "accessing", unescape("objectAt%3A%20aName%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20%28global%20scoped%29%20smalltalk%20object%20at%20aName%20or%20the%20result%20of%20evaluating%20aBlock%20%28if%20undefined%20or%20not%20an%20Object%20instance%29.%20%22%0D%0D%09%5Eself%20current%20objectAt%3A%20aName%20ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("jsObjectAt%3AifAbsent%3A"), "jsObjectAt_ifAbsent_", function Smalltalk_class__jsObjectAt_ifAbsent_(aName,aBlock){
const self = this; return (self.current()).jsObjectAt_ifAbsent_(aName,aBlock);
}
, "accessing", unescape("jsObjectAt%3A%20aName%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20%28global%20scoped%29%20javascript%20object%20at%20aName%20or%20the%20result%20of%20evaluating%20aBlock%20%28if%20undefined%29.%20%22%0D%0D%09%5Eself%20current%20jsObjectAt%3A%20aName%20ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("jsObjectAt%3A"), "jsObjectAt_", function Smalltalk_class__jsObjectAt_(aName){
const self = this; return self.jsObjectAt_ifAbsent_(aName,(function Smalltalk_class__(){
return self.error_(("Undefined "._comma(aName)));
}
));
}
, "accessing", unescape("jsObjectAt%3A%20aName%0D%09%22%20Return%20the%20%28global%20scoped%29%20javascript%20object%20at%20aName.%20%22%0D%0D%09%5Eself%20jsObjectAt%3A%20aName%20ifAbsent%3A%20%5B%20self%20error%3A%20%27Undefined%20%27%2CaName%20%5D"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("global"), "global", function Smalltalk_class__global(){
const self = this; return (self.smalltalk()).jsGlobal();
}
, "accessing", unescape("global%0D%09%22%20Return%20the%20global%20%28javascript%29%20object.%20%22%0D%0D%09%5Eself%20smalltalk%20jsGlobal"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("classes"), "classes", function Smalltalk_class__classes(){
const self = this; return (self.current()).classes();
}
, "accessing", unescape("classes%0D%09%22%20Return%20the%20classes%20defined%20in%20current%20instance.%20%22%0D%0D%09%5Eself%20current%20classes"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("rootClasses"), "rootClasses", function Smalltalk_class__rootClasses(){
const self = this; return (self.current()).rootClasses();
}
, "accessing", unescape("rootClasses%0D%09%22%20Return%20the%20collection%20of%20topLevel%20classes%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20current%20rootClasses"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("implementorsOf%3A"), "implementorsOf_", function Smalltalk_class__implementorsOf_(aSymbol){
const self = this; return (self.current()).implementorsOf_(aSymbol);
}
, "tools", unescape("implementorsOf%3A%20aSymbol%0D%09%22%20Return%20a%20collection%20of%20methods%20implementing%20aSymbol.%20%22%0D%0D%09%5Eself%20current%20implementorsOf%3A%20aSymbol"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("gc"), "gc", function Smalltalk_class__gc(){
const self = this; var $early={name:"stReturn"};
try {
(self.jsObjectAt_ifAbsent_("gc",(function Smalltalk_class__(){
$early.result=false; throw ($early);
}
))).value();
return true;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "tools", unescape("gc%0D%09%22%20Collect%20garbage.%20%22%0D%0D%09%28self%20jsObjectAt%3A%20%23gc%20ifAbsent%3A%20%5B%20%5Efalse%20%5D%29%20value.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Smalltalk, unescape("globalAt%3A"), "globalAt_", function Smalltalk__globalAt_(aKey){
const self = this; return (function(){var $1$; $1$ = self[aKey]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("globalAt%3A%20aKey%0D%09%22%20Return%20the%20global%20at%20aKey%20%28or%20nil%29.%20%22%0D%0D%09%5Eself%20basicAt%3A%20aKey"));
smalltalk.bind(smalltalk.Smalltalk, unescape("globalAt%3AifAbsent%3A"), "globalAt_ifAbsent_", function Smalltalk__globalAt_ifAbsent_(aKey,aBlock){
const self = this; return (function(){var $1$; $1$ = self[aKey]; return nil.isNil_($1$) ? aBlock.value() : $1$})();
}
, "accessing", unescape("globalAt%3A%20aKey%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20global%20at%20aKey%20%28or%20the%20result%20of%20evaluating%20aBlock%29.%20%22%0D%0D%09%5Eself%20basicAt%3A%20aKey%20ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.Smalltalk, unescape("rootClasses"), "rootClasses", function Smalltalk__rootClasses(){
const self = this; return (self.classes()).select_((function Smalltalk__(each){
return (nil.isNil_(each.superclass()));
}
));
}
, "accessing", unescape("rootClasses%0D%09%22%20Return%20the%20collection%20of%20topLevel%20classes%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20classes%20select%3A%20%5B%3Aeach%7C%20each%20superclass%20isNil%20%5D"));
smalltalk.bind(smalltalk.Smalltalk, unescape("implementorsOf%3A"), "implementorsOf_", function Smalltalk__implementorsOf_(aSymbol){
const self = this; return (self.rootClasses()).inject_into_([],(function Smalltalk__(total,each){
return total._comma((each.implementorsOf_(aSymbol)));
}
));
}
, "testing", unescape("implementorsOf%3A%20aSymbol%0D%09%22%20Return%20a%20collection%20of%20methods%20implementing%20aSymbol.%20%22%0D%0D%09%5Eself%20rootClasses%20inject%3A%20%23%28%29%20into%3A%20%5B%3Atotal%20%3Aeach%7C%0D%09%09total%20%2C%28each%20implementorsOf%3A%20aSymbol%29%0D%09%5D"));
smalltalk.bind(smalltalk.Smalltalk, unescape("objectAt%3AifAbsent%3A"), "objectAt_ifAbsent_", function Smalltalk__objectAt_ifAbsent_(aName,aBlock){
var result = nil;
const self = this; result=self.jsObjectAt_ifAbsent_(aName,aBlock);
if (((nil.isNil_((function(){var $1$; $1$ = result["yourself"]; return nil.isNil_($1$) ? nil : $1$})())===false)).valueOf()) {return result} else {return nil};
}
, "accessing", unescape("objectAt%3A%20aName%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20%28global%20scoped%29%20smalltalk%20object%20at%20aName%20or%20the%20result%20of%20evaluating%20aBlock%20%28if%20undefined%20or%20not%20an%20Object%20instance%29.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20jsObjectAt%3A%20aName%20ifAbsent%3A%20aBlock.%0D%09%5E%28result%20basicAt%3A%20%23yourself%29%20notNil%20ifTrue%3A%20%5B%20result%20%5D"));
smalltalk.bind(smalltalk.Smalltalk, unescape("jsObjectAt%3AifAbsent%3A"), "jsObjectAt_ifAbsent_", function Smalltalk__jsObjectAt_ifAbsent_(aName,aBlock){
const self = this; return (function(){var $1$; $1$ = smalltalk.Smalltalk.global()[aName]; return nil.isNil_($1$) ? aBlock.value() : $1$})();
}
, "accessing", unescape("jsObjectAt%3A%20aName%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20%28global%20scoped%29%20javascript%20object%20at%20aName%20or%20the%20result%20of%20evaluating%20aBlock%20%28if%20undefined%29.%20%22%0D%0D%09%5ESmalltalk%20global%20basicAt%3A%20aName%20ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.Smalltalk, unescape("jsObjectAt%3A"), "jsObjectAt_", function Smalltalk__jsObjectAt_(aName){
const self = this; return self.jsObjectAt_ifAbsent_(aName,(function Smalltalk__(){
return self.error_(("Undefined "._comma(aName)));
}
));
}
, "accessing", unescape("jsObjectAt%3A%20aName%0D%09%22%20Return%20the%20%28global%20scoped%29%20javascript%20object%20at%20aName.%20%22%0D%0D%09%5Eself%20jsObjectAt%3A%20aName%20ifAbsent%3A%20%5B%20self%20error%3A%20%27Undefined%20%27%2CaName%20%5D"));
smalltalk.bind(smalltalk.Smalltalk, unescape("removeKey%3AifAbsent%3A"), "removeKey_ifAbsent_", function Smalltalk__removeKey_ifAbsent_(aKey,aBlock){
const self = this; var $early={name:"stReturn"};
try {
(function(){var $1$; $1$ = self[aKey]; return nil.isNil_($1$) ? (function Smalltalk__(){
$early.result=aBlock.value(); throw ($early);
}
)() : $1$})();
self.basicDelete_(aKey);
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "removing", unescape("removeKey%3A%20aKey%20ifAbsent%3A%20aBlock%0D%09%22%20Remove%20the%20binding%20at%20aKey.%20%22%0D%0D%09self%20basicAt%3A%20aKey%20ifAbsent%3A%20%5B%20%5EaBlock%20value%20%5D.%0D%09self%20basicDelete%3A%20aKey"));
smalltalk.bind(smalltalk.Smalltalk, unescape("definePool%3A"), "definePool_", function Smalltalk__definePool_(poolName){
const self = this; return self.definePool_with_(poolName,(smalltalk.Array.$$new()));
}
, "accessing", unescape("definePool%3A%20poolName%0D%09%22%20Define%20the%20pool%20dictionary%20%28if%20it%20is%20not%20defined%20yet%29.%20%22%0D%0D%09%5Eself%20definePool%3A%20poolName%20with%3A%20Array%20new"));
smalltalk.bind(smalltalk.Smalltalk, unescape("poolDictionary%3AifAbsent%3A"), "poolDictionary_ifAbsent_", function Smalltalk__poolDictionary_ifAbsent_(aPoolName,aBlock){
const self = this; return (function(){var $1$; $1$ = self[aPoolName]; return nil.isNil_($1$) ? aBlock.value() : $1$})();
}
, "accessing", unescape("poolDictionary%3A%20aPoolName%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20pool%20dictionary%20named%20aPoolName%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%5Eself%20basicAt%3A%20aPoolName%20ifAbsent%3A%20%5B%20aBlock%20value%20%5D"));
smalltalk.bind(smalltalk.Smalltalk, unescape("poolDictionary%3A"), "poolDictionary_", function Smalltalk__poolDictionary_(aPoolName){
const self = this; return self.poolDictionary_ifAbsent_(aPoolName,(function Smalltalk__(){
return self.definePool_(aPoolName);
}
));
}
, "accessing", unescape("poolDictionary%3A%20aPoolName%0D%09%22%20Return%20the%20pool%20dictionary%20named%20aPoolName.%20%22%0D%0D%09%5Eself%20poolDictionary%3A%20aPoolName%20ifAbsent%3A%20%5B%0D%09%09%22self%20error%3A%20%27Missing%20Pool%20dictionary%3A%20%27%2CaPoolName.%20%22%0D%09%09self%20definePool%3A%20aPoolName%0D%09%5D"));
smalltalk.bind(smalltalk.Smalltalk, unescape("printDefinePool%3Awith%3A"), "printDefinePool_with_", function Smalltalk__printDefinePool_with_(poolName,tuples){
const self = this; self.print_(((unescape("smalltalk.definePool_with_%28%22")._comma(poolName))._comma(unescape("%22%2C%5B"))));
tuples.do_((function Smalltalk__(tuple){
if ((tuple.isArray()).valueOf()) {return self.print_(((((unescape("%09%5B")._comma(((tuple.first()).printString())))._comma(unescape("%2C")))._comma(((tuple.last()).asJavascript())))._comma(unescape("%5D%2C"))))} else {return self.print_(((unescape("%09")._comma((tuple.asJavascript())))._comma(unescape("%2C"))))};
}
));
self.print_(unescape("%09%5D%29%3B"));
return self;
}
, "compiling", unescape("printDefinePool%3A%20poolName%20with%3A%20tuples%0D%09%22%20DEBUG%20-%20Dump%20definition%20of%20the%20pool%20dictionary.%20%22%0D%0D%09self%20print%3A%20%27smalltalk.definePool_with_%28%22%27%2CpoolName%2C%27%22%2C%5B%27.%0D%09tuples%20do%3A%20%5B%3Atuple%7C%0D%09%09tuple%20isArray%20ifTrue%3A%20%5B%0D%09%09%09self%20print%3A%20%27%09%5B%27%2Ctuple%20first%20printString%2C%27%2C%27%2Ctuple%20last%20asJavascript%2C%27%5D%2C%27%0D%09%09%5D%20ifFalse%3A%20%5B%0D%09%09%09self%20print%3A%20%27%09%27%2Ctuple%20asJavascript%20%2C%27%2C%27%0D%09%09%5D%0D%09%5D.%0D%09self%20print%3A%20%27%09%5D%29%3B%27."));
smalltalk.bind(smalltalk.Smalltalk, unescape("definePool%3Awith%3A"), "definePool_with_", function Smalltalk__definePool_with_(poolName,tuples){
var dictionary = nil;
var offset = nil;
const self = this; dictionary=(function(){var $1$; $1$ = self[poolName]; return nil.isNil_($1$) ? (self[poolName]=smalltalk.PoolDictionary.$$new()) : $1$})();
offset=(0);
tuples.do_((function Smalltalk__(each){
if ((each.isArray()).valueOf()) {dictionary.at_put_((each.first()),(each.last()));
if (((each.last()).isNumber()).valueOf()) {return offset=(each.last())._plus((1))} else {return nil}} else {if ((each.isNumber()).valueOf()) {return offset=each} else {dictionary.at_put_(each,offset);
return offset=offset._plus((1))}};
}
));
return dictionary;
}
, "compiling", unescape("definePool%3A%20poolName%20with%3A%20tuples%0D%09%22%20Define%20the%20pool%20dictionary.%20%22%0D%0D%09%7C%20dictionary%20offset%20%7C%0D%09dictionary%20%3A%3D%20self%20basicAt%3A%20poolName%20ifAbsent%3A%20%5B%0D%09%09self%20basicAt%3A%20poolName%20put%3A%20PoolDictionary%20new%0D%09%5D.%0D%09offset%20%3A%3D%200.%0D%09tuples%20do%3A%20%5B%3Aeach%7C%0D%09%09each%20isArray%20ifTrue%3A%20%5B%0D%09%09%09dictionary%20at%3A%20each%20first%20put%3A%20each%20last.%0D%09%09%09each%20last%20isNumber%20ifTrue%3A%20%5B%20offset%20%3A%3D%20each%20last%20+%201%20%5D.%0D%09%09%5D%20ifFalse%3A%20%5B%0D%09%09%09each%20isNumber%20ifTrue%3A%20%5B%20offset%20%3A%3D%20each%20%5D%0D%09%09%09ifFalse%3A%20%5B%0D%09%09%09%09dictionary%20at%3A%20each%20put%3A%20offset.%0D%09%09%09%09offset%20%3A%3D%20offset%20+%201.%0D%09%09%09%5D%0D%09%09%5D%0D%09%5D.%0D%09%5Edictionary"));
smalltalk.bind(smalltalk.Smalltalk, unescape("state"), "state", function Smalltalk__state(){
const self = this; return (function(){var $1$; $1$ = self["$state"]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("state%0D%09%22%20Return%20the%20state%20of%20the%20receiver%20%28or%20nil%29.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24state%27"));
smalltalk.bind(smalltalk.Smalltalk, unescape("state%3A"), "state_", function Smalltalk__state_(aState){
const self = this; (self["$state"]=aState);
return self;
}
, "accessing", unescape("state%3A%20aState%0D%09%22%20Set%20the%20state%20of%20the%20receiver.%20%22%0D%0D%09self%20basicAt%3A%20%27%24state%27%20put%3A%20aState"));
smalltalk.bind(smalltalk.Smalltalk, unescape("withState%3Ado%3A"), "withState_do_", function Smalltalk__withState_do_(aState,aBlock){
var old = nil;
const self = this; old=self.state();
return (function Smalltalk__(){
self.state_(aState);
return aBlock.value();
}
).ensure_((function Smalltalk__(){
return self.state_(old);
}
));
}
, "accessing", unescape("withState%3A%20aState%20do%3A%20aBlock%0D%09%22%20Set%20the%20state%20of%20the%20receiver%20to%20aState%20during%20execution%20of%20aBlock.%20%22%0D%0D%09%7C%20old%20%7C%0D%09old%20%3A%3D%20self%20state.%0D%09%5E%5B%09self%20state%3A%20aState.%0D%09%09aBlock%20value%0D%09%5D%20ensure%3A%20%5B%0D%09%09self%20state%3A%20old%0D%09%5D"));
smalltalk.bind(smalltalk.Smalltalk, unescape("eval%3A"), "eval_", function Smalltalk__eval_(jsExpression){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKSmalltalk.primEval(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "javascript", unescape("eval%3A%20jsExpression%0D%09%22%20Return%20the%20result%20of%20evaluating%20a%20javascript%20expression%20in%20global%20context.%20%22%0D%0D%09%3Cprimitive%3A%27primEval%27%20module%3A%27SKSmalltalk%27%3E%0D%09%5Eself%20primitiveFailed%20"));
smalltalk.bind(smalltalk.Smalltalk, unescape("eval%3Aas%3A"), "eval_as_", function Smalltalk__eval_as_(jsExpression,aState){
const self = this; return self.withState_do_(aState,(function Smalltalk__(){
return self.eval_(jsExpression);
}
));
}
, "javascript", unescape("eval%3A%20jsExpression%20as%3A%20aState%0D%09%22%20Return%20the%20result%20of%20evaluating%20a%20javascript%20expression%20in%20global%20context.%0D%09The%20state%20of%20the%20system%20change%20to%20state%20while%20evaluating%20the%20expression.%0D%09%22%0D%0D%09%5Eself%20withState%3A%20aState%20do%3A%20%5B%20self%20eval%3A%20jsExpression%20%5D"));
smalltalk.bind(smalltalk.Smalltalk, unescape("removeSources"), "removeSources", function Smalltalk__removeSources(){
const self = this; (self.classes()).do_((function Smalltalk__(each){
return each.removeSources();
}
));
return self;
}
, "tools", unescape("removeSources%0D%09%22%20Remove%20all%20development%20sources%20of%20the%20receiver.%20%22%0D%0D%09self%20classes%20do%3A%20%5B%3Aeach%20%7C%20each%20removeSources%20%5D"));
smalltalk.bind(smalltalk.Smalltalk, unescape("readJSON%3A"), "readJSON_", function Smalltalk__readJSON_(anObject){
const self = this; return self.readJSObject_(anObject);
}
, "json", unescape("readJSON%3A%20anObject%0D%09%22%20Return%20an%20object%20read%20from%20JSON%20map%20object%20anObject.%20%22%0D%0D%09%5Eself%20readJSObject%3A%20anObject"));
smalltalk.bind(smalltalk.Smalltalk, unescape("shallowCopy"), "shallowCopy", function Smalltalk__shallowCopy(){
const self = this; return self;
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Smalltalk, unescape("deepCopy"), "deepCopy", function Smalltalk__deepCopy(){
const self = this; return self;
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.addClass("Behavior", smalltalk.Object, [], 'Kernel');
smalltalk.Behavior.$classVariableNames=("");
smalltalk.bind(smalltalk.Behavior, unescape("new"), "$$new", function Behavior__$$new(){
const self = this; return (self.basicNew()).initialize();
}
, "instantiation", unescape("new%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicNew%20initialize"));
smalltalk.bind(smalltalk.Behavior, unescape("new%3A"), "new_", function Behavior__new_(size){
const self = this; return self.basicNew_(size);
}
, "instantiation", unescape("new%3A%20size%0D%09%22%20Return%20an%20instance%20of%20the%20receiver%20of%20specified%20size.%20%22%0D%0D%09%5Eself%20basicNew%3A%20size"));
smalltalk.bind(smalltalk.Behavior, unescape("basicNew%3A"), "basicNew_", function Behavior__basicNew_(size){
const self = this; return self.invalidMessage_("basicNew:");
}
, "instantiation", unescape("basicNew%3A%20size%0D%09%22%20Return%20an%20instance%20of%20the%20receiver%20of%20specified%20size.%20%22%0D%0D%09%5Eself%20invalidMessage%3A%20%23basicNew%3A"));
smalltalk.bind(smalltalk.Behavior, unescape("basicNew"), "basicNew", function Behavior__basicNew(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKObject.primBasicNew(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "instantiation", unescape("basicNew%0D%09%22%20Return%20a%20new%20%28non-initialized%29%20instance%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primBasicNew%27%20module%3A%20%27SKObject%27%3E%0D%09%5Eself%20primitiveFailed%20"));
smalltalk.bind(smalltalk.Behavior, unescape("name"), "name", function Behavior__name(){
const self = this; return (function(){var $1$; $1$ = self["$className"]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("name%0D%09%22%20Return%20the%20name%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24className%27"));
smalltalk.bind(smalltalk.Behavior, unescape("superclass"), "superclass", function Behavior__superclass(){
const self = this; return (function(){var $1$; $1$ = self["$superclass"]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("superclass%0D%09%22%20Return%20the%20superclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24superclass%27"));
smalltalk.bind(smalltalk.Behavior, unescape("subclasses"), "subclasses", function Behavior__subclasses(){
const self = this; return (self.smalltalk()).subclasses_(self);
}
, "accessing", unescape("subclasses%0D%09%22%20Return%20the%20subclasses%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20smalltalk%20subclasses%3A%20self"));
smalltalk.bind(smalltalk.Behavior, unescape("allSubclasses"), "allSubclasses", function Behavior__allSubclasses(){
var result = nil;
const self = this; result=smalltalk.Array.$$new();
self.allSubclassesDo_((function Behavior__(each){
return result.add_(each);
}
));
return result;
}
, "testing", unescape("allSubclasses%0D%09%22%20Return%20all%20the%20subclasses%20of%20the%20receiver.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20Array%20new.%0D%09self%20allSubclassesDo%3A%20%5B%3Aeach%7C%20result%20add%3A%20each%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Behavior, unescape("allSubclassesDo%3A"), "allSubclassesDo_", function Behavior__allSubclassesDo_(aBlock){
const self = this; (self.smalltalk()).allSubclassesDo_value_(self,aBlock);
return self;
}
, "testing", unescape("allSubclassesDo%3A%20aBlock%0D%09%22%20Evaluates%20aBlock%20with%20all%20the%20subclasses%20of%20the%20receiver.%20%22%0D%0D%09self%20smalltalk%20allSubclassesDo%3A%20self%20value%3A%20aBlock"));
smalltalk.bind(smalltalk.Behavior, unescape("withAllSubclassesDo%3A"), "withAllSubclassesDo_", function Behavior__withAllSubclassesDo_(aBlock){
const self = this; aBlock.value_(self);
self.allSubclassesDo_(aBlock);
return self;
}
, "testing", unescape("withAllSubclassesDo%3A%20aBlock%0D%09%22%20Evaluates%20aBlock%20with%20the%20receiver%20and%20all%20the%20subclasses.%20%22%0D%0D%09aBlock%20value%3A%20self.%0D%09self%20allSubclassesDo%3A%20aBlock"));
smalltalk.bind(smalltalk.Behavior, unescape("withAllSubclasses"), "withAllSubclasses", function Behavior__withAllSubclasses(){
var result = nil;
const self = this; result=smalltalk.Array.with_(self);
self.allSubclassesDo_((function Behavior__(each){
return result.add_(each);
}
));
return result;
}
, "accessing", unescape("withAllSubclasses%0D%09%22%20Return%20a%20collection%20with%20the%20receiver%20and%20all%20subclasses.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20Array%20with%3A%20self.%0D%09self%20allSubclassesDo%3A%20%5B%3Aeach%7C%20result%20add%3A%20each%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Behavior, unescape("allSuperclassesDo%3A"), "allSuperclassesDo_", function Behavior__allSuperclassesDo_(aBlock){
var current = nil;
const self = this; current=self.superclass();
while(((nil.isNil_(current)===false)).valueOf()){aBlock.value_(current);
current=current.superclass()};;
return self;
}
, "accessing", unescape("allSuperclassesDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20superclasses%20of%20the%20receiver.%0D%09The%20superclasses%20are%20walked%20in%20inverse%20hierarchical%20order%2C%20i.e%20class%20Object%20is%20last.%0D%09%22%0D%0D%09%7C%20current%20%7C%0D%09current%20%3A%3D%20self%20superclass.%0D%09%5B%20current%20notNil%20%5D%20whileTrue%3A%20%5B%0D%09%20%20%20%20%20%20%20%20aBlock%20value%3A%20current.%0D%09%09current%20%3A%3D%20current%20superclass.%0D%09%5D"));
smalltalk.bind(smalltalk.Behavior, unescape("withAllSuperclassesDo%3A"), "withAllSuperclassesDo_", function Behavior__withAllSuperclassesDo_(aBlock){
const self = this; aBlock.value_(self);
return self.allSuperclassesDo_(aBlock);
}
, "accessing", unescape("withAllSuperclassesDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20receiver%20and%20it%27s%20superclasses.%0D%09The%20superclasses%20are%20walked%20in%20inverse%20hierarchical%20order%2C%20i.e%20class%20Object%20is%20last.%0D%09%22%0D%0D%09aBlock%20value%3A%20self.%0D%09%5Eself%20allSuperclassesDo%3A%20aBlock"));
smalltalk.bind(smalltalk.Behavior, unescape("withAllSuperclasses"), "withAllSuperclasses", function Behavior__withAllSuperclasses(){
const self = this; return (smalltalk.Array.with_(self))._comma((self.allSuperclasses()));
}
, "accessing", unescape("withAllSuperclasses%0D%09%22%20Return%20a%20collection%20with%20the%20receiver%20and%20all%20superclasses.%20%22%0D%0D%09%5E%28Array%20with%3A%20self%29%20%2C%20self%20allSuperclasses"));
smalltalk.bind(smalltalk.Behavior, unescape("allSuperclasses"), "allSuperclasses", function Behavior__allSuperclasses(){
var result = nil;
const self = this; result=smalltalk.Array.$$new();
self.allSuperclassesDo_((function Behavior__(each){
return result.add_(each);
}
));
return result;
}
, "accessing", unescape("allSuperclasses%0D%09%22%20Return%20a%20collection%20of%20all%20the%20superclasses%20of%20the%20receiver.%0D%09The%20superclasses%20are%20in%20inverse%20hierarchical%20order%2C%20i.e%20class%20Object%20is%20last.%0D%09%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20Array%20new.%0D%09self%20allSuperclassesDo%3A%20%5B%3Aeach%7C%20result%20add%3A%20each%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Behavior, unescape("inheritsFrom%3A"), "inheritsFrom_", function Behavior__inheritsFrom_(aClass){
const self = this; var $early={name:"stReturn"};
try {
if (((nil.is_eqeq_(self,aClass))).valueOf()) {return true};
self.allSuperclassesDo_((function Behavior__(each){
if (((nil.is_eqeq_(aClass,each))).valueOf()) {$early.result=true; throw ($early)} else {return nil};
}
));
return false;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "testing", unescape("inheritsFrom%3A%20aClass%0D%09%22%20Return%20true%20if%20the%20receiver%20inherits%20from%20aClass.%20%22%0D%0D%09self%20%3D%3D%20aClass%20ifTrue%3A%20%5B%20%5Etrue%20%5D.%0D%09self%20allSuperclassesDo%3A%20%5B%3Aeach%7C%0D%09%09aClass%20%3D%3D%20each%20ifTrue%3A%20%5B%20%5Etrue%20%5D%0D%09%5D.%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Behavior, unescape("prototype"), "prototype", function Behavior__prototype(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBehavior.primPrototype(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "accessing", unescape("prototype%0D%09%22%20Return%20the%20prototype%20of%20the%20receiver%20%28or%20nil%29.%20%22%0D%0D%09%3Cprimitive%3A%20%27primPrototype%27%20module%3A%20%27SKBehavior%27%3E%0D%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.Behavior, unescape("primitiveConstructor"), "primitiveConstructor", function Behavior__primitiveConstructor(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBehavior.primConstructor(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "accessing", unescape("primitiveConstructor%0D%09%22%20Return%20the%20prototype%20of%20the%20receiver%20%28or%20nil%29.%20%22%0D%0D%09%3Cprimitive%3A%20%27primConstructor%27%20module%3A%20%27SKBehavior%27%3E%0D%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.Behavior, unescape("constructorName"), "constructorName", function Behavior__constructorName(){
var result = nil;
var fn = nil;
const self = this; fn=self.primitiveConstructor();
result=(function(){var $1$; $1$ = fn["name"]; return nil.isNil_($1$) ? nil : $1$})();
if (((nil.isNil_(result)===false)).valueOf()) {if ((result.isEmpty()).valueOf()) {return nil};
if ((result._eq("$scarletConstructor")).valueOf()) {return nil};
return result};
result=((fn.toString()).upTo_(unescape("%28"))).asArrayOfSubstrings();
if (((result.size())._eq((2))).not()) {return nil};
return result.last();
}
, "accessing", unescape("constructorName%0D%09%22%20Return%20the%20name%20of%20the%20constructor%20of%20the%20receiver%20%28or%20nil%29.%20%22%0D%0D%09%7C%20result%20fn%20%7C%0D%09fn%20%3A%3D%20self%20primitiveConstructor.%0D%09result%20%3A%3D%20fn%20basicAt%3A%20%23name.%0D%09result%20notNil%20ifTrue%3A%20%5B%0D%09%09result%20isEmpty%20ifTrue%3A%20%5B%20%5Enil%20%5D.%0D%09%09result%20%3D%20%27%24scarletConstructor%27%20ifTrue%3A%20%5B%20%5Enil%20%5D.%0D%09%09%5Eresult%0D%09%5D.%0D%09result%20%3A%3D%20%28fn%20toString%20upTo%3A%20%24%28%29%20asArrayOfSubstrings.%0D%09result%20size%20%3D%202%20ifFalse%3A%20%5B%20%5Enil%20%5D.%0D%09%5Eresult%20last"));
smalltalk.bind(smalltalk.Behavior, unescape("methodsDo%3A"), "methodsDo_", function Behavior__methodsDo_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBehavior.primMethodsDo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("methodsDo%3A%20aBlock%0D%09%22%20Evaluates%20aBlock%20for%20all%20the%20methods%20defined%20by%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primMethodsDo%27%20module%3A%20%27SKBehavior%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Behavior, unescape("selectorsDo%3A"), "selectorsDo_", function Behavior__selectorsDo_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBehavior.primSelectorsDo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("selectorsDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20for%20all%20the%20selectors%20implemented%20by%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primSelectorsDo%27%20module%3A%20%27SKBehavior%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Behavior, unescape("methodDictionary"), "methodDictionary", function Behavior__methodDictionary(){
var result = nil;
const self = this; result=smalltalk.PoolDictionary.$$new();
self.methodsDo_((function Behavior__(each){
return result.at_put_((each.selector()),each);
}
));
return result;
}
, "accessing", unescape("methodDictionary%0D%09%22%20Return%20a%20dictionary%20with%20the%20methods%20implemented%20by%20the%20receiver.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20PoolDictionary%20new.%0D%09self%20methodsDo%3A%20%5B%3Aeach%7C%20result%20at%3A%20each%20selector%20put%3A%20each%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Behavior, unescape("selectors"), "selectors", function Behavior__selectors(){
var result = nil;
const self = this; result=smalltalk.Array.$$new();
self.selectorsDo_((function Behavior__(each){
return result.add_(each);
}
));
return result;
}
, "accessing", unescape("selectors%0D%09%22%20Return%20the%20selectors%20implemented%20by%20the%20receiver.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20Array%20new.%0D%09self%20selectorsDo%3A%20%5B%3Aeach%7C%20result%20add%3A%20each%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Behavior, unescape("implements%3A"), "implements_", function Behavior__implements_(aSymbol){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBehavior.primImplements(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "testing", unescape("implements%3A%20aSymbol%0D%09%22%20Return%20true%20if%20the%20receiver%20implements%20message%20aSymbol.%20%22%0D%0D%09%3Cprimitive%3A%20%27primImplements%27%20module%3A%20%27SKBehavior%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Behavior, unescape("compiledMethodAt%3A"), "compiledMethodAt_", function Behavior__compiledMethodAt_(aSymbol){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBehavior.primCompiledMethodAt(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("compiledMethodAt%3A%20aSymbol%0D%09%22%20Return%20the%20compiled%20method%20at%20aSymbol%20implemented%20by%20the%20receiver%20%28or%20nil%29.%20%22%0D%0D%09%3Cprimitive%3A%20%27primCompiledMethodAt%27%20module%3A%20%27SKBehavior%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Behavior, unescape("%3E%3E"), "_gt_gt", function Behavior___gt_gt(aSymbol){
const self = this; return self.compiledMethodAt_(aSymbol);
}
, "accessing", unescape("%3E%3E%20aSymbol%0D%09%22%20Return%20the%20method%20at%20aSymbol%20%28or%20nil%20if%20not%20implemented%20by%20the%20receiver%29.%20%22%0D%0D%09%5Eself%20compiledMethodAt%3A%20aSymbol"));
smalltalk.bind(smalltalk.Behavior, unescape("%3E%3E%3E"), "_gt_gt_gt", function Behavior___gt_gt_gt(aSymbol){
var result = nil;
const self = this; result=self.compiledMethodAt_(aSymbol);
if ((((nil.isNil_(result))).and_((function Behavior__(){
return (nil.isNil_(self.superclass())===false);
}
))).valueOf()) {return (self.superclass())._gt_gt_gt(aSymbol)};
return result;
}
, "accessing", unescape("%3E%3E%3E%20aSymbol%0D%09%22%20Return%20the%20method%20at%20aSymbol%20searching%20up%20in%20receiver%27s%20hierarchy%20%28or%20nil%20if%20not%20implemented%20by%20the%20receiver%20nor%20its%20superclasses%29.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20compiledMethodAt%3A%20aSymbol.%0D%09%28result%20isNil%20and%3A%20%5Bself%20superclass%20notNil%5D%29%20ifTrue%3A%20%5B%0D%09%09%5Eself%20superclass%20%3E%3E%3E%20aSymbol%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Behavior, unescape("instVarNames"), "instVarNames", function Behavior__instVarNames(){
const self = this; return (function(){var $1$; $1$ = self["$iVarNames"]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("instVarNames%0D%09%22%20Return%20the%20instance%20variable%20names%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24iVarNames%27"));
smalltalk.bind(smalltalk.Behavior, unescape("allInstVarNames"), "allInstVarNames", function Behavior__allInstVarNames(){
var result = nil;
const self = this; result=self.instVarNames();
self.allSuperclassesDo_((function Behavior__(each){
return result=(each.instVarNames())._comma(result);
}
));
return result;
}
, "accessing", unescape("allInstVarNames%0D%09%22%20Return%20all%20of%20the%20instance%20variable%20names%20defined%20in%20the%20receiver%20and%20its%20superclasses.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20instVarNames.%0D%09self%20allSuperclassesDo%3A%20%5B%20%3Aeach%20%7C%20result%20%3A%3D%20each%20instVarNames%20%2C%20result%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Behavior, unescape("instanceVariableNames"), "instanceVariableNames", function Behavior__instanceVariableNames(){
const self = this; return (function(){var $1$; $1$ = self["$iVarNames"]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("instanceVariableNames%0D%09%22%20Return%20the%20instance%20variable%20names%20defined%20by%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24iVarNames%27"));
smalltalk.bind(smalltalk.Behavior, unescape("propertyNames"), "propertyNames", function Behavior__propertyNames(){
const self = this; return (function(){var $1$; $1$ = self["$propertyNames"]; return nil.isNil_($1$) ? smalltalk.Array.$$new() : $1$})();
}
, "accessing", unescape("propertyNames%0D%09%22%20Return%20the%20property%20names%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24propertyNames%27%20ifAbsent%3A%20%5B%20Array%20new%20%5D"));
smalltalk.bind(smalltalk.Behavior, unescape("propertyNames%3A"), "propertyNames_", function Behavior__propertyNames_(anArray){
const self = this; if (((nil.isNil_(anArray))).valueOf()) {return self.basicDelete_("$propertyNames")};
return (self["$propertyNames"]=anArray);
}
, "accessing", unescape("propertyNames%3A%20anArray%0D%09%22%20Set%20the%20property%20names%20of%20the%20receiver.%20%22%0D%0D%09anArray%20isNil%20ifTrue%3A%20%5B%20%5Eself%20basicDelete%3A%20%27%24propertyNames%27%20%5D.%0D%09%5Eself%20basicAt%3A%20%27%24propertyNames%27%20put%3A%20anArray"));
smalltalk.bind(smalltalk.Behavior, unescape("allPropertyNamesDo%3A"), "allPropertyNamesDo_", function Behavior__allPropertyNamesDo_(aBlock){
const self = this; (self.propertyNames()).do_(aBlock);
self.allSuperclassesDo_((function Behavior__(each){
return (each.propertyNames()).do_(aBlock);
}
));
return self;
}
, "accessing", unescape("allPropertyNamesDo%3A%20aBlock%0D%09%22%20Evaluates%20aBlock%20for%20the%20property%20names%20defined%20in%20the%20receiver%20and%20its%20superclasses.%20%22%0D%0D%09self%20propertyNames%20do%3A%20aBlock.%0D%09self%20allSuperclassesDo%3A%20%5B%20%3Aeach%20%7C%20each%20propertyNames%20do%3A%20aBlock%20%5D."));
smalltalk.bind(smalltalk.Behavior, unescape("allInstVarNamesDo%3A"), "allInstVarNamesDo_", function Behavior__allInstVarNamesDo_(aBlock){
const self = this; (self.instVarNames()).do_(aBlock);
self.allSuperclassesDo_((function Behavior__(each){
return (each.instVarNames()).do_(aBlock);
}
));
return self;
}
, "accessing", unescape("allInstVarNamesDo%3A%20aBlock%0D%09%22%20Evaluates%20aBlock%20for%20the%20instance%20variable%20names%20defined%20in%20the%20receiver%20and%20its%20superclasses.%20%22%0D%0D%09self%20instVarNames%20do%3A%20aBlock.%0D%09self%20allSuperclassesDo%3A%20%5B%20%3Aeach%20%7C%20each%20instVarNames%20do%3A%20aBlock%20%5D."));
smalltalk.bind(smalltalk.Behavior, unescape("comment"), "comment", function Behavior__comment(){
const self = this; return (function(){var $1$; $1$ = self.instanceClass()["$comment"]; return nil.isNil_($1$) ? "" : $1$})();
}
, "accessing", unescape("comment%0D%09%22%20Return%20the%20comment%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20instanceClass%20basicAt%3A%20%27%24comment%27%20ifAbsent%3A%20%5B%20%27%27%20%5D"));
smalltalk.bind(smalltalk.Behavior, unescape("comment%3A"), "comment_", function Behavior__comment_(aString){
const self = this; ((self.instanceClass())["$comment"]=aString);
return self;
}
, "accessing", unescape("comment%3A%20aString%0D%09%22%20Set%20the%20comment%20of%20the%20receiver.%20%22%0D%0D%09self%20instanceClass%20basicAt%3A%20%27%24comment%27%20put%3A%20aString"));
smalltalk.bind(smalltalk.Behavior, unescape("removeSources"), "removeSources", function Behavior__removeSources(){
const self = this; (self.instanceClass()).removeSources();
return self;
}
, "tools", unescape("removeSources%0D%09%22%20Remove%20all%20development%20sources%20of%20the%20receiver.%20%22%0D%0D%09self%20instanceClass%20removeSources"));
smalltalk.bind(smalltalk.Behavior, unescape("poolDictionaryNames"), "poolDictionaryNames", function Behavior__poolDictionaryNames(){
const self = this; return (self.instanceClass()).poolDictionaryNames();
}
, "accessing", unescape("poolDictionaryNames%0D%09%22%20Return%20the%20shared%20pool%20names%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20instanceClass%20poolDictionaryNames"));
smalltalk.bind(smalltalk.Behavior, unescape("sharedPoolsAndNamesDo%3A"), "sharedPoolsAndNamesDo_", function Behavior__sharedPoolsAndNamesDo_(aBlock){
var pool = nil;
const self = this; (self.instanceClass()).withAllSuperclassesDo_((function Behavior__(each){
return (each.poolDictionaryNames()).do_((function Behavior__(aName){
pool=smalltalk.Smalltalk.poolDictionary_ifAbsent_(aName,(function Behavior__(){
return nil;
}
));
if (((nil.isNil_(pool)===false)).valueOf()) {return aBlock.value_value_(aName,pool)} else {return nil};
}
));
}
));
return self;
}
, "accessing", unescape("sharedPoolsAndNamesDo%3A%20aBlock%0D%09%22%20Execute%20aBlock%20for%20the%20pool%20dictionaries%20known%20by%20the%20receiver.%20%22%0D%0D%09%7C%20pool%20%7C%0D%09self%20instanceClass%20withAllSuperclassesDo%3A%20%5B%3Aeach%7C%0D%09%09each%20poolDictionaryNames%20do%3A%20%5B%3AaName%7C%0D%09%09%09pool%20%3A%3D%20Smalltalk%20poolDictionary%3A%20aName%20ifAbsent%3A%20%5B%20nil%20%5D.%0D%09%09%09pool%20notNil%20ifTrue%3A%20%5B%20aBlock%20value%3A%20aName%20value%3A%20pool%20%5D%0D%09%09%5D.%0D%09%5D"));
smalltalk.bind(smalltalk.Behavior, unescape("sharedPoolsDo%3A"), "sharedPoolsDo_", function Behavior__sharedPoolsDo_(aBlock){
const self = this; self.sharedPoolsAndNamesDo_((function Behavior__(aName,aPool){
return aBlock.value_(aPool);
}
));
return self;
}
, "accessing", unescape("sharedPoolsDo%3A%20aBlock%0D%09%22%20Execute%20aBlock%20for%20the%20pool%20dictionaries%20known%20by%20the%20receiver.%20%22%0D%0D%09self%20sharedPoolsAndNamesDo%3A%20%5B%3AaName%20%3AaPool%7C%20aBlock%20value%3A%20aPool%20%5D"));
smalltalk.bind(smalltalk.Behavior, unescape("classVariablesDo%3A"), "classVariablesDo_", function Behavior__classVariablesDo_(aBlock){
var bindings = nil;
const self = this; return (self.instanceClass()).withAllSuperclassesDo_((function Behavior__(each){
bindings=each.classVariables();
if (((nil.isNil_(bindings)===false)).valueOf()) {return bindings.associationsDo_((function Behavior__(assoc){
return aBlock.value_(assoc);
}
))} else {return nil};
}
));
}
, "accessing", unescape("classVariablesDo%3A%20aBlock%0D%09%22%20Execute%20aBlock%20for%20the%20classVariables%20bindings%20known%20by%20the%20receiver.%20%22%0D%0D%09%7C%20bindings%20%7C%0D%09%5Eself%20instanceClass%20withAllSuperclassesDo%3A%20%5B%3Aeach%7C%0D%09%09bindings%20%3A%3D%20each%20classVariables.%0D%09%09bindings%20notNil%20ifTrue%3A%20%5B%0D%09%09%09bindings%20associationsDo%3A%20%5B%3Aassoc%7C%20aBlock%20value%3A%20assoc%20%5D%0D%09%09%5D%0D%09%5D"));
smalltalk.bind(smalltalk.Behavior, unescape("classVariableNamesDo%3A"), "classVariableNamesDo_", function Behavior__classVariableNamesDo_(aBlock){
var bindings = nil;
const self = this; return (self.instanceClass()).withAllSuperclassesDo_((function Behavior__(each){
bindings=each.classVariables();
if (((nil.isNil_(bindings)===false)).valueOf()) {return bindings.keysDo_((function Behavior__(aName){
return aBlock.value_(aName);
}
))} else {return nil};
}
));
}
, "accessing", unescape("classVariableNamesDo%3A%20aBlock%0D%09%22%20Execute%20aBlock%20for%20the%20classVariable%20names%20known%20by%20the%20receiver.%20%22%0D%0D%09%7C%20bindings%20%7C%0D%09%5Eself%20instanceClass%20withAllSuperclassesDo%3A%20%5B%3Aeach%7C%0D%09%09bindings%20%3A%3D%20each%20classVariables.%0D%09%09bindings%20notNil%20ifTrue%3A%20%5B%0D%09%09%09bindings%20keysDo%3A%20%5B%3AaName%7C%20aBlock%20value%3A%20aName%20%5D%0D%09%09%5D%0D%09%5D"));
smalltalk.bind(smalltalk.Behavior, unescape("classVariableAt%3Aput%3A"), "classVariableAt_put_", function Behavior__classVariableAt_put_(aName,anObject){
var bindings = nil;
const self = this; var $early={name:"stReturn"};
try {
(self.instanceClass()).withAllSuperclassesDo_((function Behavior__(each){
bindings=each.classVariables();
return (function(){var $1$; $1$ = bindings; if (!nil.isNil_($1$)) { return (bindings.includesKey_(aName)).ifTrue_((function Behavior__(){
$early.result=bindings.at_put_(aName,anObject); throw ($early);
}
)) } else { return $1$; }})();
}
));
self.error_(((("Undefined class variable "._comma(aName))._comma(" in "))._comma((self.name()))));
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "accessing", unescape("classVariableAt%3A%20aName%20put%3A%20anObject%0D%09%22%20Set%20the%20classVariable%20of%20the%20receiver%20%28or%20one%20of%20its%20superclasses%29%20to%20anObject.%20%22%0D%0D%09%7C%20bindings%20%7C%0D%09self%20instanceClass%20withAllSuperclassesDo%3A%20%5B%3Aeach%7C%0D%09%09bindings%20%3A%3D%20each%20classVariables.%0D%09%09bindings%20ifNotNil%3A%20%5B%0D%09%09%09%28bindings%20includesKey%3A%20aName%29%0D%09%09%09%09ifTrue%3A%20%5B%5Ebindings%20at%3A%20aName%20put%3A%20anObject%5D.%0D%09%09%5D%0D%09%5D.%0D%09self%20error%3A%20%27Undefined%20class%20variable%20%27%2C%20aName%20%2C%27%20in%20%27%20%2C%20self%20name"));
smalltalk.bind(smalltalk.Behavior, unescape("classVariableAt%3AifAbsent%3A"), "classVariableAt_ifAbsent_", function Behavior__classVariableAt_ifAbsent_(aName,aBlock){
var bindings = nil;
const self = this; var $early={name:"stReturn"};
try {
(self.instanceClass()).withAllSuperclassesDo_((function Behavior__(each){
bindings=each.classVariables();
return (function(){var $1$; $1$ = bindings; if (!nil.isNil_($1$)) { return (bindings.includesKey_(aName)).ifTrue_((function Behavior__(){
$early.result=bindings.at_(aName); throw ($early);
}
)) } else { return $1$; }})();
}
));
return aBlock.evaluate();
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "accessing", unescape("classVariableAt%3A%20aName%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20value%20of%20classVariable%20named%20aName.%20%22%0D%0D%09%7C%20bindings%20%7C%0D%09self%20instanceClass%20withAllSuperclassesDo%3A%20%5B%3Aeach%7C%0D%09%09bindings%20%3A%3D%20each%20classVariables.%0D%09%09bindings%20ifNotNil%3A%20%5B%0D%09%09%09%28bindings%20includesKey%3A%20aName%29%20ifTrue%3A%20%5B%0D%09%09%09%09%5Ebindings%20at%3A%20aName%0D%09%09%09%5D%0D%09%09%5D%0D%09%5D.%0D%09%5EaBlock%20evaluate"));
smalltalk.bind(smalltalk.Behavior, unescape("classVariableAt%3A"), "classVariableAt_", function Behavior__classVariableAt_(aName){
const self = this; return self.classVariableAt_ifAbsent_(aName,(function Behavior__(){
return self.error_(((("Undefined class variable "._comma(aName))._comma(" in "))._comma((self.name()))));
}
));
}
, "accessing", unescape("classVariableAt%3A%20aName%0D%09%22%20Return%20the%20value%20of%20classVariable%20named%20aName%20or%20generates%20an%20error.%20%22%0D%0D%09%5Eself%20classVariableAt%3A%20aName%20ifAbsent%3A%20%5B%0D%09%09self%20error%3A%20%27Undefined%20class%20variable%20%27%2CaName%20%2C%27%20in%20%27%20%2Cself%20name%0D%09%5D"));
smalltalk.bind(smalltalk.Behavior, unescape("pool%3AvariableAt%3Aput%3A"), "pool_variableAt_put_", function Behavior__pool_variableAt_put_(poolName,aName,anObject){
var pool = nil;
const self = this; var $early={name:"stReturn"};
try {
pool=smalltalk.Smalltalk.poolDictionary_ifAbsent_(poolName,(function Behavior__(){
$early.result=self.error_(((("Undefined pool variable "._comma(poolName))._comma(" in "))._comma((self.name())))); throw ($early);
}
));
return pool.at_put_(aName,anObject);
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "accessing", unescape("pool%3A%20poolName%20variableAt%3A%20aName%20put%3A%20anObject%0D%09%22%20Set%20the%20pool%20Variable%20of%20the%20receiver%20to%20anObject.%20%22%0D%0D%09%7C%20pool%20%7C%0D%09pool%20%3A%3D%20Smalltalk%0D%09%09poolDictionary%3A%20poolName%0D%09%09ifAbsent%3A%20%5B%20%5Eself%20error%3A%20%27Undefined%20pool%20variable%20%27%2CpoolName%20%2C%27%20in%20%27%20%2Cself%20name%20%5D.%0D%09%5Epool%20at%3A%20aName%20put%3A%20anObject"));
smalltalk.bind(smalltalk.Behavior, unescape("loadRequirementsInto%3A"), "loadRequirementsInto_", function Behavior__loadRequirementsInto_(aCollection){
const self = this; return self;
}
, "loading", unescape("loadRequirementsInto%3A%20aCollection%0D%09%22%20Add%20the%20requirements%20to%20load%20the%20receiver%20from%20sources%20to%20aCollection.%0D%09Default%20action%20do%20nothing%2C%20this%20method%20can%20be%20refined%20by%20the%20subclasses.%0D%09%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Behavior, unescape("removeSelectors%3A"), "removeSelectors_", function Behavior__removeSelectors_(aCollection){
const self = this; aCollection.do_((function Behavior__(each){
return self.removeSelector_(each);
}
));
return self;
}
, "methods", unescape("removeSelectors%3A%20aCollection%0D%09%22%20Remove%20the%20methods%20for%20messages%20in%20aCollection%2C%20implemented%20by%20the%20receiver.%20%22%0D%0D%09aCollection%20do%3A%20%5B%3Aeach%7C%20self%20removeSelector%3A%20each%20%5D"));
smalltalk.bind(smalltalk.Behavior, unescape("removeCompiledMethod%3A"), "removeCompiledMethod_", function Behavior__removeCompiledMethod_(aMethod){
const self = this; (self.smalltalk()).removeMethod_method_(self,aMethod);
return self;
}
, "private", unescape("removeCompiledMethod%3A%20aMethod%0D%09%22%20Remove%20aMethod%20from%20the%20receiver.%20%22%0D%0D%09self%20smalltalk%20removeMethod%3A%20self%20method%3A%20aMethod"));
smalltalk.bind(smalltalk.Behavior, unescape("missingImplementorFor%3A"), "missingImplementorFor_", function Behavior__missingImplementorFor_(jsSelector){
const self = this; return self.error_(((("Missing implementor for "._comma(((jsSelector.asStSelector()).asLiteral())))._comma(" in "))._comma((self.name()))));
}
, "private", unescape("missingImplementorFor%3A%20jsSelector%0D%09%22%20Private%20-%20Handle%20the%20situation%20where%20there%20is%20no%20implementor%20for%20jsSelector.%0D%09This%20can%20happen%20when%20there%20is%20no%20implementation%20for%20jsSelector%20and%20the%20message%0D%09%20has%20been%20dispatched%20through%20a%20superSend.%0D%09%22%0D%0D%09%5Eself%20error%3A%20%27Missing%20implementor%20for%20%27%0D%09%09%2C%20jsSelector%20asStSelector%20asLiteral%0D%09%09%2C%27%20in%20%27%2Cself%20name"));
smalltalk.bind(smalltalk.Behavior, unescape("removeSelector%3A"), "removeSelector_", function Behavior__removeSelector_(aSelector){
var method = nil;
const self = this; method=self.compiledMethodAt_(aSelector);
if (((nil.isNil_(method)===false)).valueOf()) {self.removeCompiledMethod_(method)};
return self;
}
, "methods", unescape("removeSelector%3A%20aSelector%0D%09%22%20Remove%20the%20method%20for%20message%20aSelector%20implemented%20by%20the%20receiver.%20%22%0D%0D%09%7C%20method%20%7C%0D%09method%20%3A%3D%20self%20compiledMethodAt%3A%20aSelector.%0D%09method%20notNil%20ifTrue%3A%20%5B%20self%20removeCompiledMethod%3A%20method%20%5D."));
smalltalk.bind(smalltalk.Behavior, unescape("removeFromSystem"), "removeFromSystem", function Behavior__removeFromSystem(){
const self = this; (self.instanceClass()).removeFromSystem();
return self;
}
, "remove", unescape("removeFromSystem%0D%09%22%20Remove%20the%20receiver%20from%20system.%20%22%0D%0D%09self%20instanceClass%20removeFromSystem"));
smalltalk.bind(smalltalk.Behavior, unescape("implementorsOf%3A"), "implementorsOf_", function Behavior__implementorsOf_(aSymbol){
var result = nil;
var method = nil;
const self = this; result=smalltalk.Array.$$new();
self.withAllSubclassesDo_((function Behavior__(each){
method=each._gt_gt(aSymbol);
if (((nil.isNil_(method)===false)).valueOf()) {result.add_(method)};
method=(each.$klass)._gt_gt(aSymbol);
if (((nil.isNil_(method)===false)).valueOf()) {return result.add_(method)} else {return nil};
}
));
return result;
}
, "testing", unescape("implementorsOf%3A%20aSymbol%0D%09%22%20Return%20a%20collection%20of%20methods%20of%20the%20receiver%20and%20its%20subclasses%20that%20implement%20aSymbol.%20%22%0D%0D%09%7C%20result%20method%20%7C%0D%09result%20%3A%3D%20Array%20new.%0D%09self%20withAllSubclassesDo%3A%20%5B%3Aeach%20%7C%0D%09%09method%20%3A%3D%20each%20%3E%3E%20aSymbol.%0D%09%09method%20notNil%20ifTrue%3A%20%5B%20result%20add%3A%20method%20%5D.%0D%09%09method%20%3A%3D%20each%20class%20%3E%3E%20aSymbol.%0D%09%09method%20notNil%20ifTrue%3A%20%5B%20result%20add%3A%20method%20%5D.%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Behavior, unescape("asJSONObject"), "asJSONObject", function Behavior__asJSONObject(){
const self = this; return self;
}
, "converting", unescape("asJSONObject%0D%09%22%20Return%20the%20mapping%20of%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Behavior, unescape("shallowCopy"), "shallowCopy", function Behavior__shallowCopy(){
const self = this; return self;
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Behavior, unescape("deepCopy"), "deepCopy", function Behavior__deepCopy(){
const self = this; return self;
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Behavior, unescape("toString"), "toString", function Behavior__toString(){
const self = this; return (unescape("%7Bst%3A")._comma((self.name())))._comma(unescape("%7D"));
}
, "converting", unescape("toString%0D%09%22%20Convert%20the%20receiver%20to%20a%20String.%20%22%0D%0D%09%5E%27%7Bst%3A%27%2Cself%20name%2C%24%7D"));
smalltalk.addClass("Class", smalltalk.Behavior, [], 'Kernel');
smalltalk.Class.$classVariableNames=("");
smalltalk.bind(smalltalk.Class, unescape("category"), "category", function Class__category(){
const self = this; return (function(){var $1$; $1$ = self["$category"]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("category%0D%09%22%20Return%20the%20category%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24category%27"));
smalltalk.bind(smalltalk.Class, unescape("category%3A"), "category_", function Class__category_(aString){
const self = this; (self["$category"]=aString);
return self;
}
, "accessing", unescape("category%3A%20aString%0D%09%22%20Set%20the%20category%20of%20the%20receiver.%20%22%0D%0D%09self%20basicAt%3A%20%27%24category%27%20put%3A%20aString"));
smalltalk.bind(smalltalk.Class, unescape("classVariables"), "classVariables", function Class__classVariables(){
var names = nil;
const self = this; names=(function(){var $1$; $1$ = self["$classVariableNames"]; return nil.isNil_($1$) ? nil : $1$})();
if (((nil.isNil_(names))).valueOf()) {return (function(){var $2$; $2$ = self["$classVariables"]; return nil.isNil_($2$) ? nil : $2$})()};
self.basicDelete_("$classVariableNames");
self.classVariableNames_(names);
return (function(){var $3$; $3$ = self["$classVariables"]; return nil.isNil_($3$) ? nil : $3$})();
}
, "accessing", unescape("classVariables%0D%09%22%20Return%20the%20class%20variables%20of%20the%20receiver.%20%22%0D%0D%09%7C%20names%20%7C%0D%09names%20%3A%3D%20self%20basicAt%3A%20%27%24classVariableNames%27%20ifAbsent%3A%20%5B%5D.%0D%09names%20isNil%20ifTrue%3A%20%5B%20%5Eself%20basicAt%3A%20%27%24classVariables%27%20%5D.%0D%09self%20basicDelete%3A%20%27%24classVariableNames%27.%0D%09self%20classVariableNames%3A%20names.%0D%09%5Eself%20basicAt%3A%20%27%24classVariables%27"));
smalltalk.bind(smalltalk.Class, unescape("classVariables%3A"), "classVariables_", function Class__classVariables_(aDictionary){
const self = this; if ((((nil.isNil_(aDictionary))).or_((function Class__(){
return aDictionary.isEmpty();
}
))).valueOf()) {return self.basicDelete_("$classVariables")};
return (self["$classVariables"]=aDictionary);
}
, "accessing", unescape("classVariables%3A%20aDictionary%0D%09%22%20Set%20the%20class%20variables%20of%20the%20receiver.%20%22%0D%0D%09%28aDictionary%20isNil%20or%3A%20%5B%20aDictionary%20isEmpty%20%5D%29%20ifTrue%3A%20%5B%0D%09%09%5Eself%20basicDelete%3A%20%27%24classVariables%27%0D%09%5D.%0D%09%5Eself%20basicAt%3A%20%27%24classVariables%27%20put%3A%20aDictionary"));
smalltalk.bind(smalltalk.Class, unescape("poolDictionaries"), "poolDictionaries", function Class__poolDictionaries(){
const self = this; return (function(){var $1$; $1$ = self["$poolDictionaries"]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("poolDictionaries%0D%09%22%20Return%20the%20poolDictionaries%20of%20the%20receiver%20%28anArray%20or%20nil%29.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24poolDictionaries%27"));
smalltalk.bind(smalltalk.Class, unescape("poolDictionaries%3A"), "poolDictionaries_", function Class__poolDictionaries_(anArray){
const self = this; if ((((nil.isNil_(anArray)===false)).and_((function Class__(){
return anArray.isEmpty();
}
))).valueOf()) {return self.poolDictionaries_(nil)};
return (self["$poolDictionaries"]=anArray);
}
, "accessing", unescape("poolDictionaries%3A%20anArray%0D%09%22%20Set%20the%20poolDictionaries%20of%20the%20receiver.%20%22%0D%0D%09%28anArray%20notNil%20and%3A%20%5B%20anArray%20isEmpty%20%5D%29%20ifTrue%3A%20%5B%0D%09%09%5Eself%20poolDictionaries%3A%20nil%0D%09%5D.%0D%09%5Eself%20basicAt%3A%20%27%24poolDictionaries%27%20put%3A%20anArray"));
smalltalk.bind(smalltalk.Class, unescape("classVariableNames"), "classVariableNames", function Class__classVariableNames(){
const self = this; if (((nil.isNil_(self.classVariables()))).valueOf()) {return smalltalk.Array.$$new()} else {return (self.classVariables()).keys()};
}
, "accessing", unescape("classVariableNames%0D%09%22%20Return%20the%20class%20variable%20names%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20classVariables%20isNil%0D%09%09ifTrue%3A%20%5B%20Array%20new%20%5D%0D%09%09ifFalse%3A%20%5B%20self%20classVariables%20keys%20%5D"));
smalltalk.bind(smalltalk.Class, unescape("classVariablesString"), "classVariablesString", function Class__classVariablesString(){
const self = this; return ((self.classVariableNames()).inject_into_("",(function Class__(total,each){
return (total._comma(each))._comma(" ");
}
))).trimBlanks();
}
, "accessing", unescape("classVariablesString%0D%09%22%20Return%20the%20class%20variable%20names%20of%20the%20receiver%20as%20aString.%20%22%0D%0D%09%5E%28self%20classVariableNames%20inject%3A%20%27%27%0D%09%09into%3A%20%5B%3Atotal%20%3Aeach%7C%20total%20%2C%20each%20%2C%20%27%20%27%20%5D%0D%09%09%29%20trimBlanks"));
smalltalk.bind(smalltalk.Class, unescape("poolDictionaryNames"), "poolDictionaryNames", function Class__poolDictionaryNames(){
const self = this; if (((nil.isNil_(self.poolDictionaries()))).valueOf()) {return smalltalk.Array.$$new()} else {return self.poolDictionaries()};
}
, "accessing", unescape("poolDictionaryNames%0D%09%22%20Return%20the%20pool%20dictionary%20names%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20poolDictionaries%20isNil%0D%09%09ifTrue%3A%20%5B%20Array%20new%20%5D%0D%09%09ifFalse%3A%20%5B%20self%20poolDictionaries%20%5D"));
smalltalk.bind(smalltalk.Class, unescape("poolDictionariesString"), "poolDictionariesString", function Class__poolDictionariesString(){
const self = this; return ((self.poolDictionaryNames()).inject_into_("",(function Class__(total,each){
return (total._comma(each))._comma(" ");
}
))).trimBlanks();
}
, "accessing", unescape("poolDictionariesString%0D%09%22%20Return%20the%20poolDictionary%20names%20of%20the%20receiver%20as%20aString.%20%22%0D%0D%09%5E%28self%20poolDictionaryNames%20inject%3A%20%27%27%0D%09%09into%3A%20%5B%3Atotal%20%3Aeach%7C%20total%20%2C%20each%20%2C%20%27%20%27%20%5D%0D%09%09%29%20trimBlanks"));
smalltalk.bind(smalltalk.Class, unescape("classVariableNames%3A"), "classVariableNames_", function Class__classVariableNames_(classVarNames){
var names = nil;
var dictionary = nil;
var old = nil;
const self = this; if (((nil.isNil_(classVarNames))).valueOf()) {return self.classVariables_(nil)};
names=(classVarNames.isString()).ifTrue_ifFalse_((function Class__(){
return classVarNames.asArrayOfSubstrings();
}
),(function Class__(){
return classVarNames;
}
));
dictionary=smalltalk.PoolDictionary.$$new();
old=self.classVariables();
if (((nil.isNil_(old))).valueOf()) {old=dictionary};
names.do_((function Class__(each){
return dictionary.at_put_(each,(old.at_ifAbsent_(each,(function Class__(){
return nil;
}
))));
}
));
self.classVariables_(dictionary);
return self;
}
, "accessing", unescape("classVariableNames%3A%20classVarNames%0D%09%22%20Set%20the%20variable%20names%20defined%20in%20the%20receiver.%20%22%0D%0D%09%7C%20names%20dictionary%20old%20%7C%0D%09classVarNames%20isNil%20ifTrue%3A%20%5B%20%5Eself%20classVariables%3A%20nil%20%5D.%0D%09names%20%3A%3D%20classVarNames%20isString%0D%09%09ifTrue%3A%20%5B%20classVarNames%20asArrayOfSubstrings%20%5D%0D%09%09ifFalse%3A%20%5B%20classVarNames%20%5D.%0D%09dictionary%20%3A%3D%20PoolDictionary%20new.%0D%09old%20%3A%3D%20self%20classVariables.%20old%20isNil%20ifTrue%3A%20%5B%20old%20%3A%3D%20dictionary%20%5D.%0D%09names%20do%3A%20%5B%3Aeach%7C%0D%09%09dictionary%20at%3A%20each%20put%3A%20%28old%20at%3A%20each%20ifAbsent%3A%20%5B%20nil%20%5D%29%0D%09%5D.%0D%09self%20classVariables%3A%20dictionary."));
smalltalk.bind(smalltalk.Class, unescape("poolDictionaryNames%3A"), "poolDictionaryNames_", function Class__poolDictionaryNames_(poolVarNames){
const self = this; self.poolDictionaries_(((poolVarNames.isString()).ifTrue_ifFalse_((function Class__(){
return poolVarNames.asArrayOfSubstrings();
}
),(function Class__(){
return poolVarNames;
}
))));
return self;
}
, "accessing", unescape("poolDictionaryNames%3A%20poolVarNames%0D%09%22%20Set%20the%20pool%20dictionary%20names%20known%20to%20the%20receiver.%20%22%0D%0D%09self%20poolDictionaries%3A%20%28poolVarNames%20isString%0D%09%09ifTrue%3A%20%5B%20poolVarNames%20asArrayOfSubstrings%20%5D%0D%09%09ifFalse%3A%20%5B%20poolVarNames%20%5D%29."));
smalltalk.bind(smalltalk.Class, unescape("subclass%3AinstanceVariableNames%3A"), "subclass_instanceVariableNames_", function Class__subclass_instanceVariableNames_(aString,anotherString){
const self = this; return self.subclass_instanceVariableNames_category_(aString,anotherString,nil);
}
, "instantiation", unescape("subclass%3A%20aString%20instanceVariableNames%3A%20anotherString%0D%09%22%20Create%20a%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20anotherString%0D%09%09category%3A%20nil"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3Acategory%3A"), "subclass_category_", function Class__subclass_category_(aString,aCategory){
const self = this; return self.subclass_instanceVariableNames_category_(aString,"",aCategory);
}
, "instantiation", unescape("subclass%3A%20aString%20category%3A%20aCategory%0D%09%22%20Create%20a%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20%27%27%0D%09%09category%3A%20aCategory"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3AinstanceVariableNames%3ApoolDictionaries%3Acategory%3A"), "subclass_instanceVariableNames_poolDictionaries_category_", function Class__subclass_instanceVariableNames_poolDictionaries_category_(aString,aString2,poolVarNames,aCategory){
const self = this; return self.subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(aString,aString2,"",poolVarNames,aCategory);
}
, "instantiation", unescape("subclass%3A%20aString%0DinstanceVariableNames%3A%20aString2%0DpoolDictionaries%3A%20poolVarNames%0Dcategory%3A%20aCategory%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%27%27%0D%09%09poolDictionaries%3A%20poolVarNames%0D%09%09category%3A%20aCategory"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3AinstanceVariableNames%3Acategory%3A"), "subclass_instanceVariableNames_category_", function Class__subclass_instanceVariableNames_category_(aString,aString2,aString3){
const self = this; return (smalltalk.ClassBuilder.$$new()).superclass_subclass_instanceVariableNames_category_(self,aString,aString2,aString3);
}
, "instantiation", unescape("subclass%3A%20aString%20instanceVariableNames%3A%20aString2%20category%3A%20aString3%0D%09%22%20Create%20a%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5EClassBuilder%20new%0D%09%09superclass%3A%20self%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09category%3A%20aString3"));
smalltalk.bind(smalltalk.Class, unescape("isClass"), "isClass", function Class__isClass(){
const self = this; return true;
}
, "testing", unescape("isClass%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20Class.%20%22%0D%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Class, unescape("printString"), "printString", function Class__printString(){
const self = this; return self.name();
}
, "printing", unescape("printString%0D%09%22%20Return%20a%20printable%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20name"));
smalltalk.bind(smalltalk.Class, unescape("instanceClass"), "instanceClass", function Class__instanceClass(){
const self = this; return self;
}
, "accessing", unescape("instanceClass%0D%09%22%20Return%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Class, unescape("rename%3A"), "rename_", function Class__rename_(aString){
const self = this; (self.smalltalk()).renameClass_to_(self,aString);
return self;
}
, "renaming", unescape("rename%3A%20aString%0D%09%22%20Rename%20the%20receiver%20to%20aString.%20%22%0D%0D%09self%20smalltalk%20renameClass%3A%20self%20to%3A%20aString"));
smalltalk.bind(smalltalk.Class, unescape("removeFromSystem"), "removeFromSystem", function Class__removeFromSystem(){
const self = this; (self.subclasses()).do_((function Class__(each){
return each.removeFromSystem();
}
));
(self.smalltalk()).removeClass_(self);
return self;
}
, "remove", unescape("removeFromSystem%0D%09%22%20Remove%20the%20receiver%20from%20system.%20%22%0D%0D%09self%20subclasses%20do%3A%20%5B%3Aeach%7C%20each%20removeFromSystem%20%5D.%0D%09self%20smalltalk%20removeClass%3A%20self"));
smalltalk.bind(smalltalk.Class, unescape("removeSources"), "removeSources", function Class__removeSources(){
const self = this; (self.$klass).methodsDo_((function Class__(each){
return each.removeSources();
}
));
self.methodsDo_((function Class__(each){
return each.removeSources();
}
));
(function Class__($1$){
$1$.comment_("");
return $1$.category_("scarlet")}
)(self);
return self;
}
, "tools", unescape("removeSources%0D%09%22%20Remove%20all%20development%20sources%20of%20the%20receiver.%20%22%0D%0D%09self%20class%20methodsDo%3A%20%5B%3Aeach%20%7C%20each%20removeSources%20%5D.%0D%09self%20methodsDo%3A%20%5B%3Aeach%20%7C%20each%20removeSources%20%5D.%0D%09self%20comment%3A%20%27%27%3B%20category%3A%20%23scarlet"));
smalltalk.addClass("Metaclass", smalltalk.Behavior, ['instanceClass'], 'Kernel');
smalltalk.Metaclass.$classVariableNames=("");
smalltalk.bind(smalltalk.Metaclass, unescape("instanceClass"), "instanceClass", function Metaclass__instanceClass(){
const self = this; return self['@instanceClass'];
}
, "accessing", unescape("instanceClass%0D%09%22%20Return%20the%20instance%20class%20of%20receiver.%20%22%0D%0D%09%5EinstanceClass"));
smalltalk.bind(smalltalk.Metaclass, unescape("instanceVariableNames%3A"), "instanceVariableNames_", function Metaclass__instanceVariableNames_(aCollection){
const self = this; (smalltalk.ClassBuilder.$$new()).class_instanceVariableNames_(self,aCollection);
return self;
}
, "accessing", unescape("instanceVariableNames%3A%20aCollection%0D%09%22%20Set%20the%20instance%20variable%20names%20of%20the%20receiver.%20%22%0D%0D%09ClassBuilder%20new%0D%09%09class%3A%20self%0D%09%09instanceVariableNames%3A%20aCollection"));
smalltalk.bind(smalltalk.Metaclass, unescape("isMetaclass"), "isMetaclass", function Metaclass__isMetaclass(){
const self = this; return true;
}
, "testing", unescape("isMetaclass%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20metaclass.%20%22%0D%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Metaclass, unescape("printString"), "printString", function Metaclass__printString(){
const self = this; return ((self.instanceClass()).name())._comma(" class");
}
, "printing", unescape("printString%0D%09%22%20Return%20a%20printable%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20instanceClass%20name%2C%20%27%20class%27"));
smalltalk.bind(smalltalk.Metaclass, unescape("poolDictionaries"), "poolDictionaries", function Metaclass__poolDictionaries(){
const self = this; return (self.instanceClass()).poolDictionaries();
}
, "accessing", unescape("poolDictionaries%0D%09%22%20Return%20the%20poolDictionaries%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20instanceClass%20poolDictionaries"));
smalltalk.bind(smalltalk.Metaclass, unescape("classVariables"), "classVariables", function Metaclass__classVariables(){
const self = this; return (self.instanceClass()).classVariables();
}
, "accessing", unescape("classVariables%0D%09%22%20Return%20the%20class%20variables%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20instanceClass%20classVariables"));
smalltalk.addClass("CompiledMethod", smalltalk.Object, ['classField'], 'Kernel');
smalltalk.CompiledMethod.$classVariableNames=("");
smalltalk.bind(smalltalk.CompiledMethod, unescape("source"), "source", function CompiledMethod__source(){
const self = this; return (function(){var $1$; $1$ = self["$source"]; return nil.isNil_($1$) ? "" : $1$})();
}
, "accessing", unescape("source%0D%09%22%20Return%20the%20source%20code%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24source%27%20ifAbsent%3A%20%5B%27%27%5D"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("source%3A"), "source_", function CompiledMethod__source_(aString){
const self = this; (self["$source"]=aString);
return self;
}
, "accessing", unescape("source%3A%20aString%0D%09%22%20Set%20the%20source%20code%20of%20the%20receiver.%20%22%0D%0D%09self%20basicAt%3A%20%27%24source%27%20put%3A%20aString"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("category"), "category", function CompiledMethod__category(){
const self = this; return (function(){var $1$; $1$ = self["$category"]; return nil.isNil_($1$) ? "" : $1$})();
}
, "accessing", unescape("category%0D%09%22%20Return%20the%20category%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24category%27%20ifAbsent%3A%20%5B%27%27%5D"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("category%3A"), "category_", function CompiledMethod__category_(aString){
const self = this; (self["$category"]=aString);
return self;
}
, "accessing", unescape("category%3A%20aString%0D%09%22%20Set%20the%20category%20of%20the%20receiver.%20%22%0D%0D%09self%20basicAt%3A%20%27%24category%27%20put%3A%20aString"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("selector"), "selector", function CompiledMethod__selector(){
const self = this; return (function(){var $1$; $1$ = self["$selector"]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("selector%0D%09%22%20Return%20the%20selector%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24selector%27"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("selector%3A"), "selector_", function CompiledMethod__selector_(aString){
const self = this; (self["$selector"]=aString);
return self;
}
, "accessing", unescape("selector%3A%20aString%0D%09%22%20Set%20the%20selector%20of%20the%20receiver.%20%22%0D%0D%09self%20basicAt%3A%20%27%24selector%27%20put%3A%20aString"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("fn"), "fn", function CompiledMethod__fn(){
const self = this; return (function(){var $1$; $1$ = self["$fn"]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("fn%0D%09%22%20Return%20the%20function%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24fn%27"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("fn%3A"), "fn_", function CompiledMethod__fn_(aBlock){
const self = this; (self["$fn"]=aBlock);
return self;
}
, "accessing", unescape("fn%3A%20aBlock%0D%09%22%20Set%20the%20function%20of%20the%20receiver.%20%22%0D%0D%09self%20basicAt%3A%20%27%24fn%27%20put%3A%20aBlock"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("classField"), "classField", function CompiledMethod__classField(){
const self = this; return self['@classField'];
}
, "accessing", unescape("classField%0D%09%22%20Return%20the%20implementor%20of%20the%20receiver.%20%22%0D%0D%09%5EclassField"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("classField%3A"), "classField_", function CompiledMethod__classField_(aClass){
const self = this; self['@classField']=aClass;
return self;
}
, "accessing", unescape("classField%3A%20aClass%0D%09%22%20Set%20the%20implementor%20of%20the%20receiver.%20%22%0D%0D%09classField%20%3A%3D%20aClass"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("generation"), "generation", function CompiledMethod__generation(){
const self = this; return (function(){var $1$; $1$ = self["$generation"]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("generation%0D%09%22%20Returns%20the%20generation%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27%24generation%27"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("comment"), "comment", function CompiledMethod__comment(){
const self = this; return (function CompiledMethod__($1$){
$1$.upTo_(unescape("%22"));
return $1$.upTo_(unescape("%22"))}
)((self.source()).stream()).trimBlanks();
}
, "accessing", unescape("comment%0D%09%22%20Return%20the%20comment%20of%20the%20receiver.%20%22%0D%0D%09%5E%28self%20source%20stream%20upTo%3A%20%24%22%3B%20upTo%3A%20%24%22%29%20trimBlanks"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("toString"), "toString", function CompiledMethod__toString(){
const self = this; return ((((nil.isNil_(self['@classField']))).ifTrue_ifFalse_((function CompiledMethod__(){
return self['@classField'].toString();
}
),(function CompiledMethod__(){
return self['@classField'].name();
}
)))._comma(unescape("%3E%3E%23")))._comma(((self.selector()).toString()));
}
, "printing", unescape("toString%0D%09%22%20Return%20the%20printable%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5E%28classField%20isNil%0D%09%09ifTrue%3A%20%5BclassField%20toString%5D%0D%09%09ifFalse%3A%20%5BclassField%20name%5D%29%0D%09%09%2C%27%3E%3E%23%27%20%2Cself%20selector%20toString"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("printString"), "printString", function CompiledMethod__printString(){
const self = this; return self.toString();
}
, "printing", unescape("printString%0D%09%22%20Return%20the%20printable%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20toString"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("asJSONObject"), "asJSONObject", function CompiledMethod__asJSONObject(){
const self = this; return self;
}
, "converting", unescape("asJSONObject%0D%09%22%20Return%20the%20mapping%20of%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("shallowCopy"), "shallowCopy", function CompiledMethod__shallowCopy(){
const self = this; return self;
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("deepCopy"), "deepCopy", function CompiledMethod__deepCopy(){
const self = this; return self;
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.CompiledMethod, unescape("removeSources"), "removeSources", function CompiledMethod__removeSources(){
const self = this; (function CompiledMethod__($1$){
$1$.source_("");
return $1$.category_("scarlet")}
)(self);
return self;
}
, "tools", unescape("removeSources%0D%09%22%20Remove%20all%20development%20sources%20of%20the%20receiver.%20%22%0D%0D%09self%20source%3A%20%27%27%3B%20category%3A%20%23scarlet"));
smalltalk.addClass("Number", smalltalk.Object, [], 'Kernel');
smalltalk.Number.$classVariableNames=("");
smalltalk.bind(smalltalk.Number, unescape("%3D"), "_eq", function Number___eq(anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primEquality(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return false;
}
, "comparing", unescape("%3D%20anObject%0D%20%20%20%20%22%20Return%20true%20if%20the%20receiver%20is%20equal%20to%20anObject.%20%22%0D%0D%09%3Cprimitive%3A%20%27primEquality%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Number, unescape("mustBeNumber"), "mustBeNumber", function Number__mustBeNumber(){
const self = this; self;
return self;
}
, "testing", unescape("mustBeNumber%0D%09%22%20Signal%20an%20error%20if%20the%20receiver%20is%20not%20a%20Number.%0D%09WARNING%3A%20this%20check%20impose%20a%20severe%20loss%20of%20perfomance%20%28five%20times%20slower%29.%0D%09If%20you%20are%20sure%20the%20operation/compare%20arguments%20are%20ok%20%28a%20number%29%2C%0D%09%20comment%20the%20implementation%20of%20this%20method%20making%20the%20code%20empty.%0D%09%22%0D%0D%09%22self%20isNaN%20ifTrue%3A%20%5B%20super%20mustBeNumber%20%5D%22"));
smalltalk.bind(smalltalk.Object, unescape("mustBeNumber"), "mustBeNumber", function Object__mustBeNumber(){
const self = this; return self.error_("Must be a Number.");
}
, "testing", unescape("mustBeNumber%0D%09%22%20Signal%20an%20error%20if%20the%20receiver%20is%20not%20a%20Number.%20%22%0D%0D%09%5Eself%20error%3A%20%27Must%20be%20a%20Number.%27"));
smalltalk.bind(smalltalk.Number, unescape("%3E"), "_gt", function Number___gt(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primGreaterThan(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a Number.");
}
, "comparing", unescape("%3E%20aNumber%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20greater%20to%20aNumber.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGreaterThan%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Must%20be%20a%20Number.%27%20"));
smalltalk.bind(smalltalk.Number, unescape("%3C"), "_lt", function Number___lt(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primLessThan(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.errror_("Must be a Number.");
}
, "comparing", unescape("%3C%20aNumber%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20smaller%20to%20aNumber.%20%22%0D%0D%09%3Cprimitive%3A%20%27primLessThan%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20errror%3A%20%27Must%20be%20a%20Number.%27%20"));
smalltalk.bind(smalltalk.Number, unescape("%3E%3D"), "_gt_eq", function Number___gt_eq(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primGreaterThanEqualTo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a Number.");
}
, "comparing", unescape("%3E%3D%20aNumber%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20greater%20or%20equal%20to%20aNumber.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGreaterThanEqualTo%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Must%20be%20a%20Number.%27%20"));
smalltalk.bind(smalltalk.Number, unescape("%3C%3D"), "_lt_eq", function Number___lt_eq(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primLessThanEqualTo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a Number.");
}
, "comparing", unescape("%3C%3D%20aNumber%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20smaller%20or%20equal%20to%20aNumber.%20%22%0D%0D%09%3Cprimitive%3A%20%27primLessThanEqualTo%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Must%20be%20a%20Number.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("sign"), "sign", function Number__sign(){
const self = this; if ((self.strictlyPositive()).valueOf()) {return (1)};
if ((self.negative()).valueOf()) {return (-1)};
return (0);
}
, "accessing", unescape("sign%0D%09%22Return%201%20if%20the%20receiver%20is%20%3E%200.%0D%09Return%200%20if%20the%20receiver%20is%200.%0D%09Return%20-1%20if%20the%20receiver%20is%20%3C%200.%22%0D%0D%09self%20strictlyPositive%0D%09%09ifTrue%3A%20%5B%5E1%5D.%0D%09self%20negative%0D%09%09ifTrue%3A%20%5B%5E-1%5D.%0D%09%5E0"));
smalltalk.bind(smalltalk.Number, unescape("+"), "_plus", function Number___plus(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primAddition(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a Number.");
}
, "arithmetic", unescape("+%20aNumber%0D%09%22%20Return%20the%20result%20of%20operation%20on%20receiver%20and%20aNumber.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAddition%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Must%20be%20a%20Number.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("-"), "_minus", function Number___minus(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primSubtraction(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a Number.");
}
, "arithmetic", unescape("-%20aNumber%0D%09%22%20Return%20the%20result%20of%20operation%20on%20receiver%20and%20aNumber.%20%22%0D%0D%09%3Cprimitive%3A%20%27primSubtraction%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Must%20be%20a%20Number.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("*"), "_star", function Number___star(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primMultiplication(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a Number.");
}
, "arithmetic", unescape("*%20aNumber%0D%09%22%20Return%20the%20result%20of%20operation%20on%20receiver%20and%20aNumber.%20%22%0D%0D%09%3Cprimitive%3A%20%27primMultiplication%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Must%20be%20a%20Number.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("/"), "_slash", function Number___slash(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primDivide(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a Number");
}
, "arithmetic", unescape("/%20aNumber%0D%09%22%20Return%20the%20result%20of%20operation%20on%20receiver%20and%20aNumber.%20%22%0D%0D%09%3Cprimitive%3A%20%27primDivide%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Must%20be%20a%20Number%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("divideByZero"), "divideByZero", function Number__divideByZero(){
const self = this; return self.error_("Divide by Zero");
}
, "signaling", unescape("divideByZero%0D%09%22%20Signal%20divide%20by%20cero%20attempt.%20%22%0D%0D%09%5Eself%20error%3A%20%27Divide%20by%20Zero%27"));
smalltalk.bind(smalltalk.Number, unescape("%5C%5C"), "_bk_bk", function Number___bk_bk(aNumber){
const self = this; aNumber.mustBeNumber();
if ((aNumber._eq((0))).valueOf()) {self.divideByZero()};
return self._minus(((self._slash_slash(aNumber))._star(aNumber)));
}
, "arithmetic", unescape("%5C%5C%20aNumber%0D%09%22%20Return%20the%20reminder%20of%20dividing%20the%20receiver%20by%20aNumber.%20%22%0D%0D%09aNumber%20mustBeNumber.%0D%09aNumber%20%3D%200%20ifTrue%3A%20%5B%20self%20divideByZero%20%5D.%0D%09%5Eself%20-%20%28self%20//%20aNumber%20*%20aNumber%29"));
smalltalk.bind(smalltalk.Number, unescape("//"), "_slash_slash", function Number___slash_slash(aNumber){
const self = this; aNumber.mustBeNumber();
if ((aNumber._eq((0))).valueOf()) {self.divideByZero()};
return (self._slash(aNumber)).floor();
}
, "arithmetic", unescape("//%20aNumber%0D%09%22%20Return%20the%20result%20of%20operation%20on%20receiver%20and%20aNumber.%20%22%0D%0D%09aNumber%20mustBeNumber.%0D%09aNumber%20%3D%200%20ifTrue%3A%20%5B%20self%20divideByZero%20%5D.%0D%09%5E%28self%20/%20aNumber%29%20floor"));
smalltalk.bind(smalltalk.Number, unescape("sin"), "sin", function Number__sin(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primSin(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "arithmetic", unescape("sin%0D%0D%09%3Cprimitive%3A%20%27primSin%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Number, unescape("cos"), "cos", function Number__cos(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primCos(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "arithmetic", unescape("cos%0D%0D%09%3Cprimitive%3A%20%27primCos%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Number, unescape("tan"), "tan", function Number__tan(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primTan(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "arithmetic", unescape("tan%0D%0D%09%3Cprimitive%3A%20%27primTan%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Number, unescape("atan2%3A"), "atan2_", function Number__atan2_(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primAtan2(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Argument must be a Number.");
}
, "arithmetic", unescape("atan2%3A%20aNumber%0D%0D%09%3Cprimitive%3A%20%27primAtan2%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Argument%20must%20be%20a%20Number.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("arcTan"), "arcTan", function Number__arcTan(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primArctan(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "arithmetic", unescape("arcTan%0D%0D%09%3Cprimitive%3A%20%27primArctan%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Number, unescape("arcSin"), "arcSin", function Number__arcSin(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primArcsin(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "arithmetic", unescape("arcSin%0D%0D%09%3Cprimitive%3A%20%27primArcsin%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Number, unescape("arcCos"), "arcCos", function Number__arcCos(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primArccos(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "arithmetic", unescape("arcCos%0D%0D%09%3Cprimitive%3A%20%27primArccos%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Number, unescape("negated"), "negated", function Number__negated(){
const self = this; return (-1)._star(self);
}
, "arithmetic", unescape("negated%0D%09%5E-1%20*%20self%20"));
smalltalk.bind(smalltalk.Number, unescape("squared"), "squared", function Number__squared(){
const self = this; return self._star(self);
}
, "arithmetic", unescape("squared%0D%09%5Eself%20*%20self%20"));
smalltalk.bind(smalltalk.Number, unescape("sqrt"), "sqrt", function Number__sqrt(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primSqrt(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a positive number.");
}
, "arithmetic", unescape("sqrt%0D%0D%09%3Cprimitive%3A%20%27primSqrt%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%27Must%20be%20a%20positive%20number.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("%3C%3C"), "_lt_lt", function Number___lt_lt(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primBitShiftLeft(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a Number.");
}
, "arithmetic", unescape("%3C%3C%20aNumber%0D%09%22%20Return%20the%20receiver%20shifted%20aNumber%20of%20bits%20to%20the%20left.%20%22%0D%0D%09%3Cprimitive%3A%20%27primBitShiftLeft%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%27Must%20be%20a%20Number.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("%3E%3E"), "_gt_gt", function Number___gt_gt(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primBitShiftRight(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a Number.");
}
, "arithmetic", unescape("%3E%3E%20aNumber%0D%09%22%20Return%20the%20receiver%20shifted%20aNumber%20of%20bits%20to%20the%20right.%20%22%0D%0D%09%3Cprimitive%3A%20%27primBitShiftRight%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Must%20be%20a%20Number.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("bitShift%3A"), "bitShift_", function Number__bitShift_(anInteger){
const self = this; if ((anInteger._lt((0))).valueOf()) {return self._gt_gt((anInteger.negated()))};
return self._lt_lt(anInteger);
}
, "arithmetic", unescape("bitShift%3A%20anInteger%0D%09%22%20Return%20the%20receiver%20shifted%20left%20anInteger%20number%20of%20bits%20if%20anInteger%20is%20positive%2C%20or%20shifted%20right%20for%20anInteger%20negated%20number%20of%20bits%20if%20anInteger%20is%20negative.%22%0D%0D%09anInteger%20%3C%200%20ifTrue%3A%20%5B%20%5Eself%20%3E%3E%20anInteger%20negated%20%5D.%0D%09%5Eself%20%3C%3C%20anInteger"));
smalltalk.bind(smalltalk.Number, unescape("max%3A"), "max_", function Number__max_(aNumber){
const self = this; if ((self._gt(aNumber)).valueOf()) {return self} else {return aNumber};
}
, "arithmetic", unescape("max%3A%20aNumber%0D%09%22%20Return%20the%20result%20of%20operation%20on%20receiver%20and%20aNumber.%20%22%0D%0D%09%5Eself%20%3E%20aNumber%0D%09%09ifTrue%3A%5Bself%5D%0D%09%09ifFalse%3A%5BaNumber%5D.%20"));
smalltalk.bind(smalltalk.Number, unescape("min%3A"), "min_", function Number__min_(aNumber){
const self = this; if ((self._lt(aNumber)).valueOf()) {return self} else {return aNumber};
}
, "arithmetic", unescape("min%3A%20aNumber%0D%09%22%20Return%20the%20result%20of%20operation%20on%20receiver%20and%20aNumber.%20%22%0D%0D%09%5Eself%20%3C%20aNumber%0D%09%09ifTrue%3A%5Bself%5D%0D%09%09ifFalse%3A%5BaNumber%5D.%20"));
smalltalk.bind(smalltalk.Number, unescape("truncated"), "truncated", function Number__truncated(){
const self = this; if ((self.negative()).valueOf()) {return self.ceiling()} else {return self.floor()};
}
, "arithmetic", unescape("truncated%0D%09%22%20Return%20the%20receiver%20truncated.%20%22%0D%0D%09%5Eself%20negative%0D%09%09ifTrue%3A%20%5Bself%20ceiling%5D%0D%09%09ifFalse%3A%20%5Bself%20floor%5D"));
smalltalk.bind(smalltalk.Number, unescape("ln"), "ln", function Number__ln(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primLn(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a positive Number.");
}
, "arithmetic", unescape("ln%0D%09%22Return%20the%20natural%20log%20of%20the%20receiver%22%0D%0D%09%3Cprimitive%3A%20%27primLn%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Must%20be%20a%20positive%20Number.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("log%3A"), "log_", function Number__log_(aBaseNumber){
const self = this; return (self.ln())._slash((aBaseNumber.ln()));
}
, "arithmetic", unescape("log%3A%20aBaseNumber%0D%09%22Return%20the%20log%20of%20the%20receiver%20in%20the%20provided%20base.%22%0D%0D%09%5Eself%20ln%20/%20aBaseNumber%20ln"));
smalltalk.bind(smalltalk.Number, unescape("floor"), "floor", function Number__floor(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primFloor(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a Number.");
}
, "arithmetic", unescape("floor%0D%09%22Return%20the%20largest%20integer%20less%20than%20or%20equal%20to%20the%20receiver.%22%0D%0D%09%3Cprimitive%3A%20%27primFloor%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Must%20be%20a%20Number.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("ceiling"), "ceiling", function Number__ceiling(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primCeiling(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a Number.");
}
, "arithmetic", unescape("ceiling%0D%09%22Return%20the%20smallest%20integer%20greater%20than%20or%20equal%20to%20the%20receiver.%22%0D%0D%09%3Cprimitive%3A%20%27primCeiling%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Must%20be%20a%20Number.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("raisedTo%3A"), "raisedTo_", function Number__raisedTo_(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primRaisedTo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Must be a Number.");
}
, "arithmetic", unescape("raisedTo%3A%20aNumber%0D%09%22Raise%20the%20receiver%20to%20the%20power%20of%20aNumber.%22%0D%0D%09%3Cprimitive%3A%20%27primRaisedTo%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%27Must%20be%20a%20Number.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("bitAt%3A"), "bitAt_", function Number__bitAt_(anInteger){
const self = this; if (((1)._gt(anInteger)).valueOf()) {self.error_("bitAt: index must be greater than zero")};
if ((self._gt_eq((0))).valueOf()) {return (1).bitAnd_((self.bitShift_(((1)._minus(anInteger)))))} else {return (1)._minus(((1).bitAnd_(((self.bitInvert()).bitShift_(((1)._minus(anInteger)))))))};
}
, "bit operations", unescape("bitAt%3A%20anInteger%0D%09%09%22Answer%200%20if%20the%20bit%20at%20index%20position%20anInteger%0D%09%09%20in%20the%20receiver%20is%200%2C%20else%20answer%201.%22%0D%091%20%3E%20anInteger%0D%09%09ifTrue%3A%20%5B%20self%20error%3A%20%27bitAt%3A%20index%20must%20be%20greater%20than%20zero%27%20%5D.%0D%09%5Eself%20%3E%3D%200%0D%09%09ifTrue%3A%20%5B%201%20bitAnd%3A%20%28%20self%20bitShift%3A%201%20-%20anInteger%20%29%20%5D%0D%09%09ifFalse%3A%20%5B%201%20-%20%28%201%20bitAnd%3A%20%28%20self%20bitInvert%20bitShift%3A%201%20-%20anInteger%20%29%20%29%20%5D"));
smalltalk.bind(smalltalk.Number, unescape("bitInvert"), "bitInvert", function Number__bitInvert(){
const self = this; return (-1)._minus(self);
}
, "bit operations", unescape("bitInvert%0D%09%22Invert%20the%20bits%20of%20the%20receiver%22%0D%0D%09%5E%20-1%20-%20self"));
smalltalk.bind(smalltalk.Number, unescape("bitAnd%3A"), "bitAnd_", function Number__bitAnd_(anInteger){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primBitAnd(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Argument and Receiver must be an integer.");
}
, "bit operations", unescape("bitAnd%3A%20anInteger%0D%09%22Bit%20and%20the%20receiver%20and%20the%20argument.%22%0D%0D%09%3Cprimitive%3A%20%27primBitAnd%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Argument%20and%20Receiver%20must%20be%20an%20integer.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("bitOr%3A"), "bitOr_", function Number__bitOr_(anInteger){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primBitOr(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Argument and Receiver must be an integer.");
}
, "bit operations", unescape("bitOr%3A%20anInteger%0D%09%22Bit%20or%20the%20receiver%20and%20the%20argument.%22%0D%0D%09%3Cprimitive%3A%20%27primBitOr%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Argument%20and%20Receiver%20must%20be%20an%20integer.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("bitXor%3A"), "bitXor_", function Number__bitXor_(anInteger){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primBitXor(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.error_("Argument and Receiver must be an integer.");
}
, "bit operations", unescape("bitXor%3A%20anInteger%0D%09%22Exclusive%20or%20the%20receiver%20with%20the%20argument.%22%0D%0D%09%3Cprimitive%3A%27primBitXor%27%20module%3A%27SKNumber%27%3E%0D%09%5Eself%20error%3A%20%27Argument%20and%20Receiver%20must%20be%20an%20integer.%27.%20"));
smalltalk.bind(smalltalk.Number, unescape("%26"), "_amp", function Number___amp(anInteger){
const self = this; return self.bitAnd_(anInteger);
}
, "bit operations", unescape("%26%20anInteger%0D%09%22Bit%20and%20the%20receiver%20and%20the%20argument.%22%0D%0D%09%5Eself%20bitAnd%3A%20anInteger"));
smalltalk.bind(smalltalk.Number, unescape("asNumber"), "asNumber", function Number__asNumber(){
const self = this; return self._plus((0));
}
, "converting", unescape("asNumber%0D%09%22%20Return%20the%20receiver%20as%20a%20Number.%20%22%0D%0D%09%5Eself%20+%200"));
smalltalk.bind(smalltalk.Number, unescape("abs"), "abs", function Number__abs(){
const self = this; if ((self._lt((0))).valueOf()) {return self.negated()};
return self;
}
, "converting", unescape("abs%0D%09%22%20Return%20the%20absolute%20value%20of%20the%20receiver.%20%22%0D%0D%09self%20%3C%200%20ifTrue%3A%20%5B%20%5Eself%20negated%20%5D.%0D%09%5Eself"));
smalltalk.bind(smalltalk.Number, unescape("rounded"), "rounded", function Number__rounded(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primRounded(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("rounded%0D%09%22%20Return%20the%20receiver%20rounded.%20%22%0D%0D%09%3Cprimitive%3A%20%27primRounded%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Number, unescape("asCharacter"), "asCharacter", function Number__asCharacter(){
const self = this; return smalltalk.String.fromCharCode_(self);
}
, "converting", unescape("asCharacter%0D%09%22%20Return%20the%20character%20with%20the%20receiver%27s%20code.%20%22%0D%0D%09%5EString%20fromCharCode%3A%20self"));
smalltalk.bind(smalltalk.Number, unescape("to%3A"), "to_", function Number__to_(aNumber){
const self = this; return smalltalk.Interval.from_to_(self,aNumber);
}
, "converting", unescape("to%3A%20aNumber%0D%09%22%20Return%20a%20collection%20of%20numbers%20from%20the%20receiver%20to%20aNumber.%20%22%0D%0D%09%5EInterval%20from%3A%20self%20to%3A%20aNumber%20"));
smalltalk.bind(smalltalk.Number, unescape("to%3Aby%3A"), "to_by_", function Number__to_by_(aNumber,anotherNumber){
const self = this; return smalltalk.Interval.from_to_by_(self,aNumber,anotherNumber);
}
, "converting", unescape("to%3A%20aNumber%20by%3A%20anotherNumber%0D%0D%09%5EInterval%20from%3A%20self%20to%3A%20aNumber%20by%3A%20anotherNumber%20"));
smalltalk.bind(smalltalk.Number, unescape("timesRepeat%3A"), "timesRepeat_", function Number__timesRepeat_(aBlock){
var count = nil;
const self = this; if (((aBlock.argumentCount())._eq((1))).valueOf()) {return (1).to_do_(self,aBlock)};
count=(1);
while((count._gt(self)).not()){aBlock.value();
count=count._plus((1))};;
return self;
}
, "enumerating", unescape("timesRepeat%3A%20aBlock%0D%09%22%20Evaluates%20aBlock%20a%20number%20of%20times%20given%20by%20the%20receiver.%0D%09Return%20the%20receiver.%0D%09%22%0D%0D%09%7C%20count%20%7C%0D%09aBlock%20argumentCount%20%3D%201%20ifTrue%3A%20%5B%0D%09%09%5E1%20to%3A%20self%20do%3A%20aBlock%0D%09%5D.%0D%09count%20%3A%3D%201.%0D%09%5B%20count%20%3E%20self%20%5D%20whileFalse%3A%20%5B%0D%09%09aBlock%20value.%0D%09%09count%20%3A%3D%20count%20+%201%0D%09%5D"));
smalltalk.bind(smalltalk.Number, unescape("to%3Ado%3A"), "to_do_", function Number__to_do_(aNumber,aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primToDo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "iterating", unescape("to%3A%20aNumber%20do%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20from%20the%20receiver%20to%20aNumber.%0D%09Return%20the%20receiver.%22%0D%0D%09%3Cprimitive%3A%20%27primToDo%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Number, unescape("to%3Aby%3Ado%3A"), "to_by_do_", function Number__to_by_do_(aNumber,increment,aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primToByDo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "iterating", unescape("to%3A%20aNumber%20by%3A%20increment%20do%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20for%20the%20numbers%20between%20the%20receiver%20and%20aNumber%20where%20each%20number%20is%20the%20previous%20number%20plus%20increment.%0D%09Return%20the%20receiver.%22%0D%0D%09%3Cprimitive%3A%20%27primToByDo%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Number, unescape("asString"), "asString", function Number__asString(){
const self = this; return self.toString();
}
, "converting", unescape("asString%0D%09%22%20Return%20the%20text%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20toString"));
smalltalk.bind(smalltalk.Number, unescape("asJavascript"), "asJavascript", function Number__asJavascript(){
const self = this; return (unescape("%28")._comma((self.printString())))._comma(unescape("%29"));
}
, "converting", unescape("asJavascript%0D%09%22%20Return%20the%20javascript%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5E%27%28%27%2C%20self%20printString%2C%20%27%29%27"));
smalltalk.bind(smalltalk.Number, unescape("printOn%3A"), "printOn_", function Number__printOn_(aStream){
const self = this; aStream.nextPutAll_((self.asString()));
return self;
}
, "printing", unescape("printOn%3A%20aStream%0D%09%22Print%20the%20receiver%20on%20aStream%20in%20base%2010.%22%0D%0D%09aStream%20nextPutAll%3A%20self%20asString"));
smalltalk.bind(smalltalk.Number, unescape("isNumber"), "isNumber", function Number__isNumber(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primIsNumber(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return false;
}
, "testing", unescape("isNumber%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20number.%20%22%0D%0D%09%3Cprimitive%3A%20%27primIsNumber%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Efalse.%20"));
smalltalk.bind(smalltalk.Number, unescape("atRandom"), "atRandom", function Number__atRandom(){
const self = this; return ((((smalltalk.Random.$$new()).next())._star(self)).truncated())._plus((1));
}
, "converting", unescape("atRandom%0D%09%22%20Return%20a%20random%20integer%20in%20the%20interval%20from%201%20to%20the%20receiver.%20%22%0D%0D%09%5E%28Random%20new%20next%20*%20self%29%20truncated%20+%201"));
smalltalk.bind(smalltalk.Number, unescape("@"), "_at", function Number___at(aNumber){
const self = this; return smalltalk.Point.x_y_(self,(((nil.isNil_(aNumber))).ifTrue_ifFalse_((function Number__(){
return (0);
}
),(function Number__(){
return aNumber;
}
))));
}
, "converting", unescape("@%20aNumber%0D%09%22%20Return%20a%20Point%20with%20coordinates%20given%20by%20the%20receiver%20and%20aNumber.%20%22%0D%0D%09%5EPoint%20x%3A%20self%20y%3A%20%28aNumber%20isNil%20ifTrue%3A%20%5B0%5D%20ifFalse%3A%20%5BaNumber%5D%29"));
smalltalk.bind(smalltalk.Number, unescape("asPoint"), "asPoint", function Number__asPoint(){
const self = this; return smalltalk.Point.x_y_(self,self);
}
, "converting", unescape("asPoint%0D%09%22%20Return%20a%20Point%20with%20both%20coordinates%20given%20by%20the%20receiver.%20%22%0D%0D%09%5EPoint%20x%3A%20self%20y%3A%20self"));
smalltalk.bind(smalltalk.Number, unescape("asJSONObject"), "asJSONObject", function Number__asJSONObject(){
const self = this; return self._plus((0));
}
, "converting", unescape("asJSONObject%0D%09%22%20Return%20the%20mapping%20of%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%5Eself%20+%200%0D%22Note%3A%09we%20need%20to%20normalize%20result%20to%20do%20not%20destroy%20typeof%20checkings%0D%09Do%20NOT%20modify%20this%20method%20if%20you%20do%20not%20know%20what%20you%20are%20doing.%0D%09If%20you%20remove%20the%20+%200%20computation%2C%20the%20returned%20object%20will%20return%20%27object%27%20and%20not%20%27number%27%20as%20result%20of%20typeof%20operation.%0D%22"));
smalltalk.bind(smalltalk.Number, unescape("asInteger"), "asInteger", function Number__asInteger(){
const self = this; return self.rounded();
}
, "converting", unescape("asInteger%0D%09%22%20Return%20the%20receiver%20as%20an%20Integer.%20%22%0D%0D%09%5Eself%20rounded"));
smalltalk.bind(smalltalk.Number, unescape("between%3Aand%3A"), "between_and_", function Number__between_and_(min,max){
const self = this; return (min._lt_eq(self)).and_((function Number__(){
return self._lt_eq(max);
}
));
}
, "testing", unescape("between%3A%20min%20and%3A%20max%0D%09%22%20Answer%20true%20if%20the%20receiver%20is%20greater%20than%20or%20equal%20to%20min%20and%20less%20than%20or%20equal%20to%20max%2C%20else%20answer%20false.%20%22%0D%0D%09%5Emin%20%3C%3D%20self%20and%3A%20%5B%20self%20%3C%3D%20max%20%5D"));
smalltalk.bind(smalltalk.Number, unescape("even"), "even", function Number__even(){
const self = this; return (self._bk_bk((2)))._eq((0));
}
, "testing", unescape("even%0D%09%22%20Answer%20true%20if%20the%20receiver%20is%20an%20even%20number.%20%22%0D%0D%09%5Eself%20%5C%5C%202%20%3D%200"));
smalltalk.bind(smalltalk.Number, unescape("odd"), "odd", function Number__odd(){
const self = this; return (self._bk_bk((2)))._eq((1));
}
, "testing", unescape("odd%0D%09%22%20Answer%20true%20if%20the%20receiver%20is%20an%20odd%20number.%20%22%0D%0D%09%5Eself%20%5C%5C%202%20%3D%201"));
smalltalk.bind(smalltalk.Number, unescape("negative"), "negative", function Number__negative(){
const self = this; return self._lt((0));
}
, "testing", unescape("negative%0D%09%22Return%20if%20the%20receiver%20is%20negative.%22%0D%0D%09%5Eself%20%3C%200"));
smalltalk.bind(smalltalk.Number, unescape("shallowCopy"), "shallowCopy", function Number__shallowCopy(){
const self = this; return self;
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Number, unescape("deepCopy"), "deepCopy", function Number__deepCopy(){
const self = this; return self;
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Number.$klass, unescape("pi"), "pi", function Number_class__pi(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primPi(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "instantiation", unescape("pi%0D%09%22%20Return%20the%20singular%20value%20PI.%20%22%0D%0D%09%3Cprimitive%3A%20%27primPi%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Number.$klass, unescape("readFrom%3Aradix%3A"), "readFrom_radix_", function Number_class__readFrom_radix_(aStringOrStream,radix){
var readStream = nil;
var value = nil;
var $$char = nil;
const self = this; var $early={name:"stReturn"};
try {
readStream=aStringOrStream.asStream();
value=(0);
while(((function Number_class__(){
$$char=readStream.peek();
return ((nil.isNil_($$char)===false)).and_((function Number_class__(){
return ($$char.isDigit()).or_((function Number_class__(){
return $$char.isUpperCase();
}
));
}
));
}
)()).valueOf()){if ((radix._lt(($$char.digitValue()))).valueOf()) {$early.result=value; throw ($early)};
value=(value._star(radix))._plus(($$char.digitValue()));
readStream.next()};;
return value;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "converting", unescape("readFrom%3A%20aStringOrStream%20radix%3A%20radix%0D%09%22%20Private%20-%20Read%20an%20integer%20from%20%3CaStream%3E%20and%20return%20it.%20%22%0D%0D%09%7C%20readStream%20value%20char%20%7C%0D%09readStream%20%3A%3D%20aStringOrStream%20asStream.%0D%09value%20%3A%3D%200.%0D%09%5B%09char%20%3A%3D%20readStream%20peek.%0D%09%09char%20notNil%20and%3A%20%5B%20char%20isDigit%20or%3A%20%5B%20char%20isUpperCase%20%5D%20%5D%0D%09%5D%20whileTrue%3A%20%5B%0D%09%09radix%20%3C%20%20char%20digitValue%20ifTrue%3A%20%5B%20%5Evalue%20%5D.%0D%09%09value%20%3A%3D%20value%20*%20radix%20+%20char%20digitValue.%0D%09%09readStream%20next%0D%09%5D.%0D%09%5Evalue"));
smalltalk.bind(smalltalk.Number.$klass, unescape("readFrom%3A"), "readFrom_", function Number_class__readFrom_(aStringOrStream){
var readStream = nil;
var value = nil;
var $$char = nil;
const self = this; readStream=aStringOrStream.asStream();
value=(0);
while(((function Number_class__(){
$$char=readStream.peek();
return ((nil.isNil_($$char)===false)).and_((function Number_class__(){
return $$char.isDigit();
}
));
}
)()).valueOf()){value=(value._star((10)))._plus(($$char.digitValue()));
readStream.next()};;
if (((nil.is_eqeq_($$char,"r"))).not()) {return value};
readStream.next();
return self.readFrom_radix_(readStream,value);
}
, "converting", unescape("readFrom%3A%20aStringOrStream%0D%09%22%20Private%20-%20Read%20an%20integer%20from%20%3CaStream%3E%20and%20return%20it.%20%22%0D%0D%09%7C%20readStream%20value%20char%20%7C%0D%09readStream%20%3A%3D%20aStringOrStream%20asStream.%0D%09value%20%3A%3D%200.%0D%09%5B%09char%20%3A%3D%20readStream%20peek.%0D%09%09char%20notNil%20and%3A%20%5B%20char%20isDigit%20%5D%0D%09%5D%20whileTrue%3A%20%5B%0D%09%09value%20%3A%3D%20value%20*%2010%20+%20char%20digitValue.%0D%09%09readStream%20next%0D%09%5D.%0D%09char%20%3D%3D%20%22%24r%22%27r%27%20ifFalse%3A%20%5B%20%5Evalue%20%5D.%0D%09readStream%20next.%20%22skip%20the%20r%22%0D%09%5Eself%20readFrom%3A%20readStream%20radix%3A%20value"));
smalltalk.addClass("BlockClosure", smalltalk.Object, [], 'Kernel');
smalltalk.BlockClosure.$classVariableNames=("");
smalltalk.bind(smalltalk.BlockClosure, unescape("compiledSource"), "compiledSource", function BlockClosure__compiledSource(){
const self = this; return self.toString();
}
, "accessing", unescape("compiledSource%0D%09%22%20Return%20the%20source%20code%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20toString"));
smalltalk.bind(smalltalk.BlockClosure, unescape("isBlock"), "isBlock", function BlockClosure__isBlock(){
const self = this; return true;
}
, "accesssing", unescape("isBlock%0D%0D%09%5E%20true%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("whileTrue%3A"), "whileTrue_", function BlockClosure__whileTrue_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBlockClosure.primWhileTrue(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if ((self.isBlock()).not()) {return self.error_("Argument must be a Block")};
return self.primitiveFailed();
}
, "iterating", unescape("whileTrue%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20while%20the%20result%20of%20evaluating%20the%20receiver%20is%20true.%20%22%0D%0D%09%3Cprimitive%3A%20%27primWhileTrue%27%20module%3A%20%27SKBlockClosure%27%3E%0D%09self%20isBlock%0D%09%09ifFalse%3A%20%5B%5Eself%20error%3A%20%27Argument%20must%20be%20a%20Block%27%5D.%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("whileFalse%3A"), "whileFalse_", function BlockClosure__whileFalse_(aBlock){
const self = this; while(((self.value()).not()).valueOf()){aBlock.value()};;
return nil;
}
, "iterating", unescape("whileFalse%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20while%20the%20result%20of%20evaluating%20the%20receiver%20is%20false.%20%22%0D%09%5Bself%20value%20not%5D%20whileTrue%3A%20aBlock.%0D%09%5Enil.%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("value"), "value", function BlockClosure__value(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBlockClosure.primValue(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "evaluating", unescape("value%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primValue%27%20module%3A%20%27SKBlockClosure%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("value%3A"), "value_", function BlockClosure__value_(anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBlockClosure.primValueWith(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "evaluating", unescape("value%3A%20anObject%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver%20with%20anObject.%20%22%0D%0D%09%3Cprimitive%3A%20%27primValueWith%27%20module%3A%20%27SKBlockClosure%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("value%3Avalue%3A"), "value_value_", function BlockClosure__value_value_(firstArgument,secondArgument){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBlockClosure.primValueWith2Objects(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "evaluating", unescape("value%3A%20firstArgument%20value%3A%20secondArgument%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver%20with%20arguments.%20%22%0D%0D%09%3Cprimitive%3A%20%27primValueWith2Objects%27%20module%3A%20%27SKBlockClosure%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("value%3Avalue%3Avalue%3A"), "value_value_value_", function BlockClosure__value_value_value_(firstArgument,secondArgument,thirdArgument){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBlockClosure.primValueWith3Objects(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "evaluating", unescape("value%3A%20firstArgument%20value%3A%20secondArgument%20value%3A%20thirdArgument%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver%20with%20arguments.%20%22%0D%0D%09%3Cprimitive%3A%20%27primValueWith3Objects%27%20module%3A%20%27SKBlockClosure%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("value%3Avalue%3Avalue%3Avalue%3A"), "value_value_value_value_", function BlockClosure__value_value_value_value_(firstArgument,secondArgument,thirdArgument,fourthArgument){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBlockClosure.primValueWith4Objects(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "evaluating", unescape("value%3A%20firstArgument%20value%3A%20secondArgument%20value%3A%20thirdArgument%20value%3A%20fourthArgument%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver%20with%20arguments.%20%22%0D%0D%09%3Cprimitive%3A%20%27primValueWith4Objects%27%20module%3A%20%27SKBlockClosure%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("valueWithArguments%3A"), "valueWithArguments_", function BlockClosure__valueWithArguments_(aCollection){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBlockClosure.primValueWithArguments(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if ((aCollection.isArray()).not()) {return self.error_("aCollection must be an Array")};
if (((aCollection.argumentCount())._eq((self.argumentCount()))).not()) {return self.error_(((("Receiver requested "._comma(((self.argumentCount()).toString())))._comma(" Arguments given "))._comma(((aCollection.argumentCount()).toString()))))};
return self.primitiveFailed();
}
, "evaluating", unescape("valueWithArguments%3A%20aCollection%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver%20with%20potential%20arguments.%20%22%0D%0D%09%3Cprimitive%3A%27primValueWithArguments%27%20module%3A%27SKBlockClosure%27%3E%0D%09aCollection%20isArray%0D%09%09ifFalse%3A%20%5B%5Eself%20error%3A%27aCollection%20must%20be%20an%20Array%27%5D.%0D%09aCollection%20argumentCount%20%3D%20self%20argumentCount%0D%09%09ifFalse%3A%20%5B%5Eself%20error%3A%27Receiver%20requested%20%27%2Cself%20argumentCount%20toString%2C%27%20Arguments%20given%20%27%2C%20aCollection%20argumentCount%20toString%5D.%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("on%3Ado%3A"), "on_do_", function BlockClosure__on_do_(anExceptionType,aBlock){
const self = this; return self.try_catch_(self,(function BlockClosure__(error){
if (((smalltalk.is_kindOf_(error,anExceptionType))).valueOf()) {return aBlock.value_(error)} else {return error.signal()};
}
));
}
, "error", unescape("on%3A%20anExceptionType%20do%3A%20aBlock%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver%20catching%20exceptions.%20%22%0D%0D%09%5Eself%20try%3A%20self%20catch%3A%20%5B%3Aerror%20%7C%0D%09%09%28error%20isKindOf%3A%20anExceptionType%29%0D%09%09ifTrue%3A%20%5B%20aBlock%20value%3A%20error%20%5D%0D%09%09ifFalse%3A%20%5B%20error%20signal%20%5D%0D%09%5D"));
smalltalk.bind(smalltalk.BlockClosure, unescape("try%3Acatch%3A"), "try_catch_", function BlockClosure__try_catch_(aBlock,anotherBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBlockClosure.primTryCatch(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "private", unescape("try%3A%20aBlock%20catch%3A%20anotherBlock%0D%09%22%20Private%20-%20Try%20to%20evaluate%20aBlock%20catching%20exceptions%20with%20catchBlock.%20%22%0D%0D%09%3Cprimitive%3A%27primTryCatch%27%20module%3A%27SKBlockClosure%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("valueDeferred%3A"), "valueDeferred_", function BlockClosure__valueDeferred_(milliseconds){
const self = this; self.valueWithTimeout_(milliseconds);
return self;
}
, "evaluating", unescape("valueDeferred%3A%20milliseconds%0D%09%22%20Evaluate%20the%20receiver%20deferred%20in%20time.%0D%09Return%20the%20receiver.%22%0D%0D%09self%20valueWithTimeout%3A%20milliseconds"));
smalltalk.bind(smalltalk.BlockClosure, unescape("valueDeferred"), "valueDeferred", function BlockClosure__valueDeferred(){
const self = this; self.valueDeferred_((0));
return self;
}
, "evaluating", unescape("valueDeferred%0D%09%22%20Evaluate%20the%20receiver%20deferred%20in%20time.%0D%09Return%20the%20receiver.%22%0D%0D%09self%20valueDeferred%3A%200"));
smalltalk.bind(smalltalk.BlockClosure, unescape("ensure%3A"), "ensure_", function BlockClosure__ensure_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBlockClosure.primEnsure(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "error", unescape("ensure%3A%20aBlock%0D%09%22%20Returns%20the%20result%20of%20evaluating%20the%20receiver.%0D%09Execute%20aBlock%20after%20the%20receiver%20is%20executed.%22%0D%0D%09%3Cprimitive%3A%20%27primEnsure%27%20module%3A%20%27SKBlockClosure%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("argumentCount"), "argumentCount", function BlockClosure__argumentCount(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBlockClosure.primArgumentsCount(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "evaluating", unescape("argumentCount%0D%09%22%20Return%20the%20number%20of%20arguments%20defined%20by%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primArgumentsCount%27%20module%3A%20%27SKBlockClosure%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("installAs%3A"), "installAs_", function BlockClosure__installAs_(functionName){
const self = this; return ((smalltalk.Smalltalk.global())[functionName]=self);
}
, "installing", unescape("installAs%3A%20functionName%0D%09%22%20Install%20the%20receiver%20as%20a%20function%20in%20global%20scope.%20%22%0D%0D%09%5ESmalltalk%20global%20basicAt%3A%20functionName%20put%3A%20self"));
smalltalk.bind(smalltalk.BlockClosure, unescape("asJSONObject"), "asJSONObject", function BlockClosure__asJSONObject(){
const self = this; return self;
}
, "converting", unescape("asJSONObject%0D%09%22%20Return%20the%20mapping%20of%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.BlockClosure, unescape("shallowCopy"), "shallowCopy", function BlockClosure__shallowCopy(){
const self = this; return self;
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.BlockClosure, unescape("deepCopy"), "deepCopy", function BlockClosure__deepCopy(){
const self = this; return self;
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.addClass("Boolean", smalltalk.Object, [], 'Kernel');
smalltalk.Boolean.$classVariableNames=("");
smalltalk.bind(smalltalk.Boolean, unescape("%3D"), "_eq", function Boolean___eq(anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBoolean.primEquals(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "comparing", unescape("%3D%20anObject%0D%20%20%20%20%22%20Return%20true%20if%20the%20receiver%20is%20equal%20to%20anObject.%20%22%0D%0D%09%3Cprimitive%3A%20%27primEquals%27%20module%3A%20%27SKBoolean%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Boolean, unescape("yourself"), "yourself", function Boolean__yourself(){
const self = this; return self;
}
, "accessing", unescape("yourself%0D%09%5Eself"));
smalltalk.bind(smalltalk.Boolean, unescape("ifTrue%3A"), "ifTrue_", function Boolean__ifTrue_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBoolean.primIfTrue(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if ((aBlock.isBlock()).not()) {return self.error_("Argument must be a Block.")};
return self.primitiveFailed();
}
, "control", unescape("ifTrue%3A%20aBlock%0D%0D%09%3Cprimitive%3A%20%27primIfTrue%27%20module%3A%27SKBoolean%27%3E%0D%09aBlock%20isBlock%0D%09%09ifFalse%3A%5B%5Eself%20error%3A%27Argument%20must%20be%20a%20Block.%27%5D.%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Boolean, unescape("ifFalse%3A"), "ifFalse_", function Boolean__ifFalse_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBoolean.primIfFalse(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if ((aBlock.isBlock()).not()) {return self.error_("Argument must be a Block.")};
return self.primitiveFailed();
}
, "control", unescape("ifFalse%3A%20aBlock%0D%0D%09%3Cprimitive%3A%20%27primIfFalse%27%20module%3A%20%27SKBoolean%27%3E%0D%09aBlock%20isBlock%0D%09%09ifFalse%3A%5B%5Eself%20error%3A%27Argument%20must%20be%20a%20Block.%27%5D.%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Boolean, unescape("ifTrue%3AifFalse%3A"), "ifTrue_ifFalse_", function Boolean__ifTrue_ifFalse_(aBlock,anotherBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBoolean.primTrueFalse(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if ((aBlock.isBlock()).not()) {return self.error_("Argument must be a Block.")};
if ((anotherBlock.isBlock()).not()) {return self.error_("Argument must be a Block.")};
return self.primitiveFailed();
}
, "control", unescape("ifTrue%3A%20aBlock%0DifFalse%3A%20anotherBlock%0D%0D%09%3Cprimitive%3A%27primTrueFalse%27%20module%3A%27SKBoolean%27%3E%0D%09aBlock%20isBlock%0D%09%09ifFalse%3A%5B%5Eself%20error%3A%27Argument%20must%20be%20a%20Block.%27%5D.%0D%09anotherBlock%20isBlock%0D%09%09ifFalse%3A%5B%5Eself%20error%3A%27Argument%20must%20be%20a%20Block.%27%5D.%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Boolean, unescape("ifFalse%3AifTrue%3A"), "ifFalse_ifTrue_", function Boolean__ifFalse_ifTrue_(anotherBlock,aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBoolean.primFalseTrue(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if ((aBlock.isBlock()).not()) {return self.error_("Argument must be a Block.")};
if ((anotherBlock.isBlock()).not()) {return self.error_("Argument must be a Block.")};
return self.primitiveFailed();
}
, "control", unescape("ifFalse%3A%20anotherBlock%0DifTrue%3A%20aBlock%0D%0D%09%3Cprimitive%3A%27primFalseTrue%27%20module%3A%20%27SKBoolean%27%3E%0D%09aBlock%20isBlock%0D%09%09ifFalse%3A%5B%5Eself%20error%3A%27Argument%20must%20be%20a%20Block.%27%5D.%0D%09anotherBlock%20isBlock%0D%09%09ifFalse%3A%5B%5Eself%20error%3A%27Argument%20must%20be%20a%20Block.%27%5D.%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Boolean, unescape("and%3A"), "and_", function Boolean__and_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBoolean.primAnd(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "control", unescape("and%3A%20aBlock%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20true%20and%20the%20result%20of%20evaluating%20aBlock%20is%20also%20true.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAnd%27%20module%3A%20%27SKBoolean%27%3E%0D%09%5Eself%20primitiveFailed%20"));
smalltalk.bind(smalltalk.Boolean, unescape("or%3A"), "or_", function Boolean__or_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBoolean.primOr(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "control", unescape("or%3A%20aBlock%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20true%20or%20the%20result%20of%20evaluating%20aBlock%20is%20true.%20%22%0D%0D%09%3Cprimitive%3A%20%27primOr%27%20module%3A%20%27SKBoolean%27%3E%0D%09%5Eself%20primitiveFailed%20"));
smalltalk.bind(smalltalk.Boolean, unescape("not"), "not", function Boolean__not(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBoolean.primNot(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "control", unescape("not%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20false.%20%22%0D%0D%09%3Cprimitive%3A%20%27primNot%27%20module%3A%20%27SKBoolean%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Boolean, unescape("printString"), "printString", function Boolean__printString(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBoolean.primPrintString(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "printing", unescape("printString%0D%09%22%20Return%20a%20printable%20representation%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primPrintString%27%20module%3A%20%27SKBoolean%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Boolean, unescape("asJSONObject"), "asJSONObject", function Boolean__asJSONObject(){
const self = this; return self.and_((function Boolean__(){
return true;
}
));
}
, "converting", unescape("asJSONObject%0D%09%22%20Return%20the%20mapping%20of%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%5Eself%20and%3A%20%5B%20true%20%5D"));
smalltalk.bind(smalltalk.Boolean, unescape("shallowCopy"), "shallowCopy", function Boolean__shallowCopy(){
const self = this; return self;
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Boolean, unescape("deepCopy"), "deepCopy", function Boolean__deepCopy(){
const self = this; return self;
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Boolean, unescape("%26"), "_amp", function Boolean___amp(aBoolean){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBoolean.primAmpersand(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "logic", unescape("%26%20aBoolean%0D%09%22%20Return%20true%20if%20both%20the%20receiver%20and%20argument%20are%20true.%20False%20in%20any%20other%20case.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAmpersand%27%20module%3A%20%27SKBoolean%27%3E%0D%09%5Eself%20primitiveFailed%20"));
smalltalk.bind(smalltalk.Boolean, unescape("%7C"), "_bar", function Boolean___bar(aBoolean){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKBoolean.primPipeSymbol(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "logic", unescape("%7C%20aBoolean%0D%09%22%20Return%20true%20if%20both%20the%20receiver%20and%20argument%20are%20true.%20False%20in%20any%20other%20case.%20%22%0D%0D%09%3Cprimitive%3A%20%27primPipeSymbol%27%20module%3A%20%27SKBoolean%27%3E%0D%09%5Eself%20primitiveFailed%20"));
smalltalk.bind(smalltalk.Boolean, unescape("isBoolean"), "isBoolean", function Boolean__isBoolean(){
const self = this; return true;
}
, "testing", unescape("isBoolean%0D%09%22%20Returns%20true%20if%20the%20receiver%20is%20a%20boolean.%20%22%0D%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Object, unescape("isBoolean"), "isBoolean", function Object__isBoolean(){
const self = this; return false;
}
, "testing", unescape("isBoolean%0D%09%22%20Returns%20true%20if%20the%20receiver%20is%20a%20boolean.%20%22%0D%0D%09%5Efalse"));
smalltalk.addClass("DateTime", smalltalk.Object, [], 'Kernel');
smalltalk.DateTime.$classVariableNames=("");
smalltalk.bind(smalltalk.DateTime.$klass, unescape("utcOffsetSeconds"), "utcOffsetSeconds", function DateTime_class__utcOffsetSeconds(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primGetUtcOffsetSeconds(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("utcOffsetSeconds%0D%09%22%20Return%20the%20year%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGetUtcOffsetSeconds%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("year"), "year", function DateTime__year(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primGetYear(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("year%0D%09%22%20Return%20the%20year%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGetYear%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("month"), "month", function DateTime__month(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primGetMonth(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("month%0D%09%22%20Return%20the%20month%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGetMonth%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("month%3A"), "month_", function DateTime__month_(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primSetMonth(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("month%3A%20aNumber%0D%09%22%20Set%20the%20month%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primSetMonth%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("day"), "day", function DateTime__day(){
const self = this; return self.dayOfWeek();
}
, "accessing", unescape("day%0D%09%22%20Return%20the%20day%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20dayOfWeek"));
smalltalk.bind(smalltalk.DateTime, unescape("dayOfWeek"), "dayOfWeek", function DateTime__dayOfWeek(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primGetDayOfWeek(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("dayOfWeek%0D%09%22%20Return%20the%20day%20of%20week%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGetDayOfWeek%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("year%3A"), "year_", function DateTime__year_(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primSetYear(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("year%3A%20aNumber%0D%09%22%20Set%20the%20year%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primSetYear%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("dayOfMonth"), "dayOfMonth", function DateTime__dayOfMonth(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primGetDayOfMonth(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("dayOfMonth%0D%09%22%20Return%20the%20day%20of%20month%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGetDayOfMonth%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("dayOfMonth%3A"), "dayOfMonth_", function DateTime__dayOfMonth_(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primSetDayOfMonth(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("dayOfMonth%3A%20aNumber%0D%09%22%20Set%20the%20day%20of%20month%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primSetDayOfMonth%27%20module%3A%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("asString"), "asString", function DateTime__asString(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primAsString(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("asString%0D%09%22%20Return%20the%20text%20representation%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAsString%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("printString"), "printString", function DateTime__printString(){
const self = this; return self.asString();
}
, "printing", unescape("printString%0D%09%22%20Return%20the%20printable%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20asString"));
smalltalk.bind(smalltalk.DateTime, unescape("asMilliseconds"), "asMilliseconds", function DateTime__asMilliseconds(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primGetTime(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("asMilliseconds%0D%09%22%20Return%20the%20receiver%20as%20milliseconds.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGetTime%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("asSeconds"), "asSeconds", function DateTime__asSeconds(){
const self = this; return (self.asMilliseconds())._slash((1000));
}
, "converting", unescape("asSeconds%0D%09%22Return%20the%20receiver%20as%20seconds.%22%0D%0D%09%5Eself%20asMilliseconds%20/%201000.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("time"), "time", function DateTime__time(){
const self = this; return self.asMilliseconds();
}
, "accessing", unescape("time%0D%09%22%20Return%20the%20time%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20asMilliseconds.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("time%3A"), "time_", function DateTime__time_(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primSetTime(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primFailValue();
}
, "accessing", unescape("time%3A%20aNumber%0D%09%22%20Set%20the%20time%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primSetTime%27%20module%3A%27SKDateTime%27%3E%0D%09%5Eself%20primFailValue.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("asDateString"), "asDateString", function DateTime__asDateString(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primAsDateString(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("asDateString%0D%09%22%20Return%20the%20date%20string%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAsDateString%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("asTimeString"), "asTimeString", function DateTime__asTimeString(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primAsTimeString(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("asTimeString%0D%09%22%20Return%20the%20time%20string%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAsTimeString%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("asLocaleString"), "asLocaleString", function DateTime__asLocaleString(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primAsLocaleString(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("asLocaleString%0D%09%22%20Return%20the%20locale%20string%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primAsLocaleString%27%20module%3A%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("asNumber"), "asNumber", function DateTime__asNumber(){
const self = this; return self.asMilliseconds();
}
, "converting", unescape("asNumber%0D%09%22%20Return%20the%20receiver%20as%20a%20Number.%20%22%0D%0D%09%5Eself%20asMilliseconds"));
smalltalk.bind(smalltalk.DateTime, unescape("hours%3A"), "hours_", function DateTime__hours_(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primSetHours(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if (((aNumber._gt((23))).or_((aNumber._lt((0))))).valueOf()) {return self.error_(("argument must be an integer between 0 and 23. argument given: "._comma((aNumber.toString()))))};
return self.primitiveFailed();
}
, "accessing", unescape("hours%3A%20aNumber%0D%09%22%20Set%20the%20hours%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primSetHours%27%20module%3A%20%27SKDateTime%27%3E%0D%09%28aNumber%20%3E%2023%20or%3A%20aNumber%20%3C%200%29%0D%09%09ifTrue%3A%5B%5Eself%20error%3A%27argument%20must%20be%20an%20integer%20between%200%20and%2023.%20argument%20given%3A%20%27%2C%20aNumber%20toString%5D.%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("minutes%3A"), "minutes_", function DateTime__minutes_(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primSetMinutes(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if (((aNumber._gt((59))).or_((aNumber._lt((0))))).valueOf()) {return self.error_(("argument must be an integer between 0 and 59. argument given: "._comma((aNumber.toString()))))};
return self.primitiveFailed();
}
, "accessing", unescape("minutes%3A%20aNumber%0D%09%22%20Set%20the%20minutes%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primSetMinutes%27%20module%3A%20%27SKDateTime%27%3E%0D%09%28aNumber%20%3E%2059%20or%3A%20aNumber%20%3C%200%29%0D%09%09ifTrue%3A%5B%5Eself%20error%3A%27argument%20must%20be%20an%20integer%20between%200%20and%2059.%20argument%20given%3A%20%27%2C%20aNumber%20toString%5D.%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("seconds%3A"), "seconds_", function DateTime__seconds_(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primSetSeconds(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if (((aNumber._gt((59))).or_((aNumber._lt((0))))).valueOf()) {return self.error_(("argument must be an integer between 0 and 59. argument given: "._comma((aNumber.toString()))))};
return self.primitiveFailed();
}
, "accessing", unescape("seconds%3A%20aNumber%0D%09%22%20Set%20the%20seconds%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primSetSeconds%27%20module%3A%20%27SKDateTime%27%3E%0D%09%28aNumber%20%3E%2059%20or%3A%20aNumber%20%3C%200%29%0D%09%09ifTrue%3A%5B%5Eself%20error%3A%27argument%20must%20be%20an%20integer%20between%200%20and%2059.%20argument%20given%3A%20%27%2C%20aNumber%20toString%5D.%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("milliseconds%3A"), "milliseconds_", function DateTime__milliseconds_(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primSetMilliseconds(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if (((aNumber._gt((999))).or_((aNumber._lt((0))))).valueOf()) {return self.error_(("argument must be an integer between 0 and 999. argument given: "._comma((aNumber.toString()))))};
return self.primitiveFailed();
}
, "accessing", unescape("milliseconds%3A%20aNumber%0D%09%22%20Set%20the%20milliseconds%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primSetMilliseconds%27%20module%3A%27SKDateTime%27%3E%0D%09%28aNumber%20%3E%20999%20or%3A%20aNumber%20%3C%200%29%0D%09%09ifTrue%3A%5B%5Eself%20error%3A%27argument%20must%20be%20an%20integer%20between%200%20and%20999.%20argument%20given%3A%20%27%2C%20aNumber%20toString%5D.%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("hours"), "hours", function DateTime__hours(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primGetHours(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("hours%0D%09%22%20Return%20the%20hours%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primGetHours%27%20module%3A%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("minutes"), "minutes", function DateTime__minutes(){
const self = this; return self.getMinutes();
}
, "accessing", unescape("minutes%0D%09%22%20Return%20the%20minutes%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20getMinutes"));
smalltalk.bind(smalltalk.DateTime, unescape("seconds"), "seconds", function DateTime__seconds(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primGetSeconds(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("seconds%0D%09%22%20Return%20the%20seconds%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGetSeconds%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("milliseconds"), "milliseconds", function DateTime__milliseconds(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primGetMilliseconds(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("milliseconds%0D%09%22%20Return%20the%20milliseconds%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGetMilliseconds%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("%3D"), "_eq", function DateTime___eq(aDateTime){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primEquality(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return false;
}
, "comparing", unescape("%3D%20aDateTime%0D%09%22Return%20true%20if%20the%20receiver%20is%20equivalent%20to%20aDateTime%22%0D%0D%09%3Cprimitive%3A%20%27primEquality%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Efalse"));
smalltalk.bind(smalltalk.DateTime, unescape("%3C"), "_lt", function DateTime___lt(aDateTime){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primLessThan(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "comparing", unescape("%3C%20aDateTime%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20previous%20to%20aDateTime.%20%22%0D%0D%09%3Cprimitive%3A%20%27primLessThan%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("%3E"), "_gt", function DateTime___gt(aDateTime){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primGreaterThan(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "comparing", unescape("%3E%20aDateTime%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20later%20than%20aDateTime.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGreaterThan%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("%3C%3D"), "_lt_eq", function DateTime___lt_eq(aDateTime){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primLessThanEqualTo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "comparing", unescape("%3C%3D%20aDateTime%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20previous%20or%20equal%20to%20aDateTime.%20%22%0D%0D%09%3Cprimitive%3A%27primLessThanEqualTo%27%20module%3A%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("%3E%3D"), "_gt_eq", function DateTime___gt_eq(aDateTime){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primGreaterThanEqualTo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "comparing", unescape("%3E%3D%20aDateTime%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20later%20or%20equal%20to%20aDateTime.%20%22%0D%0D%09%3Cprimitive%3A%27primGreaterThanEqualTo%27%20module%3A%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("-"), "_minus", function DateTime___minus(aDateTime){
const self = this; return (self.asSeconds())._minus((aDateTime.asSeconds()));
}
, "arithmetic", unescape("-%20aDateTime%0D%09%22%20Return%20the%20result%20of%20operation%20with%20receiver%20and%20aDateTime%20in%20seconds.%20%22%0D%0D%09%5Eself%20asSeconds%20-%20aDateTime%20asSeconds.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("+"), "_plus", function DateTime___plus(aDateTime){
const self = this; return (self.asSeconds())._plus((aDateTime.asSeconds()));
}
, "arithmetic", unescape("+%20aDateTime%0D%09%22%20Return%20the%20result%20of%20operation%20with%20receiver%20and%20aDateTime%20in%20seconds.%20%22%0D%0D%09%5Eself%20asSeconds%20+%20aDateTime%20asSeconds.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("isValid"), "isValid", function DateTime__isValid(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primIsValid(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "testing", unescape("isValid%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20valid%20instance.%20%22%0D%0D%09%3Cprimitive%3A%27primIsValid%27%20module%3A%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime, unescape("asJSONObject"), "asJSONObject", function DateTime__asJSONObject(){
const self = this; return self;
}
, "converting", unescape("asJSONObject%0D%09%22%20Return%20the%20mapping%20of%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.DateTime, unescape("asDateTime"), "asDateTime", function DateTime__asDateTime(){
const self = this; return self;
}
, "converting", unescape("asDateTime%0D%09%22Return%20a%20DateTime%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.DateTime.$klass, unescape("fromString%3A"), "fromString_", function DateTime_class__fromString_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primNew(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "instantiation", unescape("fromString%3A%20aString%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%0D%09DateTime%20fromString%3A%20%271962/12/15%2001%3A40%3A00%27%22%0D%0D%09%3Cprimitive%3A%20%27primNew%27%20module%3A%20%27SKDateTime%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime.$klass, unescape("fromSeconds%3A"), "fromSeconds_", function DateTime_class__fromSeconds_(aNumber){
const self = this; return self.fromMilliseconds_((aNumber._star((1000))));
}
, "instantiation", unescape("fromSeconds%3A%20aNumber%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20fromMilliseconds%3A%20aNumber%20*%201000"));
smalltalk.bind(smalltalk.DateTime.$klass, unescape("fromMilliseconds%3A"), "fromMilliseconds_", function DateTime_class__fromMilliseconds_(aNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKDateTime.primNew(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "instantiation", unescape("fromMilliseconds%3A%20aNumber%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%09%3Cprimitive%3A%20%27primNew%27%20module%3A%20%27SKDateTime%27%3E%0D%09%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.DateTime.$klass, unescape("today"), "today", function DateTime_class__today(){
const self = this; return self.$$new();
}
, "instantiation", unescape("today%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new"));
smalltalk.bind(smalltalk.DateTime.$klass, unescape("now"), "now", function DateTime_class__now(){
const self = this; return self.today();
}
, "instantiation", unescape("now%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20today"));
smalltalk.bind(smalltalk.DateTime.$klass, unescape("millisecondsToRun%3A"), "millisecondsToRun_", function DateTime_class__millisecondsToRun_(aBlock){
var start = nil;
const self = this; start=smalltalk.DateTime.now();
aBlock.value();
return (smalltalk.DateTime.now())._minus(start);
}
, "instantiation", unescape("millisecondsToRun%3A%20aBlock%0D%09%22%20Return%20the%20time%20elapsed%20during%20evaluation%20of%20aBlock.%20%22%0D%0D%09%7C%20start%20%7C%0D%09start%20%3A%3D%20DateTime%20now.%0D%09aBlock%20value.%0D%09%5EDateTime%20now%20-%20start"));
smalltalk.bind(smalltalk.DateTime, unescape("isDateTime"), "isDateTime", function DateTime__isDateTime(){
const self = this; return true;
}
, "testing", unescape("isDateTime%0D%0D%09%5Etrue"));
smalltalk.addClass("UndefinedObject", smalltalk.Object, [], 'Kernel');
smalltalk.UndefinedObject.$classVariableNames=("");
smalltalk.bind(smalltalk.UndefinedObject.$klass, unescape("new"), "$$new", function UndefinedObject_class__$$new(){
const self = this; return self.error_(unescape("UndefinedObject%20can%27t%20be%20instantiated."));
}
, "instantiation", unescape("new%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20error%3A%20%27UndefinedObject%20can%27%27t%20be%20instantiated.%27"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("ifNil%3A"), "ifNil_", function UndefinedObject__ifNil_(aBlock){
const self = this; return aBlock.value();
}
, "testing", unescape("ifNil%3A%20aBlock%0D%09%22%20Return%20the%20receiver%20if%20it%20is%20not%20nil%2C%20or%20the%20result%20of%20evaluating%20aBlock%20%28if%20it%20is%20nil%29.%20%22%0D%0D%09%5EaBlock%20value"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("ifNotNil%3A"), "ifNotNil_", function UndefinedObject__ifNotNil_(aBlock){
const self = this; return self;
}
, "testing", unescape("ifNotNil%3A%20aBlock%0D%09%22%20Return%20the%20receiver%20if%20it%20is%20nil%2C%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("ifNil%3AifNotNil%3A"), "ifNil_ifNotNil_", function UndefinedObject__ifNil_ifNotNil_(aBlock,anotherBlock){
const self = this; return aBlock.value();
}
, "testing", unescape("ifNil%3A%20aBlock%20ifNotNil%3A%20anotherBlock%0D%09%22%20Return%20the%20receiver%20if%20it%20is%20nil%2C%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%5EaBlock%20value"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("ifNotNil%3AifNil%3A"), "ifNotNil_ifNil_", function UndefinedObject__ifNotNil_ifNil_(aBlock,anotherBlock){
const self = this; return anotherBlock.value();
}
, "testing", unescape("ifNotNil%3A%20aBlock%20ifNil%3A%20anotherBlock%0D%09%22%20Return%20the%20result%20of%20evaluating%20anotherBlock%20if%20teh%20receiver%20is%20nil%2C%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%5EanotherBlock%20value"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("isNil"), "isNil", function UndefinedObject__isNil(){
const self = this; return true;
}
, "testing", unescape("isNil%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20nil.%20%22%0D%0D%09%5Etrue"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("notNil"), "notNil", function UndefinedObject__notNil(){
const self = this; return false;
}
, "testing", unescape("notNil%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20not%20nil.%20%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("printString"), "printString", function UndefinedObject__printString(){
const self = this; return "nil";
}
, "printing", unescape("printString%0D%09%22%20Return%20the%20text%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5E%23nil"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("printOn%3A"), "printOn_", function UndefinedObject__printOn_(aStream){
const self = this; aStream.nextPutAll_("nil");
return self;
}
, "printing", unescape("printOn%3A%20aStream%0D%09%22Print%20the%20receiver%20onto%20aStream%22%0D%0D%09aStream%20nextPutAll%3A%20%27nil%27"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("subclass%3AinstanceVariableNames%3A"), "subclass_instanceVariableNames_", function UndefinedObject__subclass_instanceVariableNames_(aString,anotherString){
const self = this; return self.subclass_instanceVariableNames_category_(aString,anotherString,nil);
}
, "instantiation", unescape("subclass%3A%20aString%20instanceVariableNames%3A%20anotherString%0D%09%22%20Create%20a%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20anotherString%0D%09%09category%3A%20nil"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("subclass%3AinstanceVariableNames%3Acategory%3A"), "subclass_instanceVariableNames_category_", function UndefinedObject__subclass_instanceVariableNames_category_(aString,aString2,aString3){
const self = this; return (smalltalk.ClassBuilder.$$new()).superclass_subclass_instanceVariableNames_category_(self,aString,aString2,aString3);
}
, "instantiation", unescape("subclass%3A%20aString%20instanceVariableNames%3A%20aString2%20category%3A%20aString3%0D%09%22%20Create%20a%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5EClassBuilder%20new%0D%09%09superclass%3A%20self%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09category%3A%20aString3"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("asJSONObject"), "asJSONObject", function UndefinedObject__asJSONObject(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKUndefinedObject.primAsJSONObject(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "converting", unescape("asJSONObject%0D%09%22%20Return%20the%20mapping%20of%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAsJSONObject%27%20module%3A%20%27SKUndefinedObject%27%3E%0D%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("asJavascript"), "asJavascript", function UndefinedObject__asJavascript(){
const self = this; return "nil";
}
, "converting", unescape("asJavascript%0D%09%22Return%20the%20Javascript%20%22%0D%0D%09%5E%27nil%27"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("shallowCopy"), "shallowCopy", function UndefinedObject__shallowCopy(){
const self = this; return self;
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("deepCopy"), "deepCopy", function UndefinedObject__deepCopy(){
const self = this; return self;
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("value"), "value", function UndefinedObject__value(){
const self = this; self;
return self;
}
, "evaluating", unescape("value%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver.%20%22"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("@"), "_at", function UndefinedObject___at(aNumber){
const self = this; return smalltalk.Point.x_y_((0),aNumber);
}
, "converting", unescape("@%20aNumber%0D%09%22%20Return%20a%20Point%20with%20coordinates%20given%20by%20the%20receiver%20and%20aNumber.%20%22%0D%0D%09%5EPoint%20x%3A%200%20y%3A%20aNumber"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("%3D"), "_eq", function UndefinedObject___eq(anObject){
const self = this; return (nil.isNil_(anObject));
}
, "comparing", unescape("%3D%20anObject%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20equal%20to%20anObject.%20%22%0D%0D%09%5EanObject%20isNil"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("%7E%3D"), "_no_eq", function UndefinedObject___no_eq(anObject){
const self = this; return (nil.isNil_(anObject)===false);
}
, "comparing", unescape("%7E%3D%20anObject%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20not%20equal%20to%20anObject.%20%22%0D%0D%09%5EanObject%20notNil"));
smalltalk.addClass("Collection", smalltalk.Object, [], 'Kernel');
smalltalk.Collection.$classVariableNames=("");
smalltalk.bind(smalltalk.Collection, unescape("size"), "size", function Collection__size(){
const self = this; return self.subclassResponsibility_("size");
}
, "accessing", unescape("size%0D%09%22%20Return%20the%20size%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23size"));
smalltalk.bind(smalltalk.Collection, unescape("readStream"), "readStream", function Collection__readStream(){
const self = this; return self.stream();
}
, "accessing", unescape("readStream%0D%09%22%20Return%20a%20read%20stream%20on%20the%20receiver.%20%22%0D%0D%09%5Eself%20stream"));
smalltalk.bind(smalltalk.Collection, unescape("writeStream"), "writeStream", function Collection__writeStream(){
const self = this; return self.stream();
}
, "accessing", unescape("writeStream%0D%09%22%20Return%20a%20write%20stream%20on%20the%20receiver.%20%22%0D%0D%09%5Eself%20stream"));
smalltalk.bind(smalltalk.Collection, unescape("stream"), "stream", function Collection__stream(){
const self = this; return (self.streamClass()).on_(self);
}
, "accessing", unescape("stream%0D%09%22%20Return%20a%20stream%20on%20the%20receiver.%20%22%0D%0D%09%5Eself%20streamClass%20on%3A%20self"));
smalltalk.bind(smalltalk.Collection, unescape("streamClass"), "streamClass", function Collection__streamClass(){
const self = this; return (self.$klass).streamClass();
}
, "accessing", unescape("streamClass%0D%09%22%20Private%20-%20Return%20the%20support%20for%20streamming%20on%20the%20receiver.%20%22%0D%0D%09%5Eself%20class%20streamClass"));
smalltalk.bind(smalltalk.Collection, unescape("intersection%3A"), "intersection_", function Collection__intersection_(aCollection){
const self = this; return self.select_((function Collection__(each){
return aCollection.includes_(each);
}
));
}
, "accessing", unescape("intersection%3A%20aCollection%0D%0D%09%5Eself%20select%3A%20%5B%3Aeach%20%7C%20aCollection%20includes%3A%20each%5D"));
smalltalk.bind(smalltalk.Collection, unescape("errorNotFound"), "errorNotFound", function Collection__errorNotFound(){
const self = this; return self.objectNotFound();
}
, "error", unescape("errorNotFound%0D%09%22%20DEPRECATED%20-%20Generates%20an%20error.%0D%09An%20object%20was%20not%20found%20in%20the%20receiver%27s%20contents.%0D%09%22%0D%0D%09%5Eself%20objectNotFound"));
smalltalk.bind(smalltalk.Collection, unescape("objectNotFound"), "objectNotFound", function Collection__objectNotFound(){
const self = this; return self.error_("Object is not in the collection");
}
, "error", unescape("objectNotFound%0D%09%22%20Private%20-%20Generates%20an%20error.%0D%09An%20object%20was%20not%20found%20in%20the%20receiver%27s%20contents.%0D%09%22%0D%0D%09%5Eself%20error%3A%20%27Object%20is%20not%20in%20the%20collection%27"));
smalltalk.bind(smalltalk.Collection, unescape("objectNotFound%3A"), "objectNotFound_", function Collection__objectNotFound_(anObject){
const self = this; return self.error_(("Object not found: "._comma((anObject.toString()))));
}
, "error", unescape("objectNotFound%3A%20anObject%0D%09%22%20Private%20-%20Generates%20an%20error.%0D%09anObject%20was%20not%20found%20in%20the%20receiver%27s%20contents.%0D%09%22%0D%0D%09%5Eself%20error%3A%20%27Object%20not%20found%3A%20%27%2CanObject%20toString"));
smalltalk.bind(smalltalk.Collection, unescape("objectNotFoundAt%3A"), "objectNotFoundAt_", function Collection__objectNotFoundAt_(indexOrKey){
const self = this; return self.error_(("Object not found at "._comma((indexOrKey.toString()))));
}
, "error", unescape("objectNotFoundAt%3A%20indexOrKey%0D%09%22%20Private%20-%20Generates%20an%20error.%0D%09The%20object%20at%20key/index%20was%20not%20found%20in%20the%20receiver%27s%20contents.%0D%09%22%0D%0D%09%5Eself%20error%3A%20%27Object%20not%20found%20at%20%27%2CindexOrKey%20toString"));
smalltalk.bind(smalltalk.Collection, unescape("add%3A"), "add_", function Collection__add_(anObject){
const self = this; return self.subclassResponsibility_("add:");
}
, "adding", unescape("add%3A%20anObject%0D%09%22%20Add%20anObject%20to%20the%20receiver.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23add%3A"));
smalltalk.bind(smalltalk.Collection, unescape("addAll%3A"), "addAll_", function Collection__addAll_(aCollection){
const self = this; aCollection.do_((function Collection__(each){
return self.add_(each);
}
));
return aCollection;
}
, "adding", unescape("addAll%3A%20aCollection%0D%09%22%20Add%20objects%20in%20aCollection%20to%20the%20receiver.%20%22%0D%0D%09aCollection%20do%3A%20%5B%3Aeach%20%7C%20self%20add%3A%20each%20%5D.%0D%09%5EaCollection"));
smalltalk.bind(smalltalk.Collection, unescape("%2C"), "_comma", function Collection___comma(aCollection){
const self = this; return (function Collection__($1$){
$1$.addAll_(aCollection);
return $1$.yourself()}
)(self.copy());
}
, "copying", unescape("%2C%20aCollection%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20with%20all%20contents%20of%20aCollection.%20%22%0D%0D%09%5Eself%20copy%0D%09%09addAll%3A%20aCollection%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Collection, unescape("copyWith%3A"), "copyWith_", function Collection__copyWith_(anObject){
const self = this; return (function Collection__($1$){
$1$.add_(anObject);
return $1$.yourself()}
)(self.copy());
}
, "copying", unescape("copyWith%3A%20anObject%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20with%20anObject.%20%22%0D%0D%09%5Eself%20copy%20add%3A%20anObject%3B%20yourself"));
smalltalk.bind(smalltalk.Collection, unescape("copyWithAll%3A"), "copyWithAll_", function Collection__copyWithAll_(aCollection){
const self = this; return (function Collection__($1$){
$1$.addAll_(aCollection);
return $1$.yourself()}
)(self.copy());
}
, "copying", unescape("copyWithAll%3A%20aCollection%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20with%20all%20contents%20of%20aCollection.%20%22%0D%0D%09%5Eself%20copy%0D%09%09addAll%3A%20aCollection%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Collection, unescape("asArray"), "asArray", function Collection__asArray(){
var result = nil;
var index = nil;
const self = this; result=smalltalk.Array.$$new();
index=(0);
self.do_((function Collection__(each){
index=index._plus((1));
return result.at_put_(index,each);
}
));
return result;
}
, "converting", unescape("asArray%0D%09%22%20Return%20an%20array%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%7C%20result%20index%20%7C%0D%09result%20%3A%3D%20Array%20new.%0D%09index%20%3A%3D%200.%0D%09self%20do%3A%20%5B%3Aeach%20%7C%0D%09%20%20%20%20index%20%3A%3D%20index%20+%201.%0D%09%20%20%20%20result%20at%3A%20index%20put%3A%20each%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Collection, unescape("asSortedCollection"), "asSortedCollection", function Collection__asSortedCollection(){
const self = this; return (function Collection__($1$){
$1$.addAll_(self);
return $1$.yourself()}
)(smalltalk.SortedCollection.$$new());
}
, "converting", unescape("asSortedCollection%0D%09%22Answer%20a%20SortedCollection%20containing%0D%09the%20elements%20of%20the%20receiver%20sorted%0D%09in%20ascending%20order.%22%0D%0D%09%5E%28SortedCollection%20new%29%0D%09%09addAll%3A%20self%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Collection, unescape("asOrderedCollection"), "asOrderedCollection", function Collection__asOrderedCollection(){
const self = this; return smalltalk.OrderedCollection.withAll_(self);
}
, "converting", unescape("asOrderedCollection%0D%09%22Return%20an%20OrderedCollection%20containing%20the%20same%20contents%20as%20self.%22%0D%0D%09%5EOrderedCollection%20withAll%3A%20self"));
smalltalk.bind(smalltalk.Collection, unescape("do%3A"), "do_", function Collection__do_(aBlock){
const self = this; return self.subclassResponsibility_("do:");
}
, "enumerating", unescape("do%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23do%3A"));
smalltalk.bind(smalltalk.Collection, unescape("detect%3AifNone%3A"), "detect_ifNone_", function Collection__detect_ifNone_(aBlock,anotherBlock){
const self = this; return self.subclassResponsibility_("detect:ifNone:");
}
, "enumerating", unescape("detect%3A%20aBlock%20ifNone%3A%20anotherBlock%0D%09%22%20Return%20the%20object%20in%20the%20receiver%20that%20return%20true%20when%20evaluated%20with%20aBlock%20or%20the%20result%20of%20evaluating%20anotherBlock.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23detect%3AifNone%3A"));
smalltalk.bind(smalltalk.Collection, unescape("reverseDo%3A"), "reverseDo_", function Collection__reverseDo_(aBlock){
const self = this; return self.subclassResponsibility_("reverseDo:");
}
, "enumerating", unescape("reverseDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver%20in%20reverse%20order%20of%20iteration.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23reverseDo%3A"));
smalltalk.bind(smalltalk.Collection, unescape("collect%3A"), "collect_", function Collection__collect_(aBlock){
var result = nil;
const self = this; result=(self.$klass).$$new();
self.do_((function Collection__(each){
return result.add_((aBlock.value_(each)));
}
));
return result;
}
, "enumerating", unescape("collect%3A%20aBlock%0D%09%22%20Return%20a%20collection%20with%20the%20result%20of%20evaluating%20aBlock%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20class%20new.%0D%09self%20do%3A%20%5B%3Aeach%20%7C%20result%20add%3A%20%28aBlock%20value%3A%20each%29%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Collection, unescape("select%3A"), "select_", function Collection__select_(aBlock){
var stream = nil;
const self = this; stream=((self.$klass).$$new()).writeStream();
self.do_((function Collection__(each){
if ((aBlock.value_(each)).valueOf()) {return stream.nextPut_(each)} else {return nil};
}
));
return stream.contents();
}
, "enumerating", unescape("select%3A%20aBlock%0D%09%22%20Return%20the%20contents%20of%20the%20receiver%20wich%20evaluates%20aBlock%20to%20true.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20self%20class%20new%20writeStream.%0D%09self%20do%3A%20%5B%3Aeach%20%7C%0D%09%20%20%20%20%28aBlock%20value%3A%20each%29%20ifTrue%3A%20%5B%20stream%20nextPut%3A%20each%20%5D%0D%09%5D.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Collection, unescape("detect%3A"), "detect_", function Collection__detect_(aBlock){
const self = this; return self.detect_ifNone_(aBlock,(function Collection__(){
return self.objectNotFound();
}
));
}
, "enumerating", unescape("detect%3A%20aBlock%0D%09%22%20Return%20the%20object%20in%20the%20receiver%20that%20return%20true%20when%20evaluated%20with%20aBlock.%0D%09Generates%20an%20error%20if%20there%20is%20no%20object%20that%20evaluates%20aBlock%20to%20true.%0D%09%22%0D%0D%09%5Eself%20detect%3A%20aBlock%20ifNone%3A%20%5B%20self%20objectNotFound%20%5D"));
smalltalk.bind(smalltalk.Collection, unescape("do%3AseparatedBy%3A"), "do_separatedBy_", function Collection__do_separatedBy_(aBlock,anotherBlock){
var first = nil;
const self = this; first=true;
self.do_((function Collection__(each){
if ((first).valueOf()) {first=false} else {anotherBlock.value()};
return aBlock.value_(each);
}
));
return self;
}
, "enumerating", unescape("do%3A%20aBlock%20separatedBy%3A%20anotherBlock%0D%09%22%20Evaluate%20aBlock%20for%20contents%20of%20the%20receiver%20evaluating%20anotherBlock%20inbetween%20aBlock%20evaluations.%20%22%0D%0D%09%7C%20first%20%7C%0D%09first%20%3A%3D%20true.%0D%09self%20do%3A%20%5B%3Aeach%20%7C%0D%09%20%20%20%20first%0D%09%09ifTrue%3A%20%5B%20first%20%3A%3D%20false%20%5D%0D%09%09ifFalse%3A%20%5B%20anotherBlock%20value%20%5D.%0D%09%20%20%20%20aBlock%20value%3A%20each%0D%09%5D"));
smalltalk.bind(smalltalk.Collection, unescape("do%3AandBetweenDo%3A"), "do_andBetweenDo_", function Collection__do_andBetweenDo_(aDoBlock,aBetweenBlock){
const self = this; return self.do_separatedBy_(aDoBlock,aBetweenBlock);
}
, "enumerating", unescape("do%3A%20aDoBlock%0DandBetweenDo%3A%20aBetweenBlock%0D%09%22Evaluate%20aBlock%20for%20the%20contents.%20Between%20evaluations%20of%20aBlock%2C%20evaluate%20aBetweenBlock.%22%0D%0D%09%5Eself%0D%09%09do%3A%20aDoBlock%0D%09%09separatedBy%3A%20aBetweenBlock"));
smalltalk.bind(smalltalk.Collection, unescape("inject%3Ainto%3A"), "inject_into_", function Collection__inject_into_(anObject,aBlock){
var result = nil;
const self = this; result=anObject;
self.do_((function Collection__(each){
return result=aBlock.value_value_(result,each);
}
));
return result;
}
, "enumerating", unescape("inject%3A%20anObject%20into%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20for%20result%20of%20previous%20evaluation%20and%20contents%20of%20the%20receiver.%0D%09On%20first%20evaluation%20anObject%20is%20used%20as%20first%20argument%20to%20evaluate%20aBlock.%0D%09%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20anObject.%0D%09self%20do%3A%20%5B%3Aeach%20%7C%20result%20%3A%3D%20aBlock%20value%3A%20result%20value%3A%20each%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Collection, unescape("reject%3A"), "reject_", function Collection__reject_(aBlock){
const self = this; return self.select_((function Collection__(each){
return (aBlock.value_(each))._eq(false);
}
));
}
, "enumerating", unescape("reject%3A%20aBlock%0D%09%22%20Return%20the%20contents%20of%20the%20receiver%20wich%20evaluates%20aBlock%20to%20false.%20%22%0D%0D%09%5Eself%20select%3A%20%5B%3Aeach%20%7C%20%28aBlock%20value%3A%20each%29%20%3D%20false%5D"));
smalltalk.bind(smalltalk.Collection, unescape("select%3AthenCollect%3A"), "select_thenCollect_", function Collection__select_thenCollect_(selectBlock,collectBlock){
const self = this; return (self.select_(selectBlock)).collect_(collectBlock);
}
, "enumerating", unescape("select%3A%20selectBlock%20thenCollect%3A%20collectBlock%0D%09%22%20Return%20a%20new%20collection%20with%20the%20result%20of%20evaluating%20collectBlock%20on%20the%20contents%20of%20the%20receiver%20wich%20evaluates%20selectBlock%20to%20true.%20%22%0D%0D%09%5E%28self%20select%3A%20selectBlock%29%20collect%3A%20collectBlock"));
smalltalk.bind(smalltalk.Collection, unescape("collect%3AthenSelect%3A"), "collect_thenSelect_", function Collection__collect_thenSelect_(collectBlock,selectBlock){
const self = this; return (self.collect_(collectBlock)).select_(selectBlock);
}
, "enumerating", unescape("collect%3A%20collectBlock%20thenSelect%3A%20selectBlock%0D%09%22%20Return%20a%20new%20collection%20with%20the%20result%20of%20evaluating%20collectBlock%20on%20the%20contents%20of%20the%20receiver%20wich%20evaluates%20selectBlock%20to%20true.%20%22%0D%0D%09%5E%28self%20collect%3A%20collectBlock%29%20select%3A%20selectBlock"));
smalltalk.bind(smalltalk.Collection, unescape("reversed"), "reversed", function Collection__reversed(){
const self = this; return self.subclassResponsibility_("reversed");
}
, "copying", unescape("reversed%0D%09%22%20Return%20an%20array%20with%20the%20contents%20of%20the%20receiver%20in%20reverse%20order.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23reversed"));
smalltalk.bind(smalltalk.Collection, unescape("includes%3A"), "includes_", function Collection__includes_(anObject){
const self = this; return self.subclassResponsibility_("includes:");
}
, "testing", unescape("includes%3A%20anObject%0D%09%22%20Return%20true%20if%20anObject%20is%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23includes%3A"));
smalltalk.bind(smalltalk.Collection, unescape("includesAll%3A"), "includesAll_", function Collection__includesAll_(aCollection){
const self = this; var $early={name:"stReturn"};
try {
aCollection.do_((function Collection__(each){
var isPresent = nil;
isPresent=self.includes_(each);
if ((isPresent).not()) {$early.result=false; throw ($early)} else {return nil};
}
));
return true;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "testing", unescape("includesAll%3A%20aCollection%0D%09%22Return%20whether%20the%20receiver%20contains%20all%20of%20the%20elements%20from%20aCollection.%22%0D%0D%09aCollection%0D%09%09do%3A%0D%09%09%09%5B%3Aeach%20%7C%20%7C%20isPresent%20%7C%0D%09%09%09isPresent%20%3A%3D%20self%20includes%3A%20each.%0D%09%09%09isPresent%20ifFalse%3A%20%5B%5Efalse%5D%5D.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Collection, unescape("isCollection"), "isCollection", function Collection__isCollection(){
const self = this; return true;
}
, "testing", unescape("isCollection%0D%09%22Return%20whether%20the%20receiver%20is%20a%20Collection.%22%0D%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Collection, unescape("notEmpty"), "notEmpty", function Collection__notEmpty(){
const self = this; return (self.isEmpty()).not();
}
, "testing", unescape("notEmpty%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20not%20empty.%20%22%0D%0D%09%5Eself%20isEmpty%20not"));
smalltalk.bind(smalltalk.Collection, unescape("isEmpty"), "isEmpty", function Collection__isEmpty(){
const self = this; return (nil.is_eqeq_(self.size(),(0)));
}
, "testing", unescape("isEmpty%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20empty.%20%22%0D%0D%09%5Eself%20size%20%3D%3D%200"));
smalltalk.bind(smalltalk.Collection, unescape("remove%3A"), "remove_", function Collection__remove_(anObject){
const self = this; return self.remove_ifAbsent_(anObject,(function Collection__(){
return self.objectNotFound_(anObject);
}
));
}
, "removing", unescape("remove%3A%20anObject%0D%09%22%20Remove%20anObject%20from%20receiver%2C%20return%20the%20removed%20object.%20%22%0D%0D%09%5Eself%20remove%3A%20anObject%20ifAbsent%3A%20%5B%20self%20objectNotFound%3A%20anObject%20%5D"));
smalltalk.bind(smalltalk.Collection, unescape("remove%3AifAbsent%3A"), "remove_ifAbsent_", function Collection__remove_ifAbsent_(anObject,aBlock){
const self = this; return self.subclassResponsibility_("remove:ifAbsent:");
}
, "removing", unescape("remove%3A%20anObject%20ifAbsent%3A%20aBlock%0D%09%22%20Remove%20anObject%20from%20receiver.%0D%09Return%20the%20removed%20object%20or%20the%20result%20of%20evaluating%20aBlock%20%28if%20the%20object%20is%20not%20found%29.%0D%09%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23remove%3AifAbsent%3A"));
smalltalk.bind(smalltalk.Collection, unescape("removeAll%3A"), "removeAll_", function Collection__removeAll_(aCollection){
const self = this; aCollection.do_((function Collection__(each){
return self.remove_(each);
}
));
return aCollection;
}
, "removing", unescape("removeAll%3A%20aCollection%0D%09%22%20Remove%20aCollection%20from%20receiver.%20%22%0D%0D%09aCollection%20do%3A%20%5B%3Aeach%7C%20self%20remove%3A%20each%20%5D.%0D%09%5EaCollection"));
smalltalk.bind(smalltalk.Collection, unescape("removeAll"), "removeAll", function Collection__removeAll(){
const self = this; self.removeAll_((self.shallowCopy()));
return self;
}
, "removing", unescape("removeAll%0D%09%22%20Remove%20all%20elements%20in%20the%20receiver.%20%22%0D%0D%09self%20removeAll%3A%20self%20shallowCopy"));
smalltalk.bind(smalltalk.Collection, unescape("occurrencesOf%3A"), "occurrencesOf_", function Collection__occurrencesOf_(anObject){
const self = this; return self.inject_into_((0),(function Collection__(total,each){
if ((each._eq(anObject)).valueOf()) {return total._plus((1))} else {return total};
}
));
}
, "counting", unescape("occurrencesOf%3A%20anObject%0D%09%22%20Return%20the%20occurrences%20of%20anObject%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20inject%3A%200%20into%3A%20%5B%3Atotal%20%3Aeach%7C%0D%09%09each%20%3D%20anObject%20ifTrue%3A%20%5B%20total%20+%201%20%5D%20ifFalse%3A%20%5Btotal%5D%0D%09%5D"));
smalltalk.bind(smalltalk.Collection, unescape("shallowCopy"), "shallowCopy", function Collection__shallowCopy(){
const self = this; return self.collect_((function Collection__(each){
return each;
}
));
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20collect%3A%20%5B%3Aeach%7C%20each%20%5D"));
smalltalk.bind(smalltalk.Collection, unescape("deepCopy"), "deepCopy", function Collection__deepCopy(){
const self = this; return self.collect_((function Collection__(each){
return each.deepCopy();
}
));
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20collect%3A%20%5B%3Aeach%7C%20each%20deepCopy%20%5D"));
smalltalk.bind(smalltalk.Collection.$klass, unescape("streamClass"), "streamClass", function Collection_class__streamClass(){
const self = this; return smalltalk.Stream;
}
, "accessing", unescape("streamClass%0D%09%22%20Private%20-%20Return%20the%20support%20for%20streamming%20on%20the%20receiver%27s%20instances.%20%22%0D%0D%09%5EStream"));
smalltalk.bind(smalltalk.Collection.$klass, unescape("with%3A"), "with_", function Collection_class__with_(anObject){
const self = this; return (function Collection_class__($1$){
$1$.add_(anObject);
return $1$.yourself()}
)(self.$$new());
}
, "instantiation", unescape("with%3A%20anObject%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%0D%09%09add%3A%20anObject%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Collection.$klass, unescape("with%3Awith%3A"), "with_with_", function Collection_class__with_with_(anObject,anotherObject){
const self = this; return (function Collection_class__($1$){
$1$.add_(anObject);
$1$.add_(anotherObject);
return $1$.yourself()}
)(self.$$new());
}
, "instantiation", unescape("with%3A%20anObject%20with%3A%20anotherObject%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%0D%09%09add%3A%20anObject%3B%0D%09%09add%3A%20anotherObject%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Collection.$klass, unescape("with%3Awith%3Awith%3A"), "with_with_with_", function Collection_class__with_with_with_(firstObject,secondObject,thirdObject){
const self = this; return (function Collection_class__($1$){
$1$.add_(firstObject);
$1$.add_(secondObject);
$1$.add_(thirdObject);
return $1$.yourself()}
)(self.$$new());
}
, "instantiation", unescape("with%3A%20firstObject%20with%3A%20secondObject%20with%3A%20thirdObject%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%0D%09%09add%3A%20firstObject%3B%0D%09%09add%3A%20secondObject%3B%0D%09%09add%3A%20thirdObject%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Collection.$klass, unescape("with%3Awith%3Awith%3Awith%3A"), "with_with_with_with_", function Collection_class__with_with_with_with_(firstObject,secondObject,thirdObject,fourthObject){
const self = this; return (function Collection_class__($1$){
$1$.add_(firstObject);
$1$.add_(secondObject);
$1$.add_(thirdObject);
$1$.add_(fourthObject);
return $1$.yourself()}
)(self.$$new());
}
, "instantiation", unescape("with%3A%20firstObject%20with%3A%20secondObject%20with%3A%20thirdObject%20with%3A%20fourthObject%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%0D%09%09add%3A%20firstObject%3B%0D%09%09add%3A%20secondObject%3B%0D%09%09add%3A%20thirdObject%3B%0D%09%09add%3A%20fourthObject%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Collection.$klass, unescape("withAll%3A"), "withAll_", function Collection_class__withAll_(aCollection){
const self = this; return (function Collection_class__($1$){
$1$.addAll_(aCollection);
return $1$.yourself()}
)(self.$$new());
}
, "instantiation", unescape("withAll%3A%20aCollection%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%0D%09%09addAll%3A%20aCollection%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Collection.$klass, unescape("basicNew%3A"), "basicNew_", function Collection_class__basicNew_(size){
const self = this; return self.subclassResponsibility_("basicNew:");
}
, "instantiation", unescape("basicNew%3A%20size%0D%09%22%20Return%20an%20instance%20of%20the%20receiver%20of%20specified%20size.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23basicNew%3A"));
smalltalk.addClass("Set", smalltalk.Collection, ['contents'], 'Kernel');
smalltalk.Set.$classVariableNames=("");
smalltalk.bind(smalltalk.Collection, unescape("asSet"), "asSet", function Collection__asSet(){
const self = this; return smalltalk.Set.withAll_(self);
}
, "converting", unescape("asSet%0D%09%22%20Return%20the%20receiver%20contents%20in%20a%20Set.%20%22%0D%0D%09%5ESet%20withAll%3A%20self"));
smalltalk.bind(smalltalk.Set.$klass, unescape("newContents%3A"), "newContents_", function Set_class__newContents_(contents){
const self = this; return (self.basicNew()).initialize_(contents);
}
, "private", unescape("newContents%3A%20contents%0D%09%22%20Return%20an%20instance%20of%20the%20receiver%20initialized%20from%20given%20contents.%20%22%0D%0D%09%5Eself%20basicNew%20initialize%3A%20contents"));
smalltalk.bind(smalltalk.Set.$klass, unescape("basicNew%3A"), "basicNew_", function Set_class__basicNew_(size){
const self = this; return self.$$new();
}
, "instantiation", unescape("basicNew%3A%20size%0D%09%22%20Return%20an%20instance%20of%20the%20receiver%20of%20specified%20size.%20%22%0D%0D%09%5Eself%20new"));
smalltalk.bind(smalltalk.Set, unescape("initialize"), "initialize", function Set__initialize(){
const self = this; smalltalk.superImplementor(smalltalk.Set,'initialize').apply(self, []);
self['@contents']=[];
return self;
}
, "initialize", unescape("initialize%0D%09%22%20Private%20-%20Initialize%20the%20receiver.%20%22%0D%0D%09super%20initialize.%0D%09contents%20%3A%3D%20%23%28%29."));
smalltalk.bind(smalltalk.Set, unescape("initialize%3A"), "initialize_", function Set__initialize_(initializer){
const self = this; self['@contents']=initializer;
return self;
}
, "initialize", unescape("initialize%3A%20initializer%0D%09%22%20Private%20-%20Initialize%20the%20receiver.%20%22%0D%0D%09contents%20%3A%3D%20initializer."));
smalltalk.bind(smalltalk.Set, unescape("isSet"), "isSet", function Set__isSet(){
const self = this; return true;
}
, "accessing", unescape("isSet%0D%0D%09%5Etrue%20"));
smalltalk.bind(smalltalk.Set, unescape("size"), "size", function Set__size(){
const self = this; return self['@contents'].size();
}
, "accessing", unescape("size%0D%09%22%20Return%20the%20size%20of%20the%20receiver.%20%22%0D%0D%09%5Econtents%20size"));
smalltalk.bind(smalltalk.Set, unescape("contents"), "contents", function Set__contents(){
const self = this; return self['@contents'];
}
, "accessing", unescape("contents%0D%0D%09%5Econtents"));
smalltalk.bind(smalltalk.Set, unescape("basicAdd%3A"), "basicAdd_", function Set__basicAdd_(anObject){
const self = this; self['@contents'].add_(anObject);
return anObject;
}
, "private", unescape("basicAdd%3A%20anObject%0D%09%22%20Private%20-%20Add%20anObject%20to%20the%20receiver%27s%20contents.%20%22%0D%0D%09contents%20add%3A%20anObject.%0D%09%5EanObject"));
smalltalk.bind(smalltalk.Set, unescape("includes%3A"), "includes_", function Set__includes_(anObject){
const self = this; return self['@contents'].includes_(anObject);
}
, "testing", unescape("includes%3A%20anObject%0D%09%22%20Return%20true%20if%20anObject%20is%20in%20receiver%27s%20contents.%20%22%0D%0D%09%5Econtents%20includes%3A%20anObject"));
smalltalk.bind(smalltalk.Set, unescape("add%3A"), "add_", function Set__add_(anObject){
const self = this; if ((self.includes_(anObject)).valueOf()) {return anObject};
return self.basicAdd_(anObject);
}
, "adding", unescape("add%3A%20anObject%0D%09%22%20Add%20anObject%20to%20the%20receiver.%20%22%0D%0D%09%28self%20includes%3A%20anObject%29%20ifTrue%3A%20%5B%20%5EanObject%20%5D.%0D%09%5Eself%20basicAdd%3A%20anObject"));
smalltalk.bind(smalltalk.Set, unescape("remove%3AifAbsent%3A"), "remove_ifAbsent_", function Set__remove_ifAbsent_(anObject,aBlock){
const self = this; return self['@contents'].remove_ifAbsent_(anObject,aBlock);
}
, "removing", unescape("remove%3A%20anObject%20ifAbsent%3A%20aBlock%0D%09%22%20Remove%20anObject%20from%20the%20receiver.%0D%09Return%20the%20result%20of%20evaluating%20aBlock%20if%20anObject%20is%20not%20in%20the%20receiver.%0D%09%22%0D%0D%09%5Econtents%20remove%3A%20anObject%20ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.Set, unescape("copyFrom%3Ato%3A"), "copyFrom_to_", function Set__copyFrom_to_(anIndex,anotherIndex){
const self = this; return self.shouldNotImplement_("copyFrom:to:");
}
, "copying", unescape("copyFrom%3A%20anIndex%20to%3A%20anotherIndex%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20from%20anIndex%20to%20anotherIndex.%20%22%0D%0D%09%5Eself%20shouldNotImplement%3A%20%23copyFrom%3Ato%3A"));
smalltalk.bind(smalltalk.Set, unescape("asJavascript"), "asJavascript", function Set__asJavascript(){
const self = this; return ((("smalltalk."._comma(((self.$klass).name())))._comma(unescape(".newContents_%28")))._comma((self['@contents'].asJavascript())))._comma(unescape("%29"));
}
, "converting", unescape("asJavascript%0D%09%22%20Return%20the%20javascript%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5E%27smalltalk.%27%2Cself%20class%20name%0D%09%09%2C%27.newContents_%28%27%2C%20contents%20asJavascript%20%2C%27%29%27"));
smalltalk.bind(smalltalk.Set, unescape("%3D"), "_eq", function Set___eq(aSet){
const self = this; var $early={name:"stReturn"};
try {
if (((self.$klass)._eq((aSet.$klass))).not()) {return false};
if (((self.size())._eq((aSet.size()))).not()) {return false};
self.do_((function Set__(each){
if ((aSet.includes_(each)).not()) {$early.result=false; throw ($early)} else {return nil};
}
));
return true;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "comparing", unescape("%3D%20aSet%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20equal%20to%20aSet.%20%22%0D%0D%09self%20class%20%3D%20aSet%20class%20ifFalse%3A%20%5B%5Efalse%5D.%0D%09self%20size%20%3D%20aSet%20size%20ifFalse%3A%20%5B%5Efalse%5D.%0D%09self%20do%3A%20%5B%3Aeach%20%7C%20%28aSet%20includes%3A%20each%29%20ifFalse%3A%20%5B%5Efalse%5D%20%5D.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Set, unescape("asArray"), "asArray", function Set__asArray(){
const self = this; return self['@contents'].copy();
}
, "converting", unescape("asArray%0D%09%22%20Return%20an%20array%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%5Econtents%20copy"));
smalltalk.bind(smalltalk.Set, unescape("toString"), "toString", function Set__toString(){
const self = this; return (((self.$klass).name())._comma(" withAll: "))._comma(((self.asArray()).printString()));
}
, "converting", unescape("toString%0D%09%22%20Convert%20the%20receiver%20to%20a%20String.%20%22%0D%0D%09%5Eself%20class%20name%2C%27%20withAll%3A%20%27%2Cself%20asArray%20printString"));
smalltalk.bind(smalltalk.Set, unescape("sorted"), "sorted", function Set__sorted(){
const self = this; return (self.asArray()).sort();
}
, "sorting", unescape("sorted%0D%09%22%20Return%20the%20contents%20of%20the%20receiver%20sorted.%20%22%0D%0D%09%5Eself%20asArray%20sort"));
smalltalk.bind(smalltalk.Set, unescape("sorted%3A"), "sorted_", function Set__sorted_(aBlock){
const self = this; return (self.asArray()).sort_(aBlock);
}
, "sorting", unescape("sorted%3A%20aBlock%0D%09%22%20Return%20a%20sorted%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20asArray%20sort%3A%20aBlock"));
smalltalk.bind(smalltalk.Set, unescape("do%3A"), "do_", function Set__do_(aBlock){
const self = this; return self['@contents'].do_(aBlock);
}
, "enumerating", unescape("do%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%5Econtents%20do%3A%20aBlock"));
smalltalk.bind(smalltalk.Set, unescape("detect%3AifNone%3A"), "detect_ifNone_", function Set__detect_ifNone_(aBlock,anotherBlock){
const self = this; return self['@contents'].detect_ifNone_(aBlock,anotherBlock);
}
, "enumerating", unescape("detect%3A%20aBlock%20ifNone%3A%20anotherBlock%0D%09%22%20Return%20the%20object%20in%20the%20receiver%20that%20return%20true%20when%20evaluated%20with%20aBlock%20or%20the%20result%20of%20evaluating%20anotherBlock.%20%22%0D%0D%09%5Econtents%20detect%3A%20aBlock%20ifNone%3A%20anotherBlock"));
smalltalk.bind(smalltalk.Set, unescape("reverseDo%3A"), "reverseDo_", function Set__reverseDo_(aBlock){
const self = this; return self['@contents'].reverseDo_(aBlock);
}
, "enumerating", unescape("reverseDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver%20in%20reverse%20order%20of%20iteration.%20%22%0D%0D%09%5Econtents%20reverseDo%3A%20aBlock"));
smalltalk.bind(smalltalk.Set, unescape("collect%3A"), "collect_", function Set__collect_(aBlock){
const self = this; return (self.$klass).withAll_((self['@contents'].collect_(aBlock)));
}
, "enumerating", unescape("collect%3A%20aBlock%0D%09%22%20Return%20a%20collection%20with%20the%20result%20of%20evaluating%20aBlock%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20class%20withAll%3A%20%28contents%20collect%3A%20aBlock%29"));
smalltalk.bind(smalltalk.Set, unescape("do%3AseparatedBy%3A"), "do_separatedBy_", function Set__do_separatedBy_(aBlock,anotherBlock){
const self = this; return self['@contents'].do_separatedBy_(aBlock,anotherBlock);
}
, "enumerating", unescape("do%3A%20aBlock%20separatedBy%3A%20anotherBlock%0D%09%22%20Evaluate%20aBlock%20for%20contents%20of%20the%20receiver%20evaluating%20anotherBlock%20inbetween%20aBlock%20evaluations.%20%22%0D%0D%09%5Econtents%20do%3A%20aBlock%20separatedBy%3A%20anotherBlock"));
smalltalk.bind(smalltalk.Set, unescape("inject%3Ainto%3A"), "inject_into_", function Set__inject_into_(anObject,aBlock){
const self = this; return self['@contents'].inject_into_(anObject,aBlock);
}
, "enumerating", unescape("inject%3A%20anObject%20into%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20for%20result%20of%20previous%20evaluation%20and%20contents%20of%20the%20receiver.%0D%09On%20first%20evaluation%20anObject%20is%20used%20as%20first%20argument%20to%20evaluate%20aBlock.%0D%09%22%0D%0D%09%5Econtents%20inject%3A%20anObject%20into%3A%20aBlock"));
smalltalk.bind(smalltalk.Set, unescape("select%3A"), "select_", function Set__select_(aBlock){
const self = this; return (self.$klass).withAll_((self['@contents'].select_(aBlock)));
}
, "enumerating", unescape("select%3A%20aBlock%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20with%20elements%20wich%20evaluates%20aBlock%20to%20true.%20%22%0D%0D%09%5Eself%20class%20withAll%3A%20%28contents%20select%3A%20aBlock%29"));
smalltalk.bind(smalltalk.Set, unescape("reject%3A"), "reject_", function Set__reject_(aBlock){
const self = this; return (self.$klass).withAll_((self['@contents'].reject_(aBlock)));
}
, "enumerating", unescape("reject%3A%20aBlock%0D%09%22%20Return%20the%20contents%20of%20the%20receiver%20wich%20evaluates%20aBlock%20to%20false.%20%22%0D%0D%09%5Eself%20class%20withAll%3A%20%28contents%20reject%3A%20aBlock%29"));
smalltalk.bind(smalltalk.Set, unescape("reversed"), "reversed", function Set__reversed(){
const self = this; return self['@contents'].reversed();
}
, "copying", unescape("reversed%0D%09%22%20Return%20an%20array%20with%20the%20contents%20of%20the%20receiver%20in%20reverse%20order.%20%22%0D%0D%09%5Econtents%20reversed"));
smalltalk.bind(smalltalk.Set, unescape("notEmpty"), "notEmpty", function Set__notEmpty(){
const self = this; return self['@contents'].notEmpty();
}
, "testing", unescape("notEmpty%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20not%20empty.%20%22%0D%0D%09%5Econtents%20notEmpty"));
smalltalk.bind(smalltalk.Set, unescape("isEmpty"), "isEmpty", function Set__isEmpty(){
const self = this; return self['@contents'].isEmpty();
}
, "testing", unescape("isEmpty%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20empty.%20%22%0D%0D%09%5Econtents%20isEmpty"));
smalltalk.bind(smalltalk.Set, unescape("occurrencesOf%3A"), "occurrencesOf_", function Set__occurrencesOf_(anObject){
const self = this; if ((self.includes_(anObject)).valueOf()) {return (1)} else {return (0)};
}
, "counting", unescape("occurrencesOf%3A%20anObject%0D%09%22%20Return%20the%20occurrences%20of%20anObject%20in%20the%20receiver.%20%22%0D%0D%09%5E%28self%20includes%3A%20anObject%29%20ifTrue%3A%20%5B%201%20%5D%20ifFalse%3A%20%5B%200%20%5D"));
smalltalk.bind(smalltalk.Set, unescape("asSet"), "asSet", function Set__asSet(){
const self = this; return self;
}
, "converting", unescape("asSet%0D%09%22%20Return%20the%20receiver%20contents%20in%20a%20Set.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Set, unescape("shallowCopy"), "shallowCopy", function Set__shallowCopy(){
const self = this; return (self.$klass).newContents_((self['@contents'].copy()));
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20class%20newContents%3A%20contents%20copy"));
smalltalk.bind(smalltalk.Set, unescape("deepCopy"), "deepCopy", function Set__deepCopy(){
const self = this; return (self.$klass).newContents_((self['@contents'].deepCopy()));
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20class%20newContents%3A%20contents%20deepCopy"));
smalltalk.addClass("SequenceableCollection", smalltalk.Collection, [], 'Kernel');
smalltalk.SequenceableCollection.$classVariableNames=("");
smalltalk.bind(smalltalk.SequenceableCollection, unescape("at%3A"), "at_", function SequenceableCollection__at_(anIndex){
const self = this; return self.at_ifAbsent_(anIndex,(function SequenceableCollection__(){
return self.objectNotFoundAt_(anIndex);
}
));
}
, "accessing", unescape("at%3A%20anIndex%0D%09%22%20Return%20the%20object%20in%20the%20receiver%20at%20anIndex%20position.%20%22%0D%0D%09%5Eself%20at%3A%20anIndex%20ifAbsent%3A%20%5B%20self%20objectNotFoundAt%3A%20anIndex%20%5D"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("at%3AifAbsent%3A"), "at_ifAbsent_", function SequenceableCollection__at_ifAbsent_(anIndex,aBlock){
const self = this; return self.subclassResponsibility_("at:ifAbsent:");
}
, "accessing", unescape("at%3A%20anIndex%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20object%20in%20the%20receiver%20at%20anIndex%20position%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23at%3AifAbsent%3A"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("at%3Aput%3A"), "at_put_", function SequenceableCollection__at_put_(anIndex,anObject){
const self = this; return self.subclassResponsibility_("at:put:");
}
, "accessing", unescape("at%3A%20anIndex%20put%3A%20anObject%0D%09%22%20Set%20the%20object%20in%20the%20receiver%20at%20anIndex%20position.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23at%3Aput%3A"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("at%3AifAbsentPut%3A"), "at_ifAbsentPut_", function SequenceableCollection__at_ifAbsentPut_(aKey,aBlock){
const self = this; return self.at_ifAbsent_(aKey,(function SequenceableCollection__(){
return self.at_put_(aKey,(aBlock.value()));
}
));
}
, "accessing", unescape("at%3A%20aKey%20ifAbsentPut%3A%20aBlock%0D%09%22%20Return%20the%20value%20at%20aKey%2C%20or%20add%20the%20result%20of%20evaluating%20aBlock%20to%20the%20receiver%20if%20it%20is%20absent.%20%22%0D%0D%09%5Eself%20at%3A%20aKey%20ifAbsent%3A%20%5B%20self%20at%3A%20aKey%20put%3A%20aBlock%20value%20%5D"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("copyFrom%3Ato%3A"), "copyFrom_to_", function SequenceableCollection__copyFrom_to_(anIndex,anotherIndex){
const self = this; return self.subclassResponsibility_("copyFrom:to:");
}
, "copying", unescape("copyFrom%3A%20anIndex%20to%3A%20anotherIndex%0D%09%22%20Return%20a%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23copyFrom%3Ato%3A"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("indexOf%3A"), "indexOf_", function SequenceableCollection__indexOf_(anObject){
const self = this; return self.indexOf_ifAbsent_(anObject,(function SequenceableCollection__(){
return (0);
}
));
}
, "testing", unescape("indexOf%3A%20anObject%0D%09%22%20Return%20the%20position%20of%20anObject%20in%20the%20receiver%2C%20or%200.%20%22%0D%0D%09%5Eself%20indexOf%3A%20anObject%20ifAbsent%3A%20%5B%200%20%5D"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("indexOf%3AifAbsent%3A"), "indexOf_ifAbsent_", function SequenceableCollection__indexOf_ifAbsent_(anObject,aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKSequenceableCollection.primIndexOfIfAbsent(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("indexOf%3A%20anObject%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20position%20of%20anObject%20in%20the%20receiver%2C%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%3Cprimitive%3A%27primIndexOfIfAbsent%27%20module%3A%27SKSequenceableCollection%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("do%3A"), "do_", function SequenceableCollection__do_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKSequenceableCollection.primDo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "enumerating", unescape("do%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primDo%27%20module%3A%20%27SKSequenceableCollection%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("detect%3AifNone%3A"), "detect_ifNone_", function SequenceableCollection__detect_ifNone_(aBlock,anotherBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKSequenceableCollection.primDetectIfNone(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "enumerating", unescape("detect%3A%20aBlock%20ifNone%3A%20anotherBlock%0D%09%22%20Return%20the%20object%20in%20the%20receiver%20that%20return%20true%20when%20evaluated%20with%20aBlock%20or%20the%20result%20of%20evaluating%20anotherBlock.%20%22%0D%0D%09%3Cprimitive%3A%20%27primDetectIfNone%27%20module%3A%20%27SKSequenceableCollection%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("doWithIndex%3A"), "doWithIndex_", function SequenceableCollection__doWithIndex_(aBlock){
var element = nil;
const self = this; (1).to_do_((self.size()),(function SequenceableCollection__(index){
return aBlock.value_value_((self.at_(index)),index);
}
));
return self;
}
, "enumerating", unescape("doWithIndex%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%7C%20element%20%7C%0D%091%20to%3A%20self%20size%0D%09%09do%3A%0D%09%09%09%5B%3Aindex%20%7C%0D%09%09%09aBlock%0D%09%09%09%09value%3A%20%28self%20at%3A%20index%29%0D%09%09%09%09value%3A%20index%5D"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("reversed"), "reversed", function SequenceableCollection__reversed(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKSequenceableCollection.primReversed(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "copying", unescape("reversed%0D%09%22%20Return%20an%20array%20with%20the%20contents%20of%20the%20receiver%20in%20reverse%20order.%20%22%0D%0D%09%3Cprimitive%3A%20%27primReversed%27%20module%3A%20%27SKSequenceableCollection%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("isEmpty"), "isEmpty", function SequenceableCollection__isEmpty(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKSequenceableCollection.primIsEmpty(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "testing", unescape("isEmpty%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20empty.%0D%09Note%3A%20%5Eself%20size%20%3D%200%20is%20slower%20than%20inlined%20impl.%22%0D%0D%09%3Cprimitive%3A%20%27primIsEmpty%27%20module%3A%20%27SKSequenceableCollection%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("reverseDo%3A"), "reverseDo_", function SequenceableCollection__reverseDo_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKSequenceableCollection.primReverseDo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "enumerating", unescape("reverseDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver%20in%20reverse%20order%20of%20iteration.%20%22%0D%0D%09%3Cprimitive%3A%20%27primReverseDo%27%20module%3A%20%27SKSequenceableCollection%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("includes%3A"), "includes_", function SequenceableCollection__includes_(anObject){
const self = this; var $early={name:"stReturn"};
try {
if ((self.isObject_(anObject)).not()) {self.error_("argument must be an object")};
self.do_((function SequenceableCollection__(each){
if ((anObject._eq(each)).valueOf()) {$early.result=true; throw ($early)} else {return nil};
}
));
return false;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "testing", unescape("includes%3A%20anObject%0D%09%22%20Return%20true%20if%20anObject%20is%20in%20the%20receiver.%0D%09Note%3A%20the%20indexOf%28%29%20function%20fail%20to%20search%20in%20case%20of%20string%20literals%20in%20Array%20contents.%0D%09%22%0D%09%28self%20isObject%3A%20anObject%29%0D%09%09ifFalse%3A%20%5Bself%20error%3A%20%27argument%20must%20be%20an%20object%27%5D.%0D%09self%20do%3A%20%5B%3Aeach%20%7C%20anObject%20%3D%20each%20ifTrue%3A%5B%5Etrue%5D%5D.%0D%09%5Efalse.%20"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("occurrencesOf%3A"), "occurrencesOf_", function SequenceableCollection__occurrencesOf_(anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKSequenceableCollection.primOccurrencesOf(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "counting", unescape("occurrencesOf%3A%20anObject%0D%09%22%20Return%20the%20occurrences%20of%20anObject%20in%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primOccurrencesOf%27%20module%3A%20%27SKSequenceableCollection%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("first"), "first", function SequenceableCollection__first(){
const self = this; return self.at_((1));
}
, "accessing", unescape("first%0D%09%22%20Return%20the%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20at%3A%201"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("fourth"), "fourth", function SequenceableCollection__fourth(){
const self = this; return self.at_((4));
}
, "accessing", unescape("fourth%0D%09%22%20Return%20the%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20at%3A%204"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("last"), "last", function SequenceableCollection__last(){
const self = this; return self.at_((self.size()));
}
, "accessing", unescape("last%0D%09%22%20Return%20the%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20at%3A%20self%20size"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("second"), "second", function SequenceableCollection__second(){
const self = this; return self.at_((2));
}
, "accessing", unescape("second%0D%09%22%20Return%20the%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20at%3A%202"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("third"), "third", function SequenceableCollection__third(){
const self = this; return self.at_((3));
}
, "accessing", unescape("third%0D%09%22%20Return%20the%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20at%3A%203"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("removeLast"), "removeLast", function SequenceableCollection__removeLast(){
const self = this; return self.remove_((self.last()));
}
, "removing", unescape("removeLast%0D%09%22%20Remove%20the%20last%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20remove%3A%20self%20last"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("removeFirst"), "removeFirst", function SequenceableCollection__removeFirst(){
const self = this; return self.remove_((self.first()));
}
, "removing", unescape("removeFirst%0D%09%22%20Remove%20the%20first%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20remove%3A%20self%20first"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("addLast%3A"), "addLast_", function SequenceableCollection__addLast_(anObject){
const self = this; return self.add_(anObject);
}
, "adding", unescape("addLast%3A%20anObject%0D%09%22%20Add%20the%20object%20in%20the%20receiver%20%28at%20end%29.%20%22%0D%0D%09%5Eself%20add%3A%20anObject"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("atAll%3Aput%3A"), "atAll_put_", function SequenceableCollection__atAll_put_(indices,anObject){
const self = this; indices.do_((function SequenceableCollection__(index){
return self.at_put_(index,anObject);
}
));
return self;
}
, "accessing", unescape("atAll%3A%20indices%20put%3A%20anObject%0D%09%22%20Return%20the%20receiver%20after%20replacing%20those%20elements%2C%20indexed%20by%20the%20indices%2C%20with%20anObject.%20%22%0D%0D%09indices%20do%3A%20%5B%20%3Aindex%20%7C%20self%20at%3A%20index%20put%3A%20anObject%20%5D"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("atAllPut%3A"), "atAllPut_", function SequenceableCollection__atAllPut_(anObject){
const self = this; ((1).to_((self.size()))).do_((function SequenceableCollection__(index){
return self.at_put_(index,anObject);
}
));
return self;
}
, "accessing", unescape("atAllPut%3A%20anObject%0D%09%22%20Replace%20all%20elements%20of%20the%20receiver%20with%20anObject.%20%22%0D%0D%09%281%20to%3A%20self%20size%29%20do%3A%20%5B%20%3Aindex%20%7C%20self%20at%3A%20index%20put%3A%20anObject%20%5D"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("withIndexDo%3A"), "withIndexDo_", function SequenceableCollection__withIndexDo_(aBlock){
const self = this; ((1).to_((self.size()))).do_((function SequenceableCollection__(index){
return aBlock.value_value_((self.at_(index)),index);
}
));
return self;
}
, "enumerating", unescape("withIndexDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20all%20the%20index%20positions%20in%20the%20receiver.%20%22%0D%0D%09%281%20to%3A%20self%20size%29%20do%3A%20%5B%20%3Aindex%20%7C%0D%09%09aBlock%20value%3A%20%28self%20at%3A%20index%29%20value%3A%20index%0D%09%5D"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("%3D"), "_eq", function SequenceableCollection___eq(aCollection){
var index = nil;
const self = this; var $early={name:"stReturn"};
try {
if (((nil.is_eqeq_(self,aCollection))).valueOf()) {return true};
if (((nil.is_eqeq_(self.$klass,aCollection.$klass))).not()) {return false};
index=self.size();
if ((index._no_eq((aCollection.size()))).valueOf()) {return false};
while((index._lt_eq((0))).not()){if (((self.at_(index))._eq((aCollection.at_(index)))).not()) {$early.result=false; throw ($early)};
index=index._minus((1))};;
return true;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "testing", unescape("%3D%20aCollection%0D%09%22%20Return%20true%20if%20the%20elements%20contained%20by%20the%20receiver%20are%20equal%20to%20the%20elements%20contained%20in%20aCollection.%20%22%0D%0D%09%7C%20index%20%7C%0D%09self%20%3D%3D%20aCollection%20ifTrue%3A%20%5B%20%5Etrue%20%5D.%0D%09self%20class%20%3D%3D%20aCollection%20class%20ifFalse%3A%20%5B%20%5Efalse%20%5D.%0D%09index%20%3A%3D%20self%20size.%0D%09index%20%7E%3D%20aCollection%20size%20ifTrue%3A%20%5B%20%5Efalse%20%5D.%0D%09%5B%20index%20%3C%3D%200%20%5D%20whileFalse%3A%20%5B%0D%09%09%28self%20at%3A%20index%29%20%3D%20%28aCollection%20at%3A%20index%29%20ifFalse%3A%20%5B%20%5Efalse%20%5D.%0D%09%09index%20%3A%3D%20index%20-%201%0D%09%5D.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("beginsWith%3A"), "beginsWith_", function SequenceableCollection__beginsWith_(aCollection){
const self = this; if (((self.size())._lt((aCollection.size()))).valueOf()) {return false};
if (((self.size())._eq((aCollection.size()))).valueOf()) {return aCollection._eq(self)};
return aCollection._eq((self.copyFrom_to_((1),(aCollection.size()))));
}
, "testing", unescape("beginsWith%3A%20aCollection%0D%09%22%20Return%20true%20if%20the%20receiver%20begins%20with%20aCollection.%20%22%0D%0D%09self%20size%20%3C%20aCollection%20size%20ifTrue%3A%20%5B%20%5Efalse%20%5D.%0D%09self%20size%20%3D%20aCollection%20size%20ifTrue%3A%20%5B%20%5EaCollection%20%3D%20self%20%5D.%0D%09%5EaCollection%20%3D%20%28self%20copyFrom%3A%201%20to%3A%20aCollection%20size%29"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("endsWith%3A"), "endsWith_", function SequenceableCollection__endsWith_(aCollection){
const self = this; if (((self.size())._lt((aCollection.size()))).valueOf()) {return false};
if (((self.size())._eq((aCollection.size()))).valueOf()) {return aCollection._eq(self)};
return aCollection._eq((self.copyFrom_to_((((self.size())._minus((aCollection.size())))._plus((1))),(self.size()))));
}
, "testing", unescape("endsWith%3A%20aCollection%0D%09%22%20Return%20true%20if%20the%20receiver%20ends%20with%20aCollection.%20%22%0D%0D%09self%20size%20%3C%20aCollection%20size%20ifTrue%3A%20%5B%20%5Efalse%20%5D.%0D%09self%20size%20%3D%20aCollection%20size%20ifTrue%3A%20%5B%20%5EaCollection%20%3D%20self%20%5D.%0D%09%5EaCollection%20%3D%20%28self%20copyFrom%3A%20self%20size%20-%20aCollection%20size%20+%201%20to%3A%20self%20size%29"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("copyReplaceFrom%3Ato%3Awith%3A"), "copyReplaceFrom_to_with_", function SequenceableCollection__copyReplaceFrom_to_with_(start,stop,aCollection){
const self = this; return ((self.copyFrom_to_((1),(start._minus((1)))))._comma(aCollection))._comma((self.copyFrom_to_((stop._plus((1))),(self.size()))));
}
, "copying", unescape("copyReplaceFrom%3A%20start%20to%3A%20stop%20with%3A%20aCollection%0D%09%22%20Return%20a%20collection%20containing%20a%20copy%20of%20the%20receiver%20with%20the%20elements%20at%20index%20positions%20from%20start%20through%20stop%20replaced%20with%20the%20elements%20of%20aCollection.%20%22%0D%0D%09%5E%28self%20copyFrom%3A%201%20to%3A%20start%20-%201%29%0D%09%09%2C%20aCollection%0D%09%09%2C%20%28self%20copyFrom%3A%20stop%20+%201%20to%3A%20self%20size%29"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("copyWithout%3A"), "copyWithout_", function SequenceableCollection__copyWithout_(anObject){
var index = nil;
const self = this; var $early={name:"stReturn"};
try {
index=self.indexOf_ifAbsent_(anObject,(function SequenceableCollection__(){
$early.result=self.copy(); throw ($early);
}
));
return (self.copyFrom_to_((1),(index._minus((1)))))._comma(((self.copyFrom_to_((index._plus((1))),(self.size()))).copyWithout_(anObject)));
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "copying", unescape("copyWithout%3A%20anObject%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20excluding%20anObject%2C%20if%20any.%20%22%0D%0D%09%7C%20index%20%7C%0D%09index%20%3A%3D%20self%20indexOf%3A%20anObject%20ifAbsent%3A%20%5B%20%5Eself%20copy%20%5D.%0D%09%5E%28self%20copyFrom%3A%201%20to%3A%20index%20-%201%29%0D%09%09%2C%28%28self%20copyFrom%3A%20index%20+%201%20to%3A%20self%20size%29%0D%09%09%09copyWithout%3A%20anObject%29"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("copyWithAll%3A"), "copyWithAll_", function SequenceableCollection__copyWithAll_(aCollection){
const self = this; return self._comma(aCollection);
}
, "copying", unescape("copyWithAll%3A%20aCollection%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20with%20all%20contents%20of%20aCollection.%20%22%0D%0D%09%5Eself%20%2C%20aCollection%20"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("findFirst%3A"), "findFirst_", function SequenceableCollection__findFirst_(aBlock){
const self = this; return self.findFirst_ifAbsent_(aBlock,(function SequenceableCollection__(){
return self.errorAbsentObject();
}
));
}
, "searching", unescape("findFirst%3A%20aBlock%0D%09%22%20Return%20the%20index%20of%20the%20first%20element%20of%20the%20receiver%20that%20causes%20aBlock%20to%20evaluate%20to%20true.%0D%20%20%20%20%20%20%20%20%20If%20no%20such%20element%20is%20found%2C%20report%20an%20error.%0D%09%22%0D%0D%09%5Eself%20findFirst%3A%20aBlock%20ifAbsent%3A%20%5B%20self%20errorAbsentObject%20%5D"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("findFirst%3AifAbsent%3A"), "findFirst_ifAbsent_", function SequenceableCollection__findFirst_ifAbsent_(aBlock,absentBlock){
var index = nil;
var size = nil;
const self = this; size=self.size();
index=(1);
while((index._lt_eq(size)).valueOf()){if ((aBlock.value_((self.at_(index)))).valueOf()) {return index};
index=index._plus((1))};;
return absentBlock.value();
}
, "searching", unescape("findFirst%3A%20aBlock%20ifAbsent%3A%20absentBlock%0D%09%22%20Return%20the%20index%20of%20the%20first%20element%20of%20the%20receiver%20that%20causes%20aBlock%20to%20evaluate%20to%20true.%0D%09If%20no%20such%20element%20is%20found%2C%20return%20the%20result%20of%20evaluating%20the%20argument%20block.%0D%09%22%0D%0D%09%7C%20index%20size%20%7C%0D%09size%20%3A%3D%20self%20size.%0D%09index%20%3A%3D%201.%0D%09%5B%20index%20%3C%3D%20size%20%5D%20whileTrue%3A%20%5B%0D%09%09%28aBlock%20value%3A%20%28self%20at%3A%20index%29%29%20ifTrue%3A%20%5B%20%5Eindex%20%5D.%0D%09%09index%20%3A%3D%20index%20+%201%0D%09%5D.%0D%09%5EabsentBlock%20value"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("findLast%3A"), "findLast_", function SequenceableCollection__findLast_(aBlock){
const self = this; return self.findLast_ifAbsent_(aBlock,(function SequenceableCollection__(){
return self.errorAbsentObject();
}
));
}
, "searching", unescape("findLast%3A%20aBlock%0D%09%22%20Return%20the%20index%20of%20the%20last%20element%20of%20the%20receiver%20that%20causes%20aBlock%20to%20evaluate%20to%20true.%0D%09If%20no%20such%20element%20is%20found%2C%20report%20an%20error.%0D%09%22%0D%0D%09%5Eself%20findLast%3A%20aBlock%20ifAbsent%3A%20%5B%20self%20errorAbsentObject%20%5D"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("findLast%3AifAbsent%3A"), "findLast_ifAbsent_", function SequenceableCollection__findLast_ifAbsent_(aBlock,absentBlock){
var index = nil;
const self = this; index=self.size();
while((index._gt((0))).valueOf()){if ((aBlock.value_((self.at_(index)))).valueOf()) {return index};
index=index._minus((1))};;
return absentBlock.value();
}
, "searching", unescape("findLast%3A%20aBlock%20ifAbsent%3A%20absentBlock%0D%09%22%20Return%20the%20index%20of%20the%20last%20element%20of%20the%20receiver%20that%20causes%20aBlock%20to%20evaluate%20to%20true.%0D%09If%20no%20such%20element%20is%20found%2C%20return%20the%20result%20of%20evaluating%20the%20argument%20block.%0D%09%22%0D%0D%09%7C%20index%20%7C%0D%09index%20%3A%3D%20self%20size.%0D%09%5B%20index%20%3E%200%20%5D%20whileTrue%3A%20%5B%0D%09%09%28aBlock%20value%3A%20%28self%20at%3A%20index%29%29%20ifTrue%3A%20%5B%20%5Eindex%20%5D.%0D%09%09index%20%3A%3D%20index%20-%201%0D%09%5D.%0D%09%5EabsentBlock%20value"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("indexOfCollection%3A"), "indexOfCollection_", function SequenceableCollection__indexOfCollection_(aCollection){
var index1 = nil;
var index2 = nil;
var limit1 = nil;
var limit2 = nil;
const self = this; limit2=aCollection.size();
limit1=((self.size())._minus(limit2))._plus((1));
index1=(1);
while((index1._lt_eq(limit1)).valueOf()){if (((self.at_(index1))._eq((aCollection.at_((1))))).valueOf()) {index2=(2);
while(((index2._lt_eq(limit2)).and_((function SequenceableCollection__(){
return (self.at_(((index1._plus(index2))._minus((1)))))._eq((aCollection.at_(index2)));
}
))).valueOf()){index2=index2._plus((1))};;
if ((index2._gt(limit2)).valueOf()) {return index1}};
index1=index1._plus((1))};;
return (0);
}
, "indexing", unescape("indexOfCollection%3A%20aCollection%0D%09%22%20Return%20the%20index%20position%20of%20the%20first%20occurrence%20of%20aCollection%20in%20the%20receiver%20%28or%200%29.%20%22%0D%0D%09%7C%20index1%20index2%20limit1%20limit2%20%7C%0D%09limit2%20%3A%3D%20aCollection%20size.%0D%09limit1%20%3A%3D%20self%20size%20-%20limit2%20+%201.%0D%09index1%20%3A%3D%201.%0D%09%5B%20index1%20%3C%3D%20limit1%20%5D%20whileTrue%3A%20%5B%0D%09%09%28self%20at%3A%20index1%29%20%3D%20%28aCollection%20at%3A%201%29%20ifTrue%3A%20%5B%0D%09%09%09index2%20%3A%3D%202.%0D%09%09%09%5B%20index2%20%3C%3D%20limit2%20and%3A%20%5B%0D%09%09%09%09%28self%20at%3A%20index1%20+%20index2%20-%201%29%20%3D%20%28aCollection%20at%3A%20index2%29%0D%09%09%09%5D%20%5D%20whileTrue%3A%20%5B%20index2%20%3A%3D%20index2%20+%201%20%5D.%0D%09%09index2%20%3E%20limit2%20ifTrue%3A%20%5B%20%5Eindex1%20%5D%0D%09%09%5D.%0D%09%09index1%20%3A%3D%20index1%20+%201%0D%09%5D.%0D%09%5E0"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("replaceFrom%3Ato%3Awith%3A"), "replaceFrom_to_with_", function SequenceableCollection__replaceFrom_to_with_(start,stop,aCollection){
const self = this; if ((((stop._minus(start))._plus((1)))._eq((aCollection.size()))).not()) {return self.error_("Replacement has wrong size")};
self.replaceFrom_to_with_startingAt_(start,stop,aCollection,(1));
return self;
}
, "replace", unescape("replaceFrom%3A%20start%20to%3A%20stop%20with%3A%20aCollection%0D%09%22%20Return%20the%20receiver.%0D%09Replace%20the%20elements%20of%20the%20receiver%20at%20index%20positions%20start%20through%20stop%2C%20with%20the%20elements%20of%20aCollection.%20%22%0D%0D%09stop%20-%20start%20+%201%20%3D%20aCollection%20size%20ifFalse%3A%20%5B%0D%09%09%5Eself%20error%3A%20%27Replacement%20has%20wrong%20size%27%0D%09%5D.%0D%09self%0D%09%09replaceFrom%3A%20start%0D%09%09to%3A%20stop%0D%09%09with%3A%20aCollection%0D%09%09startingAt%3A%201"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("replaceFrom%3Ato%3Awith%3AstartingAt%3A"), "replaceFrom_to_with_startingAt_", function SequenceableCollection__replaceFrom_to_with_startingAt_(start,stop,aCollection,repStart){
var index1 = nil;
var index2 = nil;
const self = this; if ((((nil.is_eqeq_(self,aCollection))).and_((function SequenceableCollection__(){
return repStart._lt(start);
}
))).valueOf()) {index2=(repStart._plus(stop))._minus(start);
index1=stop;
while((start._lt_eq(index1)).valueOf()){self.at_put_(index1,(aCollection.at_(index2)));
index1=index1._minus((1));
index2=index2._minus((1))};;
return self};
index2=repStart;
index1=start;
while((index1._lt_eq(stop)).valueOf()){self.at_put_(index1,(aCollection.at_(index2)));
index1=index1._plus((1));
index2=index2._plus((1))};;
return self;
}
, "replace", unescape("replaceFrom%3A%20start%0D%20%20%20%20to%3A%20stop%0D%20%20%20%20with%3A%20aCollection%0D%20%20%20%20startingAt%3A%20repStart%0D%09%22%20Return%20the%20receiver.%0D%09Replace%20the%20elements%20of%20the%20receiver%20at%20index%20positions%20start%20through%20stop%20with%20consecutive%0D%20%20%20%20%20%20%20%20%20elements%20of%20aCollection%20beginning%20at%20index%20position%20repStart.%0D%09%22%0D%0D%09%7C%20index1%20index2%20%7C%0D%09%28self%20%3D%3D%20aCollection%20and%3A%20%5B%20repStart%20%3C%20start%20%5D%29%20ifTrue%3A%20%5B%20%22do%20backward%20move%20for%20same%20object%22%0D%09%09index2%20%3A%3D%20repStart%20+%20stop%20-%20start.%0D%09%09index1%20%3A%3D%20stop.%0D%09%09%5B%20start%20%3C%3D%20index1%20%5D%20whileTrue%3A%20%5B%0D%09%09%09self%20at%3A%20index1%20put%3A%20%28aCollection%20at%3A%20index2%29.%0D%09%09%09index1%20%3A%3D%20index1%20-%201.%0D%09%09%09index2%20%3A%3D%20index2%20-%201%0D%09%09%5D.%0D%09%09%5Eself%0D%09%5D.%0D%09index2%20%3A%3D%20repStart.%0D%09index1%20%3A%3D%20start.%0D%09%5B%20index1%20%3C%3D%20stop%20%5D%20whileTrue%3A%20%5B%0D%09%09self%20at%3A%20index1%20put%3A%20%28aCollection%20at%3A%20index2%29.%0D%09%09index1%20%3A%3D%20index1%20+%201.%0D%09%09index2%20%3A%3D%20index2%20+%201%0D%09%5D"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("replaceFrom%3Ato%3Awith%3AstartingWith%3A"), "replaceFrom_to_with_startingWith_", function SequenceableCollection__replaceFrom_to_with_startingWith_(start,stop,replacement,replacementStart){
const self = this; return self.replaceFrom_to_with_startingAt_(start,stop,replacement,replacementStart);
}
, "replace", unescape("replaceFrom%3A%20start%0D%20%20%20%20to%3A%20stop%0D%20%20%20%20with%3A%20replacement%0D%20%20%20%20startingWith%3A%20replacementStart%0D%09%22%20Replace%20the%20elements%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09replaceFrom%3A%20start%0D%09%09to%3A%20stop%0D%09%09with%3A%20replacement%0D%09%09startingAt%3A%20replacementStart"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("replaceFrom%3Ato%3AwithObject%3A"), "replaceFrom_to_withObject_", function SequenceableCollection__replaceFrom_to_withObject_(start,stop,anObject){
var index = nil;
const self = this; index=start;
while((index._lt_eq(stop)).valueOf()){self.at_put_(index,anObject);
index=index._plus((1))};;
return anObject;
}
, "replace", unescape("replaceFrom%3A%20start%20to%3A%20stop%20withObject%3A%20anObject%0D%09%22Replace%20each%20of%20the%20elements%20of%20the%20receiver%20at%20index%20positions%20start%20through%20stop%20with%20anObject.%20%22%0D%0D%09%7C%20index%20%7C%0D%09index%20%3A%3D%20start.%0D%09%5B%20index%20%3C%3D%20stop%20%5D%20whileTrue%3A%20%5B%0D%09%09self%20at%3A%20index%20put%3A%20anObject.%0D%09%09index%20%3A%3D%20index%20+%201%0D%09%5D.%0D%09%5EanObject"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("with%3Ado%3A"), "with_do_", function SequenceableCollection__with_do_(aCollection,aBlock){
var first = nil;
var second = nil;
const self = this; first=self.stream();
second=aCollection.stream();
while(((first.atEnd()).or_((function SequenceableCollection__(){
return second.atEnd();
}
))).not()){aBlock.value_value_((first.next()),(second.next()))};;
return self;
}
, "iterating", unescape("with%3A%20aCollection%20do%3A%20aBlock%0D%09%22%20For%20each%20pair%20of%20elements%20evaluate%20aBlock%20with%20those%20elements%20as%20the%20arguments.%20%22%0D%0D%09%7C%20first%20second%20%7C%0D%09first%09%3A%3D%20self%20stream.%0D%09second%09%3A%3D%20aCollection%20stream.%0D%09%5B%20first%20atEnd%20or%3A%20%5B%20second%20atEnd%20%5D%20%5D%20whileFalse%3A%20%5B%0D%09%09aBlock%20value%3A%20first%20next%20value%3A%20second%20next%0D%09%5D."));
smalltalk.addClass("String", smalltalk.SequenceableCollection, [], 'Kernel');
smalltalk.String.$classVariableNames=("");
smalltalk.bind(smalltalk.String.$klass, unescape("streamClass"), "streamClass", function String_class__streamClass(){
const self = this; return smalltalk.StringStream;
}
, "accessing", unescape("streamClass%0D%09%22%20Return%20the%20streamming%20support%20for%20the%20receiver%27s%20instances.%20%22%0D%0D%09%5EStringStream"));
smalltalk.bind(smalltalk.String.$klass, unescape("fromString%3A"), "fromString_", function String_class__fromString_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primFromString(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "instantiation", unescape("fromString%3A%20aString%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primFromString%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String.$klass, unescape("cr"), "cr", function String_class__cr(){
const self = this; return self.fromCharCode_((13));
}
, "accessing", unescape("cr%0D%09%22%20Return%20the%20singular%20instance.%20%22%0D%0D%09%5Eself%20fromCharCode%3A%2013.%20"));
smalltalk.bind(smalltalk.String.$klass, unescape("lf"), "lf", function String_class__lf(){
const self = this; return self.fromCharCode_((10));
}
, "accessing", unescape("lf%0D%09%22%20Return%20the%20singular%20instance.%20%22%0D%0D%09%5Eself%20fromCharCode%3A%2010.%20"));
smalltalk.bind(smalltalk.String.$klass, unescape("crlf"), "crlf", function String_class__crlf(){
const self = this; return (self.cr())._comma((self.lf()));
}
, "accessing", unescape("crlf%0D%09%22%20Return%20the%20singular%20instance.%20%22%0D%0D%09%5Eself%20cr%2C%20self%20lf.%20"));
smalltalk.bind(smalltalk.String.$klass, unescape("space"), "space", function String_class__space(){
const self = this; return self.fromCharCode_((32));
}
, "accessing", unescape("space%0D%09%22%20Return%20the%20singular%20instance.%20%22%0D%0D%09%5Eself%20fromCharCode%3A%2032.%20"));
smalltalk.bind(smalltalk.String.$klass, unescape("tab"), "tab", function String_class__tab(){
const self = this; return self.fromCharCode_((9));
}
, "accessing", unescape("tab%0D%09%22%20Return%20the%20singular%20instance.%20%22%0D%0D%09%5Eself%20fromCharCode%3A%209.%20"));
smalltalk.bind(smalltalk.String.$klass, unescape("zero"), "zero", function String_class__zero(){
const self = this; return self.fromCharCode_((0));
}
, "accessing", unescape("zero%0D%09%22%20Return%20the%20singular%20instance.%20%22%0D%0D%09%5Eself%20fromCharCode%3A%200.%20"));
smalltalk.bind(smalltalk.String.$klass, unescape("with%3A"), "with_", function String_class__with_(aCharacter){
const self = this; return aCharacter;
}
, "instantiation", unescape("with%3A%20aCharacter%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5EaCharacter"));
smalltalk.bind(smalltalk.String.$klass, unescape("with%3Awith%3A"), "with_with_", function String_class__with_with_(aCharacter,bCharacter){
const self = this; return aCharacter._comma(bCharacter);
}
, "instantiation", unescape("with%3A%20aCharacter%20with%3A%20bCharacter%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5EaCharacter%20%2C%20bCharacter"));
smalltalk.bind(smalltalk.String.$klass, unescape("with%3Awith%3Awith%3A"), "with_with_with_", function String_class__with_with_with_(aCharacter,bCharacter,cCharacter){
const self = this; return (aCharacter._comma(bCharacter))._comma(cCharacter);
}
, "instantiation", unescape("with%3A%20aCharacter%20with%3A%20bCharacter%20with%3A%20cCharacter%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5EaCharacter%20%2C%20bCharacter%20%2C%20cCharacter"));
smalltalk.bind(smalltalk.String.$klass, unescape("with%3Awith%3Awith%3Awith%3A"), "with_with_with_with_", function String_class__with_with_with_with_(aCharacter,bCharacter,cCharacter,dCharacter){
const self = this; return ((aCharacter._comma(bCharacter))._comma(cCharacter))._comma(dCharacter);
}
, "instantiation", unescape("with%3A%20aCharacter%20with%3A%20bCharacter%0D%09with%3A%20cCharacter%20with%3A%20dCharacter%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5EaCharacter%20%2C%20bCharacter%20%2C%20cCharacter%20%2C%20dCharacter"));
smalltalk.bind(smalltalk.String.$klass, unescape("fromCharCode%3A"), "fromCharCode_", function String_class__fromCharCode_(anArrayOrNumber){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primFromCharCode(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "instantiation", unescape("fromCharCode%3A%20anArrayOrNumber%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primFromCharCode%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String.$klass, unescape("streamContents%3A"), "streamContents_", function String_class__streamContents_(aBlock){
var stream = nil;
const self = this; stream="".writeStream();
aBlock.value_(stream);
return stream.contents();
}
, "instance creation", unescape("streamContents%3A%20aBlock%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20%27%27%20writeStream.%0D%09aBlock%20value%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.String.$klass, unescape("doItSelector"), "doItSelector", function String_class__doItSelector(){
const self = this; return "skDoIt";
}
, "doIt", unescape("doItSelector%0D%09%22%20Return%20the%20selector%20to%20use%20for%20doIt%20evaluations.%0D%09Warning%3A%20this%20selector%20will%20not%20be%20dump%20on%20image%20nor%20change%20log%20expressions.%0D%09%22%0D%0D%09%5E%23skDoIt"));
smalltalk.bind(smalltalk.String, unescape("%3D"), "_eq", function String___eq(anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primEquals(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return false;
}
, "comparing", unescape("%3D%20anObject%0D%20%20%20%20%22%20Return%20true%20if%20the%20receiver%20is%20equal%20to%20anObject.%20%22%0D%0D%09%3Cprimitive%3A%27primEquals%27%20module%3A%27SKString%27%3E%0D%09%5Efalse.%20"));
smalltalk.bind(smalltalk.String, unescape("size"), "size", function String__size(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primSize(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("size%0D%09%22%20Return%20the%20size%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primSize%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("at%3A"), "at_", function String__at_(anIndex){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primAt(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("at%3A%20anIndex%0D%09%22%20Return%20the%20receiver%20at%20anIndex.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAt%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("at%3Aput%3A"), "at_put_", function String__at_put_(anIndex,anObject){
const self = this; return self.errorReadOnly();
}
, "accessing", unescape("at%3A%20anIndex%20put%3A%20anObject%0D%09%22%20Set%20the%20receiver%20at%20anIndex.%20%22%0D%0D%09%5Eself%20errorReadOnly"));
smalltalk.bind(smalltalk.String, unescape("at%3AifAbsent%3A"), "at_ifAbsent_", function String__at_ifAbsent_(anIndex,aBlock){
const self = this; return (function(){var $1$; $1$ = self.at_(anIndex); if (nil.isNil_($1$)) { return aBlock.value() } else { return $1$; }})();
}
, "accessing", unescape("at%3A%20anIndex%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20receiver%20at%20anIndex%20position%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%5E%28self%20at%3A%20anIndex%29%20ifNil%3A%20aBlock"));
smalltalk.bind(smalltalk.String, unescape("do%3A"), "do_", function String__do_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primDo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "enumerating", unescape("do%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primDo%27%20module%3A%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("detect%3AifNone%3A"), "detect_ifNone_", function String__detect_ifNone_(aBlock,anotherBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primDetectIfNone(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "enumerating", unescape("detect%3A%20aBlock%20ifNone%3A%20anotherBlock%0D%09%22%20Return%20the%20object%20in%20the%20receiver%20that%20return%20true%20when%20evaluated%20with%20aBlock%20or%20the%20result%20of%20evaluating%20anotherBlock.%20%22%0D%0D%09%3Cprimitive%3A%27primDetectIfNone%27%20module%3A%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("includes%3A"), "includes_", function String__includes_(anObject){
const self = this; return (self.indexOf_(anObject))._gt((0));
}
, "testing", unescape("includes%3A%20anObject%0D%09%22%20Return%20true%20if%20anObject%20is%20in%20receiver%27s%20contents.%20%22%0D%0D%09%5E%28self%20indexOf%3A%20anObject%29%20%3E%200"));
smalltalk.bind(smalltalk.String, unescape("withIndexDo%3A"), "withIndexDo_", function String__withIndexDo_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primWithIndexDo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "enumerating", unescape("withIndexDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20all%20the%20index%20positions%20in%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primWithIndexDo%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("copyWithout%3A"), "copyWithout_", function String__copyWithout_(anObject){
const self = this; return self.replace_with_(anObject,"");
}
, "copying", unescape("copyWithout%3A%20anObject%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20excluding%20anObject%2C%20if%20any.%20%22%0D%0D%09%5Eself%20replace%3A%20anObject%20with%3A%20%27%27"));
smalltalk.bind(smalltalk.String, unescape("asSymbol"), "asSymbol", function String__asSymbol(){
const self = this; return self;
}
, "conversion", unescape("asSymbol%0D%09%22%20Return%20a%20symbol%20with%20the%20same%20characters%20as%20the%20receiver.%20%22%0D%0D%09%5Eself%20%22we%20do%20not%20discriminate%20singular%20strings%22"));
smalltalk.bind(smalltalk.String, unescape("argumentCount"), "argumentCount", function String__argumentCount(){
const self = this; if ((self.includes_(":")).valueOf()) {return self.occurrencesOf_(":")};
if ((self.match_(unescape("%5E%5B%5C%7C%5C%26%5C%5C%5C+%5C*%5C/%5C%3D%5C%3E%5C%3C%5C%2C%5C@%5C%25%5C%7E%5C-%5D"))).valueOf()) {return (1)};
return (0);
}
, "evaluating", unescape("argumentCount%0D%09%22%20Return%20the%20number%20of%20arguments%20required%20to%20evaluate%20the%20receiver.%20%22%0D%0D%09%28self%20includes%3A%20%27%3A%27%29%0D%09%09ifTrue%3A%5B%5E%28self%20occurrencesOf%3A%20%27%3A%27%29%5D.%0D%09%28self%20match%3A%20%27%5E%5B%5C%7C%5C%26%5C%5C%5C+%5C*%5C/%5C%3D%5C%3E%5C%3C%5C%2C%5C@%5C%25%5C%7E%5C-%5D%27%29%20%0D%09%09ifTrue%3A%20%5B%20%5E1%20%5D.%0D%09%5E0%20"));
smalltalk.bind(smalltalk.String, unescape("isLiteral"), "isLiteral", function String__isLiteral(){
const self = this; return (nil.isNil_((smalltalk.RegularExpression.fromString_(unescape("%5B%5Ea-zA-Z0-9_%3A%5D"))).exec_(self)));
}
, "testing", unescape("isLiteral%0D%09%22%20Return%20true%20if%20the%20receiver%20can%20be%20output%20using%20literal%20notation.%20%22%0D%0D%09%5E%28%28RegularExpression%20fromString%3A%20%27%5B%5Ea-zA-Z0-9_%3A%5D%27%29%20exec%3A%20self%29%20isNil"));
smalltalk.bind(smalltalk.String, unescape("asLiteral"), "asLiteral", function String__asLiteral(){
const self = this; if ((self.isLiteral()).valueOf()) {return unescape("%23")._comma(self)} else {return self.printString()};
}
, "converting", unescape("asLiteral%0D%09%22%20Return%20the%20receiver%20in%20literal%20notation.%20%22%0D%0D%09%5Eself%20isLiteral%20ifTrue%3A%20%5B%20%24%23%20%2Cself%20%5D%20ifFalse%3A%20%5B%20self%20printString%20%5D"));
smalltalk.bind(smalltalk.Object, unescape("asLiteral"), "asLiteral", function Object__asLiteral(){
const self = this; return self.printString();
}
, "converting", unescape("asLiteral%0D%09%22%20Return%20the%20receiver%20in%20literal%20notation.%20%22%0D%0D%09%5Eself%20printString"));
smalltalk.bind(smalltalk.String, unescape("primMatch%3A"), "primMatch_", function String__primMatch_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primMatch(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("primMatch%3A%20aString%0D%09%22%20Return%20the%20list%20of%20matches%20in%20the%20receiver%22%0D%0D%09%3Cprimitive%3A%20%27primMatch%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("occurrencesOf%3A"), "occurrencesOf_", function String__occurrencesOf_(aString){
var result = nil;
var index = nil;
const self = this; if ((aString.isString()).not()) {result=self.primMatch_(aString);
if (((nil.isNil_(result))).valueOf()) {return (0)};
return (function(){var $1$; $1$ = result["length"]; return nil.isNil_($1$) ? nil : $1$})()};
if (((aString.size())._eq((1))).valueOf()) {result=self.primMatch_((smalltalk.RegularExpression.fromString_flag_(((unescape("%5B")._comma(aString))._comma(unescape("%5D"))),"g")));
if (((nil.isNil_(result))).valueOf()) {return (0)};
return (function(){var $2$; $2$ = result["length"]; return nil.isNil_($2$) ? nil : $2$})()};
result=(0);
index=(0);
while(((function String__(){
index=self.indexOf_startingAt_(aString,(index._plus((1))));
return index._gt((1));
}
)()).valueOf()){result=result._plus((1))};;
return result;
}
, "testing", unescape("occurrencesOf%3A%20aString%0D%09%22%20Return%20the%20times%20aString%20can%20be%20found%20in%20the%20receiver.%20%22%0D%0D%09%7C%20result%20index%20%7C%0D%09aString%20isString%20ifFalse%3A%20%5B%0D%09%09result%20%3A%3D%20self%20primMatch%3A%20aString.%0D%09%09result%20isNil%20ifTrue%3A%20%5B%20%5E0%20%5D.%0D%09%09%5Eresult%20basicAt%3A%20%27length%27%0D%09%5D.%0D%09aString%20size%20%3D%201%20ifTrue%3A%20%5B%0D%09%09result%20%3A%3D%20self%20primMatch%3A%20%28RegularExpression%0D%09%09%09%09fromString%3A%20%27%5B%27%2CaString%2C%27%5D%27%0D%09%09%09%09flag%3A%20%27g%27%29.%0D%09%09result%20isNil%20ifTrue%3A%20%5B%20%5E0%20%5D.%0D%09%09%5Eresult%20basicAt%3A%20%27length%27%0D%09%5D.%0D%09result%20%3A%3D%200.%20index%20%3A%3D%200.%0D%09%5B%09index%20%3A%3D%20self%20indexOf%3A%20aString%20startingAt%3A%20index%20+%201.%0D%09%09index%20%3E%201%20%5D%20whileTrue%3A%20%5B%20result%20%3A%3D%20result%20+%201%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.String, unescape("startsWith%3A"), "startsWith_", function String__startsWith_(aString){
const self = this; return self.beginsWith_(aString);
}
, "testing", unescape("startsWith%3A%20aString%0D%09%22%20Returns%20true%20if%20the%20receiver%20begins%20with%20the%20characters%20of%20aString.%20%22%0D%0D%09%5Eself%20beginsWith%3A%20aString"));
smalltalk.bind(smalltalk.String, unescape("escaped"), "escaped", function String__escaped(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primEscaped(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("escaped%0D%09%22%20Return%20the%20receiver%20with%20escape%20codes.%20%22%0D%0D%09%3Cprimitive%3A%20%27primEscaped%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("unescaped"), "unescaped", function String__unescaped(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primUnescaped(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("unescaped%0D%09%22%20Return%20the%20receiver%20from%20escape%20codes.%20%22%0D%0D%09%3Cprimitive%3A%20%27primUnescaped%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("escapedCode"), "escapedCode", function String__escapedCode(){
var escaped = nil;
const self = this; escaped=self.escaped();
if ((escaped._eq(self)).valueOf()) {return (unescape("%22")._comma(escaped))._comma(unescape("%22"))};
return (unescape("unescape%28%22")._comma(escaped))._comma(unescape("%22%29"));
}
, "converting", unescape("escapedCode%0D%09%22%20Return%20the%20code%20to%20reproduce%20receiver%20from%20%28javascript%29%20code.%20%22%0D%0D%09%7C%20escaped%20%7C%0D%09escaped%20%3A%3D%20self%20escaped.%0D%09escaped%20%3D%20self%20ifTrue%3A%20%5B%20%5E%24%22%20%2Cescaped%20%2C%24%22%20%5D.%0D%09%5E%27unescape%28%22%27%20%2Cescaped%20%2C%27%22%29%27"));
smalltalk.bind(smalltalk.String, unescape("asEncodedURI"), "asEncodedURI", function String__asEncodedURI(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primURIEncode(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("asEncodedURI%0D%09%22%20Return%20the%20receiver%20encoded%20as%20an%20URI%20component.%0D%09Encodes%20special%20characters%20and%20it%20encodes%20the%20following%20characters%3A%20%2C%20/%20%3F%20%3A%20@%20%26%20%3D%20+%20%24%20%23%22%0D%0D%09%3Cprimitive%3A%20%27primURIEncode%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("asDecodedURI"), "asDecodedURI", function String__asDecodedURI(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primURIDecode(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("asDecodedURI%0D%09%22%20Return%20the%20receiver%20decoded%20as%20an%20URI%20component.%20%22%0D%0D%09%3Cprimitive%3A%20%27primURIDecode%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("add%3A"), "add_", function String__add_(anObject){
const self = this; return self.errorReadOnly();
}
, "adding", unescape("add%3A%20anObject%0D%09%22%20Add%20anObject%20to%20the%20receiver.%20%22%0D%0D%09%5Eself%20errorReadOnly"));
smalltalk.bind(smalltalk.Object, unescape("--%3E"), "_minus_minus_gt", function Object___minus_minus_gt(anObject){
const self = this; return smalltalk.Association.key_value_((self.asArrayOfSubstringsSeparatedBy_(".")),anObject);
}
, "converting", unescape("--%3E%20anObject%0D%09%22%20Return%20a%20far-association%20of%20the%20receiver%20to%20anObject.%20%22%0D%0D%09%5EAssociation%20key%3A%20%28self%20asArrayOfSubstringsSeparatedBy%3A%20%24.%29%20value%3A%20anObject"));
smalltalk.bind(smalltalk.String, unescape("%2C"), "_comma", function String___comma(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primConcat(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "copying", unescape("%2C%20aString%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20with%20aString%20appended.%20%22%0D%0D%09%3Cprimitive%3A%27primConcat%27%20module%3A%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("+"), "_plus", function String___plus(aString){
const self = this; return self._comma(aString);
}
, "copying", unescape("+%20aString%0D%0D%09%5Eself%2C%20aString"));
smalltalk.bind(smalltalk.String, unescape("copyWith%3A"), "copyWith_", function String__copyWith_(anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primCopyWith(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "copying", unescape("copyWith%3A%20anObject%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20with%20anObject.%20%22%0D%0D%09%3Cprimitive%3A%20%27primCopyWith%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("copyFrom%3Ato%3A"), "copyFrom_to_", function String__copyFrom_to_(anIndex,anotherIndex){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primCopyFromTo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "copying", unescape("copyFrom%3A%20anIndex%20to%3A%20anotherIndex%0D%09%22%20Return%20the%20receiver%20between%20limits.%20%22%0D%0D%09%3Cprimitive%3A%27primCopyFromTo%27%20module%3A%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("shallowCopy"), "shallowCopy", function String__shallowCopy(){
const self = this; return self;
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.String, unescape("deepCopy"), "deepCopy", function String__deepCopy(){
const self = this; return self;
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.String, unescape("reversed"), "reversed", function String__reversed(){
var result = nil;
const self = this; result="";
self.reverseDo_((function String__(c){
return result=result._comma(c);
}
));
return result;
}
, "copying", unescape("reversed%0D%09%22%20Return%20a%20string%20with%20the%20contents%20of%20the%20receiver%20in%20reverse%20order.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20%27%27.%0D%09self%20reverseDo%3A%20%5B%3Ac%7C%20result%20%3A%3D%20result%20%2C%20c%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.String, unescape("indexOf%3A"), "indexOf_", function String__indexOf_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primIndexOf(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("indexOf%3A%20aString%0D%09%22%20Return%20the%20position%20of%20first%20occurrence%20of%20aString%20%28or%200%20if%20not%20present%29.%20%22%0D%0D%09%3Cprimitive%3A%20%27primIndexOf%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("indexOf%3AifAbsent%3A"), "indexOf_ifAbsent_", function String__indexOf_ifAbsent_(aString,aBlock){
var result = nil;
const self = this; result=self.indexOf_(aString);
if ((result._eq((0))).valueOf()) {return aBlock.value()} else {return result};
}
, "accessing", unescape("indexOf%3A%20aString%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20position%20of%20first%20occurrence%20of%20aString%20%28or%20the%20result%20of%20evaluating%20aBlock%29.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20indexOf%3A%20aString.%0D%09%5Eresult%20%3D%200%20ifTrue%3A%20aBlock%20ifFalse%3A%20%5B%20result%20%5D"));
smalltalk.bind(smalltalk.String, unescape("indexOf%3AstartingAt%3A"), "indexOf_startingAt_", function String__indexOf_startingAt_(aString,position){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primIndexOfStartingAt(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("indexOf%3A%20aString%20startingAt%3A%20position%0D%09%22%20Return%20the%20position%20of%20first%20occurrence%20of%20aString%20after%20position%20%28or%200%20if%20not%20present%29.%20%22%0D%0D%09%3Cprimitive%3A%20%27primIndexOfStartingAt%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed."));
smalltalk.bind(smalltalk.String, unescape("lastIndexOf%3A"), "lastIndexOf_", function String__lastIndexOf_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primLastIndexOf(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("lastIndexOf%3A%20aString%0D%09%22%20Return%20the%20position%20of%20last%20occurrence%20of%20aString%20%28or%200%20if%20not%20present%29.%20%22%0D%0D%09%3Cprimitive%3A%20%27primLastIndexOf%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("lastIndexOf%3AifAbsent%3A"), "lastIndexOf_ifAbsent_", function String__lastIndexOf_ifAbsent_(aString,aBlock){
var result = nil;
const self = this; result=self.lastIndexOf_(aString);
if ((result._eq((0))).valueOf()) {return aBlock.value()} else {return result};
}
, "accessing", unescape("lastIndexOf%3A%20aString%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20position%20of%20last%20occurrence%20of%20aString%20%28or%20the%20result%20of%20evaluating%20aBlock%29.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20lastIndexOf%3A%20aString.%0D%09%5Eresult%20%3D%200%20ifTrue%3A%20aBlock%20ifFalse%3A%20%5B%20result%20%5D"));
smalltalk.bind(smalltalk.String, unescape("lastIndexOf%3AstartingAt%3A"), "lastIndexOf_startingAt_", function String__lastIndexOf_startingAt_(aString,position){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primLastIndexOfStartingAt(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("lastIndexOf%3A%20aString%20startingAt%3A%20position%0D%09%22%20Return%20the%20position%20of%20last%20occurrence%20of%20aString%20before%20position%20%28or%200%20if%20not%20present%29.%20%22%0D%0D%09%3Cprimitive%3A%20%27primLastIndexOfStartingAt%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("upTo%3AstartingAt%3A"), "upTo_startingAt_", function String__upTo_startingAt_(aString,position){
var index = nil;
const self = this; index=self.indexOf_startingAt_(aString,position);
index=(index._eq((0))).ifTrue_ifFalse_((function String__(){
return self.size();
}
),(function String__(){
return index._minus((1));
}
));
return self.copyFrom_to_(position,index);
}
, "accessing", unescape("upTo%3A%20aString%20startingAt%3A%20position%0D%09%22%20Return%20the%20receiver%20upto%20first%20occurrence%20of%20aString%20after%20position.%20%22%0D%0D%09%7C%20index%20%7C%0D%09index%20%3A%3D%20self%20indexOf%3A%20aString%20startingAt%3A%20position.%0D%09index%20%3A%3D%20index%20%3D%200%20ifTrue%3A%20%5B%20self%20size%20%5D%20ifFalse%3A%20%5B%20index%20-%201%20%5D.%0D%09%5Eself%20copyFrom%3A%20position%20to%3A%20index"));
smalltalk.bind(smalltalk.String, unescape("upTo%3A"), "upTo_", function String__upTo_(aCharacter){
const self = this; return self.upTo_startingAt_(aCharacter,(1));
}
, "accessing", unescape("upTo%3A%20aCharacter%0D%09%22%20Return%20the%20receiver%20upto%20first%20occurrence%20of%20aCharacter.%20%22%0D%0D%09%5Eself%20upTo%3A%20aCharacter%20startingAt%3A%201"));
smalltalk.bind(smalltalk.String, unescape("upToLast%3A"), "upToLast_", function String__upToLast_(aString){
var index = nil;
const self = this; var $early={name:"stReturn"};
try {
index=self.lastIndexOf_ifAbsent_(aString,(function String__(){
$early.result=self; throw ($early);
}
));
return self.copyFrom_to_((1),(index._minus((1))));
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "accessing", unescape("upToLast%3A%20aString%0D%09%22%20Return%20the%20receiver%20upto%20last%20occurrence%20of%20aString.%20%22%0D%0D%09%7C%20index%20%7C%0D%09index%20%3A%3D%20self%20lastIndexOf%3A%20aString%20ifAbsent%3A%20%5B%20%5Eself%20%5D.%0D%09%5Eself%20copyFrom%3A%201%20to%3A%20index%20-%201"));
smalltalk.bind(smalltalk.String, unescape("fromLast%3A"), "fromLast_", function String__fromLast_(aString){
var index = nil;
const self = this; var $early={name:"stReturn"};
try {
index=self.lastIndexOf_ifAbsent_(aString,(function String__(){
$early.result=self; throw ($early);
}
));
return self.copyFrom_to_((index._plus((aString.size()))),(self.size()));
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "accessing", unescape("fromLast%3A%20aString%0D%09%22%20Return%20the%20receiver%20contents%20from%20last%20occurrence%20of%20aString.%20%22%0D%0D%09%7C%20index%20%7C%0D%09index%20%3A%3D%20self%20lastIndexOf%3A%20aString%20ifAbsent%3A%20%5B%20%5Eself%20%5D.%0D%09%5Eself%20copyFrom%3A%20index%20+%20aString%20size%20to%3A%20self%20size"));
smalltalk.bind(smalltalk.String.$klass, unescape("reservedWords"), "reservedWords", function String_class__reservedWords(){
const self = this; return ["abstract", "as", "boolean", "break", "byte", "case", "catch", "char", "class", "continue", "const", "debugger", "default", "delete", "do", "double", "else", "enum", "export", "extends", false, "final", "finally", "float", "for", "function", "goto", "if", "implements", "import", "in", "instanceof", "int", "interface", "is", "long", "namespace", "native", "new", "null", "package", "private", "protected", "public", "return", "short", "static", "super", "switch", "synchronized", "this", "throw", "throws", "transient", true, "try", "typeof", "use", "var", "void", "volatile", "while", "with"];
}
, "private", unescape("reservedWords%0D%09%22%20Private%20-%20Return%20the%20reserved%20names%20of%20javascript%20language.%20%22%0D%0D%09%5E%23%28%0D%09abstract%09as%09%09boolean%09%09break%09%09byte%0D%09case%09%09catch%09%09char%09%09class%09%09continue%0D%09const%09%09debugger%09default%09%09delete%09%09do%0D%09double%09%09else%09%09enum%09%09export%09%09extends%0D%09false%09%09final%09%09finally%09%09float%09%09for%0D%09function%09goto%09%09if%09%09implements%09import%0D%09in%09%09instanceof%09int%09%09interface%09is%0D%09long%09%09namespace%09native%09%09new%09%09null%0D%09package%09%09private%09%09protected%09public%09%09return%0D%09short%09%09static%09%09super%09%09switch%09%09synchronized%0D%09this%09%09throw%09%09throws%09%09transient%09true%0D%09try%09%09typeof%09%09use%09%09var%09%09void%0D%09volatile%09while%09%09with%0D%09%29"));
smalltalk.bind(smalltalk.String, unescape("asJavascriptName"), "asJavascriptName", function String__asJavascriptName(){
const self = this; if (((self.first())._eq("_")).valueOf()) {return self};
if (((smalltalk.String.reservedWords()).includes_(self)).valueOf()) {return "$$"._comma(self)};
return self;
}
, "converting", unescape("asJavascriptName%0D%09%22%20Private%20-%20Return%20the%20receiver%20as%20a%20valid%20javascript%20name.%20%22%0D%0D%09self%20first%20%3D%20%24_%20ifTrue%3A%20%5B%20%5Eself%20%5D.%0D%09%28String%20reservedWords%20includes%3A%20self%29%20ifTrue%3A%20%5B%20%5E%27%24%24%27%2Cself%20%5D.%0D%09%5Eself"));
smalltalk.bind(smalltalk.String, unescape("asSelector"), "asSelector", function String__asSelector(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primAsSelector(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("asSelector%0D%09%22Private%20-%20Return%20the%20receiver%20as%20a%20valid%20javascript%20selector.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAsSelector%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("asJavascript"), "asJavascript", function String__asJavascript(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primAsJavascript(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("asJavascript%0D%09%22%20Return%20the%20javascript%20representation%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primAsJavascript%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("replace%3Awith%3A"), "replace_with_", function String__replace_with_(aString,anotherString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primReplaceWith(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "regular expressions", unescape("replace%3A%20aString%20with%3A%20anotherString%0D%09%22%20Return%20the%20result%20of%20replacement%20of%20aString%20with%20anotherString%20in%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primReplaceWith%27%20module%3A%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("replaceAll%3Awith%3A"), "replaceAll_with_", function String__replaceAll_with_(aString,otherString){
const self = this; return self.replace_with_(aString,otherString);
}
, "regular expressions", unescape("replaceAll%3A%20aString%20with%3A%20otherString%0D%09%22%20Return%20the%20result%20of%20replacement%20of%20aString%20with%20anotherString%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09replace%3A%20aString%0D%09%09with%3A%20otherString"));
smalltalk.bind(smalltalk.String, unescape("replaceRegexp%3Awith%3A"), "replaceRegexp_with_", function String__replaceRegexp_with_(aRegexp,aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primReplaceRegExp(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; var $early={name:"stReturn"};
try {
(aRegexp.isRegExp()).ifFalse_ifFalse_((((function String__(){
$early.result=self.error_("First argument must be a Regular Expression"); throw ($early);
}
).aString()).isString()),(((function String__(){
$early.result=self.error_("Seconds argument must be a String"); throw ($early);
}
).self()).primitiveFailed()));
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "regular expressions", unescape("replaceRegexp%3A%20aRegexp%20with%3A%20aString%0D%09%22%20Return%20the%20result%20of%20replacement%20of%20aRegexp%20with%20aString%20in%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primReplaceRegExp%27%20module%3A%20%27SKString%27%3E%0D%09aRegexp%20isRegExp%0D%09%09ifFalse%3A%5B%5Eself%20error%3A%20%27First%20argument%20must%20be%20a%20Regular%20Expression%27%5D%0D%09aString%20isString%0D%09%09ifFalse%3A%5B%5Eself%20error%3A%20%27Seconds%20argument%20must%20be%20a%20String%27%5D%0D%09self%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("asStream"), "asStream", function String__asStream(){
const self = this; return self.stream();
}
, "coverting", unescape("asStream%0D%09%22Answer%20the%20receiver%20as%20a%20Stream.%22%0D%0D%09%5Eself%20stream"));
smalltalk.bind(smalltalk.String, unescape("tokenize%3A"), "tokenize_", function String__tokenize_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primTokenize(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("tokenize%3A%20aString%0D%09%22%20Return%20the%20split%20tokenization%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primTokenize%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("asArrayOfSubstrings"), "asArrayOfSubstrings", function String__asArrayOfSubstrings(){
var result = nil;
var start = nil;
var i = nil;
const self = this; result=smalltalk.Array.$$new();
i=(1);
self.do_((function String__(c){
if (((nil.isNil_(start))).valueOf()) {if ((c.isSeparator()).not()) {start=i}} else {if ((c.isSeparator()).valueOf()) {result.add_((self.copyFrom_to_(start,(i._minus((1))))));
start=nil}};
return i=i._plus((1));
}
));
if (((nil.isNil_(start)===false)).valueOf()) {result.add_((self.copyFrom_to_(start,(self.size()))))};
return result;
}
, "converting", unescape("asArrayOfSubstrings%0D%09%22%20Return%20an%20array%20of%20substrings%20from%20the%20receiver.%0D%09The%20receiver%20is%20divided%20into%20substrings%20by%20one%20or%20more%20occurrences%20of%20separators.%0D%09%22%0D%0D%09%7C%20result%20start%20i%20%7C%0D%09result%20%3A%3D%20Array%20new.%20i%20%3A%3D%201.%0D%09self%20do%3A%20%5B%3Ac%7C%0D%09%09start%20isNil%20ifTrue%3A%20%5B%20%22in%20separator%22%0D%09%09%09c%20isSeparator%20ifFalse%3A%20%5B%20%22start%20of%20substring%22%0D%09%09%09%09start%20%3A%3D%20i.%0D%09%09%09%5D%0D%09%09%5D%20ifFalse%3A%20%5B%20%22in%20word%22%0D%09%09%09c%20isSeparator%20ifTrue%3A%20%5B%20%22end%20of%20substring%22%0D%09%09%09%09result%20add%3A%20%28self%20copyFrom%3A%20start%20to%3A%20i%20-%201%29.%0D%09%09%09%09start%20%3A%3D%20nil.%0D%09%09%09%5D.%0D%09%09%5D.%0D%09%09i%20%3A%3D%20i%20+%201.%0D%09%5D.%0D%09start%20notNil%20ifTrue%3A%20%5B%0D%09%09result%20add%3A%20%28self%20copyFrom%3A%20start%20to%3A%20self%20size%29%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.String, unescape("asArrayOfSubstringsSeparatedBy%3A"), "asArrayOfSubstringsSeparatedBy_", function String__asArrayOfSubstringsSeparatedBy_(aCharacter){
const self = this; return self.tokenize_(aCharacter);
}
, "converting", unescape("asArrayOfSubstringsSeparatedBy%3A%20aCharacter%0D%09%22%20Return%20an%20array%20of%20substrings%20from%20the%20receiver.%0D%09The%20receiver%20is%20divided%20into%20substrings%20by%20one%20or%20more%20occurrences%20of%20aCharacter.%0D%09%22%0D%0D%09%5Eself%20tokenize%3A%20aCharacter"));
smalltalk.bind(smalltalk.String, unescape("match%3A"), "match_", function String__match_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primMatchRegExp(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "regular expressions", unescape("match%3A%20aString%0D%09%22%20Return%20the%20whether%20a%20string%20matches.%20%22%0D%0D%09%3Cprimitive%3A%20%27primMatchRegExp%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("asString"), "asString", function String__asString(){
const self = this; return self;
}
, "converting", unescape("asString%0D%09%22%20Return%20the%20text%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.String, unescape("between%3Aand%3A"), "between_and_", function String__between_and_(min,max){
const self = this; return (min._lt_eq(self)).and_((function String__(){
return self._lt_eq(max);
}
));
}
, "testing", unescape("between%3A%20min%20and%3A%20max%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20greater%20than%20or%20equal%20to%20min%20and%20less%20than%20or%20equal%20to%20max.%20%22%0D%0D%09%5Emin%20%3C%3D%20self%20and%3A%20%5B%20self%20%3C%3D%20max%20%5D"));
smalltalk.bind(smalltalk.String, unescape("isLetter"), "isLetter", function String__isLetter(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primIsLetter(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "testing", unescape("isLetter%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20one%20character%20letter.%20%22%0D%0D%09%3Cprimitive%3A%20%27primIsLetter%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("isDigit"), "isDigit", function String__isDigit(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primIsDigit(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "testing", unescape("isDigit%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20one%20character%20numeric%20digit.%20%22%0D%0D%09%3Cprimitive%3A%20%27primIsDigit%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("isAlphaNumeric"), "isAlphaNumeric", function String__isAlphaNumeric(){
const self = this; return (self.isDigit()).or_((function String__(){
return self.isLetter();
}
));
}
, "testing", unescape("isAlphaNumeric%0D%09%22Answer%20true%20if%20the%20receiver%20is%20an%20alphanumeric%20character.%20%22%0D%0D%09%5Eself%20isDigit%20or%3A%20%5Bself%20isLetter%5D"));
smalltalk.bind(smalltalk.String, unescape("isUpperCase"), "isUpperCase", function String__isUpperCase(){
const self = this; return (self.match_(unescape("%5B%5EA-Z%5D"))).not();
}
, "testing", unescape("isUpperCase%0D%09%22%20Return%20true%20if%20all%20the%20receiver%20characters%20are%20uppercase.%20%22%0D%0D%09%5E%28self%20match%3A%20%27%5B%5EA-Z%5D%27%29%20not"));
smalltalk.bind(smalltalk.String, unescape("isLowerCase"), "isLowerCase", function String__isLowerCase(){
const self = this; return (self.match_(unescape("%5B%5Ea-z%5D"))).not();
}
, "testing", unescape("isLowerCase%0D%09%22%20Return%20true%20if%20all%20the%20receiver%20characters%20are%20lowercase.%20%22%0D%0D%09%5E%28self%20match%3A%20%27%5B%5Ea-z%5D%27%29%20not"));
smalltalk.bind(smalltalk.String, unescape("isUppercase"), "isUppercase", function String__isUppercase(){
const self = this; return self.isUpperCase();
}
, "testing", unescape("isUppercase%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20one%20character%20uppercase.%20%22%0D%0D%09%5Eself%20isUpperCase"));
smalltalk.bind(smalltalk.String, unescape("isLowercase"), "isLowercase", function String__isLowercase(){
const self = this; return self.isLowerCase();
}
, "testing", unescape("isLowercase%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20one%20character%20lowercase.%20%22%0D%0D%09%5Eself%20isLowerCase"));
smalltalk.bind(smalltalk.String, unescape("includesSubstring%3A"), "includesSubstring_", function String__includesSubstring_(aString){
const self = this; return (self.indexOf_(aString))._gt((0));
}
, "testing", unescape("includesSubstring%3A%20aString%0D%0D%09%5E%28self%20indexOf%3A%20aString%29%20%3E%200"));
smalltalk.bind(smalltalk.String, unescape("asUppercase"), "asUppercase", function String__asUppercase(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primAsUppercase(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("asUppercase%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20converted%20to%20uppercase.%20%22%0D%0D%09%3Cprimitive%3A%27primAsUppercase%27%20module%3A%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("asUpperCase"), "asUpperCase", function String__asUpperCase(){
const self = this; return self.asUppercase();
}
, "converting", unescape("asUpperCase%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20converted%20to%20uppercase.%20%22%0D%0D%09%5Eself%20asUppercase"));
smalltalk.bind(smalltalk.String, unescape("asLowercase"), "asLowercase", function String__asLowercase(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primAsLowercase(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "converting", unescape("asLowercase%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20converted%20to%20lowercase.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAsLowercase%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("asLowerCase"), "asLowerCase", function String__asLowerCase(){
const self = this; return self.asLowercase();
}
, "converting", unescape("asLowerCase%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20converted%20to%20lowercase.%20%22%0D%0D%09%5Eself%20asLowercase"));
smalltalk.bind(smalltalk.String, unescape("asSmalltalkName%3A"), "asSmalltalkName_", function String__asSmalltalkName_(upCase){
var up = nil;
var result = nil;
const self = this; if (((upCase.not()).and_((function String__(){
return (self.match_(unescape("%5Ba-z%5D"))).not();
}
))).valueOf()) {return (self.asLowercase()).asSmalltalkName_(upCase)};
up=upCase;
result=self.inject_into_("",(function String__(resultString,each){
if ((unescape("_%3A.%26%25%24%3F").includes_(each)).valueOf()) {up=true;
return resultString} else {return resultString._comma((up.ifTrue_ifFalse_((function String__(){
up=false;
return each.asUppercase();
}
),(function String__(){
return each;
}
))))};
}
));
if ((result.isEmpty()).valueOf()) {return "_"};
if ((upCase).valueOf()) {if (((result.first()).isLowercase()).valueOf()) {return ((result.first()).asUppercase())._comma((result.copyFrom_to_((2),(result.size()))))}} else {if (((result.first()).isUppercase()).valueOf()) {return ((result.first()).asLowercase())._comma((result.copyFrom_to_((2),(result.size()))))}};
return result;
}
, "converting", unescape("asSmalltalkName%3A%20upCase%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20converted%20to%20a%20smalltalk%20global%20name.%20%22%0D%0D%09%7C%20up%20result%20%7C%0D%09%28upCase%20not%20and%3A%20%5B%20%28self%20match%3A%20%27%5Ba-z%5D%27%29%20not%20%5D%29%20ifTrue%3A%20%5B%0D%09%09%5Eself%20asLowercase%20asSmalltalkName%3A%20upCase%0D%09%5D.%0D%09up%20%3A%3D%20upCase.%0D%09result%20%3A%3D%20self%20inject%3A%20%27%27%20into%3A%20%5B%3AresultString%20%3Aeach%7C%0D%09%09%28%27_%3A.%26%25%24%3F%27%20includes%3A%20each%29%20ifTrue%3A%20%5B%20up%20%3A%3D%20true.%20resultString%20%5D%0D%09%09ifFalse%3A%20%5B%20resultString%20%2C%20%28up%0D%09%09%09ifTrue%3A%20%5B%20%20up%20%3A%3D%20false.%20each%20asUppercase%20%5D%0D%09%09%09ifFalse%3A%20%5Beach%5D%29%0D%09%09%5D%0D%09%5D.%0D%09result%20isEmpty%20ifTrue%3A%20%5B%20%5E%24_%20%5D.%0D%09upCase%20ifTrue%3A%20%5B%0D%09%09result%20first%20isLowercase%20ifTrue%3A%20%5B%0D%09%09%09%5Eresult%20first%20asUppercase%20%2C%28result%20copyFrom%3A%202%20to%3A%20result%20size%29%0D%09%09%5D%0D%09%5D%20ifFalse%3A%20%5B%0D%09%09result%20first%20isUppercase%20ifTrue%3A%20%5B%0D%09%09%09%5Eresult%20first%20asLowercase%20%2C%28result%20copyFrom%3A%202%20to%3A%20result%20size%29%0D%09%09%5D%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.String, unescape("asGlobalName"), "asGlobalName", function String__asGlobalName(){
const self = this; return self.asSmalltalkName_(true);
}
, "converting", unescape("asGlobalName%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20converted%20to%20a%20smalltalk%20global%20name.%20%22%0D%0D%09%5Eself%20asSmalltalkName%3A%20true"));
smalltalk.bind(smalltalk.String, unescape("asLocalName"), "asLocalName", function String__asLocalName(){
const self = this; return self.asSmalltalkName_(false);
}
, "converting", unescape("asLocalName%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20converted%20to%20a%20smalltalk%20local%20name.%20%22%0D%0D%09%5Eself%20asSmalltalkName%3A%20false"));
smalltalk.bind(smalltalk.String, unescape("digitValue"), "digitValue", function String__digitValue(){
const self = this; return (("0123456789ABCDEF".indexOf_(self))._minus((1))).max_(((0)._minus((1))));
}
, "converting", unescape("digitValue%0D%09%22%20Return%20the%20digit%20value%20of%20the%20receiver%20%28or%20-1%29.%20%22%0D%0D%09%5E%28%270123456789ABCDEF%27%20indexOf%3A%20self%29%20-%201%20max%3A%200%20-%201"));
smalltalk.bind(smalltalk.String, unescape("asNumber"), "asNumber", function String__asNumber(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primAsNumber(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if ((self.includes_("r")).valueOf()) {return smalltalk.Number.readFrom_((self.readStream()))};
return self.primitiveFailed();
}
, "converting", unescape("asNumber%0D%09%22%20Return%20the%20receiver%20as%20a%20Number.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAsNumber%27%20module%3A%20%27SKString%27%3E%0D%09%28self%20includes%3A%20%22%24r%22%27r%27%29%20ifTrue%3A%20%5B%0D%09%09%5ENumber%20readFrom%3A%20self%20readStream%0D%09%5D.%0D%09%5Eself%20primitiveFailed%20"));
smalltalk.bind(smalltalk.String, unescape("errorReadOnly"), "errorReadOnly", function String__errorReadOnly(){
const self = this; return self.error_(((unescape("Strings%20are%20immutable.%20Attempt%20to%20change%20%22")._comma((self.printString())))._comma(unescape("%22"))));
}
, "error", unescape("errorReadOnly%0D%09%22%20Private%20-%20The%20receiver%20is%20read-only%20instance.%20%22%0D%0D%09%5Eself%20error%3A%20%27Strings%20are%20immutable.%20Attempt%20to%20change%20%22%27%2C%20self%20printString%20%2C%20%27%22%27"));
smalltalk.bind(smalltalk.String, unescape("printOn%3A"), "printOn_", function String__printOn_(aStream){
var escapedSelf = nil;
const self = this; escapedSelf=self.replaceAll_with_(unescape("%27"),unescape("%27%27"));
(function String__($1$){
$1$.nextPut_(unescape("%27"));
$1$.nextPutAll_(escapedSelf);
return $1$.nextPut_(unescape("%27"))}
)(aStream);
return self;
}
, "printing", unescape("printOn%3A%20aStream%0D%0D%09%7C%20escapedSelf%20%7C%0D%09escapedSelf%20%3A%3D%20self%20replaceAll%3A%20%27%27%27%27%20with%3A%20%27%27%27%27%27%27.%0D%09aStream%0D%09%09nextPut%3A%20%24%27%3B%0D%09%09nextPutAll%3A%20escapedSelf%3B%0D%09%09nextPut%3A%20%24%27"));
smalltalk.bind(smalltalk.String, unescape("isString"), "isString", function String__isString(){
const self = this; return true;
}
, "testing", unescape("isString%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20String.%20%22%0D%0D%09%5Etrue"));
smalltalk.bind(smalltalk.String, unescape("isBackSlash"), "isBackSlash", function String__isBackSlash(){
const self = this; return self._eq(unescape("%5C"));
}
, "testing", unescape("isBackSlash%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20back-slash%20string.%20%22%0D%0D%09%5Eself%20%3D%20%24%5C%20"));
smalltalk.bind(smalltalk.String, unescape("%3E"), "_gt", function String___gt(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primGreaterThan(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "comparing", unescape("%3E%20aString%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20greater%20than%20aString.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGreaterThan%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("%3C"), "_lt", function String___lt(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primLessThan(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "comparing", unescape("%3C%20aString%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20smaller%20than%20aString.%20%22%0D%0D%09%3Cprimitive%3A%20%27primLessThan%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("%3E%3D"), "_gt_eq", function String___gt_eq(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primGreaterThanEqualTo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "comparing", unescape("%3E%3D%20aString%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20greater%20than%20or%20equal%20to%20aString.%20%22%0D%0D%09%3Cprimitive%3A%20%27primGreaterThanEqualTo%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("%3C%3D"), "_lt_eq", function String___lt_eq(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primLessThanEqualTo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "comparing", unescape("%3C%3D%20aString%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20smaller%20than%20or%20equal%20to%20aString.%20%22%0D%0D%09%3Cprimitive%3A%27primLessThanEqualTo%27%20module%3A%27SKString%27%3E%0D%09%5Eself%20primitiveFailed."));
smalltalk.bind(smalltalk.String, unescape("equalsIgnoreCase%3A"), "equalsIgnoreCase_", function String__equalsIgnoreCase_(aString){
const self = this; return (self.asLowercase())._eq((aString.asLowercase()));
}
, "comparing", unescape("equalsIgnoreCase%3A%20aString%0D%0D%09%5Eself%20asLowercase%20%3D%20aString%20asLowercase"));
smalltalk.bind(smalltalk.String, unescape("remove%3AifAbsent%3A"), "remove_ifAbsent_", function String__remove_ifAbsent_(anObject,aBlock){
const self = this; return self.errorReadOnly();
}
, "removing", unescape("remove%3A%20anObject%20ifAbsent%3A%20aBlock%0D%09%22%20Remove%20anObject%20from%20the%20receiver.%20%22%0D%0D%09%5Eself%20errorReadOnly"));
smalltalk.bind(smalltalk.String, unescape("asJSONObject"), "asJSONObject", function String__asJSONObject(){
const self = this; return self._comma("");
}
, "converting", unescape("asJSONObject%0D%09%22%20Return%20the%20mapping%20of%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%5Eself%20%2C%20%27%27%0D%22Note%3A%09we%20need%20to%20normalize%20result%20to%20do%20not%20destroy%20typeof%20checkings%0D%09Do%20NOT%20modify%20this%20method%20if%20you%20do%20not%20know%20what%20you%20are%20doing.%0D%09If%20you%20remove%20the%20%2C%27%27%20computation%2C%20the%20returned%20object%20will%20return%20%27object%27%20and%20not%20%27string%27%20as%20result%20of%20typeof%20operation.%0D%22"));
smalltalk.bind(smalltalk.Object, unescape("isCharacter"), "isCharacter", function Object__isCharacter(){
const self = this; return false;
}
, "testing", unescape("isCharacter%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20character.%20%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.String, unescape("isCharacter"), "isCharacter", function String__isCharacter(){
const self = this; return (self.size())._eq((1));
}
, "testing", unescape("isCharacter%0D%09%22%20Characters%20-%20Implemented%20to%20support%20Character%20protocoll%20for%20one-character%20Strings.%20%22%0D%0D%09%5Eself%20size%20%3D%201%20"));
smalltalk.bind(smalltalk.String, unescape("asciiValue"), "asciiValue", function String__asciiValue(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primAsciiValue(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "testing", unescape("asciiValue%0D%09%22%20Characters%20-%20Return%20the%20number%20corresponding%20to%20the%20ASCII%20encoding%20of%20the%20first%20character%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAsciiValue%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("isSeparator"), "isSeparator", function String__isSeparator(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKString.primIsSeparator(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "testing", unescape("isSeparator%0D%09%22%20Return%20true%20if%20the%20receiver%20character%20is%20either%20a%20space%2C%20tab%2C%20carriage-return%2C%20line-feed%2C%20form-feed%20character%2C%20or%20double-byte%20space%2C%20else%20answer%20false.%22%0D%0D%09%3Cprimitive%3A%20%27primIsSeparator%27%20module%3A%20%27SKString%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.String, unescape("asAsciiZ"), "asAsciiZ", function String__asAsciiZ(){
const self = this; return self._comma(((self.$klass).zero()));
}
, "converting", unescape("asAsciiZ%0D%09%22%20Return%20the%20receiver%20with%20ascii%20zero%20appended.%20%22%0D%0D%09%5Eself%20%2C%20self%20class%20zero"));
smalltalk.bind(smalltalk.String, unescape("trimFirst%3Alast%3A"), "trimFirst_last_", function String__trimFirst_last_(firstBlock,lastBlock){
var start = nil;
var stop = nil;
const self = this; var $early={name:"stReturn"};
try {
start=(1);
stop=self.size();
while(((function String__(){
if ((start._gt(stop)).valueOf()) {$early.result=smalltalk.String.$$new(); throw ($early)};
return firstBlock.value_((self.at_(start)));
}
)()).valueOf()){start=start._plus((1))};;
while(((function String__(){
if ((stop._lt(start)).valueOf()) {$early.result=smalltalk.String.$$new(); throw ($early)};
return lastBlock.value_((self.at_(stop)));
}
)()).valueOf()){stop=stop._minus((1))};;
return self.copyFrom_to_(start,stop);
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "selecting", unescape("trimFirst%3A%20firstBlock%20last%3A%20lastBlock%0D%09%22%20Return%20a%20String%20containing%20the%20result%20of%20trimming%20characters%20matching%20blocks%20from%20both%20sides%20of%20the%20receiver.%20%22%0D%0D%09%7C%20start%20stop%20%7C%0D%09start%20%3A%3D%201.%20stop%20%3A%3D%20self%20size.%0D%09%5B%09start%20%3E%20stop%20ifTrue%3A%20%5B%20%5EString%20new%20%5D.%0D%09%09firstBlock%20value%3A%20%28self%20at%3A%20start%29%0D%09%5D%20whileTrue%3A%20%5B%20start%20%3A%3D%20start%20+%201%20%5D.%0D%09%5B%09stop%20%3C%20start%20ifTrue%3A%20%5B%20%5EString%20new%20%5D.%0D%09%09lastBlock%20value%3A%20%28self%20at%3A%20stop%29%0D%09%5D%20whileTrue%3A%20%5B%20stop%20%3A%3D%20stop%20-%201%20%5D.%0D%09%5Eself%20copyFrom%3A%20start%20to%3A%20stop"));
smalltalk.bind(smalltalk.String, unescape("trim%3A"), "trim_", function String__trim_(aBlock){
const self = this; return self.trimFirst_last_(aBlock,aBlock);
}
, "selecting", unescape("trim%3A%20aBlock%0D%09%22%20Return%20a%20String%20containing%20the%20result%20of%20trimming%20characters%20matching%20aBlock%20from%20both%20sides%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20trimFirst%3A%20aBlock%20last%3A%20aBlock"));
smalltalk.bind(smalltalk.String, unescape("trimFirst%3A"), "trimFirst_", function String__trimFirst_(aBlock){
const self = this; return self.trimFirst_last_(aBlock,(function String__(c){
return false;
}
));
}
, "selecting", unescape("trimFirst%3A%20aBlock%0D%09%22%20Return%20a%20String%20containing%20the%20result%20of%20trimming%20characters%20matching%20aBlock%20from%20start%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20trimFirst%3A%20aBlock%20last%3A%20%5B%3Ac%7C%20false%20%5D"));
smalltalk.bind(smalltalk.String, unescape("trimLast%3A"), "trimLast_", function String__trimLast_(aBlock){
const self = this; return self.trimFirst_last_((function String__(c){
return false;
}
),aBlock);
}
, "selecting", unescape("trimLast%3A%20aBlock%0D%09%22%20Return%20a%20String%20containing%20the%20result%20of%20trimming%20characters%20matching%20aBlock%20from%20end%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20trimFirst%3A%20%5B%3Ac%7C%20false%20%5D%20last%3A%20aBlock"));
smalltalk.bind(smalltalk.String, unescape("trimBlanks"), "trimBlanks", function String__trimBlanks(){
const self = this; return self.trim_((function String__(c){
return c.isSeparator();
}
));
}
, "selecting", unescape("trimBlanks%0D%09%22%20Return%20a%20String%20containing%20the%20receiver%20string%20with%20leading%20and%20trailing%20blanks%20removed.%20%22%0D%0D%09%5Eself%20trim%3A%20%5B%3Ac%7C%20c%20isSeparator%20%5D"));
smalltalk.bind(smalltalk.String, unescape("trim%3A"), "trim_", function String__trim_(aBlock){
const self = this; if ((aBlock.isCharacter()).valueOf()) {return self.trim_((function String__(each){
return each._eq(aBlock);
}
))};
return self.trimFirst_last_(aBlock,aBlock);
}
, "selecting", unescape("trim%3A%20aBlock%0D%09%22%20Return%20a%20String%20containing%20the%20result%20of%20trimming%20characters%20matching%20aBlock%20from%20both%20sides%20of%20the%20receiver.%20%22%0D%0D%09aBlock%20isCharacter%0D%09%09ifTrue%3A%20%5B%5Eself%20trim%3A%20%5B%3Aeach%20%7C%20each%20%3D%20aBlock%5D%5D.%0D%09%5Eself%20trimFirst%3A%20aBlock%20last%3A%20aBlock"));
smalltalk.addClass("Array", smalltalk.SequenceableCollection, [], 'Kernel');
smalltalk.Array.$classVariableNames=("");
smalltalk.bind(smalltalk.Array.$klass, unescape("new"), "$$new", function Array_class__$$new(){
const self = this; return [];
}
, "instantiation", unescape("new%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5E%23%28%29"));
smalltalk.bind(smalltalk.Array.$klass, unescape("basicNew%3A"), "basicNew_", function Array_class__basicNew_(size){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primBasicNew(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "instantiation", unescape("basicNew%3A%20size%0D%09%22%20Return%20an%20instance%20of%20the%20receiver%20of%20specified%20size.%20%22%0D%0D%09%3Cprimitive%3A%20%27primBasicNew%27%20module%3A%20%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array.$klass, unescape("new%3A"), "new_", function Array_class__new_(size){
const self = this; return self.basicNew_(size);
}
, "instantiation", unescape("new%3A%20size%0D%09%22%20Return%20an%20instance%20of%20the%20receiver%20of%20specified%20size.%20%22%0D%0D%09%5Eself%20basicNew%3A%20size%20"));
smalltalk.bind(smalltalk.Array.$klass, unescape("with%3A"), "with_", function Array_class__with_(anObject){
var arr = nil;
const self = this; arr=self.basicNew_((1));
arr.at_put_((1),anObject);
return arr;
}
, "instantiation", unescape("with%3A%20anObject%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%7C%20arr%20%7C%0D%09arr%20%3A%3D%20self%20basicNew%3A%201.%0D%09arr%20at%3A%201%20put%3A%20anObject.%0D%09%5Earr.%20"));
smalltalk.bind(smalltalk.Array.$klass, unescape("with%3Awith%3A"), "with_with_", function Array_class__with_with_(anObject,anotherObject){
var arr = nil;
const self = this; arr=self.basicNew_((2));
arr.at_put_((1),anObject);
arr.at_put_((2),anotherObject);
return arr;
}
, "instantiation", unescape("with%3A%20anObject%20with%3A%20anotherObject%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%7C%20arr%20%7C%0D%09arr%20%3A%3D%20self%20basicNew%3A%202.%0D%09arr%20at%3A%201%20put%3A%20anObject.%0D%09arr%20at%3A%202%20put%3A%20anotherObject.%0D%09%5Earr.%20"));
smalltalk.bind(smalltalk.Array.$klass, unescape("with%3Awith%3Awith%3A"), "with_with_with_", function Array_class__with_with_with_(firstObject,secondObject,thirdObject){
var arr = nil;
const self = this; arr=self.basicNew_((3));
arr.at_put_((1),firstObject);
arr.at_put_((2),secondObject);
arr.at_put_((3),thirdObject);
return arr;
}
, "instantiation", unescape("with%3A%20firstObject%20with%3A%20secondObject%20with%3A%20thirdObject%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%7C%20arr%20%7C%0D%09arr%20%3A%3D%20self%20basicNew%3A%203.%0D%09arr%20at%3A%201%20put%3A%20firstObject.%0D%09arr%20at%3A%202%20put%3A%20secondObject.%0D%09arr%20at%3A%203%20put%3A%20thirdObject.%0D%09%5Earr.%20"));
smalltalk.bind(smalltalk.Array.$klass, unescape("withAll%3A"), "withAll_", function Array_class__withAll_(aCollection){
var arr = nil;
var index = nil;
const self = this; index=(1);
arr=smalltalk.Array.basicNew_((aCollection.size()));
aCollection.do_((function Array_class__(each){
arr.at_put_(index,each);
return index=index._plus((1));
}
));
return arr;
}
, "instantiation", unescape("withAll%3A%20aCollection%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%7C%20arr%20index%20%7C%0D%09index%20%3A%3D%201.%0D%09arr%20%3A%3D%20Array%20basicNew%3A%20aCollection%20size.%0D%09aCollection%20do%3A%20%5B%20%3Aeach%20%7C%20%28arr%20at%3A%20index%20put%3A%20each%29.%20index%20%3A%3D%20index%20+%201%5D.%0D%09%5Earr.%20"));
smalltalk.bind(smalltalk.Array.$klass, unescape("with%3Awith%3Awith%3Awith%3A"), "with_with_with_with_", function Array_class__with_with_with_with_(firstObject,secondObject,thirdObject,fourthObject){
var arr = nil;
const self = this; arr=self.basicNew_((4));
arr.at_put_((1),firstObject);
arr.at_put_((2),secondObject);
arr.at_put_((3),thirdObject);
arr.at_put_((4),fourthObject);
return arr;
}
, "instantiation", unescape("with%3A%20firstObject%20with%3A%20secondObject%20with%3A%20thirdObject%20with%3A%20fourthObject%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%7C%20arr%20%7C%0D%09arr%20%3A%3D%20self%20basicNew%3A%204.%0D%09arr%20at%3A%201%20put%3A%20firstObject.%0D%09arr%20at%3A%202%20put%3A%20secondObject.%0D%09arr%20at%3A%203%20put%3A%20thirdObject.%0D%09arr%20at%3A%204%20put%3A%20fourthObject.%0D%09%5Earr.%20"));
smalltalk.bind(smalltalk.Array, unescape("size"), "size", function Array__size(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primSize(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("size%0D%09%22%20Return%20the%20size%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primSize%27%20module%3A%20%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("at%3Aput%3A"), "at_put_", function Array__at_put_(anIndex,anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primAtPut(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("at%3A%20anIndex%20put%3A%20anObject%0D%09%22%20Set%20the%20contents%20of%20the%20receiver%20at%20anIndex.%20%22%0D%0D%09%3Cprimitive%3A%27primAtPut%27%20module%3A%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("at%3A"), "at_", function Array__at_(anIndex){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primAt(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("at%3A%20anIndex%0D%09%22%20Return%20the%20contents%20of%20the%20receiver%20at%20anIndex.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAt%27%20module%3A%20%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("at%3AifAbsent%3A"), "at_ifAbsent_", function Array__at_ifAbsent_(anIndex,aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primAtIfAbsent(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("at%3A%20anIndex%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20contents%20of%20the%20receiver%20at%20anIndex%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%3Cprimitive%3A%27primAtIfAbsent%27%20module%3A%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("do%3A"), "do_", function Array__do_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primDo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "enumerating", unescape("do%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primDo%27%20module%3A%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("isArray"), "isArray", function Array__isArray(){
const self = this; return (nil.is_eqeq_(self.$klass,smalltalk.Array));
}
, "testing", unescape("isArray%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20an%20Array.%20%22%0D%0D%09%5Eself%20class%20%3D%3D%20Array"));
smalltalk.bind(smalltalk.Array, unescape("addAll%3A"), "addAll_", function Array__addAll_(aCollection){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primAddAll(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if ((aCollection.isCollection()).valueOf()) {return self.addAll_((aCollection.asArray()))};
return self.primitiveFailed();
}
, "adding", unescape("addAll%3A%20aCollection%0D%09%22%20Add%20objects%20in%20aCollection%20to%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primAddAll%27%20module%3A%27SKArray%27%3E%0D%09aCollection%20isCollection%20ifTrue%3A%5B%5Eself%20addAll%3A%20aCollection%20asArray%5D.%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("shallowCopy"), "shallowCopy", function Array__shallowCopy(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primShallowCopy(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primShallowCopy%27%20module%3A%20%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("deepCopy"), "deepCopy", function Array__deepCopy(){
const self = this; return self.collect_((function Array__(each){
return each.deepCopy();
}
));
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20collect%3A%20%5B%3Aeach%20%7C%20each%20deepCopy%20%5D"));
smalltalk.bind(smalltalk.Array, unescape("copyFrom%3Ato%3A"), "copyFrom_to_", function Array__copyFrom_to_(anIndex,anotherIndex){
var result = nil;
const self = this; result=(self.$klass).$$new();
anIndex.to_do_(anotherIndex,(function Array__(each){
return result.add_((self.at_(each)));
}
));
return result;
}
, "copying", unescape("copyFrom%3A%20anIndex%20to%3A%20anotherIndex%0D%09%22%20Return%20the%20receiver%20contents%20in%20the%20interval.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20class%20new.%0D%09anIndex%20to%3A%20anotherIndex%20do%3A%20%5B%3Aeach%20%7C%20result%20add%3A%20%28self%20at%3A%20each%29%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Array, unescape("copyWithAll%3A"), "copyWithAll_", function Array__copyWithAll_(aCollection){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primCopyWithAll(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; if ((aCollection.isCollection()).valueOf()) {return self.copyWithAll_((aCollection.asArray()))};
return self.primitiveFailed();
}
, "copying", unescape("copyWithAll%3A%20aCollection%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20with%20all%20contents%20of%20aCollection.%20%22%0D%0D%09%3Cprimitive%3A%27primCopyWithAll%27%20module%3A%27SKArray%27%3E%0D%09aCollection%20isCollection%20ifTrue%3A%5B%5Eself%20copyWithAll%3A%20aCollection%20asArray%5D.%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("%2C"), "_comma", function Array___comma(aCollection){
const self = this; return self.copyWithAll_(aCollection);
}
, "copying", unescape("%2C%20aCollection%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20with%20all%20contents%20of%20aCollection.%20%22%0D%0D%09%5Eself%20copyWithAll%3A%20aCollection.%20"));
smalltalk.bind(smalltalk.Array, unescape("join%3A"), "join_", function Array__join_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primJoin(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "enumerating", unescape("join%3A%20aString%0D%09%22%20Return%20a%20string%20with%20the%20receiver%27s%20contents%20separated%20by%20aString.%20%22%0D%0D%09%3Cprimitive%3A%20%27primJoin%27%20module%3A%20%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("asJavascript"), "asJavascript", function Array__asJavascript(){
const self = this; return (unescape("%5B")._comma(((self.collect_((function Array__(each){
return each.asJavascript();
}
))).join_(unescape("%2C%20")))))._comma(unescape("%5D"));
}
, "converting", unescape("asJavascript%0D%09%22%20Return%20the%20javascript%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5E%27%5B%27%2C%20%28%28self%20collect%3A%20%5B%3Aeach%20%7C%20each%20asJavascript%5D%29%20join%3A%20%27%2C%20%27%29%2C%20%20%27%5D%27"));
smalltalk.bind(smalltalk.Array, unescape("sort%3A"), "sort_", function Array__sort_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primSort(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "sorting", unescape("sort%3A%20aBlock%0D%09%22%20Sort%20%28inplace%29%20the%20receiver%27s%20contents%20with%20aBlock.%20%22%0D%0D%09%3Cprimitive%3A%20%27primSort%27%20module%3A%20%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("asArray"), "asArray", function Array__asArray(){
const self = this; return self;
}
, "converting", unescape("asArray%0D%09%22%20Return%20an%20array%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Array, unescape("remove%3AifAbsent%3A"), "remove_ifAbsent_", function Array__remove_ifAbsent_(anObject,aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primRemoveIfAbsent(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "removing", unescape("remove%3A%20anObject%20ifAbsent%3A%20aBlock%0D%09%22%20Remove%20anObject%20from%20the%20receiver.%0D%09Return%20the%20result%20of%20evaluating%20aBlock%20if%20anObject%20is%20not%20in%20the%20receiver.%22%0D%09%0D%09%3Cprimitive%3A%27primRemoveIfAbsent%27%20module%3A%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("add%3A"), "add_", function Array__add_(anObject){
const self = this; return self.addLast_(anObject);
}
, "adding", unescape("add%3A%20anObject%0D%09%22%20Add%20anObject%20to%20the%20receiver.%20%22%0D%0D%09%5Eself%20addLast%3A%20anObject.%20"));
smalltalk.bind(smalltalk.Array, unescape("addLast%3A"), "addLast_", function Array__addLast_(anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primAddLast(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "adding", unescape("addLast%3A%20anObject%0D%09%22%20Add%20anObject%20to%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primAddLast%27%20module%3A%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("addFirst%3A"), "addFirst_", function Array__addFirst_(anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primAddFirst(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "adding", unescape("addFirst%3A%20anObject%0D%09%22%20Add%20anObject%20to%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primAddFirst%27%20module%3A%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("removeLast"), "removeLast", function Array__removeLast(){
const self = this; return self.pop();
}
, "removing", unescape("removeLast%0D%09%22%20Remove%20the%20last%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20pop"));
smalltalk.bind(smalltalk.Array, unescape("removeFirst"), "removeFirst", function Array__removeFirst(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primRemoveFirst(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "removing", unescape("removeFirst%0D%09%22%20Remove%20the%20first%20object%20in%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primRemoveFirst%27%20module%3A%20%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("removeAll"), "removeAll", function Array__removeAll(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primRemoveAll(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "removing", unescape("removeAll%0D%09%22%20Remove%20all%20the%20objects%20in%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primRemoveAll%27%20module%3A%20%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("removeIndex%3A"), "removeIndex_", function Array__removeIndex_(index){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primRemoveIndex(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "removing", unescape("removeIndex%3A%20index%0D%09%22%20Remove%20the%20element%20at%20index.%20%22%0D%0D%09%3Cprimitive%3A%20%27primRemoveIndex%27%20module%3A%20%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("sorted"), "sorted", function Array__sorted(){
const self = this; return (self.copy()).sort();
}
, "sorting", unescape("sorted%0D%09%22%20Return%20a%20sorted%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20copy%20sort"));
smalltalk.bind(smalltalk.Array, unescape("sorted%3A"), "sorted_", function Array__sorted_(aBlock){
const self = this; return (self.copy()).sort_(aBlock);
}
, "sorting", unescape("sorted%3A%20aBlock%0D%09%22%20Return%20a%20sorted%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20copy%20sort%3A%20aBlock"));
smalltalk.bind(smalltalk.Array, unescape("atAllPut%3A"), "atAllPut_", function Array__atAllPut_(anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primAtAllPut(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("atAllPut%3A%20anObject%0D%09%22%20Replace%20all%20elements%20of%20the%20receiver%20with%20anObject.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAtAllPut%27%20module%3A%20%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("polyAt%3A"), "polyAt_", function Array__polyAt_(index){
const self = this; return (function(){var $1$; $1$ = (function(){var $2$; $2$ = self[index._minus((1))]; return nil.isNil_($2$) ? nil : $2$})(); if (typeof($1$) == "undefined") { return self.at_(index) } else { return $1$ }})();
}
, "accessing", unescape("polyAt%3A%20index%0D%09%22%20Return%20the%20object%20in%20the%20receiver%20for%20either%20JS%20or%20ST%20array%22%0D%0D%09%5E%28self%20basicAt%3A%20index-1%29%20ifUndefined%3A%20%5Bself%20at%3A%20index%5D"));
smalltalk.bind(smalltalk.Array, unescape("first"), "first", function Array__first(){
const self = this; return self.polyAt_((1));
}
, "accessing", unescape("first%0D%09%22%20Return%20the%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20polyAt%3A%201"));
smalltalk.bind(smalltalk.Array, unescape("second"), "second", function Array__second(){
const self = this; return self.polyAt_((2));
}
, "accessing", unescape("second%0D%09%22%20Return%20the%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20polyAt%3A%202"));
smalltalk.bind(smalltalk.Array, unescape("third"), "third", function Array__third(){
const self = this; return self.polyAt_((3));
}
, "accessing", unescape("third%0D%09%22%20Return%20the%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20polyAt%3A%203"));
smalltalk.bind(smalltalk.Array, unescape("fourth"), "fourth", function Array__fourth(){
const self = this; return self.polyAt_((4));
}
, "accessing", unescape("fourth%0D%09%22%20Return%20the%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20polyAt%3A%204"));
smalltalk.bind(smalltalk.Array, unescape("withIndexDo%3A"), "withIndexDo_", function Array__withIndexDo_(aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKArray.primWithIndexDo(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "enumerating", unescape("withIndexDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20all%20the%20index%20positions%20in%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primWithIndexDo%27%20module%3A%20%27SKArray%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Array, unescape("printString"), "printString", function Array__printString(){
var result = nil;
const self = this; var $early={name:"stReturn"};
try {
if ((self.isEmpty()).valueOf()) {return unescape("%23%28%29")};
result=unescape("%23%28%20");
self.do_((function Array__(each){
if (((result.size())._gt((10000))).valueOf()) {$early.result=result._comma(unescape("...%29")); throw ($early)};
return result=(result._comma(((self.isObject_(each)).ifTrue_ifFalse_((function Array__(){
return each.printString();
}
),(function Array__(){
return each;
}
)))))._comma(" ");
}
));
return result._comma(unescape("%29"));
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "printing", unescape("printString%0D%09%22%20DEBUG%20-%20Temporary%20printing%20method%20%28must%20check%20for%20recursion%29.%20%22%0D%0D%09%7C%20result%20%7C%0D%09self%20isEmpty%20ifTrue%3A%20%5B%20%5E%27%23%28%29%27%20%5D.%0D%09result%20%3A%3D%20%27%23%28%20%27.%0D%09self%20do%3A%20%5B%3Aeach%7C%0D%09%09result%20size%20%3E%2010000%20ifTrue%3A%20%5B%20%5Eresult%2C%27...%29%27%20%5D.%0D%09%09result%20%3A%3D%20result%20%2C%20%28%0D%09%09%09%28self%20isObject%3A%20each%29%0D%09%09%09ifTrue%3A%20%5B%20each%20printString%20%5D%0D%09%09%09ifFalse%3A%20%5B%20each%20%5D%29%20%2C%27%20%27%0D%09%5D.%0D%09%5Eresult%2C%27%29%27"));
smalltalk.bind(smalltalk.Array, unescape("asLiteral"), "asLiteral", function Array__asLiteral(){
var result = nil;
const self = this; if ((self.isEmpty()).valueOf()) {return unescape("%23%28%29")};
result=unescape("%23%28%20");
self.do_((function Array__(each){
return result=(result._comma(((self.isObject_(each)).ifTrue_ifFalse_((function Array__(){
return each.asLiteral();
}
),(function Array__(){
return each;
}
)))))._comma(" ");
}
));
return result._comma(unescape("%29"));
}
, "converting", unescape("asLiteral%0D%09%22%20Return%20the%20receiver%20in%20literal%20notation.%20%22%0D%0D%09%7C%20result%20%7C%0D%09self%20isEmpty%20ifTrue%3A%20%5B%20%5E%27%23%28%29%27%20%5D.%0D%09result%20%3A%3D%20%27%23%28%20%27.%0D%09self%20do%3A%20%5B%3Aeach%7C%0D%09%09result%20%3A%3D%20result%20%2C%20%28%0D%09%09%09%28self%20isObject%3A%20each%29%0D%09%09%09ifTrue%3A%20%5B%20each%20asLiteral%20%5D%0D%09%09%09ifFalse%3A%20%5B%20each%20%5D%29%20%2C%27%20%27%0D%09%5D.%0D%09%5Eresult%2C%27%29%27"));
smalltalk.bind(smalltalk.Array, unescape("asJSONObject"), "asJSONObject", function Array__asJSONObject(){
const self = this; return self.collect_((function Array__(each){
if ((self.isObject_(each)).valueOf()) {return each.asJSONObject()} else {return each};
}
));
}
, "converting", unescape("asJSONObject%0D%09%22%20Return%20an%20Array%20with%20the%20contents%20of%20the%20receiver%20converted%20to%20JSON%20structures.%20%22%0D%0D%09%5Eself%20collect%3A%20%5B%3Aeach%7C%0D%09%09%28self%20isObject%3A%20each%29%0D%09%09ifTrue%3A%20%5B%20each%20asJSONObject%20%5D%0D%09%09ifFalse%3A%20%5B%20each%20%5D%0D%09%5D"));
smalltalk.bind(smalltalk.Array, unescape("json"), "json", function Array__json(){
const self = this; return self.collect_((function Array__(each){
if ((self.isObject_(each)).valueOf()) {return each.json()} else {return each};
}
));
}
, "converting", unescape("json%0D%09%22%20Return%20an%20Array%20with%20the%20contents%20of%20the%20receiver%20converted%20to%20JSON%20structures.%20%22%0D%0D%09%5Eself%20collect%3A%20%5B%3Aeach%7C%0D%09%09%28self%20isObject%3A%20each%29%0D%09%09ifTrue%3A%20%5B%20each%20json%20%5D%0D%09%09ifFalse%3A%20%5B%20each%20%5D%0D%09%5D"));
smalltalk.addClass("RegularExpression", smalltalk.Object, [], 'Kernel');
smalltalk.RegularExpression.$classVariableNames=("");
smalltalk.bind(smalltalk.RegularExpression, unescape("isRegExp"), "isRegExp", function RegularExpression__isRegExp(){
const self = this; return true;
}
, "accessing", unescape("isRegExp%0D%0D%09%5Etrue%20"));
smalltalk.bind(smalltalk.RegularExpression, unescape("compile%3A"), "compile_", function RegularExpression__compile_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKRegularExpression.primCompile(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "evaluating", unescape("compile%3A%20aString%0D%09%22%20Return%20the%20result%20of%20compilation%20of%20aString.%20%22%0D%0D%09%3Cprimitive%3A%20%27primCompile%27%20module%3A%20%27SKRegularExpression%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.RegularExpression, unescape("exec%3A"), "exec_", function RegularExpression__exec_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKRegularExpression.primExec(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "evaluating", unescape("exec%3A%20aString%0D%09%22%20Return%20the%20result%20of%20excecution%20of%20aString.%20%22%0D%0D%09%3Cprimitive%3A%20%27primExec%27%20module%3A%20%27SKRegularExpression%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.RegularExpression, unescape("test%3A"), "test_", function RegularExpression__test_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKRegularExpression.primTest(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "evaluating", unescape("test%3A%20aString%0D%09%22%20Return%20the%20result%20of%20testing%20of%20aString.%20%22%0D%0D%09%3Cprimitive%3A%20%27primTest%27%20module%3A%20%27SKRegularExpression%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.RegularExpression.$klass, unescape("fromString%3Aflag%3A"), "fromString_flag_", function RegularExpression_class__fromString_flag_(aString,anotherString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKRegularExpression.primFromString(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "instantiation", unescape("fromString%3A%20aString%20flag%3A%20anotherString%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primFromString%27%20module%3A%27SKRegularExpression%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.RegularExpression.$klass, unescape("fromString%3A"), "fromString_", function RegularExpression_class__fromString_(aString){
const self = this; return self.fromString_flag_(aString,"");
}
, "instantiation", unescape("fromString%3A%20aString%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%20%20%20%20%5Eself%20fromString%3A%20aString%20flag%3A%20%27%27"));
smalltalk.bind(smalltalk.RegularExpression, unescape("shallowCopy"), "shallowCopy", function RegularExpression__shallowCopy(){
const self = this; return self;
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.RegularExpression, unescape("deepCopy"), "deepCopy", function RegularExpression__deepCopy(){
const self = this; return self;
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.RegularExpression, unescape("asJSONObject"), "asJSONObject", function RegularExpression__asJSONObject(){
const self = this; return self;
}
, "converting", unescape("asJSONObject%0D%09%22%20Return%20the%20mapping%20of%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Exception.$klass, unescape("signal%3A"), "signal_", function Exception_class__signal_(aString){
const self = this; return (function Exception_class__($1$){
$1$.messageText_(aString);
return $1$.signal()}
)(self.$$new());
}
, "instantiation", unescape("signal%3A%20aString%0D%09%22%20Signal%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%0D%09%09messageText%3A%20aString%3B%0D%09%09signal"));
smalltalk.bind(smalltalk.Exception.$klass, unescape("signal"), "signal", function Exception_class__signal(){
const self = this; return (self.$$new()).signal();
}
, "instantiation", unescape("signal%0D%0D%09%5Eself%20new%20signal"));
smalltalk.bind(smalltalk.Exception, unescape("messageText"), "messageText", function Exception__messageText(){
const self = this; return self['@messageText'];
}
, "accessing", unescape("messageText%0D%09%22%20Return%20the%20messageText%20of%20the%20receiver.%20%22%0D%0D%09%5EmessageText"));
smalltalk.bind(smalltalk.Exception, unescape("description"), "description", function Exception__description(){
const self = this; return (self.messageText()).asString();
}
, "accessing", unescape("description%0D%09%22%20Return%20the%20description%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20messageText%20asString"));
smalltalk.bind(smalltalk.Exception, unescape("messageText%3A"), "messageText_", function Exception__messageText_(aString){
const self = this; self['@messageText']=aString;
return self;
}
, "accessing", unescape("messageText%3A%20aString%0D%09%22%20set%20the%20messageText%20of%20the%20receiver.%20%22%0D%0D%09messageText%20%3A%3D%20aString"));
smalltalk.bind(smalltalk.Exception, unescape("signal"), "signal", function Exception__signal(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKException.primSignal(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "signaling", unescape("signal%0D%09%22%20Signal/throw%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primSignal%27%20module%3A%20%27SKException%27%3E%0D%09%5Eself%20primitiveFailed%20"));
smalltalk.addClass("Association", smalltalk.Object, ['key', 'value'], 'Kernel');
smalltalk.Association.$classVariableNames=("");
smalltalk.bind(smalltalk.Association.$klass, unescape("key%3A"), "key_", function Association_class__key_(aKey){
const self = this; return (self.$$new()).key_(aKey);
}
, "instantiation", unescape("key%3A%20aKey%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%20key%3A%20aKey"));
smalltalk.bind(smalltalk.Association.$klass, unescape("key%3Avalue%3A"), "key_value_", function Association_class__key_value_(aKey,aValue){
const self = this; return (self.key_(aKey)).value_(aValue);
}
, "instantiation", unescape("key%3A%20aKey%20value%3A%20aValue%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5E%28self%20key%3A%20aKey%29%20value%3A%20aValue"));
smalltalk.bind(smalltalk.Association, unescape("%3D"), "_eq", function Association___eq(anAssociation){
const self = this; return ((self.$klass)._eq((anAssociation.$klass))).and_((function Association__(){
return ((self.key())._eq((anAssociation.key()))).and_((function Association__(){
return (self.value())._eq((anAssociation.value()));
}
));
}
));
}
, "comparing", unescape("%3D%20anAssociation%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20equal%20to%20anAssociation.%20%22%0D%0D%09%5Eself%20class%20%3D%20anAssociation%20class%20and%3A%20%5B%0D%09%20%20%20%20self%20key%20%3D%20anAssociation%20key%20and%3A%20%5B%0D%09%09self%20value%20%3D%20anAssociation%20value%5D%5D"));
smalltalk.bind(smalltalk.Association, unescape("key%3A"), "key_", function Association__key_(aKey){
const self = this; self['@key']=aKey;
return self;
}
, "accessing", unescape("key%3A%20aKey%0D%09%22%20Set%20the%20key%20of%20the%20receiver.%20%22%0D%0D%09key%20%3A%3D%20aKey"));
smalltalk.bind(smalltalk.Association, unescape("key"), "key", function Association__key(){
const self = this; return self['@key'];
}
, "accessing", unescape("key%0D%09%22%20Return%20the%20key%20of%20the%20receiver.%20%22%0D%0D%09%5Ekey"));
smalltalk.bind(smalltalk.Association, unescape("value%3A"), "value_", function Association__value_(aValue){
const self = this; self['@value']=aValue;
return self;
}
, "accessing", unescape("value%3A%20aValue%0D%09%22%20Set%20the%20value%20of%20the%20receiver.%20%22%0D%0D%09value%20%3A%3D%20aValue"));
smalltalk.bind(smalltalk.Association, unescape("value"), "value", function Association__value(){
const self = this; return self['@value'];
}
, "accessing", unescape("value%0D%09%22%20Return%20the%20value%20of%20the%20receiver.%20%22%0D%0D%09%5Evalue"));
smalltalk.bind(smalltalk.Association, unescape("isAssociation"), "isAssociation", function Association__isAssociation(){
const self = this; return true;
}
, "testing", unescape("isAssociation%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20anAssociation.%20%22%0D%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Object, unescape("isAssociation"), "isAssociation", function Object__isAssociation(){
const self = this; return false;
}
, "testing", unescape("isAssociation%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20anAssociation.%20%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Association, unescape("toString"), "toString", function Association__toString(){
var literal = nil;
const self = this; literal=(self.isObject_((self.key()))).ifTrue_ifFalse_((function Association__(){
return (self.key()).asLiteral();
}
),(function Association__(){
return (self.key()).toString();
}
));
return (((unescape("%28")._comma(literal))._comma(unescape("%20-%3E%20")))._comma(((self.value()).toString())))._comma(unescape("%29"));
}
, "printing", unescape("toString%0D%09%22%20Return%20a%20printable%20representation%20of%20the%20receiver.%20%22%0D%0D%09%7C%20literal%20%7C%0D%09literal%20%3A%3D%20%28self%20isObject%3A%20self%20key%29%0D%09%09ifTrue%3A%20%5B%20self%20key%20asLiteral%20%5D%0D%09%09ifFalse%3A%20%5B%20self%20key%20toString%20%5D.%0D%09%5E%27%28%27%2C%20literal%20%2C%27%20-%3E%20%27%20%2Cself%20value%20toString%20%2C%27%29%27"));
smalltalk.addClass("KeyedCollection", smalltalk.Collection, [], 'Kernel');
smalltalk.KeyedCollection.$classVariableNames=("");
smalltalk.addClass("Dictionary", smalltalk.KeyedCollection, ['keys', 'values'], 'Kernel');
smalltalk.Dictionary.$classVariableNames=("");
smalltalk.bind(smalltalk.Object, unescape("isDictionary"), "isDictionary", function Object__isDictionary(){
const self = this; return false;
}
, "query", unescape("isDictionary%0D%09%22%20Returns%20true%20if%20the%20receiver%20is%20a%20dictionary.%20%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Dictionary.$klass, unescape("basicNew%3A"), "basicNew_", function Dictionary_class__basicNew_(size){
const self = this; return self.$$new();
}
, "instantiation", unescape("basicNew%3A%20size%0D%09%22%20Return%20an%20instance%20of%20the%20receiver%20of%20specified%20size.%20%22%0D%0D%09%5Eself%20new"));
smalltalk.bind(smalltalk.Dictionary.$klass, unescape("fromKeys%3Aand%3A"), "fromKeys_and_", function Dictionary_class__fromKeys_and_(keys,values){
const self = this; return (self.basicNew()).initializeKeys_values_(keys,values);
}
, "instantiation", unescape("fromKeys%3A%20keys%20and%3A%20values%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicNew%20initializeKeys%3A%20keys%20values%3A%20values"));
smalltalk.bind(smalltalk.Dictionary, unescape("initialize"), "initialize", function Dictionary__initialize(){
const self = this; smalltalk.superImplementor(smalltalk.Dictionary,'initialize').apply(self, []);
self['@keys']=smalltalk.Set.$$new();
self['@values']=[];
return self;
}
, "initialize", unescape("initialize%0D%09%22%20Private%20-%20Initialize%20the%20receiver.%20%22%0D%0D%09super%20initialize.%0D%09keys%20%3A%3D%20Set%20new.%0D%09values%20%3A%3D%20%23%28%29"));
smalltalk.bind(smalltalk.Dictionary, unescape("initializeKeys%3Avalues%3A"), "initializeKeys_values_", function Dictionary__initializeKeys_values_(privateKeys,privateValues){
const self = this; smalltalk.superImplementor(smalltalk.Dictionary,'initialize').apply(self, []);
self['@keys']=smalltalk.Set.newContents_(privateKeys);
self['@values']=privateValues.asArray();
return self;
}
, "initialize", unescape("initializeKeys%3A%20privateKeys%20values%3A%20privateValues%0D%09%22%20Private%20-%20Initialize%20the%20receiver.%20%22%0D%0D%09super%20initialize.%0D%09keys%20%3A%3D%20Set%20newContents%3A%20privateKeys.%0D%09values%20%3A%3D%20privateValues%20asArray"));
smalltalk.bind(smalltalk.Dictionary, unescape("size"), "size", function Dictionary__size(){
const self = this; return self['@keys'].size();
}
, "accessing", unescape("size%0D%09%22%20Return%20the%20size%20of%20the%20receiver.%20%22%0D%0D%09%5Ekeys%20size"));
smalltalk.bind(smalltalk.Dictionary, unescape("keys"), "keys", function Dictionary__keys(){
const self = this; return self['@keys'].asArray();
}
, "accessing", unescape("keys%0D%09%22%20Return%20the%20keys%20of%20the%20receiver.%20%22%0D%0D%09%5Ekeys%20asArray"));
smalltalk.bind(smalltalk.Dictionary, unescape("isEmpty"), "isEmpty", function Dictionary__isEmpty(){
const self = this; return self['@keys'].isEmpty();
}
, "testing", unescape("isEmpty%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20empty.%20%22%0D%0D%09%5Ekeys%20isEmpty"));
smalltalk.bind(smalltalk.Dictionary, unescape("lookUpKey%3A"), "lookUpKey_", function Dictionary__lookUpKey_(aKey){
const self = this; return self['@keys'].indexOf_ifAbsent_(aKey,(function Dictionary__(){
return nil;
}
));
}
, "private", unescape("lookUpKey%3A%20aKey%0D%09%22%20Private%20-%20Return%20the%20index%20where%20aKey%20is%20found%2C%20or%20nil.%20%22%0D%0D%09%5Ekeys%20indexOf%3A%20aKey%20ifAbsent%3A%20%5B%20nil%20%5D"));
smalltalk.bind(smalltalk.Dictionary, unescape("keysAndValuesDo%3A"), "keysAndValuesDo_", function Dictionary__keysAndValuesDo_(aBlock){
const self = this; (self['@keys'].contents()).withIndexDo_((function Dictionary__(aKey,index){
return aBlock.value_value_(aKey,(self['@values'].at_(index)));
}
));
return self;
}
, "enumerating", unescape("keysAndValuesDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20for%20key/value%20pairs%20of%20the%20receiver.%20%22%0D%0D%09keys%20contents%20withIndexDo%3A%20%5B%3AaKey%20%3Aindex%20%7C%20aBlock%20value%3A%20aKey%20value%3A%20%28values%20at%3A%20index%29%20%5D"));
smalltalk.bind(smalltalk.Dictionary, unescape("keys"), "keys", function Dictionary__keys(){
const self = this; return self['@keys'].copy();
}
, "accessing", unescape("keys%0D%09%22%20Return%20the%20keys%20of%20the%20receiver.%20%22%0D%0D%09%5Ekeys%20copy"));
smalltalk.bind(smalltalk.Dictionary, unescape("keysDo%3A"), "keysDo_", function Dictionary__keysDo_(aBlock){
const self = this; self['@keys'].do_(aBlock);
return self;
}
, "enumerating", unescape("keysDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20keys%20of%20the%20receiver.%20%22%0D%0D%09keys%20do%3A%20aBlock"));
smalltalk.bind(smalltalk.Dictionary, unescape("values"), "values", function Dictionary__values(){
const self = this; return self['@values'].copy();
}
, "accessing", unescape("values%0D%09%22%20Return%20the%20values%20of%20the%20receiver.%20%22%0D%0D%09%5Evalues%20copy"));
smalltalk.bind(smalltalk.Dictionary, unescape("at%3Aput%3A"), "at_put_", function Dictionary__at_put_(aKey,aValue){
var index = nil;
const self = this; index=self.lookUpKey_(aKey);
if (((nil.isNil_(index))).valueOf()) {self['@keys'].add_(aKey);
self['@values'].add_(aValue)} else {self['@values'].at_put_(index,aValue)};
return aValue;
}
, "accessing", unescape("at%3A%20aKey%20put%3A%20aValue%0D%09%22%20Set%20the%20value%20at%20aKey%20of%20the%20receiver.%20%22%0D%0D%09%7C%20index%20%7C%0D%09index%20%3A%3D%20self%20lookUpKey%3A%20aKey.%0D%09index%20isNil%0D%09%09ifTrue%3A%20%5B%20keys%20add%3A%20aKey.%20values%20add%3A%20aValue.%5D%0D%09%09ifFalse%3A%20%5B%20values%20at%3A%20index%20put%3A%20aValue%20%5D.%0D%09%5EaValue"));
smalltalk.bind(smalltalk.Dictionary, unescape("at%3AifAbsent%3A"), "at_ifAbsent_", function Dictionary__at_ifAbsent_(aKey,aBlock){
var index = nil;
const self = this; index=self.lookUpKey_(aKey);
if (((nil.isNil_(index))).valueOf()) {return aBlock.value()};
return self['@values'].at_(index);
}
, "accessing", unescape("at%3A%20aKey%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20value%20at%20aKey%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%7C%20index%20%7C%0D%09index%20%3A%3D%20self%20lookUpKey%3A%20aKey.%0D%09index%20isNil%20ifTrue%3A%20%5B%20%5EaBlock%20value%20%5D.%0D%09%5Evalues%20at%3A%20index"));
smalltalk.bind(smalltalk.Dictionary, unescape("at%3AifAbsentPut%3A"), "at_ifAbsentPut_", function Dictionary__at_ifAbsentPut_(aKey,aBlock){
var index = nil;
const self = this; index=self.lookUpKey_(aKey);
if (((nil.isNil_(index))).valueOf()) {return self.at_put_(aKey,(aBlock.value()))};
return self['@values'].at_(index);
}
, "accessing", unescape("at%3A%20aKey%20ifAbsentPut%3A%20aBlock%0D%09%22%20Return%20the%20value%20at%20aKey%2C%20or%20add%20the%20result%20of%20evaluating%20aBlock%20to%20the%20receiver%20if%20it%20is%20absent.%20%22%0D%0D%09%7C%20index%20%7C%0D%09index%20%3A%3D%20self%20lookUpKey%3A%20aKey.%0D%09index%20isNil%20ifTrue%3A%20%5B%20%5Eself%20at%3A%20aKey%20put%3A%20aBlock%20value%20%5D.%0D%09%5Evalues%20at%3A%20index"));
smalltalk.bind(smalltalk.Dictionary, unescape("do%3A"), "do_", function Dictionary__do_(aBlock){
const self = this; return self['@values'].do_(aBlock);
}
, "enumerating", unescape("do%3A%20aBlock%0D%09%22%20Evaluates%20aBlock%20for%20all%20values%20in%20the%20receiver.%20%22%0D%0D%09%5Evalues%20do%3A%20aBlock"));
smalltalk.bind(smalltalk.Dictionary, unescape("detect%3AifNone%3A"), "detect_ifNone_", function Dictionary__detect_ifNone_(aBlock,anotherBlock){
const self = this; return self['@values'].detect_ifNone_(aBlock,anotherBlock);
}
, "enumerating", unescape("detect%3A%20aBlock%20ifNone%3A%20anotherBlock%0D%09%22%20Detect%20the%20value%20who%20matches%20aBlock.%0D%09Return%20the%20result%20of%20evaluating%20aBlock%20if%20no%20value%20matches%20detection%20block.%0D%09%22%0D%0D%09%5Evalues%20detect%3A%20aBlock%20ifNone%3A%20anotherBlock"));
smalltalk.bind(smalltalk.Dictionary, unescape("includes%3A"), "includes_", function Dictionary__includes_(anObject){
const self = this; return self['@values'].includes_(anObject);
}
, "testing", unescape("includes%3A%20anObject%0D%09%22%20Return%20true%20if%20the%20receiver%27s%20values%20include%20anObject.%20%22%0D%0D%09%5Evalues%20includes%3A%20anObject"));
smalltalk.bind(smalltalk.Dictionary, unescape("isDictionary"), "isDictionary", function Dictionary__isDictionary(){
const self = this; return true;
}
, "testing", unescape("isDictionary%0D%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Dictionary, unescape("includesKey%3A"), "includesKey_", function Dictionary__includesKey_(aKey){
const self = this; return self['@keys'].includes_(aKey);
}
, "enumerating", unescape("includesKey%3A%20aKey%0D%09%22%20Return%20true%20if%20the%20receiver%27s%20keys%20include%20aKey.%20%22%0D%0D%09%5Ekeys%20includes%3A%20aKey"));
smalltalk.bind(smalltalk.Dictionary, unescape("removeKey%3AifAbsent%3A"), "removeKey_ifAbsent_", function Dictionary__removeKey_ifAbsent_(aKey,aBlock){
var index = nil;
const self = this; var $early={name:"stReturn"};
try {
index=self.lookUpKey_(aKey);
if (((nil.isNil_(index))).valueOf()) {return aBlock.value()};
self['@keys'].remove_ifAbsent_(aKey,(function Dictionary__(){
$early.result=aBlock.value(); throw ($early);
}
));
self['@values'].removeIndex_(index);
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "removing", unescape("removeKey%3A%20aKey%20ifAbsent%3A%20aBlock%0D%09%22%20Remove%20the%20binding%20at%20aKey.%20%22%0D%0D%09%7C%20index%20%7C%0D%09index%20%3A%3D%20self%20lookUpKey%3A%20aKey.%0D%09index%20isNil%20ifTrue%3A%20%5B%20%5EaBlock%20value%20%5D.%0D%09keys%20remove%3A%20aKey%20ifAbsent%3A%20%5B%20%5EaBlock%20value%20%5D.%0D%09values%20removeIndex%3A%20index."));
smalltalk.bind(smalltalk.Dictionary, unescape("keyForValue%3AifAbsent%3A"), "keyForValue_ifAbsent_", function Dictionary__keyForValue_ifAbsent_(anObject,aBlock){
const self = this; var $early={name:"stReturn"};
try {
self.keysAndvaluesDo_((function Dictionary__(key,aValue){
if (((nil.is_eqeq_(anObject,aValue))).valueOf()) {$early.result=key; throw ($early)} else {return nil};
}
));
return aBlock.value();
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "accessing", unescape("keyForValue%3A%20anObject%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20key%20in%20the%20receiver%20for%20value%20anObject%2C%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09self%20keysAndvaluesDo%3A%20%5B%3Akey%20%3AaValue%7C%20anObject%20%3D%3D%20aValue%20ifTrue%3A%20%5B%20%5Ekey%20%5D%20%5D.%0D%09%5EaBlock%20value"));
smalltalk.bind(smalltalk.Dictionary, unescape("asJavascript"), "asJavascript", function Dictionary__asJavascript(){
const self = this; return ((((("smalltalk."._comma(((self.$klass).name())))._comma(unescape(".fromKeys_and_%28")))._comma(((self['@keys'].asArray()).asJavascript())))._comma(unescape("%2C")))._comma((self['@values'].asJavascript())))._comma(unescape("%29"));
}
, "converting", unescape("asJavascript%0D%09%22%20Return%20the%20javascript%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5E%27smalltalk.%27%2Cself%20class%20name%0D%09%09%2C%27.fromKeys_and_%28%27%20%2Ckeys%20asArray%20asJavascript%0D%09%09%09%2C%27%2C%27%20%2Cvalues%20asJavascript%20%2C%27%29%27"));
smalltalk.addClass("PoolDictionary", smalltalk.KeyedCollection, ['size'], 'Kernel');
smalltalk.PoolDictionary.$classVariableNames=("");
smalltalk.addClass("ClassBuilder", smalltalk.Object, [], 'Kernel');
smalltalk.ClassBuilder.$classVariableNames=("");
smalltalk.bind(smalltalk.ClassBuilder, unescape("superclass%3Asubclass%3A"), "superclass_subclass_", function ClassBuilder__superclass_subclass_(aClass,aString){
const self = this; return self.superclass_subclass_instanceVariableNames_category_(aClass,aString,"",nil);
}
, "instantiation", unescape("superclass%3A%20aClass%20subclass%3A%20aString%0D%09%22%20Create/Register%20a%20new%20class%20in%20the%20system.%20%22%0D%0D%09%5Eself%0D%09%09superclass%3A%20aClass%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20%27%27%0D%09%09category%3A%20nil"));
smalltalk.bind(smalltalk.ClassBuilder, unescape("superclass%3Asubclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3Acategory%3A"), "superclass_subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_", function ClassBuilder__superclass_subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(aClass,aString,aString2,classVarNames,poolVarNames,aString3){
var result = nil;
var aCategory = nil;
const self = this; aCategory=((nil.isNil_(aString3))).ifTrue_ifFalse_((function ClassBuilder__(){
if (((nil.isNil_(aClass))).valueOf()) {return "unclassified"} else {return aClass.category()};
}
),(function ClassBuilder__(){
return aString3;
}
));
result=self.addSubclassOf_named_instanceVariableNames_(aClass,aString,(self.instanceVariableNamesFor_(aString2)));
self.setupClass_(result);
(function ClassBuilder__($1$){
$1$.classVariableNames_(classVarNames);
$1$.poolDictionaryNames_(poolVarNames);
return $1$.category_(aCategory)}
)(result);
if ((((nil.isNil_(aClass)===false)).and_((function ClassBuilder__(){
return smalltalk.Smalltalk.includesKey_("Exporter");
}
))).valueOf()) {self.print_(((smalltalk.Exporter.$$new()).exportNew_(result)))};
return result;
}
, "instantiation", unescape("superclass%3A%20aClass%0D%09subclass%3A%20aString%0D%09instanceVariableNames%3A%20aString2%0D%09classVariableNames%3A%20classVarNames%0D%09poolDictionaries%3A%20poolVarNames%0D%09category%3A%20aString3%0D%09%22%20Create/Register%20a%20new%20class%20in%20the%20system.%20%22%0D%0D%09%7C%20result%20aCategory%20%7C%0D%09aCategory%20%3A%3D%20aString3%20isNil%20ifTrue%3A%20%5B%0D%09%09%09aClass%20isNil%20ifTrue%3A%20%5B%20%23unclassified%20%5D%0D%09%09%09ifFalse%3A%20%5B%20aClass%20category%20%5D%0D%09%09%5D%20ifFalse%3A%20%5B%20aString3%20%5D.%0D%09result%20%3A%3D%20self%0D%09%09addSubclassOf%3A%20aClass%20named%3A%20aString%0D%09%09instanceVariableNames%3A%20%28self%20instanceVariableNamesFor%3A%20aString2%29.%0D%09self%20setupClass%3A%20result.%0D%09result%0D%09%09classVariableNames%3A%20classVarNames%3B%0D%09%09poolDictionaryNames%3A%20poolVarNames%3B%0D%09%09category%3A%20aCategory.%0D%09%28aClass%20notNil%20and%3A%20%5B%20Smalltalk%20includesKey%3A%20%23Exporter%20%5D%29%20ifTrue%3A%20%5B%0D%09%09self%20print%3A%20%28Exporter%20new%20exportNew%3A%20result%29%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.ClassBuilder, unescape("superclass%3Asubclass%3AinstanceVariableNames%3Acategory%3A"), "superclass_subclass_instanceVariableNames_category_", function ClassBuilder__superclass_subclass_instanceVariableNames_category_(aClass,aString,aString2,aString3){
const self = this; return self.superclass_subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(aClass,aString,aString2,"","",aString3);
}
, "instantiation", unescape("superclass%3A%20aClass%0D%09subclass%3A%20aString%0D%09instanceVariableNames%3A%20aString2%0D%09category%3A%20aString3%0D%09%22%20Create/Register%20a%20new%20class%20in%20the%20system.%20%22%0D%0D%09%5Eself%0D%09%09superclass%3A%20aClass%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20%27%27%0D%09%09poolDictionaries%3A%20%27%27%0D%09%09category%3A%20aString3"));
smalltalk.bind(smalltalk.ClassBuilder, unescape("basicClass%3AinstanceVariableNames%3A"), "basicClass_instanceVariableNames_", function ClassBuilder__basicClass_instanceVariableNames_(aMetaClass,anArray){
const self = this; return (self.smalltalk()).metaVarNames_array_(aMetaClass,anArray);
}
, "private", unescape("basicClass%3A%20aMetaClass%20instanceVariableNames%3A%20anArray%0D%09%22%20Private%20-%20Register%20instance%20variables%20onto%20aMetaClass.%20%22%0D%0D%09%5Eself%20smalltalk%20metaVarNames%3A%20aMetaClass%20array%3A%20anArray"));
smalltalk.bind(smalltalk.ClassBuilder, unescape("class%3AinstanceVariableNames%3A"), "class_instanceVariableNames_", function ClassBuilder__class_instanceVariableNames_(aMetaClass,aString){
var varNames = nil;
const self = this; if ((aMetaClass.isMetaclass()).not()) {return self.error_(((aMetaClass.name())._comma(" is not a metaclass")))};
varNames=self.instanceVariableNamesFor_(aString);
if ((self.basicClass_instanceVariableNames_(aMetaClass,varNames)).not()) {return self};
self.setupClass_(aMetaClass);
if ((smalltalk.Smalltalk.includesKey_("Exporter")).valueOf()) {self.print_(((smalltalk.Exporter.$$new()).exportMetaDefinitionOf_((aMetaClass.instanceClass()))))};
return self;
}
, "metaclass", unescape("class%3A%20aMetaClass%20instanceVariableNames%3A%20aString%0D%09%22%20Register%20instance%20variable%20names%20onto%20aMetaClass.%20%22%0D%0D%09%7C%20varNames%20%7C%0D%09aMetaClass%20isMetaclass%20ifFalse%3A%20%5B%0D%09%09%5Eself%20error%3A%20aMetaClass%20name%2C%20%27%20is%20not%20a%20metaclass%27%0D%09%5D.%0D%09varNames%20%3A%3D%20self%20instanceVariableNamesFor%3A%20aString.%0D%09%28self%20basicClass%3A%20aMetaClass%20instanceVariableNames%3A%20varNames%29%20ifFalse%3A%20%5B%20%5Eself%20%5D.%0D%09self%20setupClass%3A%20aMetaClass.%0D%09%28Smalltalk%20includesKey%3A%20%23Exporter%29%20ifTrue%3A%20%5B%0D%09%09self%20print%3A%20%28Exporter%20new%20exportMetaDefinitionOf%3A%20aMetaClass%20instanceClass%29%0D%09%5D."));
smalltalk.bind(smalltalk.ClassBuilder, unescape("instanceVariableNamesFor%3A"), "instanceVariableNamesFor_", function ClassBuilder__instanceVariableNamesFor_(aString){
const self = this; return (aString.tokenize_(" ")).reject_((function ClassBuilder__(each){
return each.isEmpty();
}
));
}
, "private", unescape("instanceVariableNamesFor%3A%20aString%0D%09%22%20Private%20-%20Return%20the%20instance%20variable%20names%20string.%20%22%0D%0D%09%5E%28aString%20tokenize%3A%20%27%20%27%29%20reject%3A%20%5B%3Aeach%20%7C%20each%20isEmpty%20%5D"));
smalltalk.bind(smalltalk.ClassBuilder, unescape("addSubclassOf%3Anamed%3AinstanceVariableNames%3A"), "addSubclassOf_named_instanceVariableNames_", function ClassBuilder__addSubclassOf_named_instanceVariableNames_(aClass,aString,aCollection){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKClassBuilder.primAddSubclassOfNamedInstanceVariableNames(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "private", unescape("addSubclassOf%3A%20aClass%20named%3A%20aString%20instanceVariableNames%3A%20aCollection%0D%09%22%20Private%20-%20Add%20the%20subclass%20to%20system.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAddSubclassOfNamedInstanceVariableNames%27%20module%3A%20%27SKClassBuilder%27%3E%0D%09%5Eself%20primitiveFailed%20"));
smalltalk.bind(smalltalk.ClassBuilder, unescape("setupClass%3A"), "setupClass_", function ClassBuilder__setupClass_(aClass){
const self = this; self;
return self;
}
, "private", unescape("setupClass%3A%20aClass%0D%09%22%20Private%20-%20Bind/initialize%20the%20class%20delegation%20chain.%20%22%0D%0D%22OBSOLETE%20-%09self%20smalltalk%20%23init%3A%20aClass%22"));
smalltalk.addClass("Stream", smalltalk.Object, ['collection', 'position', 'readLimit'], 'Kernel');
smalltalk.Stream.$classVariableNames=("");
smalltalk.bind(smalltalk.Stream, unescape("collection"), "collection", function Stream__collection(){
const self = this; return self['@collection'];
}
, "accessing", unescape("collection%0D%09%22%20Private%20-%20Return%20the%20collection%20of%20the%20receiver.%20%22%0D%0D%09%5Ecollection"));
smalltalk.bind(smalltalk.Stream, unescape("collection%3A"), "collection_", function Stream__collection_(aCollection){
const self = this; self['@collection']=aCollection;
return self;
}
, "accessing", unescape("collection%3A%20aCollection%0D%09%22%20Private%20-%20Set%20the%20collection%20of%20the%20receiver.%20%22%0D%0D%09collection%20%3A%3D%20aCollection"));
smalltalk.bind(smalltalk.Stream, unescape("setCollection%3A"), "setCollection_", function Stream__setCollection_(aCollection){
const self = this; self.collection_(aCollection);
return self;
}
, "accessing", unescape("setCollection%3A%20aCollection%0D%09%22%20Private%20-%20Set%20the%20receiver%20stream%20collection%20to%20aCollection.%20%22%0D%0D%09self%20collection%3A%20aCollection"));
smalltalk.bind(smalltalk.Stream, unescape("asStream"), "asStream", function Stream__asStream(){
const self = this; return self;
}
, "converting", unescape("asStream%0D%09%22Answer%20the%20receiver%20as%20a%20Stream.%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Stream, unescape("initialize"), "initialize", function Stream__initialize(){
const self = this; smalltalk.superImplementor(smalltalk.Stream,'initialize').apply(self, []);
self['@position']=(0);
return self;
}
, "initialize", unescape("initialize%0D%09%22%20Private%20-%20Initialize%20the%20receiver.%20%22%0D%0D%09super%20initialize.%0D%09position%20%3A%3D%200."));
smalltalk.bind(smalltalk.Stream, unescape("position"), "position", function Stream__position(){
const self = this; return self['@position'];
}
, "accessing", unescape("position%0D%09%22%20Return%20the%20position%20of%20the%20receiver.%20%22%0D%0D%09%5Eposition"));
smalltalk.bind(smalltalk.Stream, unescape("position%3A"), "position_", function Stream__position_(anInteger){
const self = this; self['@position']=anInteger;
return self;
}
, "accessing", unescape("position%3A%20anInteger%0D%09%22%20Set%20the%20position%20of%20the%20receiver.%20%22%0D%0D%09position%20%3A%3D%20anInteger"));
smalltalk.bind(smalltalk.Stream, unescape("readLimit"), "readLimit", function Stream__readLimit(){
const self = this; if (((nil.is_eqeq_(self['@readLimit'],nil))).valueOf()) {self['@readLimit']=(self.collection()).size()};
return self['@readLimit'];
}
, "accessing", unescape("readLimit%0D%09%22%20Private%20-%20Return%20the%20read%20limit%20of%20the%20receiver.%20%22%0D%0D%09readLimit%20%3D%3D%20nil%20ifTrue%3A%20%5B%20readLimit%20%3A%3D%20self%20collection%20size%20%5D.%0D%09%5EreadLimit"));
smalltalk.bind(smalltalk.Stream, unescape("readLimit%3A"), "readLimit_", function Stream__readLimit_(anInteger){
const self = this; self['@readLimit']=anInteger;
return self;
}
, "accessing", unescape("readLimit%3A%20anInteger%0D%09%22%20Private%20-%20Set%20the%20stream%20size%20of%20the%20receiver.%20%22%0D%0D%09readLimit%20%3A%3D%20anInteger"));
smalltalk.bind(smalltalk.Stream, unescape("contents"), "contents", function Stream__contents(){
var result = nil;
const self = this; result=self.collection();
if (((self.readLimit())._eq((result.size()))).valueOf()) {return result};
return result.copyFrom_to_((1),(self.readLimit()));
}
, "accessing", unescape("contents%0D%09%22%20Return%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20collection.%0D%09self%20readLimit%20%3D%20result%20size%20ifTrue%3A%20%5B%20%5Eresult%20%5D.%0D%09%5Eresult%20copyFrom%3A%201%20to%3A%20self%20readLimit"));
smalltalk.bind(smalltalk.Stream, unescape("size"), "size", function Stream__size(){
const self = this; return self.readLimit();
}
, "accessing", unescape("size%0D%09%22%20Return%20the%20size%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20readLimit"));
smalltalk.bind(smalltalk.Stream, unescape("reset"), "reset", function Stream__reset(){
const self = this; self.position_((0));
return self;
}
, "actions", unescape("reset%0D%09%22%20Reset%20the%20receiver.%20%22%0D%0D%09self%20position%3A%200"));
smalltalk.bind(smalltalk.Stream, unescape("close"), "close", function Stream__close(){
const self = this; self;
return self;
}
, "actions", unescape("close%0D%09%22%20Close%20the%20receiver.%20%22"));
smalltalk.bind(smalltalk.Stream, unescape("flush"), "flush", function Stream__flush(){
const self = this; self;
return self;
}
, "io", unescape("flush%0D%09%22%20OBSOLETE%20-%20Flush%20the%20receiver.%20%22"));
smalltalk.bind(smalltalk.Stream, unescape("resetContents"), "resetContents", function Stream__resetContents(){
const self = this; (function Stream__($1$){
$1$.reset();
return $1$.readLimit_((0))}
)(self);
return self;
}
, "actions", unescape("resetContents%0D%09%22%20Reset%20the%20receiver%20contents.%20%22%0D%0D%09self%20reset%3B%20readLimit%3A%200"));
smalltalk.bind(smalltalk.Stream, unescape("do%3A"), "do_", function Stream__do_(aBlock){
const self = this; while((self.atEnd()).not()){aBlock.value_((self.next()))};;
return self;
}
, "enumerating", unescape("do%3A%20aBlock%0D%09%22%20Evaluates%20aBlock%20streaming%20on%20the%20receiver.%20%22%0D%0D%09%5B%20self%20atEnd%20%5D%20whileFalse%3A%20%5B%20aBlock%20value%3A%20self%20next%20%5D"));
smalltalk.bind(smalltalk.Stream, unescape("setToEnd"), "setToEnd", function Stream__setToEnd(){
const self = this; self.position_((self.size()));
return self;
}
, "positioning", unescape("setToEnd%0D%09%22%20Position%20the%20receiver%20at%20end.%20%22%0D%0D%09self%20position%3A%20self%20size"));
smalltalk.bind(smalltalk.Stream, unescape("skip%3A"), "skip_", function Stream__skip_(anInteger){
const self = this; self.position_((((anInteger._plus((self.position()))).min_((self.size()))).max_((0))));
return self;
}
, "positioning", unescape("skip%3A%20anInteger%0D%09%22%20Skip%20next%20anInteger%20readable%20elements%20in%20the%20receiver.%20%22%0D%0D%09self%20position%3A%20%28%28anInteger%20+%20self%20position%20min%3A%20self%20size%29%20max%3A%200%29"));
smalltalk.bind(smalltalk.Stream, unescape("next"), "next", function Stream__next(){
const self = this; self.position_(((self.position())._plus((1))));
return self['@collection'].at_((self.position()));
}
, "reading", unescape("next%0D%09%22%20Return%20the%20next%20readable%20element%20in%20the%20receiver.%20%22%0D%0D%09self%20position%3A%20self%20position%20+%201.%0D%09%5Ecollection%20at%3A%20self%20position"));
smalltalk.bind(smalltalk.Stream, unescape("next%3A"), "next_", function Stream__next_(anInteger){
var result = nil;
const self = this; var $early={name:"stReturn"};
try {
result=((self.collection()).$klass).$$new();
for(var $1$ = anInteger;$1$>0;$1$--){ if ((self.atEnd()).valueOf()) {$early.result=result; throw ($early)};
result.add_((self.next()))};;
return result;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "reading", unescape("next%3A%20anInteger%0D%09%22%20Return%20the%20next%20anInteger%20elements%20read%20from%20the%20receiver.%0D%09If%20the%20receiver%20reach%20its%20end%2C%20the%20returned%20collection%20has%20less%20elements.%0D%09%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20collection%20class%20new.%0D%09anInteger%20timesRepeat%3A%20%5B%0D%09%09self%20atEnd%20ifTrue%3A%20%5B%20%5Eresult%20%5D.%0D%09%09result%20add%3A%20self%20next.%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Stream, unescape("isStream"), "isStream", function Stream__isStream(){
const self = this; return true;
}
, "testing", unescape("isStream%0D%09%22Answer%20true%20if%20receiver%20is%20a%20kind%20of%20Stream.%22%0D%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Object, unescape("isStream"), "isStream", function Object__isStream(){
const self = this; return false;
}
, "testing", unescape("isStream%0D%09%22Answer%20true%20if%20the%20receiver%20is%20a%20kind%20of%20Stream.%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Stream, unescape("nextPut%3A"), "nextPut_", function Stream__nextPut_(anObject){
const self = this; self.position_(((self.position())._plus((1))));
(self.collection()).at_put_((self.position()),anObject);
self.readLimit_(((self.readLimit()).max_((self.position()))));
return self;
}
, "writing", unescape("nextPut%3A%20anObject%0D%09%22%20Put%20anObject%20onto%20the%20receiver.%20%22%0D%0D%09self%20position%3A%20self%20position%20+%201.%0D%09self%20collection%20at%3A%20self%20position%20put%3A%20anObject.%0D%09self%20readLimit%3A%20%28self%20readLimit%20max%3A%20self%20position%29"));
smalltalk.bind(smalltalk.Stream, unescape("nextPutAll%3A"), "nextPutAll_", function Stream__nextPutAll_(aCollection){
const self = this; aCollection.do_((function Stream__(each){
return self.nextPut_(each);
}
));
return self;
}
, "writing", unescape("nextPutAll%3A%20aCollection%0D%09%22%20Put%20aCollection%20onto%20the%20receiver.%20%22%0D%0D%09aCollection%20do%3A%20%5B%3Aeach%20%7C%20self%20nextPut%3A%20each%20%5D"));
smalltalk.bind(smalltalk.Stream, unescape("lf"), "lf", function Stream__lf(){
const self = this; self.nextPutAll_((smalltalk.String.lf()));
return self;
}
, "writing", unescape("lf%0D%09%22%20Put%20a%20line%20break%20sequence%20onto%20the%20receiver.%0D%09Note%3A%20this%20implementation%20MUST%20be%20consistent%20with%20%23nextLine%0D%09%22%0D%0D%09self%20nextPutAll%3A%20String%20lf"));
smalltalk.bind(smalltalk.Stream, unescape("cr"), "cr", function Stream__cr(){
const self = this; self.nextPutAll_((smalltalk.String.crlf()));
return self;
}
, "writing", unescape("cr%0D%09%22%20Put%20a%20line%20break%20sequence%20onto%20the%20receiver.%0D%09Note%3A%20this%20implementation%20MUST%20be%20consistent%20with%20%23nextLine%0D%09%22%0D%0D%09self%20nextPutAll%3A%20String%20crlf"));
smalltalk.bind(smalltalk.Stream, unescape("space"), "space", function Stream__space(){
const self = this; self.nextPutAll_((smalltalk.String.space()));
return self;
}
, "writing", unescape("space%0D%09%22%20Put%20a%20space%20sequence%20onto%20the%20receiver.%20%22%0D%0D%09self%20nextPutAll%3A%20String%20space"));
smalltalk.bind(smalltalk.Stream, unescape("tab"), "tab", function Stream__tab(){
const self = this; self.nextPutAll_((smalltalk.String.tab()));
return self;
}
, "writing", unescape("tab%0D%09%22%20Put%20a%20tab%20sequence%20onto%20the%20receiver.%20%22%0D%0D%09self%20nextPutAll%3A%20String%20tab"));
smalltalk.bind(smalltalk.Stream, unescape("peek"), "peek", function Stream__peek(){
const self = this; if ((self.atEnd()).not()) {return (self.collection()).at_(((self.position())._plus((1))))} else {return nil};
}
, "reading", unescape("peek%0D%09%22%20Return%20the%20next%20readable%20element%20from%20the%20receiver%20without%20advancing%20the%20receiver%3B%20or%20nil.%20%22%0D%0D%09%5Eself%20atEnd%20ifFalse%3A%20%5B%0D%09%20%20%20%20self%20collection%20at%3A%20self%20position%20+%201%0D%09%5D"));
smalltalk.bind(smalltalk.Stream, unescape("peekFor%3A"), "peekFor_", function Stream__peekFor_(anObject){
const self = this; return (anObject._eq((self.peek()))).and_((function Stream__(){
if ((self.atEnd()).not()) {self.next()};
return true;
}
));
}
, "reading", unescape("peekFor%3A%20anObject%0D%09%22%20Return%20true%20if%20the%20next%20readable%20element%20from%20the%20receiver%20equals%20anObject.%0D%09Advance%20the%20receiver%20if%20the%20result%20is%20true.%0D%09%22%0D%0D%09%5EanObject%20%3D%20self%20peek%20and%3A%20%5B%0D%09%09self%20atEnd%20ifFalse%3A%20%5B%20self%20next%20%5D.%0D%09%09true%0D%09%5D"));
smalltalk.bind(smalltalk.Stream, unescape("atEnd"), "atEnd", function Stream__atEnd(){
const self = this; return (self.position())._gt_eq((self.size()));
}
, "testing", unescape("atEnd%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20at%20end.%20%22%0D%0D%09%5Eself%20position%20%3E%3D%20self%20size"));
smalltalk.bind(smalltalk.Stream, unescape("atStart"), "atStart", function Stream__atStart(){
const self = this; return (self.position())._eq((0));
}
, "testing", unescape("atStart%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20at%20start%20position.%20%22%0D%0D%09%5Eself%20position%20%3D%200"));
smalltalk.bind(smalltalk.Stream, unescape("isEmpty"), "isEmpty", function Stream__isEmpty(){
const self = this; return (self.size())._eq((0));
}
, "testing", unescape("isEmpty%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20empty.%20%22%0D%0D%09%5Eself%20size%20%3D%200"));
smalltalk.bind(smalltalk.Stream, unescape("notEmpty"), "notEmpty", function Stream__notEmpty(){
const self = this; return (self.isEmpty()).not();
}
, "testing", unescape("notEmpty%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20not%20empty.%20%22%0D%0D%09%5Eself%20isEmpty%20not"));
smalltalk.bind(smalltalk.Stream, unescape("upTo%3A"), "upTo_", function Stream__upTo_(anObject){
var result = nil;
const self = this; result=((self.collection()).$klass).$$new();
while(((self.atEnd()).or_((function Stream__(){
return (self.peek())._eq(anObject);
}
))).not()){result.add_((self.next()))};;
if ((self.atEnd()).not()) {self.next()};
return result;
}
, "reading", unescape("upTo%3A%20anObject%0D%09%22%20Return%20the%20elements%20read%20from%20the%20receiver%20upto%20anObject%20%28or%20end%29.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20collection%20class%20new.%0D%09%5B%20self%20atEnd%20or%3A%20%5B%20self%20peek%20%3D%20anObject%20%5D%5D%20whileFalse%3A%20%5B%0D%09%20%20%20%20result%20add%3A%20self%20next%0D%09%5D.%0D%09self%20atEnd%20ifFalse%3A%20%5B%20self%20next%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Stream, unescape("upToEnd"), "upToEnd", function Stream__upToEnd(){
const self = this; return self.upTo_((smalltalk.Object.$$new()));
}
, "reading", unescape("upToEnd%0D%09%22%20Return%20the%20contents%20of%20the%20receiver%20upto%20end.%20%22%0D%0D%09%5Eself%20upTo%3A%20Object%20new"));
smalltalk.bind(smalltalk.Stream, unescape("upToLineEnd"), "upToLineEnd", function Stream__upToLineEnd(){
var result = nil;
var lf = nil;
var cr = nil;
const self = this; lf=smalltalk.Character.lf();
cr=smalltalk.Character.cr();
result=((self.collection()).$klass).$$new();
while((((self.atEnd()).or_((function Stream__(){
return (self.peek())._eq(lf);
}
))).or_((function Stream__(){
return (self.peek())._eq(cr);
}
))).not()){result.add_((self.next()))};;
if ((self.atEnd()).not()) {var end = nil;
end=self.next();
if (((end._eq(cr)).and_(((function Stream__(){
return (self.atEnd()).not();
}
).and_((function Stream__(){
return (self.peek())._eq(lf);
}
))))).valueOf()) {self.next()}};
return result;
}
, "reading", unescape("upToLineEnd%0D%09%22%20Return%20the%20elements%20read%20from%20the%20receiver%20upto%20end%20of%20line%20%28or%20end%29.%20%22%0D%0D%09%7C%20result%20lf%20cr%20%7C%0D%09lf%20%3A%3D%20Character%20lf.%0D%09cr%20%3A%3D%20Character%20cr.%0D%09result%20%3A%3D%20self%20collection%20class%20new.%0D%09%5B%28self%20atEnd%20%0D%09%09or%3A%20%5Bself%20peek%20%3D%20lf%5D%29%0D%09%09or%3A%20%5Bself%20peek%20%3D%20cr%5D%5D%20whileFalse%3A%20%5B%0D%09%20%20%20%20result%20add%3A%20self%20next%0D%09%5D.%0D%09self%20atEnd%20ifFalse%3A%20%5B%0D%09%09%7C%20end%20%7C%0D%09%09end%20%3A%3D%20self%20next.%0D%09%09%28end%20%3D%20cr%0D%09%09%09and%3A%20%28%5Bself%20atEnd%20not%5D%0D%09%09%09and%3A%20%5Bself%20peek%20%3D%20lf%5D%29%29%0D%09%09%09ifTrue%3A%20%5Bself%20next%5D%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Stream, unescape("nextLine"), "nextLine", function Stream__nextLine(){
var result = nil;
var start = nil;
const self = this; start=self.position();
result=self.upToLineEnd();
return result;
}
, "reading", unescape("nextLine%0D%09%22%20Return%20the%20characters%20read%20from%20the%20receiver%20up%20to%20the%20line%20delimiter.%20%22%0D%0D%09%7C%20result%20start%20%7C%0D%09start%20%3A%3D%20self%20position.%0D%09result%20%3A%3D%20self%20upToLineEnd.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Stream, unescape("skipTo%3A"), "skipTo_", function Stream__skipTo_(anObject){
const self = this; var $early={name:"stReturn"};
try {
while((self.atEnd()).not()){if (((self.next())._eq(anObject)).valueOf()) {$early.result=true; throw ($early)}};;
return false;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "reading", unescape("skipTo%3A%20anObject%0D%09%22%20Advance%20the%20receiver%20upto%20anObject%20%28or%20end%29.%20%22%0D%0D%09%5B%20self%20atEnd%20%5D%20whileFalse%3A%20%5B%0D%09%09self%20next%20%3D%20anObject%20ifTrue%3A%20%5B%20%5Etrue%20%5D.%0D%09%5D.%0D%09%5Efalse"));
smalltalk.bind(smalltalk.Stream, unescape("skipSeparators"), "skipSeparators", function Stream__skipSeparators(){
const self = this; var $early={name:"stReturn"};
try {
while(((function Stream__(){
if ((self.atEnd()).valueOf()) {$early.result=false; throw ($early)};
return (self.peek()).isSeparator();
}
)()).valueOf()){self.next()};;
return true;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "reading", unescape("skipSeparators%0D%09%22%20Advance%20the%20receiver%20upto%20a%20non-separator%20%28or%20end%29.%0D%09Return%20true%20%20if%20a%20non-separator%20contents%20is%20found%2C%0D%09return%20false%20if%20run%20upto%20end%20of%20stream.%0D%09%22%0D%0D%09%5B%20self%20atEnd%20ifTrue%3A%20%5B%20%5Efalse%20%5D.%0D%09%20%20self%20peek%20isSeparator%0D%09%5D%20whileTrue%3A%20%5B%20self%20next%20%5D.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Stream.$klass, unescape("on%3A"), "on_", function Stream_class__on_(aCollection){
const self = this; return (function Stream_class__($1$){
$1$.collection_(aCollection);
$1$.readLimit_((aCollection.size()));
return $1$.yourself()}
)(self.$$new());
}
, "instantiation", unescape("on%3A%20aCollection%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%0D%09%09collection%3A%20aCollection%3B%0D%09%09readLimit%3A%20aCollection%20size%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Stream, unescape("upToEnd"), "upToEnd", function Stream__upToEnd(){
var result = nil;
const self = this; result=(self.collection()).copyFrom_to_(((self.position())._plus((1))),(self.readLimit()));
self.setToEnd();
return result;
}
, "reading", unescape("upToEnd%0D%09%22%20Return%20the%20contents%20of%20the%20receiver%20upto%20end.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20collection%20copyFrom%3A%20self%20position%20+%201%20to%3A%20self%20readLimit.%0D%09self%20setToEnd.%0D%09%5Eresult"));
smalltalk.addClass("StringStream", smalltalk.Stream, [], 'Kernel');
smalltalk.StringStream.$classVariableNames=("");
smalltalk.bind(smalltalk.StringStream, unescape("next%3A"), "next_", function StringStream__next_(anInteger){
var start = nil;
var result = nil;
var stop = nil;
const self = this; start=self.position();
stop=(start._plus(anInteger)).min_((self.readLimit()));
result=(self.collection()).copyFrom_to_((start._plus((1))),stop);
self.position_(stop);
return result;
}
, "reading", unescape("next%3A%20anInteger%0D%09%22%20Return%20the%20next%20anInteger%20elements%20read%20from%20the%20receiver.%0D%09If%20the%20receiver%20reach%20its%20end%2C%20the%20returned%20collection%20has%20less%20elements.%0D%09%22%0D%0D%09%7C%20start%20result%20stop%20%7C%0D%09start%20%3A%3D%20self%20position.%0D%09stop%20%3A%3D%20start%20+%20anInteger%20min%3A%20self%20readLimit.%0D%09result%20%3A%3D%20self%20collection%20copyFrom%3A%20start%20+%201%20to%3A%20stop.%0D%09self%20position%3A%20stop.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.StringStream, unescape("nextPut%3A"), "nextPut_", function StringStream__nextPut_(aString){
const self = this; self.nextPutAll_(aString);
return self;
}
, "writing", unescape("nextPut%3A%20aString%0D%09%22%20Put%20aString%20onto%20the%20receiver.%20%22%0D%0D%09self%20nextPutAll%3A%20aString"));
smalltalk.bind(smalltalk.StringStream, unescape("nextPutAll%3A"), "nextPutAll_", function StringStream__nextPutAll_(aString){
var result = nil;
const self = this; if (((self.position())._eq(((self.collection()).size()))).valueOf()) {result=(self.collection())._comma(aString)} else {var substring = nil;
substring=(self.collection()).copyFrom_to_((1),(self.position()));
result=(substring.isEmpty()).ifTrue_ifFalse_((function StringStream__(){
return aString;
}
),(function StringStream__(){
return substring._comma(aString);
}
));
substring=(self.collection()).copyFrom_to_((((self.position())._plus((1)))._plus((aString.size()))),((self.collection()).size()));
result=(substring.isEmpty()).ifTrue_ifFalse_((function StringStream__(){
return result;
}
),(function StringStream__(){
return result._comma(substring);
}
))};
self.collection_(result);
self.position_(((self.position())._plus((aString.size()))));
self.readLimit_(((self.readLimit()).max_(self['@position'])));
return self;
}
, "writing", unescape("nextPutAll%3A%20aString%0D%09%22%20Put%20aString%20onto%20the%20receiver%20at%20current%20position%3B%20expanding%20internal%20contents.%20%22%0D%0D%09%7C%20result%20%7C%0D%09self%20position%20%3D%20self%20collection%20size%0D%09ifTrue%3A%20%5B%20result%20%3A%3D%20self%20collection%20%2C%20aString%20%5D%0D%09ifFalse%3A%20%5B%20%7C%20substring%20%7C%0D%09%09substring%20%3A%3D%20self%20collection%20copyFrom%3A%201%20to%3A%20self%20position.%0D%09%09result%20%3A%3D%20substring%20isEmpty%20ifTrue%3A%20%5B%20aString%20%5D%20ifFalse%3A%20%5B%20substring%20%2C%20aString%20%5D.%0D%09%09substring%20%3A%3D%20self%20collection%0D%09%09%09copyFrom%3A%20self%20position%20+%201%20+%20aString%20size%0D%09%09%09to%3A%20self%20collection%20size.%0D%09%09result%20%3A%3D%20substring%20isEmpty%20ifTrue%3A%20%5B%20result%20%5D%20ifFalse%3A%20%5B%20result%20%2C%20substring%20%5D.%0D%09%5D.%0D%09self%20collection%3A%20result.%0D%09self%20position%3A%20self%20position%20+%20aString%20size.%0D%09self%20readLimit%3A%20%28self%20readLimit%20max%3A%20position%29"));
smalltalk.bind(smalltalk.StringStream, unescape("print%3A"), "print_", function StringStream__print_(anObject){
const self = this; anObject.printOn_(self);
return self;
}
, "writing", unescape("print%3A%20anObject%0D%0D%09anObject%20printOn%3A%20self"));
smalltalk.bind(smalltalk.StringStream, unescape("skipTo%3A"), "skipTo_", function StringStream__skipTo_(anObject){
var index = nil;
const self = this; if ((anObject.isString()).not()) {self.setToEnd();
return false};
index=(self.collection()).indexOf_startingAt_(anObject,((self.position())._plus((1))));
if ((index.between_and_(((self.position())._plus((1))),(self.readLimit()))).valueOf()) {self.position_(((index._plus((anObject.size())))._minus((1))));
return true};
self.setToEnd();
return false;
}
, "reading", unescape("skipTo%3A%20anObject%0D%09%22%20Advance%20the%20receiver%20upto%20anObject%20%28or%20end%29.%20%22%0D%0D%09%7C%20index%20%7C%0D%09anObject%20isString%20ifFalse%3A%20%5B%20self%20setToEnd.%20%5Efalse%20%5D.%0D%09index%20%3A%3D%20self%20collection%20indexOf%3A%20anObject%20startingAt%3A%20self%20position%20+%201.%0D%09%28index%20between%3A%20self%20position%20+%201%20and%3A%20self%20readLimit%29%20ifTrue%3A%20%5B%0D%09%09self%20position%3A%20index%20+%20anObject%20size%20-%201.%0D%09%09%5Etrue%0D%09%5D.%0D%09self%20setToEnd.%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StringStream, unescape("upTo%3A"), "upTo_", function StringStream__upTo_(anObject){
var start = nil;
var found = nil;
const self = this; if ((anObject.isString()).not()) {return self.upToEnd()};
start=(self.position())._plus((1));
found=(self.skipTo_(anObject)).ifTrue_ifFalse_((function StringStream__(){
return anObject.size();
}
),(function StringStream__(){
return (0);
}
));
return (self.collection()).copyFrom_to_(start,((self.position())._minus(found)));
}
, "reading", unescape("upTo%3A%20anObject%0D%09%22%20Return%20the%20elements%20read%20from%20the%20receiver%20upto%20anObject%20%28or%20end%29.%20%22%0D%0D%09%7C%20start%20found%20%7C%0D%09anObject%20isString%20ifFalse%3A%20%5B%20%5Eself%20upToEnd%20%5D.%0D%09start%20%3A%3D%20self%20position%20+%201.%0D%09found%20%3A%3D%20%28self%20skipTo%3A%20anObject%29%20ifTrue%3A%20%5B%20anObject%20size%20%5D%20ifFalse%3A%20%5B%200%20%5D.%0D%09%5Eself%20collection%20copyFrom%3A%20start%20to%3A%20self%20position%20-%20found"));
smalltalk.bind(smalltalk.StringStream, unescape("peek"), "peek", function StringStream__peek(){
const self = this; if (((self.position())._lt((self['@collection'].size()))).valueOf()) {return self['@collection'].at_(((self.position())._plus((1))))} else {return nil};
}
, "reading", unescape("peek%0D%09%22%20Return%20the%20next%20readable%20element%20from%20the%20receiver%20without%20advancing%20%28or%20nil%29.%20%22%0D%0D%09%5Eself%20position%20%3C%20collection%20size%0D%20%20%20%20%20%20%20%20ifTrue%3A%20%5Bcollection%20at%3A%20self%20position%20+%201%5D%0D%20%20%20%20%20%20%20%20ifFalse%3A%20%5Bnil%5D%20"));
smalltalk.bind(smalltalk.StringStream, unescape("next"), "next", function StringStream__next(){
var result = nil;
const self = this; result=self.peek();
if (((nil.isNil_(result)===false)).valueOf()) {self['@position']=self['@position']._plus((1))};
return result;
}
, "reading", unescape("next%0D%09%22%20Return%20the%20next%20readable%20element%20in%20the%20receiver%20%28or%20nil%29.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20peek.%0D%09result%20notNil%20ifTrue%3A%20%5B%20position%20%3A%3D%20position%20+%201%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.StringStream, unescape("upToLineEnd"), "upToLineEnd", function StringStream__upToLineEnd(){
var start = nil;
var cr = nil;
var lf = nil;
const self = this; start=(self.position())._plus((1));
lf=smalltalk.Character.lf();
cr=smalltalk.Character.cr();
while((((self.atEnd()).or_((function StringStream__(){
return (self.peek())._eq(lf);
}
))).or_((function StringStream__(){
return (self.peek())._eq(cr);
}
))).not()){self.next()};;
if ((self.atEnd()).not()) {var end = nil;
end=self.next();
if ((((self.atEnd()).not()).and_((function StringStream__(){
return (self.peek())._eq(lf);
}
))).valueOf()) {self.next()}};
return (self.collection()).copyFrom_to_(start,(self.position()));
}
, "reading", unescape("upToLineEnd%0D%09%22%20Return%20the%20elements%20read%20from%20the%20receiver%20upto%20line%20end%20%28or%20end%29.%20%22%0D%0D%09%7C%20start%20cr%20lf%20%7C%0D%09start%20%3A%3D%20self%20position%20+%201.%0D%09lf%20%3A%3D%20Character%20lf.%0D%09cr%20%3A%3D%20Character%20cr.%0D%09%5B%28self%20atEnd%20%0D%09%09or%3A%20%5Bself%20peek%20%3D%20lf%5D%29%0D%09%09or%3A%20%5Bself%20peek%20%3D%20cr%5D%5D%20whileFalse%3A%20%5B%0D%09%09self%20next%0D%09%5D.%0D%09self%20atEnd%20ifFalse%3A%20%5B%0D%09%09%7C%20end%20%7C%0D%09%09end%20%3A%3D%20self%20next.%0D%09%09%28self%20atEnd%20not%20and%3A%20%5Bself%20peek%20%3D%20lf%5D%29%0D%09%09%09ifTrue%3A%20%5Bself%20next%5D%5D.%0D%09%5Eself%20collection%20copyFrom%3A%20start%20to%3A%20self%20position"));
smalltalk.bind(smalltalk.StringStream, unescape("upToSeparator"), "upToSeparator", function StringStream__upToSeparator(){
var start = nil;
const self = this; start=(self.position())._plus((1));
while((((self.atEnd()).not()).and_((function StringStream__(){
return ((self.peek()).isSeparator()).not();
}
))).valueOf()){self.next()};;
return (self.collection()).copyFrom_to_(start,(self.position()));
}
, "reading", unescape("upToSeparator%0D%09%22%20Return%20the%20elements%20read%20from%20the%20receiver%20upto%20a%20separator%20%28or%20end%29.%20%22%0D%0D%09%7C%20start%20%7C%0D%09start%20%3A%3D%20self%20position%20+%201.%0D%09%5Bself%20atEnd%20not%20and%3A%20%5Bself%20peek%20isSeparator%20not%5D%5D%20whileTrue%3A%20%5B%0D%09%09self%20next%0D%09%5D.%0D%09%5Eself%20collection%20copyFrom%3A%20start%20to%3A%20self%20position"));
smalltalk.bind(smalltalk.StringStream, unescape("nextMessagePattern"), "nextMessagePattern", function StringStream__nextMessagePattern(){
var pattern = nil;
var selector = nil;
var args = nil;
const self = this; args=[];
self.skipSeparators();
selector=self.upToSeparator();
if ((selector.isEmpty()).valueOf()) {return nil};
if (((selector.argumentCount())._gt((0))).valueOf()) {var part = nil;
while(((function StringStream__(){
self.skipSeparators();
args.add_((self.upToSeparator()));
self.skipSeparators();
part=((self.peek())._eq(unescape("%22"))).ifTrue_ifFalse_((function StringStream__(){
return "";
}
),(function StringStream__(){
return self.upToSeparator();
}
));
return (part.notEmpty()).and_((function StringStream__(){
return (part.last())._eq(":");
}
));
}
)()).valueOf()){selector=selector._comma(part)};};
pattern=smalltalk.Message.selector_arguments_(selector,args);
self.skipSeparators();
if (((self.peek())._eq(unescape("%22"))).valueOf()) {pattern.comment_(((function StringStream__($1$){
$1$.next();
return $1$.upTo_(unescape("%22"))}
)(self).trimBlanks()))};
return pattern;
}
, "tools", unescape("nextMessagePattern%0D%09%22%20Return%20a%20message%20pattern%20read%20from%20the%20receiver%20%28or%20nil%29.%0D%09Note%3A%20it%20is%20assumed%20that%20there%20is%20a%20correct%20message%20header%20in%20the%20receiver.%0D%09%22%0D%0D%09%7C%20pattern%20selector%20args%20%7C%0D%09args%20%3A%3D%20%23%28%29.%0D%09self%20skipSeparators.%0D%09selector%20%3A%3D%20self%20upToSeparator.%0D%09selector%20isEmpty%20ifTrue%3A%20%5B%20%5Enil%20%5D.%0D%09selector%20argumentCount%20%3E%200%20ifTrue%3A%20%5B%0D%09%09%7C%20part%20%7C%0D%09%09%5Bself%20skipSeparators.%0D%09%09args%20add%3A%20self%20upToSeparator.%0D%09%09self%20skipSeparators.%0D%09%09part%20%3A%3D%20self%20peek%20%3D%20%24%22%0D%09%09%09ifTrue%3A%20%5B%20%27%27%20%5D%0D%09%09%09ifFalse%3A%20%5B%20self%20upToSeparator%20%5D.%0D%09%09part%20notEmpty%20and%3A%20%5B%20part%20last%20%3D%20%24%3A%20%5D%0D%09%09%5D%20whileTrue%3A%20%5Bselector%20%3A%3D%20selector%20%2C%20part%5D.%0D%09%5D.%0D%09pattern%20%3A%3D%20Message%20selector%3A%20selector%20arguments%3A%20args.%0D%09self%20skipSeparators.%0D%09self%20peek%20%3D%20%24%22%20ifTrue%3A%20%5B%0D%09%09pattern%20comment%3A%20%28self%20next%3B%20upTo%3A%20%24%22%29%20trimBlanks%0D%09%5D.%0D%09%5Epattern"));
smalltalk.addClass("Random", smalltalk.Object, [], 'Kernel');
smalltalk.Random.$classVariableNames=("");
smalltalk.bind(smalltalk.Random, unescape("next"), "next", function Random__next(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primRandom(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "accessing", unescape("next%0D%09%22%20Return%20the%20next%20random%20number.%20%22%0D%0D%09%3Cprimitive%3A%20%27primRandom%27%20module%3A%20%27SKNumber%27%3E%0D%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.Random, unescape("next%3A"), "next_", function Random__next_(anInteger){
const self = this; return ((1).to_(anInteger)).collect_((function Random__(each){
return self.next();
}
));
}
, "accessing", unescape("next%3A%20anInteger%0D%09%22%20Return%20the%20next%20anInteger%20random%20numbers.%20%22%0D%0D%09%5E%281%20to%3A%20anInteger%29%20collect%3A%20%5B%3Aeach%20%7C%20self%20next%20%5D"));
smalltalk.addClass("Point", smalltalk.Object, ['x', 'y'], 'Kernel');
smalltalk.Point.$classVariableNames=("");
smalltalk.bind(smalltalk.Point.$klass, unescape("x%3Ay%3A"), "x_y_", function Point_class__x_y_(x,y){
const self = this; return (function Point_class__($1$){
$1$.x_(x);
return $1$.y_(y)}
)(self.basicNew());
}
, "instantiation", unescape("x%3A%20x%20y%3A%20y%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicNew%20x%3A%20x%3B%20y%3A%20y"));
smalltalk.bind(smalltalk.Point.$klass, unescape("zero"), "zero", function Point_class__zero(){
const self = this; return (function Point_class__($1$){
$1$.x_((0));
return $1$.y_((0))}
)(self.basicNew());
}
, "instantiation", unescape("zero%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20basicNew%20x%3A%200%3B%20y%3A%200"));
smalltalk.bind(smalltalk.Point, unescape("x"), "x", function Point__x(){
const self = this; return self['@x'];
}
, "accessing", unescape("x%0D%09%22%20Return%20the%20x%20of%20the%20receiver.%20%22%0D%0D%09%5Ex"));
smalltalk.bind(smalltalk.Point, unescape("y"), "y", function Point__y(){
const self = this; return self['@y'];
}
, "accessing", unescape("y%0D%09%22%20Return%20the%20y%20of%20the%20receiver.%20%22%0D%0D%09%5Ey"));
smalltalk.bind(smalltalk.Point, unescape("y%3A"), "y_", function Point__y_(aNumber){
const self = this; self['@y']=((nil.isNil_(aNumber))).ifTrue_ifFalse_((function Point__(){
return (0);
}
),(function Point__(){
return aNumber;
}
));
return self;
}
, "accessing", unescape("y%3A%20aNumber%0D%09%22%20Set%20the%20y%20of%20the%20receiver.%20%22%0D%0D%09y%20%3A%3D%20aNumber%20isNil%20ifTrue%3A%20%5B%200%20%5D%20ifFalse%3A%20%5B%20aNumber%20%5D"));
smalltalk.bind(smalltalk.Point, unescape("x%3A"), "x_", function Point__x_(aNumber){
const self = this; self['@x']=((nil.isNil_(aNumber))).ifTrue_ifFalse_((function Point__(){
return (0);
}
),(function Point__(){
return aNumber;
}
));
return self;
}
, "accessing", unescape("x%3A%20aNumber%0D%09%22%20Set%20the%20x%20of%20the%20receiver.%20%22%0D%0D%09x%20%3A%3D%20aNumber%20isNil%20ifTrue%3A%20%5B%200%20%5D%20ifFalse%3A%20%5B%20aNumber%20%5D"));
smalltalk.bind(smalltalk.Point, unescape("*"), "_star", function Point___star(aPoint){
const self = this; if ((aPoint.isNumber()).valueOf()) {return (self['@x']._star(aPoint))._at((self['@y']._star(aPoint)))};
return smalltalk.Point.x_y_((self['@x']._star(((aPoint.asPoint()).x()))),(self['@y']._star(((aPoint.asPoint()).y()))));
}
, "arithmetic", unescape("*%20aPoint%0D%09%22%20Return%20the%20result%20of%20operation%20with%20aPoint.%20%22%0D%0D%09aPoint%20isNumber%20ifTrue%3A%20%5B%20%5Ex%20*%20aPoint%20@%20%28y%20*%20aPoint%29%20%5D.%0D%09%5EPoint%09x%3A%20x%20*%20aPoint%20asPoint%20x%0D%09%09y%3A%20y%20*%20aPoint%20asPoint%20y"));
smalltalk.bind(smalltalk.Point, unescape("+"), "_plus", function Point___plus(aPoint){
const self = this; if ((aPoint.isNumber()).valueOf()) {return (self['@x']._plus(aPoint))._at((self['@y']._plus(aPoint)))};
return smalltalk.Point.x_y_((self['@x']._plus(((aPoint.asPoint()).x()))),(self['@y']._plus(((aPoint.asPoint()).y()))));
}
, "arithmetic", unescape("+%20aPoint%0D%09%22%20Return%20the%20result%20of%20operation%20with%20aPoint.%20%22%0D%0D%09aPoint%20isNumber%20ifTrue%3A%20%5B%20%5Ex%20+%20aPoint%20@%20%28y%20+%20aPoint%29%20%5D.%0D%09%5EPoint%09x%3A%20x%20+%20aPoint%20asPoint%20x%0D%09%09y%3A%20y%20+%20aPoint%20asPoint%20y"));
smalltalk.bind(smalltalk.Point, unescape("-"), "_minus", function Point___minus(aPoint){
const self = this; if ((aPoint.isNumber()).valueOf()) {return (self['@x']._minus(aPoint))._at((self['@y']._minus(aPoint)))};
return smalltalk.Point.x_y_((self['@x']._minus(((aPoint.asPoint()).x()))),(self['@y']._minus(((aPoint.asPoint()).y()))));
}
, "arithmetic", unescape("-%20aPoint%0D%09%22%20Return%20the%20result%20of%20operation%20with%20aPoint.%20%22%0D%0D%09aPoint%20isNumber%20ifTrue%3A%20%5B%20%5Ex%20-%20aPoint%20@%20%28y%20-%20aPoint%29%20%5D.%0D%09%5EPoint%09x%3A%20x%20-%20aPoint%20asPoint%20x%0D%09%09y%3A%20y%20-%20aPoint%20asPoint%20y"));
smalltalk.bind(smalltalk.Point, unescape("/"), "_slash", function Point___slash(aPoint){
const self = this; if ((aPoint.isNumber()).valueOf()) {return (self['@x']._slash(aPoint))._at((self['@y']._slash(aPoint)))};
return smalltalk.Point.x_y_((self['@x']._slash(((aPoint.asPoint()).x()))),(self['@y']._slash(((aPoint.asPoint()).y()))));
}
, "arithmetic", unescape("/%20aPoint%0D%09%22%20Return%20the%20result%20of%20operation%20with%20aPoint.%20%22%0D%0D%09aPoint%20isNumber%20ifTrue%3A%20%5B%20%5Ex%20/%20aPoint%20@%20%28y%20/%20aPoint%29%20%5D.%0D%09%5EPoint%09x%3A%20x%20/%20aPoint%20asPoint%20x%0D%09%09y%3A%20y%20/%20aPoint%20asPoint%20y"));
smalltalk.bind(smalltalk.Point, unescape("//"), "_slash_slash", function Point___slash_slash(aPoint){
const self = this; if ((aPoint.isNumber()).valueOf()) {return (self['@x']._slash_slash(aPoint))._at((self['@y']._slash_slash(aPoint)))};
return smalltalk.Point.x_y_((self['@x']._slash_slash(((aPoint.asPoint()).x()))),(self['@y']._slash_slash(((aPoint.asPoint()).y()))));
}
, "arithmetic", unescape("//%20aPoint%0D%09%22%20Return%20the%20result%20of%20operation%20with%20aPoint.%20%22%0D%0D%09aPoint%20isNumber%20ifTrue%3A%20%5B%20%5Ex%20//%20aPoint%20@%20%28y%20//%20aPoint%29%20%5D.%0D%09%5EPoint%09x%3A%20x%20//%20aPoint%20asPoint%20x%0D%09%09y%3A%20y%20//%20aPoint%20asPoint%20y"));
smalltalk.bind(smalltalk.Point, unescape("%5C%5C"), "_bk_bk", function Point___bk_bk(aPoint){
const self = this; if ((aPoint.isNumber()).valueOf()) {return (self['@x']._bk_bk(aPoint))._at((self['@y']._bk_bk(aPoint)))};
return smalltalk.Point.x_y_((self['@x']._bk_bk(((aPoint.asPoint()).x()))),(self['@y']._bk_bk(((aPoint.asPoint()).y()))));
}
, "arithmetic", unescape("%5C%5C%20aPoint%0D%09%22%20Return%20the%20result%20of%20operation%20with%20aPoint.%20%22%0D%0D%09aPoint%20isNumber%20ifTrue%3A%20%5B%20%5Ex%20%5C%5C%20aPoint%20@%20%28y%20%5C%5C%20aPoint%29%20%5D.%0D%09%5EPoint%09x%3A%20x%20%5C%5C%20aPoint%20asPoint%20x%0D%09%09y%3A%20y%20%5C%5C%20aPoint%20asPoint%20y"));
smalltalk.bind(smalltalk.Point, unescape("%3C"), "_lt", function Point___lt(aPoint){
const self = this; if ((aPoint.isNumber()).valueOf()) {return self._lt((aPoint.asPoint()))};
return (self['@x']._lt((aPoint.x()))).and_((function Point__(){
return self['@y']._lt((aPoint.y()));
}
));
}
, "comparing", unescape("%3C%20aPoint%0D%09%22%20Return%20true%20if%20the%20x%20and%20y%20coordinates%20of%20the%20receiver%20are%20less%20than%20the%20x%20and%20y%20coordinates%20of%20aPoint%2C%20respectively.%20%22%0D%0D%09aPoint%20isNumber%20ifTrue%3A%20%5B%20%5Eself%20%3C%20aPoint%20asPoint%20%5D.%0D%09%5Ex%20%3C%20aPoint%20x%20and%3A%20%5B%20y%20%3C%20aPoint%20y%20%5D"));
smalltalk.bind(smalltalk.Point, unescape("%3C%3D"), "_lt_eq", function Point___lt_eq(aPoint){
const self = this; if ((aPoint.isNumber()).valueOf()) {return self._lt_eq((aPoint.asPoint()))};
return (self['@x']._lt_eq((aPoint.x()))).and_((function Point__(){
return self['@y']._lt_eq((aPoint.y()));
}
));
}
, "comparing", unescape("%3C%3D%20aPoint%0D%09%22%20Return%20true%20if%20the%20x%20and%20y%20coordinates%20of%20the%20receiver%20are%20less%20than%20or%20equal%20to%20the%20x%20and%20y%20coordinates%20of%20aPoint%2C%20respectively.%20%22%0D%0D%09aPoint%20isNumber%20ifTrue%3A%20%5B%20%5Eself%20%3C%3D%20aPoint%20asPoint%20%5D.%0D%09%5Ex%20%3C%3D%20aPoint%20x%20and%3A%20%5B%20y%20%3C%3D%20aPoint%20y%20%5D"));
smalltalk.bind(smalltalk.Point, unescape("%3E"), "_gt", function Point___gt(aPoint){
const self = this; if ((aPoint.isNumber()).valueOf()) {return self._gt((aPoint.asPoint()))};
return (self['@x']._gt((aPoint.x()))).and_((function Point__(){
return self['@y']._gt((aPoint.y()));
}
));
}
, "comparing", unescape("%3E%20aPoint%0D%09%22%20Return%20true%20if%20the%20x%20and%20y%20coordinates%20of%20the%20receiver%20are%20greater%20than%20the%20x%20and%20y%20coordinates%20of%20aPoint%2C%20respectively.%20%22%0D%0D%09aPoint%20isNumber%20ifTrue%3A%20%5B%20%5Eself%20%3E%20aPoint%20asPoint%20%5D.%0D%09%5Ex%20%3E%20aPoint%20x%20and%3A%20%5B%20y%20%3E%20aPoint%20y%20%5D"));
smalltalk.bind(smalltalk.Point, unescape("%3E%3D"), "_gt_eq", function Point___gt_eq(aPoint){
const self = this; if ((aPoint.isNumber()).valueOf()) {return self._gt_eq((aPoint.asPoint()))};
return (self['@x']._gt_eq((aPoint.x()))).and_((function Point__(){
return self['@y']._gt_eq((aPoint.y()));
}
));
}
, "comparing", unescape("%3E%3D%20aPoint%0D%09%22%20Return%20true%20if%20the%20x%20and%20y%20coordinates%20of%20the%20receiver%20are%20greater%20than%20or%20equal%20to%20the%20x%20and%20y%20coordinates%20of%20aPoint%2C%20respectively.%20%22%0D%0D%09aPoint%20isNumber%20ifTrue%3A%20%5B%20%5Eself%20%3E%3D%20aPoint%20asPoint%20%5D.%0D%09%5Ex%20%3E%3D%20aPoint%20x%20and%3A%20%5B%20y%20%3E%3D%20aPoint%20y%20%5D"));
smalltalk.bind(smalltalk.Point, unescape("rounded"), "rounded", function Point__rounded(){
const self = this; return (self['@x'].rounded())._at((self['@y'].rounded()));
}
, "converting", unescape("rounded%0D%09%22%20Return%20the%20receiver%20rounded.%20%22%0D%0D%09%5Ex%20rounded%20@%20y%20rounded"));
smalltalk.bind(smalltalk.Point, unescape("truncated"), "truncated", function Point__truncated(){
const self = this; return (self['@x'].truncated())._at((self['@y'].truncated()));
}
, "converting", unescape("truncated%0D%09%22%20Return%20the%20receiver%20truncated.%20%22%0D%0D%09%5Ex%20truncated%20@%20y%20truncated"));
smalltalk.bind(smalltalk.Point, unescape("asPoint"), "asPoint", function Point__asPoint(){
const self = this; return self;
}
, "converting", unescape("asPoint%0D%09%22%20Return%20the%20receiver%20as%20a%20Point.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Point, unescape("printString"), "printString", function Point__printString(){
const self = this; return ((self['@x'].asString())._comma(unescape("%20@%20")))._comma((self['@y'].asString()));
}
, "printing", unescape("printString%0D%09%22%20Return%20the%20printable%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5Ex%20asString%20%2C%27%20@%20%27%20%2Cy%20asString"));
smalltalk.bind(smalltalk.Point, unescape("toString"), "toString", function Point__toString(){
const self = this; return ((self['@x'].toString())._comma(unescape("@")))._comma((self['@y'].toString()));
}
, "printing", unescape("toString%0D%09%22%20Return%20the%20printable%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5Ex%20toString%20%2C%27@%27%20%2Cy%20toString"));
smalltalk.bind(smalltalk.Point, unescape("shallowCopy"), "shallowCopy", function Point__shallowCopy(){
const self = this; return (self.$klass).x_y_((self.x()),(self.y()));
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20class%20x%3A%20self%20x%20y%3A%20self%20y"));
smalltalk.bind(smalltalk.Point, unescape("%3D"), "_eq", function Point___eq(aPoint){
const self = this; if (((nil.isNil_(aPoint))).valueOf()) {return false};
if ((aPoint.isMemberOf_((self.$klass))).not()) {return ((smalltalk.responds_to_(aPoint,"asPoint"))).and_((function Point__(){
return (aPoint.asPoint())._eq(self);
}
))};
return (self['@x']._eq((aPoint.x()))).and_((function Point__(){
return self['@y']._eq((aPoint.y()));
}
));
}
, "testing", unescape("%3D%20aPoint%0D%09%22%20Return%20the%20result%20of%20operation%20with%20aPoint.%20%22%0D%0D%09aPoint%20isNil%20ifTrue%3A%20%5B%20%5Efalse%20%5D.%0D%09%28aPoint%20isMemberOf%3A%20self%20class%29%20ifFalse%3A%20%5B%0D%09%09%5E%28aPoint%20respondsTo%3A%20%23asPoint%29%20and%3A%20%5B%0D%09%09%09aPoint%20asPoint%20%3D%20self%0D%09%09%5D%0D%09%5D.%0D%09%5Ex%20%3D%20aPoint%20x%20and%3A%20%5B%20y%20%3D%20aPoint%20y%20%5D"));
smalltalk.bind(smalltalk.Point, unescape("min%3A"), "min_", function Point__min_(aPoint){
const self = this; return (self['@x'].min_((aPoint.x())))._at((self['@y'].min_((aPoint.y()))));
}
, "magnitude", unescape("min%3A%20aPoint%0D%09%22%20Return%20the%20minimum%20of%20the%20receiver%20and%20aPoint.%20%22%0D%0D%09%5E%28x%20min%3A%20aPoint%20x%29%20@%20%28y%20min%3A%20aPoint%20y%29"));
smalltalk.bind(smalltalk.Point, unescape("max%3A"), "max_", function Point__max_(aPoint){
const self = this; return (self['@x'].max_((aPoint.x())))._at((self['@y'].max_((aPoint.y()))));
}
, "magnitude", unescape("max%3A%20aPoint%0D%09%22%20Return%20the%20maximum%20of%20the%20receiver%20and%20aPoint.%20%22%0D%0D%09%5E%28x%20max%3A%20aPoint%20x%29%20@%20%28y%20max%3A%20aPoint%20y%29"));
smalltalk.addClass("EvaluableAction", smalltalk.Object, [], 'Kernel');
smalltalk.EvaluableAction.$classVariableNames=("");
smalltalk.addClass("Message", smalltalk.EvaluableAction, ['selector', 'arguments', 'receiver'], 'Kernel');
smalltalk.Message.$classVariableNames=("");
smalltalk.bind(smalltalk.Message.$klass, unescape("receiver%3Aselector%3A"), "receiver_selector_", function Message_class__receiver_selector_(anObject,aSelector){
const self = this; return (function Message_class__($1$){
$1$.receiver_(anObject);
$1$.selector_(aSelector);
return $1$.yourself()}
)(self.$$new());
}
, "instantiation", unescape("receiver%3A%20anObject%0Dselector%3A%20aSelector%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%0D%09%09receiver%3A%20anObject%3B%0D%09%09selector%3A%20aSelector%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Message.$klass, unescape("selector%3Aarguments%3A"), "selector_arguments_", function Message_class__selector_arguments_(aString,anArray){
const self = this; return (function Message_class__($1$){
$1$.selector_(aString);
$1$.arguments_(anArray);
return $1$.yourself()}
)(self.$$new());
}
, "instantiation", unescape("selector%3A%20aString%20arguments%3A%20anArray%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%0D%09%09selector%3A%20aString%3B%0D%09%09arguments%3A%20anArray%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Message.$klass, unescape("receiver%3Aselector%3Aarguments%3A"), "receiver_selector_arguments_", function Message_class__receiver_selector_arguments_(anObject,aString,anArray){
const self = this; return (function Message_class__($1$){
$1$.receiver_(anObject);
$1$.selector_(aString);
$1$.arguments_(anArray);
return $1$.yourself()}
)(self.$$new());
}
, "instantiation", unescape("receiver%3A%20anObject%20selector%3A%20aString%20arguments%3A%20anArray%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%0D%09%09receiver%3A%20anObject%3B%0D%09%09selector%3A%20aString%3B%0D%09%09arguments%3A%20anArray%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.Message, unescape("selector"), "selector", function Message__selector(){
const self = this; return self['@selector'];
}
, "accessing", unescape("selector%0D%09%22%20Return%20the%20selector%20of%20the%20receiver.%20%22%0D%0D%09%5Eselector"));
smalltalk.bind(smalltalk.Message, unescape("selector%3A"), "selector_", function Message__selector_(aString){
const self = this; self['@selector']=aString;
return self;
}
, "accessing", unescape("selector%3A%20aString%0D%09%22%20Set%20the%20selector%20of%20the%20receiver.%20%22%0D%0D%09selector%20%3A%3D%20aString"));
smalltalk.bind(smalltalk.Message, unescape("arguments%3A"), "arguments_", function Message__arguments_(anArray){
const self = this; self['@arguments']=anArray;
return self;
}
, "accessing", unescape("arguments%3A%20anArray%0D%09%22%20Set%20the%20arguments%20of%20the%20receiver.%20%22%0D%0D%09arguments%20%3A%3D%20anArray"));
smalltalk.bind(smalltalk.Message, unescape("arguments"), "arguments", function Message__arguments(){
const self = this; return self['@arguments'];
}
, "accessing", unescape("arguments%0D%09%22%20Return%20the%20arguments%20of%20the%20receiver.%20%22%0D%0D%09%5Earguments"));
smalltalk.bind(smalltalk.Message, unescape("receiver"), "receiver", function Message__receiver(){
const self = this; return self['@receiver'];
}
, "accessing", unescape("receiver%0D%09%22%20Return%20the%20receiver%20of%20the%20receiver.%20%22%0D%0D%09%5Ereceiver"));
smalltalk.bind(smalltalk.Message, unescape("receiver%3A"), "receiver_", function Message__receiver_(anObject){
const self = this; self['@receiver']=anObject;
return self;
}
, "accessing", unescape("receiver%3A%20anObject%0D%09%22%20Set%20the%20receiver%20of%20the%20receiver.%20%22%0D%0D%09receiver%20%3A%3D%20anObject"));
smalltalk.bind(smalltalk.Message, unescape("comment"), "comment", function Message__comment(){
const self = this; return (function(){var $1$; $1$ = self[unescape("@comment")]; return nil.isNil_($1$) ? nil : $1$})();
}
, "accessing", unescape("comment%0D%09%22%20Return%20the%20comment%20of%20the%20receiver%20%28or%20nil%29.%20%22%0D%0D%09%5Eself%20basicAt%3A%20%27@comment%27"));
smalltalk.bind(smalltalk.Message, unescape("comment%3A"), "comment_", function Message__comment_(aString){
const self = this; if (((nil.isNil_(aString))).valueOf()) {return self.basicDelete_(unescape("@comment"))};
(self[unescape("@comment")]=aString);
return self;
}
, "accessing", unescape("comment%3A%20aString%0D%09%22%20Set%20the%20comment%20of%20the%20receiver.%20%22%0D%0D%09aString%20isNil%20ifTrue%3A%20%5B%20%5Eself%20basicDelete%3A%20%27@comment%27%20%5D.%0D%09self%20basicAt%3A%20%27@comment%27%20put%3A%20aString"));
smalltalk.bind(smalltalk.Message, unescape("receiver%3Aselector%3Aarguments%3A"), "receiver_selector_arguments_", function Message__receiver_selector_arguments_(anObject,aSelector,anArray){
const self = this; self['@receiver']=anObject;
self['@selector']=aSelector;
self['@arguments']=anArray;
return self;
}
, "accessing", unescape("receiver%3A%20anObject%0Dselector%3A%20aSelector%0Darguments%3A%20anArray%0D%09%22Set%20the%20receiver%2C%20selector%2C%20and%20arguments%20in%20self.%22%0D%0D%09receiver%20%3A%3D%20anObject.%0D%09selector%20%3A%3D%20aSelector.%0D%09arguments%20%3A%3D%20anArray"));
smalltalk.bind(smalltalk.Message, unescape("%3D"), "_eq", function Message___eq(aMessage){
const self = this; if (((nil.is_eqeq_(self,aMessage))).valueOf()) {return true};
return ((nil.is_eqeq_(self.$klass,aMessage.$klass))).and_((function Message__(){
return ((self.receiver())._eq((aMessage.receiver()))).and_((function Message__(){
return ((self.selector())._eq((aMessage.selector()))).and_((function Message__(){
return (self.arguments())._eq((aMessage.arguments()));
}
));
}
));
}
));
}
, "comparing", unescape("%3D%20aMessage%0D%0D%09self%20%3D%3D%20aMessage%0D%09%09ifTrue%3A%20%5B%5Etrue%5D.%0D%09%5Eself%20class%20%3D%3D%20aMessage%20class%0D%09%09and%3A%20%5Bself%20receiver%20%3D%20aMessage%20receiver%0D%09%09and%3A%20%5Bself%20selector%20%3D%20aMessage%20selector%0D%09%09and%3A%20%5Bself%20arguments%20%3D%20aMessage%20arguments%5D%5D%5D"));
smalltalk.bind(smalltalk.Message, unescape("perform"), "perform", function Message__perform(){
const self = this; return (self.receiver()).perform_withArguments_((self.selector()),(self.arguments()));
}
, "private", unescape("perform%0D%09%22%20Return%20the%20result%20of%20sending%20the%20receiver.%20%22%0D%0D%09%5Eself%20receiver%0D%09%09perform%3A%20self%20selector%0D%09%09withArguments%3A%20self%20arguments"));
smalltalk.bind(smalltalk.Message, unescape("performDeferred"), "performDeferred", function Message__performDeferred(){
const self = this; (function Message__(){
return self.perform();
}
).valueDeferred();
return self;
}
, "evaluating", unescape("performDeferred%0D%09%22%20Evaluate%20the%20receiver%20deferred%20in%20time.%0D%09Return%20the%20receiver.%0D%09%22%0D%0D%09%5B%20self%20perform%20%5D%20valueDeferred."));
smalltalk.bind(smalltalk.Message, unescape("evaluate"), "evaluate", function Message__evaluate(){
const self = this; return self.perform();
}
, "evaluating", unescape("evaluate%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver.%20%22%0D%0D%09%5Eself%20perform"));
smalltalk.bind(smalltalk.Message, unescape("evaluateFor%3A"), "evaluateFor_", function Message__evaluateFor_(anObject){
const self = this; return self.evaluateWithArguments_((smalltalk.Array.with_(anObject)));
}
, "evaluating", unescape("evaluateFor%3A%20anObject%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver%20with%20anObject.%20%22%0D%0D%09%5Eself%20evaluateWithArguments%3A%20%28Array%20with%3A%20anObject%29"));
smalltalk.bind(smalltalk.Message, unescape("evaluateWithArguments%3A"), "evaluateWithArguments_", function Message__evaluateWithArguments_(anArray){
const self = this; return (self.receiver()).perform_withArguments_((self.selector()),(self.collectArguments_(anArray)));
}
, "evaluating", unescape("evaluateWithArguments%3A%20anArray%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver.%20%22%0D%0D%09%5Eself%20receiver%0D%09%09perform%3A%20self%20selector%0D%09%09withArguments%3A%20%28self%20collectArguments%3A%20anArray%29"));
smalltalk.bind(smalltalk.Message, unescape("initializeArguments"), "initializeArguments", function Message__initializeArguments(){
const self = this; self['@arguments']=smalltalk.Array.new_(((self.selector()).argumentCount()));
return self;
}
, "private", unescape("initializeArguments%0D%09%22%20Private%20-%20Initialize%20the%20arguments%20of%20the%20receiver.%20%22%0D%0D%09arguments%20%3A%3D%20Array%20new%3A%20self%20selector%20argumentCount"));
smalltalk.bind(smalltalk.Message, unescape("argumentCount"), "argumentCount", function Message__argumentCount(){
const self = this; if (((nil.isNil_(self['@arguments']))).valueOf()) {self.initializeArguments()};
return self['@arguments'].size();
}
, "private", unescape("argumentCount%0D%09%22%20Return%20the%20number%20of%20arguments%20required%20to%20evaluate%20the%20receiver.%20%22%0D%0D%09arguments%20isNil%20ifTrue%3A%20%5B%20self%20initializeArguments%20%5D.%0D%09%5Earguments%20size"));
smalltalk.bind(smalltalk.Message, unescape("collectArguments%3A"), "collectArguments_", function Message__collectArguments_(evaluationArguments){
const self = this; if (((self['@arguments'].size())._eq((evaluationArguments.size()))).valueOf()) {return evaluationArguments};
return evaluationArguments.copyFrom_to_((1),((self.argumentCount()).min_((evaluationArguments.size()))));
}
, "private", unescape("collectArguments%3A%20evaluationArguments%0D%09%22%20Private%20-%20Return%20the%20arguments%20to%20evaluate%20the%20receiver.%20%22%0D%0D%09arguments%20size%20%3D%20evaluationArguments%20size%20ifTrue%3A%20%5B%20%5EevaluationArguments%20%5D.%0D%09%5EevaluationArguments%20copyFrom%3A%201%20to%3A%20%28self%20argumentCount%20min%3A%20evaluationArguments%20size%29"));
smalltalk.bind(smalltalk.Message, unescape("printOn%3A"), "printOn_", function Message__printOn_(aStream){
const self = this; (function Message__($1$){
$1$.nextPutAll_(((self.$klass).name()));
$1$.nextPut_(unescape("%28"));
$1$.nextPutAll_((((self.receiver()).$klass).name()));
$1$.nextPutAll_(unescape("%3E%3E"));
$1$.nextPutAll_((self.selector()));
return $1$.nextPut_(unescape("%29"))}
)(aStream);
return self;
}
, "printing", unescape("printOn%3A%20aStream%0D%09%22Print%20the%20receiver%20on%20aStream.%22%0D%0D%09aStream%0D%09%09nextPutAll%3A%20self%20class%20name%3B%0D%09%09nextPut%3A%20%24%28%3B%0D%09%09nextPutAll%3A%20self%20receiver%20class%20name%3B%0D%09%09nextPutAll%3A%20%27%3E%3E%27%3B%0D%09%09nextPutAll%3A%20self%20selector%3B%0D%09%09nextPut%3A%20%24%29"));
smalltalk.bind(smalltalk.Message, unescape("isMessage"), "isMessage", function Message__isMessage(){
const self = this; return true;
}
, "testing", unescape("isMessage%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20message.%20%22%0D%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Object, unescape("isMessage"), "isMessage", function Object__isMessage(){
const self = this; return false;
}
, "testing", unescape("isMessage%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20a%20message.%20%22%0D%0D%09%5Efalse"));
smalltalk.addClass("MessageNotUnderstood", smalltalk.Error, ['message', 'receiver'], 'Kernel');
smalltalk.MessageNotUnderstood.$classVariableNames=("");
smalltalk.bind(smalltalk.MessageNotUnderstood, unescape("message"), "message", function MessageNotUnderstood__message(){
const self = this; return self['@message'];
}
, "accessing", unescape("message%0D%09%22%20Return%20the%20message%20of%20the%20receiver.%20%22%0D%0D%09%5Emessage"));
smalltalk.bind(smalltalk.MessageNotUnderstood, unescape("message%3A"), "message_", function MessageNotUnderstood__message_(aMessage){
const self = this; self['@message']=aMessage;
return self;
}
, "accessing", unescape("message%3A%20aMessage%0D%09%22%20Set%20the%20message%20of%20the%20receiver.%20%22%0D%0D%09message%20%3A%3D%20aMessage"));
smalltalk.bind(smalltalk.MessageNotUnderstood, unescape("receiver"), "receiver", function MessageNotUnderstood__receiver(){
const self = this; return self['@receiver'];
}
, "accessing", unescape("receiver%0D%09%22%20Return%20the%20receiver%20of%20the%20receiver.%20%22%0D%0D%09%5Ereceiver"));
smalltalk.bind(smalltalk.MessageNotUnderstood, unescape("receiver%3A"), "receiver_", function MessageNotUnderstood__receiver_(anObject){
const self = this; self['@receiver']=anObject;
return self;
}
, "accessing", unescape("receiver%3A%20anObject%0D%09%22%20Set%20the%20receiver%20of%20the%20receiver.%20%22%0D%0D%09receiver%20%3A%3D%20anObject"));
smalltalk.bind(smalltalk.MessageNotUnderstood, unescape("messageText"), "messageText", function MessageNotUnderstood__messageText(){
const self = this; return (((self.receiver()).asString())._comma(unescape("%20does%20not%20understand%20%23")))._comma(((self.message()).selector()));
}
, "accessing", unescape("messageText%0D%09%22%20Return%20the%20message%20text%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20receiver%20asString%2C%20%27%20does%20not%20understand%20%23%27%2C%20self%20message%20selector"));
smalltalk.bind(smalltalk.BlockClosure, unescape("ms"), "ms", function BlockClosure__ms(){
const self = this; return smalltalk.DateTime.millisecondsToRun_(self);
}
, "timming", unescape("ms%0D%09%22%20Return%20the%20milliseconds%20taken%20to%20evaluate%20the%20receiver.%20%22%0D%0D%09%5EDateTime%20millisecondsToRun%3A%20self"));
smalltalk.bind(smalltalk.Class.$klass, unescape("categories"), "categories", function Class_class__categories(){
const self = this; return ((smalltalk.Smalltalk.classes()).collect_((function Class_class__(each){
return each.category();
}
))).asSet();
}
, "export", unescape("categories%0D%09%22%20Return%20a%20collection%20with%20all%20defined%20categories.%20%22%0D%0D%09%5E%28Smalltalk%20classes%20collect%3A%20%5B%3Aeach%20%7C%20each%20category%20%5D%29%20asSet"));
smalltalk.bind(smalltalk.Class.$klass, unescape("uncategorized"), "uncategorized", function Class_class__uncategorized(){
const self = this; return (smalltalk.Smalltalk.classes()).select_((function Class_class__(each){
return (each.category())._eq("unclassified");
}
));
}
, "export", unescape("uncategorized%0D%09%22%20Return%20a%20collection%20with%20classes%20without%20category.%20%22%0D%0D%09%5ESmalltalk%20classes%20select%3A%20%5B%3Aeach%20%7C%20each%20category%20%3D%20%23unclassified%20%5D"));
smalltalk.bind(smalltalk.Class, unescape("variableByteSubclass%3AclassVariableNames%3ApoolDictionaries%3A"), "variableByteSubclass_classVariableNames_poolDictionaries_", function Class__variableByteSubclass_classVariableNames_poolDictionaries_(aString,classVarNames,poolVarNames){
const self = this; self.print_(((unescape("//%20WARNING%3A%20")._comma(aString))._comma(" defined as variableByteSubclass:...")));
return self.subclass_instanceVariableNames_classVariableNames_poolDictionaries_(aString,"",classVarNames,poolVarNames);
}
, "instantiation", unescape("variableByteSubclass%3A%20aString%0D%09classVariableNames%3A%20classVarNames%0D%09poolDictionaries%3A%20poolVarNames%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09self%20print%3A%20%27//%20WARNING%3A%20%27%2CaString%2C%27%20defined%20as%20variableByteSubclass%3A...%27.%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20%27%27%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20poolVarNames"));
smalltalk.bind(smalltalk.Class, unescape("variableSubclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3A"), "variableSubclass_instanceVariableNames_classVariableNames_poolDictionaries_", function Class__variableSubclass_instanceVariableNames_classVariableNames_poolDictionaries_(aString,aString2,classVarNames,poolVarNames){
const self = this; self.print_(((unescape("//%20WARNING%3A%20")._comma(aString))._comma(" defined as variableSubclass:...")));
return self.subclass_instanceVariableNames_classVariableNames_poolDictionaries_(aString,aString2,classVarNames,poolVarNames);
}
, "instantiation", unescape("variableSubclass%3A%20aString%0D%09instanceVariableNames%3A%20aString2%0D%09classVariableNames%3A%20classVarNames%0D%09poolDictionaries%3A%20poolVarNames%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09self%20print%3A%20%27//%20WARNING%3A%20%27%2CaString%2C%27%20defined%20as%20variableSubclass%3A...%27.%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20poolVarNames"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3Acategory%3A"), "subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_", function Class__subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(aString,aString2,classVarNames,poolVarNames,aCategory){
const self = this; if (((nil.isNil_((self.smalltalk()).globalAt_(aString))===false)).valueOf()) {self.print_((unescape("//%20WARNING%3A%20class%20REdefinition%20for%20")._comma(aString)))};
return (smalltalk.ClassBuilder.$$new()).superclass_subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(self,aString,aString2,classVarNames,poolVarNames,aCategory);
}
, "instantiation", unescape("subclass%3A%20aString%0D%09instanceVariableNames%3A%20aString2%0D%09classVariableNames%3A%20classVarNames%0D%09poolDictionaries%3A%20poolVarNames%0D%09category%3A%20aCategory%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%28self%20smalltalk%20globalAt%3A%20aString%29%20notNil%20ifTrue%3A%20%5B%0D%09%09self%20print%3A%20%27//%20WARNING%3A%20class%20REdefinition%20for%20%27%2CaString.%0D%09%09%22%5Eself%20smalltalk%20globalAt%3A%20aString%22%0D%09%5D.%0D%0D%09%22self%20print%3A%20%27//%20Creating%20%27%2CaString.%22%0D%09%5EClassBuilder%20new%0D%09%09superclass%3A%20self%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20poolVarNames%0D%09%09category%3A%20aCategory"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3AinstanceVariableNames%3AclassVariableNames%3Acategory%3A"), "subclass_instanceVariableNames_classVariableNames_category_", function Class__subclass_instanceVariableNames_classVariableNames_category_(aString,aString2,classVarNames,aCategory){
const self = this; return self.subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(aString,aString2,classVarNames,"",aCategory);
}
, "instantiation", unescape("subclass%3A%20aString%0D%09instanceVariableNames%3A%20aString2%0D%09classVariableNames%3A%20classVarNames%0D%09category%3A%20aCategory%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20%27%27%0D%09%09category%3A%20aCategory"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3A"), "subclass_instanceVariableNames_classVariableNames_poolDictionaries_", function Class__subclass_instanceVariableNames_classVariableNames_poolDictionaries_(aString,aString2,classVarNames,poolVarNames){
const self = this; return self.subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(aString,aString2,classVarNames,poolVarNames,nil);
}
, "instantiation", unescape("subclass%3A%20aString%0D%09instanceVariableNames%3A%20aString2%0D%09classVariableNames%3A%20classVarNames%0D%09poolDictionaries%3A%20poolVarNames%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20poolVarNames%0D%09%09category%3A%20nil"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3AinstanceVariableNames%3ApoolDictionaries%3Acategory%3A"), "subclass_instanceVariableNames_poolDictionaries_category_", function Class__subclass_instanceVariableNames_poolDictionaries_category_(aString,aString2,poolVarNames,aCategory){
const self = this; return self.subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(aString,aString2,"",poolVarNames,aCategory);
}
, "instantiation", unescape("subclass%3A%20aString%0D%09instanceVariableNames%3A%20aString2%0D%09poolDictionaries%3A%20poolVarNames%0D%09category%3A%20aCategory%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20%27%27%0D%09%09poolDictionaries%3A%20poolVarNames%0D%09%09category%3A%20aCategory"));
smalltalk.bind(smalltalk.Class, unescape("variableByteSubclass%3AclassVariableNames%3A"), "variableByteSubclass_classVariableNames_", function Class__variableByteSubclass_classVariableNames_(aString,classVarNames){
const self = this; return self.variableByteSubclass_classVariableNames_poolDictionaries_(aString,classVarNames,"");
}
, "instantiation", unescape("variableByteSubclass%3A%20aString%20classVariableNames%3A%20classVarNames%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09variableByteSubclass%3A%20aString%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20%27%27"));
smalltalk.bind(smalltalk.Class, unescape("variableByteSubclass%3ApoolDictionaries%3A"), "variableByteSubclass_poolDictionaries_", function Class__variableByteSubclass_poolDictionaries_(aString,aString2){
const self = this; return self.variableByteSubclass_classVariableNames_poolDictionaries_(aString,"",aString2);
}
, "instantiation", unescape("variableByteSubclass%3A%20aString%20poolDictionaries%3A%20aString2%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09variableByteSubclass%3A%20aString%0D%09%09classVariableNames%3A%20%27%27%0D%09%09poolDictionaries%3A%20aString2"));
smalltalk.bind(smalltalk.Class, unescape("variableByteSubclass%3A"), "variableByteSubclass_", function Class__variableByteSubclass_(aString){
const self = this; return self.variableByteSubclass_classVariableNames_(aString,"");
}
, "instantiation", unescape("variableByteSubclass%3A%20aString%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09variableByteSubclass%3A%20aString%0D%09%09classVariableNames%3A%20%27%27"));
smalltalk.bind(smalltalk.Class, unescape("variableSubclass%3AinstanceVariableNames%3AclassVariableNames%3A"), "variableSubclass_instanceVariableNames_classVariableNames_", function Class__variableSubclass_instanceVariableNames_classVariableNames_(aString,aString2,classVarNames){
const self = this; return self.variableSubclass_instanceVariableNames_classVariableNames_poolDictionaries_(aString,aString2,classVarNames,"");
}
, "instantiation", unescape("variableSubclass%3A%20aString%0D%09instanceVariableNames%3A%20aString2%0D%09classVariableNames%3A%20classVarNames%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09variableSubclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20%27%27"));
smalltalk.bind(smalltalk.Class, unescape("variableSubclass%3AinstanceVariableNames%3A"), "variableSubclass_instanceVariableNames_", function Class__variableSubclass_instanceVariableNames_(aString,aString2){
const self = this; return self.variableSubclass_instanceVariableNames_classVariableNames_(aString,aString2,"");
}
, "instantiation", unescape("variableSubclass%3A%20aString%20instanceVariableNames%3A%20aString2%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09variableSubclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20%27%27"));
smalltalk.bind(smalltalk.Class, unescape("variableSubclass%3AclassVariableNames%3A"), "variableSubclass_classVariableNames_", function Class__variableSubclass_classVariableNames_(aString,aString2){
const self = this; return self.variableSubclass_instanceVariableNames_classVariableNames_(aString,"",aString2);
}
, "instantiation", unescape("variableSubclass%3A%20aString%20classVariableNames%3A%20aString2%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09variableSubclass%3A%20aString%0D%09%09instanceVariableNames%3A%20%27%27%0D%09%09classVariableNames%3A%20aString2"));
smalltalk.bind(smalltalk.Class, unescape("variableSubclass%3ApoolDictionaries%3A"), "variableSubclass_poolDictionaries_", function Class__variableSubclass_poolDictionaries_(aString,aString2){
const self = this; return self.variableSubclass_instanceVariableNames_classVariableNames_poolDictionaries_(aString,"","",aString2);
}
, "instantiation", unescape("variableSubclass%3A%20aString%20poolDictionaries%3A%20aString2%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09variableSubclass%3A%20aString%0D%09%09instanceVariableNames%3A%20%27%27%0D%09%09classVariableNames%3A%20%27%27%0D%09%09poolDictionaries%3A%20aString2"));
smalltalk.bind(smalltalk.Class, unescape("variableSubclass%3A"), "variableSubclass_", function Class__variableSubclass_(aString){
const self = this; return self.variableSubclass_instanceVariableNames_(aString,"");
}
, "instantiation", unescape("variableSubclass%3A%20aString%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09variableSubclass%3A%20aString%0D%09%09instanceVariableNames%3A%20%27%27"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3AinstanceVariableNames%3AclassVariableNames%3A"), "subclass_instanceVariableNames_classVariableNames_", function Class__subclass_instanceVariableNames_classVariableNames_(aString,aString2,classVarNames){
const self = this; return self.subclass_instanceVariableNames_classVariableNames_poolDictionaries_(aString,aString2,classVarNames,"");
}
, "instantiation", unescape("subclass%3A%20aString%0D%09instanceVariableNames%3A%20aString2%0D%09classVariableNames%3A%20classVarNames%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20%27%27"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3AinstanceVariableNames%3ApoolDictionaries%3A"), "subclass_instanceVariableNames_poolDictionaries_", function Class__subclass_instanceVariableNames_poolDictionaries_(aString,aString2,aString3){
const self = this; return self.subclass_instanceVariableNames_classVariableNames_poolDictionaries_(aString,aString2,"",aString3);
}
, "instantiation", unescape("subclass%3A%20aString%0D%09instanceVariableNames%3A%20aString2%0D%09poolDictionaries%3A%20aString3%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20%27%27%0D%09%09poolDictionaries%3A%20aString3"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3AinstanceVariableNames%3A"), "subclass_instanceVariableNames_", function Class__subclass_instanceVariableNames_(aString,aString2){
const self = this; return self.subclass_instanceVariableNames_classVariableNames_(aString,aString2,"");
}
, "instantiation", unescape("subclass%3A%20aString%20instanceVariableNames%3A%20aString2%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20%27%27"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3AclassVariableNames%3A"), "subclass_classVariableNames_", function Class__subclass_classVariableNames_(aString,aString2){
const self = this; return self.subclass_instanceVariableNames_classVariableNames_poolDictionaries_(aString,"",aString2,"");
}
, "instantiation", unescape("subclass%3A%20aString%20classVariableNames%3A%20aString2%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20%27%27%0D%09%09classVariableNames%3A%20aString2%0D%09%09poolDictionaries%3A%20%27%27"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3ApoolDictionaries%3A"), "subclass_poolDictionaries_", function Class__subclass_poolDictionaries_(aString,aString2){
const self = this; return self.subclass_instanceVariableNames_classVariableNames_poolDictionaries_(aString,"","",aString2);
}
, "instantiation", unescape("subclass%3A%20aString%20poolDictionaries%3A%20aString2%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20%27%27%0D%09%09classVariableNames%3A%20%27%27%0D%09%09poolDictionaries%3A%20aString2"));
smalltalk.bind(smalltalk.Class, unescape("subclass%3A"), "subclass_", function Class__subclass_(aString){
const self = this; return self.subclass_instanceVariableNames_(aString,"");
}
, "instantiation", unescape("subclass%3A%20aString%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20%27%27"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("category%3A"), "category_", function UndefinedObject__category_(ignored){
const self = this; self;
return self;
}
, "instantiation", unescape("category%3A%20ignored%0D%09%22%20BUG%20-%20throw%20an%20error%20in%20ClassBuilder.%20%22%20"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("subclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3Acategory%3A"), "subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_", function UndefinedObject__subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(aString,aString2,classVarNames,poolVarNames,aCategory){
const self = this; if (((nil.isNil_((self.smalltalk()).globalAt_(aString))===false)).valueOf()) {self.print_((unescape("//%20WARNING%3A%20class%20REdefinition%20for%20")._comma(aString)))};
return (smalltalk.ClassBuilder.$$new()).superclass_subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(self,aString,aString2,classVarNames,poolVarNames,aCategory);
}
, "instantiation", unescape("subclass%3A%20aString%0D%09instanceVariableNames%3A%20aString2%0D%09classVariableNames%3A%20classVarNames%0D%09poolDictionaries%3A%20poolVarNames%0D%09category%3A%20aCategory%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%28self%20smalltalk%20globalAt%3A%20aString%29%20notNil%20ifTrue%3A%20%5B%0D%09%09self%20print%3A%20%27//%20WARNING%3A%20class%20REdefinition%20for%20%27%2CaString.%0D%09%09%22%5Eself%20smalltalk%20globalAt%3A%20aString%22%0D%09%5D.%0D%0D%09%22self%20print%3A%20%27//%20Creating%20ROOT%20class%20%27%2CaString.%22%0D%09%5EClassBuilder%20new%0D%09%09superclass%3A%20self%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20poolVarNames%0D%09%09category%3A%20aCategory"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("subclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3A"), "subclass_instanceVariableNames_classVariableNames_poolDictionaries_", function UndefinedObject__subclass_instanceVariableNames_classVariableNames_poolDictionaries_(aString,aString2,classVarNames,poolVarNames){
const self = this; return self.subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(aString,aString2,classVarNames,poolVarNames,nil);
}
, "instantiation", unescape("subclass%3A%20aString%0D%09instanceVariableNames%3A%20aString2%0D%09classVariableNames%3A%20classVarNames%0D%09poolDictionaries%3A%20poolVarNames%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20poolVarNames%0D%09%09category%3A%20nil"));
smalltalk.bind(smalltalk.Object, unescape("argumentCount"), "argumentCount", function Object__argumentCount(){
const self = this; return (0);
}
, "evaluating", unescape("argumentCount%0D%09%22%20Return%20the%20number%20of%20arguments%20required%20to%20evaluate%20the%20receiver.%20%22%0D%0D%09%5E0"));
smalltalk.bind(smalltalk.Object, unescape("numberOfArguments"), "numberOfArguments", function Object__numberOfArguments(){
const self = this; return self.argumentCount();
}
, "evaluating", unescape("numberOfArguments%0D%09%22%20Return%20the%20number%20of%20arguments%20required%20to%20evaluate%20the%20receiver.%20%22%0D%0D%09%5Eself%20argumentCount"));
smalltalk.bind(smalltalk.Object, unescape("evaluate"), "evaluate", function Object__evaluate(){
const self = this; return self;
}
, "evaluating", unescape("evaluate%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Object, unescape("evaluateDeferred"), "evaluateDeferred", function Object__evaluateDeferred(){
const self = this; (function Object__(){
return self.evaluate();
}
).valueDeferred();
return self;
}
, "evaluating", unescape("evaluateDeferred%0D%09%22%20Evaluating%20the%20receiver%20deferred%20in%20time.%0D%09Return%20the%20receiver.%20%22%0D%0D%09%5B%20self%20evaluate%20%5D%20valueDeferred."));
smalltalk.bind(smalltalk.Object, unescape("evaluateWithArguments%3A"), "evaluateWithArguments_", function Object__evaluateWithArguments_(anArray){
const self = this; return self;
}
, "evaluating", unescape("evaluateWithArguments%3A%20anArray%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver.%20%22%0D%0D%09%5Eself"));
smalltalk.bind(smalltalk.Object, unescape("evaluateWith%3A"), "evaluateWith_", function Object__evaluateWith_(anObject){
const self = this; return self.evaluateWithArguments_((smalltalk.Array.with_(anObject)));
}
, "evaluating", unescape("evaluateWith%3A%20anObject%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver.%20%22%0D%0D%09%5Eself%20evaluateWithArguments%3A%20%28Array%20with%3A%20anObject%29"));
smalltalk.bind(smalltalk.Object, unescape("logEvaluate%3A"), "logEvaluate_", function Object__logEvaluate_(source){
const self = this; return self.evaluate();
}
, "evaluating", unescape("logEvaluate%3A%20source%0D%09%22%20Return%20the%20result%20of%20valuating%20the%20receiver.%0D%09This%20method%20should%20be%20refined/replaced%20to%20log%20the%20source%20expression%20as%20reference%20of%20evaluation.%0D%09%22%0D%0D%09%5Eself%20evaluate"));
smalltalk.bind(smalltalk.String, unescape("evaluateFor%3A"), "evaluateFor_", function String__evaluateFor_(anObject){
const self = this; return anObject.perform_(self);
}
, "evaluating", unescape("evaluateFor%3A%20anObject%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver%20with%20anObject.%20%22%0D%0D%09%5EanObject%20perform%3A%20self"));
smalltalk.bind(smalltalk.BlockClosure, unescape("evaluateFor%3A"), "evaluateFor_", function BlockClosure__evaluateFor_(anObject){
const self = this; return self.value_(anObject);
}
, "evaluating", unescape("evaluateFor%3A%20anObject%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver%20with%20anObject.%20%22%0D%0D%09%5Eself%20value%3A%20anObject%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("evaluate"), "evaluate", function BlockClosure__evaluate(){
const self = this; return self.value();
}
, "evaluating", unescape("evaluate%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver.%20%22%0D%0D%09%5Eself%20value%20"));
smalltalk.bind(smalltalk.BlockClosure, unescape("evaluateWithArguments%3A"), "evaluateWithArguments_", function BlockClosure__evaluateWithArguments_(anArray){
const self = this; return self.valueWithArguments_(anArray);
}
, "evaluating", unescape("evaluateWithArguments%3A%20anArray%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver.%20%22%0D%0D%09%5Eself%20valueWithArguments%3A%20anArray"));
smalltalk.bind(smalltalk.Object, unescape("printingWith%3Ado%3A"), "printingWith_do_", function Object__printingWith_do_(printBlock,aBlock){
var backup = nil;
var result = nil;
const self = this; backup=(function(){var $1$; $1$ = smalltalk.Smalltalk.global()["print"]; return nil.isNil_($1$) ? nil : $1$})();
(function Object__(){
printBlock.installAs_("print");
return result=aBlock.value();
}
).ensure_((function Object__(){
return backup.installAs_("print");
}
));
return result;
}
, "printing", unescape("printingWith%3A%20printBlock%20do%3A%20aBlock%0D%09%22%20Return%20the%20result%20of%20evaluating%20aBlock%2C%20redirecting%20output%20to%20printBlock.%20%22%0D%0D%09%7C%20backup%20result%20%7C%0D%09backup%20%3A%3D%20Smalltalk%20global%20basicAt%3A%20%23print.%0D%09%5B%09printBlock%20installAs%3A%20%23print.%0D%09%09result%20%3A%3D%20aBlock%20value.%0D%09%5D%20ensure%3A%20%5B%20backup%20installAs%3A%20%23print%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Behavior, unescape("basicAddCompiledMethod%3A"), "basicAddCompiledMethod_", function Behavior__basicAddCompiledMethod_(aMethod){
const self = this; (self.smalltalk()).addMethod_method_to_(((aMethod.selector()).asSelector()),aMethod,self);
return self;
}
, "private", unescape("basicAddCompiledMethod%3A%20aMethod%0D%09%22%20Private%20-%20Register%20aMethod%20onto%20the%20receiver.%20%22%0D%0D%09self%20smalltalk%20addMethod%3A%20aMethod%20selector%20asSelector%20method%3A%20aMethod%20to%3A%20self"));
smalltalk.bind(smalltalk.Behavior, unescape("addCompiledMethod%3A"), "addCompiledMethod_", function Behavior__addCompiledMethod_(aMethod){
var isDoIt = nil;
const self = this; isDoIt=(aMethod.selector())._eq((smalltalk.String.doItSelector()));
if ((((nil.isNil_(smalltalk.Exporter)===false)).and_((function Behavior__(){
return isDoIt.not();
}
))).valueOf()) {self.print_(((smalltalk.Exporter.$$new()).export_method_(self,aMethod)))};
return self.basicAddCompiledMethod_(aMethod);
}
, "methods", unescape("addCompiledMethod%3A%20aMethod%0D%09%22%20Add%20the%20compiled%20method%2C%20if%20appropiate%2C%20and%20register%20the%20method%20in%20recent%20methods.%20%22%0D%0D%09%7C%20isDoIt%20%7C%0D%09isDoIt%20%3A%3D%20aMethod%20selector%20%3D%20String%20doItSelector.%0D%22%09%28OverwriteMethods%20ifNil%3A%20%5Btrue%5D%29%20ifFalse%3A%20%5B%0D%09%09%28self%20implements%3A%20aMethod%20selector%29%20ifTrue%3A%20%5B%0D%09%09%09isDoIt%20ifFalse%3A%20%5B%0D%09%09%09%09%28DumpOverwritenMethods%20notNil%0D%09%09%09%09and%3A%20%5B%20DumpOverwritenMethods%0D%09%09%09%09and%3A%20%5B%20Exporter%20notNil%20%5D%5D%29%20ifTrue%3A%20%5B%0D%09%09%09%09%09self%20print%3A%20%27//%3F%20%27%2Cself%20name%2C%27%3E%3E%23%27%2CaMethod%20selector.%0D%09%09%09%09%09self%20print%3A%20%28Exporter%20new%20export%3A%20self%20method%3A%20aMethod%29.%0D%09%09%09%09%5D%20ifFalse%3A%20%5B%0D%09%09%09%09%09self%20print%3A%20%27//-Overwrite%20Conflict-%20%27%2Cself%20name%2C%27%3E%3E%23%27%2CaMethod%20selector.%0D%09%09%09%09%5D.%0D%09%09%09%09%5Eself%0D%09%09%09%5D.%0D%09%09%5D.%0D%09%5D.%0D%22%0D%09%28Exporter%20notNil%20and%3A%20%5B%20isDoIt%20not%20%5D%29%20ifTrue%3A%20%5B%0D%22%20DEBUG%20-%09self%20print%3A%20%27//%20%27%2Cself%20name%2C%27%3E%3E%23%27%2CaMethod%20selector.%22%0D%09%09self%20print%3A%20%28Exporter%20new%20export%3A%20self%20method%3A%20aMethod%29.%0D%09%5D.%0D%09%5Eself%20basicAddCompiledMethod%3A%20aMethod"));
smalltalk.bind(smalltalk.Stream, unescape("peekForAll%3A"), "peekForAll_", function Stream__peekForAll_(aCollection){
var back = nil;
const self = this; var $early={name:"stReturn"};
try {
back=self.position();
aCollection.do_((function Stream__(each){
if ((self.peekFor_(each)).not()) {self.position_(back);
$early.result=false; throw ($early)} else {return nil};
}
));
return true;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "reading", unescape("peekForAll%3A%20aCollection%0D%09%22%20Return%20true%20if%20the%20next%20readable%20elements%20from%20the%20receiver%20matches%20aCollection.%0D%09Advance%20the%20receiver%20if%20the%20result%20is%20true.%0D%09%22%0D%0D%09%7C%20back%20%7C%0D%09back%20%3A%3D%20self%20position.%0D%09aCollection%20do%3A%20%5B%3Aeach%7C%0D%09%09%28self%20peekFor%3A%20each%29%20ifFalse%3A%20%5B%0D%09%09%09self%20position%3A%20back.%0D%09%09%09%5Efalse%0D%09%09%5D.%0D%09%5D.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StringStream, unescape("peekForAll%3A"), "peekForAll_", function StringStream__peekForAll_(aCollection){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKStream.primStringPeekForAll(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return smalltalk.superImplementor(smalltalk.StringStream,'peekForAll_').apply(self, [aCollection]);
}
, "reading", unescape("peekForAll%3A%20aCollection%0D%09%22Return%20true%20if%20the%20next%20readable%20elements%20from%20the%20receiver%20matches%20aCollection.%0D%09Advance%20the%20receiver%20if%20the%20result%20is%20true.%22%0D%0D%09%3Cprimitive%3A%20%27primStringPeekForAll%27%20module%3A%20%27SKStream%27%3E%0D%09%5Esuper%20peekForAll%3A%20aCollection"));
smalltalk.bind(smalltalk.KeyedCollection.$klass, unescape("basicNew%3A"), "basicNew_", function KeyedCollection_class__basicNew_(size){
const self = this; return self.$$new();
}
, "instantiation", unescape("basicNew%3A%20size%0D%09%22%20Return%20an%20instance%20of%20the%20receiver%20of%20specified%20size.%20%22%0D%0D%09%5Eself%20new"));
smalltalk.bind(smalltalk.KeyedCollection.$klass, unescape("@"), "_at", function KeyedCollection_class___at(jsObject){
var result = nil;
const self = this; result=self.$$new();
(jsObject.jsPropertyNames()).do_((function KeyedCollection_class__(key){
return result.at_put_(key,((function(){var $1$; $1$ = jsObject[key]; return nil.isNil_($1$) ? nil : $1$})()));
}
));
return result;
}
, "instantiation", unescape("@%20jsObject%0D%09%22%20Return%20an%20instance%20of%20the%20receiver%20with%20the%20properties%20owned%20by%20jsObject.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20new.%0D%09jsObject%20jsPropertyNames%20do%3A%20%5B%3Akey%7C%0D%09%09result%20at%3A%20key%20put%3A%20%28jsObject%20basicAt%3A%20key%29%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.KeyedCollection.$klass, unescape("fromTuples%3A"), "fromTuples_", function KeyedCollection_class__fromTuples_(tuples){
const self = this; return tuples.inject_into_((self.$$new()),(function KeyedCollection_class__(result,tuple){
result.at_put_((tuple.first()),(tuple.last()));
return result;
}
));
}
, "instantiation", unescape("fromTuples%3A%20tuples%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Etuples%20inject%3A%20self%20new%20into%3A%20%5B%3Aresult%20%3Atuple%7C%0D%09%09result%20at%3A%20tuple%20first%20put%3A%20tuple%20last.%0D%09%09result%0D%09%5D"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("%2C"), "_comma", function KeyedCollection___comma(aCollection){
const self = this; return self.shouldNotImplement_(unescape("%2C"));
}
, "copying", unescape("%2C%20aCollection%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20with%20aCollection%20appended.%20%22%0D%0D%09%5Eself%20shouldNotImplement%3A%20%23%2C"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("%3D"), "_eq", function KeyedCollection___eq(anObject){
const self = this; var $early={name:"stReturn"};
try {
if (((self.$klass)._eq((anObject.$klass))).not()) {return false};
if (((self.size())._eq((anObject.size()))).not()) {return false};
self.keysAndValuesDo_((function KeyedCollection__(key,value){
if (((anObject.at_ifAbsent_(key,(function KeyedCollection__(){
$early.result=false; throw ($early);
}
)))._eq(value)).not()) {$early.result=false; throw ($early)} else {return nil};
}
));
return true;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "comparing", unescape("%3D%20anObject%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20equal%20to%20anObject.%20%22%0D%0D%09self%20class%20%3D%20anObject%20class%20ifFalse%3A%20%5B%5Efalse%5D.%0D%09self%20size%20%3D%20anObject%20size%20ifFalse%3A%20%5B%5Efalse%5D.%0D%09self%20keysAndValuesDo%3A%20%5B%3Akey%20%3Avalue%20%7C%0D%09%09%28anObject%20at%3A%20key%20ifAbsent%3A%20%5B%5Efalse%5D%29%0D%09%09%09%3D%20value%20ifFalse%3A%20%5B%5Efalse%5D%0D%09%5D.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("add%3A"), "add_", function KeyedCollection__add_(anAssociation){
const self = this; self.at_put_((anAssociation.key()),(anAssociation.value()));
return anAssociation;
}
, "adding", unescape("add%3A%20anAssociation%0D%09%22%20Bind%20anAssociation%20to%20the%20receiver.%20%22%0D%0D%09self%20at%3A%20anAssociation%20key%20put%3A%20anAssociation%20value.%0D%09%5EanAssociation"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("addAll%3A"), "addAll_", function KeyedCollection__addAll_(aKeyedCollection){
const self = this; smalltalk.superImplementor(smalltalk.KeyedCollection,'addAll_').apply(self, [aKeyedCollection.associations()]);
return aKeyedCollection;
}
, "adding", unescape("addAll%3A%20aKeyedCollection%0D%09%22%20Bind%20all%20associations%20in%20aKeyedCollection%20to%20the%20receiver.%20%22%0D%0D%09super%20addAll%3A%20aKeyedCollection%20associations.%0D%09%5EaKeyedCollection"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("asJSONObject"), "asJSONObject", function KeyedCollection__asJSONObject(){
var result = nil;
var value = nil;
const self = this; result=(self.smalltalk()).emptyJSONObject();
self.keysAndValuesDo_((function KeyedCollection__(key,aValue){
value=(self.isObject_(aValue)).ifTrue_ifFalse_((function KeyedCollection__(){
return aValue.asJSONObject();
}
),(function KeyedCollection__(){
return aValue;
}
));
return (result[key]=value);
}
));
return result;
}
, "converting", unescape("asJSONObject%0D%09%22%20Return%20the%20mapping%20of%20the%20receiver%20to%20JSON%20structure.%20%22%0D%0D%09%7C%20result%20value%20%7C%0D%09result%20%3A%3D%20self%20smalltalk%20emptyJSONObject.%0D%09self%20keysAndValuesDo%3A%20%5B%3Akey%20%3AaValue%20%7C%0D%09%09value%20%3A%3D%20%28self%20isObject%3A%20aValue%29%0D%09%09%09ifTrue%3A%20%5B%20aValue%20asJSONObject%20%5D%0D%09%09%09ifFalse%3A%20%5B%20aValue%20%5D.%0D%09%09result%20basicAt%3A%20key%20put%3A%20value%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("associations"), "associations", function KeyedCollection__associations(){
var result = nil;
const self = this; result=smalltalk.Array.$$new();
self.associationsDo_((function KeyedCollection__(each){
return result.add_(each);
}
));
return result;
}
, "accessing", unescape("associations%0D%09%22%20Return%20the%20associations%20of%20the%20receiver.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20Array%20new.%0D%09self%20associationsDo%3A%20%5B%3Aeach%7C%20result%20add%3A%20each%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("associationsDo%3A"), "associationsDo_", function KeyedCollection__associationsDo_(aBlock){
const self = this; self.keysAndValuesDo_((function KeyedCollection__(key,value){
return aBlock.value_((smalltalk.Association.key_value_(key,value)));
}
));
return self;
}
, "enumerating", unescape("associationsDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20for%20all%20the%20receiver%27s%20associations.%20%22%0D%0D%09self%20keysAndValuesDo%3A%20%5B%3Akey%20%3Avalue%7C%0D%09%09aBlock%20value%3A%20%28Association%20key%3A%20key%20value%3A%20value%29%0D%09%5D."));
smalltalk.bind(smalltalk.KeyedCollection, unescape("at%3A"), "at_", function KeyedCollection__at_(aKey){
const self = this; return self.at_ifAbsent_(aKey,(function KeyedCollection__(){
return self.objectNotFoundAt_(aKey);
}
));
}
, "accessing", unescape("at%3A%20aKey%0D%09%22%20Return%20the%20value%20at%20aKey.%0D%09Signal%20an%20error%20if%20the%20key%20is%20not%20present.%0D%09%22%0D%0D%09%5Eself%20at%3A%20aKey%20ifAbsent%3A%20%5B%20self%20objectNotFoundAt%3A%20aKey%20%5D"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("at%3AifAbsent%3A"), "at_ifAbsent_", function KeyedCollection__at_ifAbsent_(aKey,aBlock){
const self = this; return self.implementedBySubclass_("at:ifAbsent:");
}
, "accessing", unescape("at%3A%20aKey%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20value%20at%20aKey%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%5Eself%20implementedBySubclass%3A%20%23at%3AifAbsent%3A"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("values"), "values", function KeyedCollection__values(){
const self = this; return self.implementedBySubclass_("values");
}
, "accessing", unescape("values%0D%09%22%20Return%20the%20values%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20implementedBySubclass%3A%20%23values"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("at%3AifAbsentPut%3A"), "at_ifAbsentPut_", function KeyedCollection__at_ifAbsentPut_(aKey,aBlock){
const self = this; return self.at_ifAbsent_(aKey,(function KeyedCollection__(){
return self.at_put_(aKey,(aBlock.value()));
}
));
}
, "accessing", unescape("at%3A%20aKey%20ifAbsentPut%3A%20aBlock%0D%09%22%20Return%20the%20value%20at%20aKey%2C%20or%20add%20the%20result%20of%20evaluating%20aBlock%20to%20the%20receiver%20if%20it%20is%20absent.%20%22%0D%0D%09%5Eself%20at%3A%20aKey%20ifAbsent%3A%20%5B%20self%20at%3A%20aKey%20put%3A%20aBlock%20value%20%5D"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("at%3Aput%3A"), "at_put_", function KeyedCollection__at_put_(aKey,aValue){
const self = this; return self.implementedBySubclass_("at:put:");
}
, "accessing", unescape("at%3A%20aKey%20put%3A%20aValue%0D%09%22%20Set%20the%20value%20at%20aKey%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20implementedBySubclass%3A%20%23at%3Aput%3A"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("detect%3AifNone%3A"), "detect_ifNone_", function KeyedCollection__detect_ifNone_(aBlock,anotherBlock){
const self = this; return self.implementedBySubclass_("detect:ifNone:");
}
, "enumerating", unescape("detect%3A%20aBlock%20ifNone%3A%20anotherBlock%0D%09%22%20Detect%20the%20value%20who%20matches%20aBlock.%0D%09Return%20the%20result%20of%20evaluating%20aBlock%20if%20no%20value%20matches%20detection%20block.%0D%09%22%0D%0D%09%5Eself%20implementedBySubclass%3A%20%23detect%3AifNone%3A"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("do%3A"), "do_", function KeyedCollection__do_(aBlock){
const self = this; return self.implementedBySubclass_("do:");
}
, "enumerating", unescape("do%3A%20aBlock%0D%09%22%20Evaluates%20aBlock%20for%20all%20values%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20implementedBySubclass%3A%20%23do%3A"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("includes%3A"), "includes_", function KeyedCollection__includes_(anObject){
const self = this; return self.implementedBySubclass_("includes:");
}
, "testing", unescape("includes%3A%20anObject%0D%09%22%20Return%20true%20if%20the%20receiver%27s%20values%20include%20anObject.%20%22%0D%0D%09%5Eself%20implementedBySubclass%3A%20%23includes%3A"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("keyForValue%3AifAbsent%3A"), "keyForValue_ifAbsent_", function KeyedCollection__keyForValue_ifAbsent_(anObject,aBlock){
const self = this; var $early={name:"stReturn"};
try {
self.keysAndvaluesDo_((function KeyedCollection__(key,value){
if ((anObject._eq(value)).valueOf()) {$early.result=key; throw ($early)} else {return nil};
}
));
return aBlock.value();
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "accessing", unescape("keyForValue%3A%20anObject%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20key%20in%20the%20receiver%20for%20value%20anObject%2C%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09self%20keysAndvaluesDo%3A%20%5B%3Akey%20%3Avalue%7C%20anObject%20%3D%20value%20ifTrue%3A%20%5B%20%5Ekey%20%5D%20%5D.%0D%09%5EaBlock%20value"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("keys"), "keys", function KeyedCollection__keys(){
const self = this; return self.implementedBySubclass_("keys");
}
, "accessing", unescape("keys%0D%09%22%20Return%20the%20keys%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20implementedBySubclass%3A%20%23keys"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("keysAndValuesDo%3A"), "keysAndValuesDo_", function KeyedCollection__keysAndValuesDo_(aBlock){
const self = this; return self.implementedBySubclass_("keysAndValuesDo:");
}
, "enumerating", unescape("keysAndValuesDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20for%20key/value%20pairs%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20implementedBySubclass%3A%20%23keysAndValuesDo%3A"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("keysDo%3A"), "keysDo_", function KeyedCollection__keysDo_(aBlock){
const self = this; return self.implementedBySubclass_("keysDo:");
}
, "enumerating", unescape("keysDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20keys%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20implementedBySubclass%3A%20%23keysDo%3A"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("includesKey%3A"), "includesKey_", function KeyedCollection__includesKey_(aKey){
const self = this; return self.implementedBySubclass_("includesKey:");
}
, "testing", unescape("includesKey%3A%20aKey%0D%09%22%20Return%20true%20if%20the%20receiver%27s%20keys%20include%20aKey.%20%22%0D%0D%09%5Eself%20implementedBySubclass%3A%20%23includesKey%3A"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("removeKey%3AifAbsent%3A"), "removeKey_ifAbsent_", function KeyedCollection__removeKey_ifAbsent_(aKey,aBlock){
const self = this; return self.implementedBySubclass_("removeKey:ifAbsent:");
}
, "removing", unescape("removeKey%3A%20aKey%20ifAbsent%3A%20aBlock%0D%09%22%20Remove%20the%20binding%20at%20aKey.%20%22%0D%0D%09%5Eself%20implementedBySubclass%3A%20%23removeKey%3AifAbsent%3A"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("isEmpty"), "isEmpty", function KeyedCollection__isEmpty(){
const self = this; return (self.size())._eq((0));
}
, "testing", unescape("isEmpty%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20empty.%20%22%0D%0D%09%5Eself%20size%20%3D%200"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("at%3AifPresent%3A"), "at_ifPresent_", function KeyedCollection__at_ifPresent_(aKey,aBlock){
var aValue = nil;
const self = this; var $early={name:"stReturn"};
try {
aValue=self.at_ifAbsent_(aKey,(function KeyedCollection__(){
$early.result=nil; throw ($early);
}
));
return aBlock.value_(aValue);
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "accessing", unescape("at%3A%20aKey%20ifPresent%3A%20aBlock%0D%09%22%20Return%20the%20result%20of%20evaluating%20aBlock%20if%20there%20is%20a%20value%20at%20aKey%20%28or%20nil%29.%20%22%0D%0D%09%7C%20aValue%20%7C%0D%09aValue%20%3A%3D%20self%20at%3A%20aKey%20ifAbsent%3A%20%5B%20%5Enil%20%5D.%0D%09%5EaBlock%20value%3A%20aValue"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("at%3AifPresent%3AifAbsent%3A"), "at_ifPresent_ifAbsent_", function KeyedCollection__at_ifPresent_ifAbsent_(aKey,aBlock,anotherBlock){
var aValue = nil;
const self = this; var $early={name:"stReturn"};
try {
aValue=self.at_ifAbsent_(aKey,(function KeyedCollection__(){
$early.result=anotherBlock.value(); throw ($early);
}
));
return aBlock.value_(aValue);
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "accessing", unescape("at%3A%20aKey%20ifPresent%3A%20aBlock%20ifAbsent%3A%20anotherBlock%0D%09%22%20Return%20the%20result%20of%20evaluating%20aBlock%20if%20there%20is%20a%20value%20at%20aKey%20%28or%20the%20result%20of%20evaluating%20anotherBlock%29.%20%22%0D%0D%09%7C%20aValue%20%7C%0D%09aValue%20%3A%3D%20self%20at%3A%20aKey%20ifAbsent%3A%20%5B%20%5EanotherBlock%20value%20%5D.%0D%09%5EaBlock%20value%3A%20aValue"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("collect%3A"), "collect_", function KeyedCollection__collect_(aBlock){
var result = nil;
const self = this; result=(self.$klass).$$new();
self.keysAndValuesDo_((function KeyedCollection__(key,value){
return result.at_put_(key,(aBlock.value_(value)));
}
));
return result;
}
, "enumerating", unescape("collect%3A%20aBlock%0D%09%22%20Return%20aKeyedCollection%20with%20keys%20and%20result%20of%20evaluating%20aBlock%20with%20value.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20class%20new.%0D%09self%20keysAndValuesDo%3A%20%5B%3Akey%20%3Avalue%20%7C%0D%09%09result%20at%3A%20key%20put%3A%20%28aBlock%20value%3A%20value%29%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("select%3A"), "select_", function KeyedCollection__select_(aBlock){
var result = nil;
const self = this; result=(self.$klass).$$new();
self.keysAndValuesDo_((function KeyedCollection__(key,value){
if ((aBlock.value_(value)).valueOf()) {return result.at_put_(key,value)} else {return nil};
}
));
return result;
}
, "enumerating", unescape("select%3A%20aBlock%0D%09%22%20Return%20the%20contents%20of%20the%20receiver%20wich%20evaluates%20aBlock%20to%20true.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20class%20new.%0D%09self%20keysAndValuesDo%3A%20%5B%3Akey%20%3Avalue%20%7C%0D%09%09%28aBlock%20value%3A%20value%29%20ifTrue%3A%20%5B%20result%20at%3A%20key%20put%3A%20value%20%5D%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("shallowCopy"), "shallowCopy", function KeyedCollection__shallowCopy(){
var result = nil;
const self = this; result=(self.$klass).$$new();
self.keysAndValuesDo_((function KeyedCollection__(key,value){
return result.at_put_(key,value);
}
));
return result;
}
, "copying", unescape("shallowCopy%0D%09%22%20Return%20a%20shallow%20copy%20of%20the%20receiver.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20class%20new.%0D%09self%20keysAndValuesDo%3A%20%5B%3Akey%20%3Avalue%20%7C%20result%20at%3A%20key%20put%3A%20value%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("tuples"), "tuples", function KeyedCollection__tuples(){
var result = nil;
const self = this; result=smalltalk.Array.$$new();
self.keysAndValuesDo_((function KeyedCollection__(key,value){
return result.add_((smalltalk.Array.with_with_(key,value)));
}
));
return result;
}
, "accessing", unescape("tuples%0D%09%22%20Return%20an%20array%20of%20tuples%20built%20from%20the%20receiver%27s%20contents.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20Array%20new.%0D%09self%20keysAndValuesDo%3A%20%5B%3Akey%20%3Avalue%7C%0D%09%09result%20add%3A%20%28Array%20with%3A%20key%20with%3A%20value%29%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("copyFrom%3Ato%3A"), "copyFrom_to_", function KeyedCollection__copyFrom_to_(anIndex,anotherIndex){
const self = this; return self.shouldNotImplement_("copyFrom:to:");
}
, "copying", unescape("copyFrom%3A%20anIndex%20to%3A%20anotherIndex%0D%09%22%20Return%20a%20copy%20of%20the%20receiver%20from%20anIndex%20to%20anotherIndex.%20%22%0D%0D%09%5Eself%20shouldNotImplement%3A%20%23copyFrom%3Ato%3A"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("deepCopy"), "deepCopy", function KeyedCollection__deepCopy(){
var result = nil;
const self = this; result=(self.$klass).$$new();
self.keysAndValuesDo_((function KeyedCollection__(key,value){
return result.at_put_(key,(value.deepCopy()));
}
));
return result;
}
, "copying", unescape("deepCopy%0D%09%22%20Return%20a%20deep%20copy%20of%20the%20receiver.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20class%20new.%0D%09self%20keysAndValuesDo%3A%20%5B%3Akey%20%3Avalue%20%7C%0D%09%09result%20at%3A%20key%20put%3A%20value%20deepCopy%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("remove%3A"), "remove_", function KeyedCollection__remove_(aKey){
const self = this; self.removeKey_(aKey);
return self;
}
, "removing", unescape("remove%3A%20aKey%0D%09%22%20Remove%20the%20binding%20at%20aKey.%20%22%0D%0D%09self%20removeKey%3A%20aKey"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("removeKey%3A"), "removeKey_", function KeyedCollection__removeKey_(aKey){
const self = this; return self.removeKey_ifAbsent_(aKey,(function KeyedCollection__(){
return self.objectNotFoundAt_(aKey);
}
));
}
, "removing", unescape("removeKey%3A%20aKey%0D%09%22%20Remove%20the%20binding%20at%20aKey.%0D%09Signal%20an%20error%20if%20the%20key%20is%20not%20present.%0D%09%22%0D%0D%09%5Eself%20removeKey%3A%20aKey%20ifAbsent%3A%20%5B%20self%20objectNotFoundAt%3A%20aKey%20%5D"));
smalltalk.bind(smalltalk.KeyedCollection, unescape("isDictionary"), "isDictionary", function KeyedCollection__isDictionary(){
const self = this; return true;
}
, "query", unescape("isDictionary%0D%09%22%20Returns%20true%20if%20the%20receiver%20is%20a%20dictionary.%20%22%0D%0D%09%5Etrue"));
smalltalk.addClass("ArrayedContents", smalltalk.SequenceableCollection, ['contents'], 'Kernel');
smalltalk.ArrayedContents.$classVariableNames=("");
smalltalk.bind(smalltalk.ArrayedContents, unescape("contents"), "contents", function ArrayedContents__contents(){
const self = this; if (((nil.isNil_(self['@contents']))).valueOf()) {self['@contents']=smalltalk.Array.$$new()};
return self['@contents'];
}
, "private", unescape("contents%0D%09%22%20Private%20-%20Return%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09contents%20isNil%20ifTrue%3A%20%5B%20contents%20%3A%3D%20Array%20new%20%5D.%0D%09%5Econtents"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("add%3A"), "add_", function ArrayedContents__add_(anObject){
const self = this; return (self.contents()).add_(anObject);
}
, "adding", unescape("add%3A%20anObject%0D%09%22%20Add%20anObject%20to%20the%20receiver.%20%22%0D%0D%09%5Eself%20contents%20add%3A%20anObject"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("at%3AifAbsent%3A"), "at_ifAbsent_", function ArrayedContents__at_ifAbsent_(anIndex,aBlock){
const self = this; return (self.contents()).at_ifAbsent_(anIndex,aBlock);
}
, "accessing", unescape("at%3A%20anIndex%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20contents%20of%20the%20receiver%20at%20anIndex%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%5Eself%20contents%20at%3A%20anIndex%20ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("at%3Aput%3A"), "at_put_", function ArrayedContents__at_put_(anIndex,anObject){
const self = this; return (self.contents()).at_put_(anIndex,anObject);
}
, "accessing", unescape("at%3A%20anIndex%20put%3A%20anObject%0D%09%22%20Set%20the%20contents%20of%20the%20receiver%20at%20anIndex.%20%22%0D%0D%09%5Eself%20contents%20at%3A%20anIndex%20put%3A%20anObject"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("atAllPut%3A"), "atAllPut_", function ArrayedContents__atAllPut_(anObject){
const self = this; return (self.contents()).atAllPut_(anObject);
}
, "accessing", unescape("atAllPut%3A%20anObject%0D%09%22%20Replace%20all%20elements%20of%20the%20receiver%20with%20anObject.%20%22%0D%0D%09%5Eself%20contents%20atAllPut%3A%20anObject"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("copyFrom%3Ato%3A"), "copyFrom_to_", function ArrayedContents__copyFrom_to_(anIndex,anotherIndex){
var result = nil;
const self = this; result=(self.$klass).$$new();
anIndex.to_do_(anotherIndex,(function ArrayedContents__(each){
return result.add_((self.at_(each)));
}
));
return result;
}
, "copying", unescape("copyFrom%3A%20anIndex%20to%3A%20anotherIndex%0D%09%22%20Return%20the%20receiver%20contents%20in%20the%20interval.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20class%20new.%0D%09anIndex%20to%3A%20anotherIndex%20do%3A%20%5B%3Aeach%20%7C%20result%20add%3A%20%28self%20at%3A%20each%29%20%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("indexOf%3AifAbsent%3A"), "indexOf_ifAbsent_", function ArrayedContents__indexOf_ifAbsent_(anObject,aBlock){
const self = this; return (self.contents()).indexOf_ifAbsent_(anObject,aBlock);
}
, "testing", unescape("indexOf%3A%20anObject%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20position%20of%20anObject%20in%20the%20receiver%2C%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%5Eself%20contents%20indexOf%3A%20anObject%20ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("detect%3AifNone%3A"), "detect_ifNone_", function ArrayedContents__detect_ifNone_(aBlock,anotherBlock){
const self = this; return (self.contents()).detect_ifNone_(aBlock,anotherBlock);
}
, "enumerating", unescape("detect%3A%20aBlock%20ifNone%3A%20anotherBlock%0D%09%22%20Return%20the%20object%20in%20the%20receiver%20that%20return%20true%20when%20evaluated%20with%20aBlock%20or%20the%20result%20of%20evaluating%20anotherBlock.%20%22%0D%0D%09%5Eself%20contents%20detect%3A%20aBlock%20ifNone%3A%20anotherBlock"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("do%3A"), "do_", function ArrayedContents__do_(aBlock){
const self = this; return (self.contents()).do_(aBlock);
}
, "enumerating", unescape("do%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20contents%20do%3A%20aBlock"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("includes%3A"), "includes_", function ArrayedContents__includes_(anObject){
const self = this; return (self.contents()).includes_(anObject);
}
, "testing", unescape("includes%3A%20anObject%0D%09%22%20Return%20true%20if%20anObject%20is%20in%20receiver%27s%20contents.%20%22%0D%0D%09%5Eself%20contents%20includes%3A%20anObject"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("isEmpty"), "isEmpty", function ArrayedContents__isEmpty(){
const self = this; return (self.contents()).isEmpty();
}
, "testing", unescape("isEmpty%0D%09%22%20Return%20true%20if%20the%20receiver%20is%20empty.%20%22%0D%0D%09%5Eself%20contents%20isEmpty"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("occurrencesOf%3A"), "occurrencesOf_", function ArrayedContents__occurrencesOf_(anObject){
const self = this; return (self.contents()).occurrencesOf_(anObject);
}
, "counting", unescape("occurrencesOf%3A%20anObject%0D%09%22%20Return%20the%20occurrences%20of%20anObject%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20contents%20occurrencesOf%3A%20anObject"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("reverseDo%3A"), "reverseDo_", function ArrayedContents__reverseDo_(aBlock){
const self = this; return (self.contents()).reverseDo_(aBlock);
}
, "enumerating", unescape("reverseDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver%20in%20reverse%20order%20of%20iteration.%20%22%0D%0D%09%5Eself%20contents%20reverseDo%3A%20aBlock"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("reversed"), "reversed", function ArrayedContents__reversed(){
const self = this; return (self.$klass).withAll_(((self.contents()).reversed()));
}
, "copying", unescape("reversed%0D%09%22%20Return%20an%20array%20with%20the%20contents%20of%20the%20receiver%20in%20reverse%20order.%20%22%0D%0D%09%5Eself%20class%20withAll%3A%20self%20contents%20reversed"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("detect%3AifNone%3A"), "detect_ifNone_", function ArrayedContents__detect_ifNone_(aBlock,anotherBlock){
const self = this; return (self.contents()).detect_ifNone_(aBlock,anotherBlock);
}
, "enumerating", unescape("detect%3A%20aBlock%20ifNone%3A%20anotherBlock%0D%09%22%20Return%20the%20object%20in%20the%20receiver%20that%20return%20true%20when%20evaluated%20with%20aBlock%20or%20the%20result%20of%20evaluating%20anotherBlock.%20%22%0D%0D%09%5Eself%20contents%20detect%3A%20aBlock%20ifNone%3A%20anotherBlock"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("remove%3AifAbsent%3A"), "remove_ifAbsent_", function ArrayedContents__remove_ifAbsent_(anObject,aBlock){
const self = this; return (self.contents()).remove_ifAbsent_(anObject,aBlock);
}
, "removing", unescape("remove%3A%20anObject%20ifAbsent%3A%20aBlock%0D%09%22%20Remove%20anObject%20from%20the%20receiver.%0D%09Return%20the%20result%20of%20evaluating%20aBlock%20if%20anObject%20is%20not%20in%20the%20receiver.%0D%09%22%0D%0D%09%5Eself%20contents%20remove%3A%20anObject%20ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("removeAll"), "removeAll", function ArrayedContents__removeAll(){
const self = this; self['@contents']=nil;
return self;
}
, "removing", unescape("removeAll%0D%09%22%20Remove%20all%20the%20objects%20in%20the%20receiver.%20%22%0D%0D%09contents%20%3A%3D%20nil"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("removeFirst"), "removeFirst", function ArrayedContents__removeFirst(){
const self = this; return (self.contents()).removeFirst();
}
, "removing", unescape("removeFirst%0D%09%22%20Remove%20the%20first%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20contents%20removeFirst"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("removeLast"), "removeLast", function ArrayedContents__removeLast(){
const self = this; return (self.contents()).removeLast();
}
, "removing", unescape("removeLast%0D%09%22%20Remove%20the%20last%20object%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20contents%20removeLast"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("removeIndex%3A"), "removeIndex_", function ArrayedContents__removeIndex_(index){
const self = this; return (self.contents()).removeIndex_(index);
}
, "removing", unescape("removeIndex%3A%20index%0D%09%22%20Remove%20the%20element%20at%20index.%20%22%0D%0D%09%5Eself%20contents%20removeIndex%3A%20index"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("size"), "size", function ArrayedContents__size(){
const self = this; return (self.contents()).size();
}
, "accesing", unescape("size%0D%09%22%20Return%20the%20size%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20contents%20size"));
smalltalk.bind(smalltalk.ArrayedContents, unescape("withIndexDo%3A"), "withIndexDo_", function ArrayedContents__withIndexDo_(aBlock){
const self = this; return (self.contents()).withIndexDo_(aBlock);
}
, "enumerating", unescape("withIndexDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20all%20the%20index%20positions%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20contents%20withIndexDo%3A%20aBlock"));
smalltalk.addClass("EventManager", smalltalk.Object, ['handlers'], 'Kernel');
smalltalk.EventManager.$classVariableNames=("");
smalltalk.EventManager.$klass.$iVarNames = ['eventsTriggered'];
smalltalk.addClass("MethodReferences", smalltalk.EventManager, ['rootClasses', 'results'], 'Tools-References');
smalltalk.MethodReferences.$classVariableNames=("");
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("sendersOf%3A"), "sendersOf_", function Smalltalk_class__sendersOf_(selector){
const self = this; return (self.current()).sendersOf_(selector);
}
, "Tools-query", unescape("sendersOf%3A%20selector%0D%09%22%20Return%20the%20senders%20of%20message%20selector.%20%22%0D%0D%09%5Eself%20current%20sendersOf%3A%20selector"));
smalltalk.bind(smalltalk.Smalltalk, unescape("methodReferences"), "methodReferences", function Smalltalk__methodReferences(){
const self = this; return smalltalk.MethodReferences.$$new();
}
, "Tools-accessing", unescape("methodReferences%0D%09%22%20Return%20the%20methodReferences%20tool%20of%20the%20receiver.%20%22%0D%0D%09%5EMethodReferences%20new"));
smalltalk.bind(smalltalk.Smalltalk, unescape("sendersOf%3A"), "sendersOf_", function Smalltalk__sendersOf_(selector){
const self = this; return (self.methodReferences()).sendersOf_(selector);
}
, "Tools-query", unescape("sendersOf%3A%20selector%0D%09%22%20Return%20the%20senders%20of%20message%20selector.%20%22%0D%0D%09%5Eself%20methodReferences%20sendersOf%3A%20selector"));
smalltalk.bind(smalltalk.String, unescape("senders"), "senders", function String__senders(){
const self = this; return smalltalk.Smalltalk.sendersOf_(self);
}
, "Tools-query", unescape("senders%0D%09%22%20Return%20the%20senders%20of%20the%20receiver.%20%22%0D%0D%09%5ESmalltalk%20sendersOf%3A%20self"));
smalltalk.bind(smalltalk.String, unescape("implementors"), "implementors", function String__implementors(){
const self = this; return smalltalk.Smalltalk.implementorsOf_(self);
}
, "Tools-query", unescape("implementors%0D%09%22%20Return%20the%20implementors%20of%20the%20receiver.%20%22%0D%0D%09%5ESmalltalk%20implementorsOf%3A%20self"));
smalltalk.bind(smalltalk.MethodReferences.$klass, unescape("constructEventsTriggered"), "constructEventsTriggered", function MethodReferences_class__constructEventsTriggered(){
const self = this; return ["found:", "found:pattern:in:", "needsMethods", "searchStarted", "searchFinished"]._comma((smalltalk.superImplementor(smalltalk.MethodReferences.$klass,'constructEventsTriggered').apply(self, [])));
}
, "events", unescape("constructEventsTriggered%0D%09%22%20Private%20-%20Return%20the%20events%20managed%20by%20instances%20of%20the%20receiver.%20%22%0D%0D%09%5E%23%28%09%23found%3A%20%23found%3Apattern%3Ain%3A%0D%09%09%23needsMethods%0D%09%09%23searchStarted%20%23searchFinished%0D%09%29%20%2C%20super%20constructEventsTriggered"));
smalltalk.bind(smalltalk.MethodReferences.$klass, unescape("of%3A"), "of_", function MethodReferences_class__of_(selector){
const self = this; return (self.$$new()).referencesOf_(selector);
}
, "testing", unescape("of%3A%20selector%0D%09%22%20Return%20the%20references%20to%20selector.%20%22%0D%0D%09%5Eself%20new%20referencesOf%3A%20selector"));
smalltalk.bind(smalltalk.MethodReferences.$klass, unescape("ofGlobal%3A"), "ofGlobal_", function MethodReferences_class__ofGlobal_(globalName){
const self = this; return (self.$$new()).referencesOfGlobal_(globalName);
}
, "testing", unescape("ofGlobal%3A%20globalName%0D%09%22%20Return%20the%20references%20to%20global%20globalName.%20%22%0D%0D%09%5Eself%20new%20referencesOfGlobal%3A%20globalName"));
smalltalk.bind(smalltalk.MethodReferences.$klass, unescape("findClasses%3A"), "findClasses_", function MethodReferences_class__findClasses_(what){
const self = this; return (self.$$new()).findClasses_(what);
}
, "testing", unescape("findClasses%3A%20what%0D%09%22%20Find%20classes%20in%20the%20system%20matching%20what.%20%22%0D%0D%09%5Eself%20new%20findClasses%3A%20what"));
smalltalk.bind(smalltalk.MethodReferences.$klass, unescape("globals"), "globals", function MethodReferences_class__globals(){
var tool = nil;
var result = nil;
const self = this; return result;
}
, "testing", unescape("globals%0D%09%22%20Return%20the%20references%20to%20all%20global%20names.%20%22%0D%0D%09%7C%20tool%20result%20%7C%0D%22%0D%09tool%20%3A%3D%20self%20new.%0D%09result%20%3A%3D%20PoolDictionary%20new.%0D%09tool%20when%3A%20%23found%3Apattern%3Ain%3A%20do%3A%20%5B%3Amth%20%3Amask%20%3Astream%7C%20%7C%20global%20%7C%0D%09%09global%20%3A%3D%20SmalltalkParser%20new%20globalNameParser%20parse%3A%20stream.%0D%09%09global%20isParseFailure%20ifFalse%3A%20%5B%0D%09%09%09%28result%20at%3A%20global%20ifAbsentPut%3A%20%5BArray%20new%5D%29%20add%3A%20mth%0D%09%09%5D.%0D%09%5D.%0D%09tool%20searchGlobalReferences.%0D%22%0D%09%5Eresult"));
smalltalk.bind(smalltalk.MethodReferences.$klass, unescape("methodOverwrites"), "methodOverwrites", function MethodReferences_class__methodOverwrites(){
const self = this; return (self.$$new()).methodOverwrites();
}
, "testing", unescape("methodOverwrites%0D%09%22%20Find%20the%20methods%20that%20are%20implemented/overwritten%20by%20subclasses.%20%22%0D%0D%09%5Eself%20new%20methodOverwrites"));
smalltalk.bind(smalltalk.MethodReferences.$klass, unescape("variableOverwrites"), "variableOverwrites", function MethodReferences_class__variableOverwrites(){
const self = this; return (self.$$new()).variableOverwrites();
}
, "testing", unescape("variableOverwrites%0D%09%22%20Find%20the%20methods%20that%20has%20potential%20overwrite%20of%20variable%20names.%20%22%0D%0D%09%5Eself%20new%20variableOverwrites"));
smalltalk.bind(smalltalk.MethodReferences, unescape("initializeResults"), "initializeResults", function MethodReferences__initializeResults(){
const self = this; self['@results']=smalltalk.Array.$$new();
return self;
}
, "initialize", unescape("initializeResults%0D%09%22%20Private%20-%20Initialize%20the%20results%20of%20the%20receiver.%20%22%0D%0D%09results%20%3A%3D%20Array%20new"));
smalltalk.bind(smalltalk.MethodReferences, unescape("reset"), "reset", function MethodReferences__reset(){
const self = this; self.results_(nil);
return self;
}
, "initialize", unescape("reset%0D%09%22%20Reset%20the%20receiver.%20%22%0D%0D%09self%20results%3A%20nil"));
smalltalk.bind(smalltalk.MethodReferences, unescape("rootClasses%3A"), "rootClasses_", function MethodReferences__rootClasses_(array){
const self = this; self['@rootClasses']=array;
return self;
}
, "accessing", unescape("rootClasses%3A%20array%0D%09%22%20Set%20the%20rootClasses%20of%20the%20receiver.%20%22%0D%0D%09rootClasses%20%3A%3D%20array"));
smalltalk.bind(smalltalk.MethodReferences, unescape("results"), "results", function MethodReferences__results(){
const self = this; if (((nil.isNil_(self['@results']))).valueOf()) {self.initializeResults()};
return self['@results'];
}
, "accessing", unescape("results%0D%09%22%20Return%20the%20results%20of%20the%20receiver.%20%22%0D%0D%09results%20isNil%20ifTrue%3A%20%5B%20self%20initializeResults%20%5D.%0D%09%5Eresults"));
smalltalk.bind(smalltalk.MethodReferences, unescape("results%3A"), "results_", function MethodReferences__results_(array){
const self = this; self['@results']=array;
return self;
}
, "accessing", unescape("results%3A%20array%0D%09%22%20Set%20the%20results%20of%20the%20receiver.%20%22%0D%0D%09results%20%3A%3D%20array"));
smalltalk.bind(smalltalk.MethodReferences, unescape("rootClasses"), "rootClasses", function MethodReferences__rootClasses(){
const self = this; if (((nil.isNil_(self['@rootClasses']))).valueOf()) {return smalltalk.Smalltalk.rootClasses()};
return self['@rootClasses'];
}
, "accessing", unescape("rootClasses%0D%09%22%20Return%20the%20rootClasses%20of%20the%20receiver.%20%22%0D%0D%09rootClasses%20isNil%20ifTrue%3A%20%5B%20%5ESmalltalk%20rootClasses%20%5D.%0D%09%5ErootClasses"));
smalltalk.bind(smalltalk.MethodReferences, unescape("allMethodsIn%3A"), "allMethodsIn_", function MethodReferences__allMethodsIn_(aCollection){
var result = nil;
const self = this; result=smalltalk.Array.$$new();
(self.rootClasses()).do_((function MethodReferences__(root){
return ((root.instanceClass()).withAllSubclasses()).do_((function MethodReferences__(cls){
cls.methodsDo_((function MethodReferences__(each){
return result.add_(each);
}
));
return (cls.$klass).methodsDo_((function MethodReferences__(each){
return result.add_(each);
}
));
}
));
}
));
return result;
}
, "accessing", unescape("allMethodsIn%3A%20aCollection%0D%09%22%20Return%20the%20methods%20defined%20by%20aCollection%20of%20classes.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20Array%20new.%0D%09self%20rootClasses%20do%3A%20%5B%3Aroot%7C%0D%09%09root%20instanceClass%20withAllSubclasses%20do%3A%20%5B%3Acls%7C%0D%09%09%09cls%20methodsDo%3A%20%5B%3Aeach%7C%20result%20add%3A%20each%20%5D.%0D%09%09%09cls%20class%20methodsDo%3A%20%5B%3Aeach%7C%20result%20add%3A%20each%20%5D.%0D%09%09%5D%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.MethodReferences, unescape("allMethods"), "allMethods", function MethodReferences__allMethods(){
const self = this; return self.triggerEvent_ifNotHandled_("needsMethods",(function MethodReferences__(){
return self.allMethodsIn_((self.rootClasses()));
}
));
}
, "accessing", unescape("allMethods%0D%09%22%20Return%20the%20methods%20to%20search%20the%20receiver.%20%22%0D%0D%09%5Eself%09triggerEvent%3A%20%23needsMethods%0D%09%09ifNotHandled%3A%20%5B%20self%20allMethodsIn%3A%20self%20rootClasses%20%5D"));
smalltalk.bind(smalltalk.MethodReferences, unescape("search%3Awith%3A"), "search_with_", function MethodReferences__search_with_(what,targetBlock){
var atoms = nil;
const self = this; atoms=self.allMethods();
self.triggerEvent_("searchStarted");
atoms=atoms.select_((function MethodReferences__(aMethod){
var source = nil;
source=targetBlock.value_(aMethod);
if ((((nil.isNil_(source)===false)).and_((function MethodReferences__(){
return (source.toString()).includes_(what);
}
))).valueOf()) {(self.results()).add_(aMethod);
self.triggerEvent_with_("found:",aMethod);
if ((self.hasActionForEvent_("found:pattern:in:")).valueOf()) {var stream = nil;
var args = nil;
stream=(source.toString()).stream();
args=smalltalk.Array.with_with_with_(aMethod,what,stream);
while(((function MethodReferences__(){
return (function MethodReferences__($1$){
$1$.upTo_(what);
return $1$.atEnd()}
)(stream);
}
)()).not()){self.triggerEvent_withArguments_("found:pattern:in:",args)};};
return true} else {return false};
}
));
self.triggerEvent_("searchFinished");
return atoms;
}
, "searching", unescape("search%3A%20what%20with%3A%20targetBlock%0D%09%22%20Find%20what%20on%20target%20of%20selected%20methods.%20%22%0D%0D%09%7C%20atoms%20%7C%0D%09atoms%20%3A%3D%20self%20allMethods.%0D%09self%20triggerEvent%3A%20%23searchStarted.%0D%09atoms%20%3A%3D%20atoms%20select%3A%20%5B%3AaMethod%7C%20%7C%20source%20%7C%0D%09%09source%20%3A%3D%20targetBlock%20value%3A%20aMethod.%0D%09%09%28source%20notNil%20and%3A%20%5Bsource%20toString%20includes%3A%20what%5D%29%20ifTrue%3A%20%5B%0D%09%09%09self%20results%20add%3A%20aMethod.%0D%09%09%09self%20triggerEvent%3A%20%23found%3A%20with%3A%20aMethod.%0D%09%09%09%28self%20hasActionForEvent%3A%20%23found%3Apattern%3Ain%3A%29%20ifTrue%3A%20%5B%20%7C%20stream%20args%20%7C%0D%09%09%09%09stream%20%3A%3D%20source%20toString%20stream.%0D%09%09%09%09args%20%3A%3D%20Array%20with%3A%20aMethod%20with%3A%20what%20with%3A%20stream.%0D%09%09%09%09%5B%20stream%20upTo%3A%20what%3B%20atEnd%20%5D%20whileFalse%3A%20%5B%0D%09%09%09%09%09self%20triggerEvent%3A%20%23found%3Apattern%3Ain%3A%20withArguments%3A%20args%0D%09%09%09%09%5D%0D%09%09%09%5D.%0D%09%09%09true%0D%09%09%5D%20ifFalse%3A%20%5B%20false%20%5D%0D%09%5D.%0D%09self%20triggerEvent%3A%20%23searchFinished.%0D%09%5Eatoms"));
smalltalk.bind(smalltalk.MethodReferences, unescape("search%3A"), "search_", function MethodReferences__search_(what){
const self = this; return self.search_with_(what,(function MethodReferences__(aMethod){
return aMethod.fn();
}
));
}
, "searching", unescape("search%3A%20what%0D%09%22%20Find%20references%20to%20what%20in%20selected%20methods.%0D%09Note%3A%20search%20is%20realized%20on%20javascript%20source%20of%20native%20code%20of%20methods.%0D%09%22%0D%0D%09%5Eself%20search%3A%20what%20with%3A%20%5B%3AaMethod%7C%20aMethod%20fn%20%5D"));
smalltalk.bind(smalltalk.MethodReferences, unescape("searchSource%3A"), "searchSource_", function MethodReferences__searchSource_(what){
const self = this; return self.search_with_(what,(function MethodReferences__(aMethod){
return aMethod.source();
}
));
}
, "searching", unescape("searchSource%3A%20what%0D%09%22%20Find%20what%20in%20source%20of%20selected%20methods.%20%22%0D%0D%09%5Eself%20search%3A%20what%20with%3A%20%5B%3AaMethod%7C%20aMethod%20source%20%5D"));
smalltalk.bind(smalltalk.MethodReferences, unescape("inlines"), "inlines", function MethodReferences__inlines(){
const self = this; return self.searchSource_(unescape("%7B%27"));
}
, "searching", unescape("inlines%0D%09%22%20Find%20javascript%20inlines%20in%20selected%20methods.%20%22%0D%0D%09%5Eself%20searchSource%3A%20%27%7B%27%27%27"));
smalltalk.bind(smalltalk.MethodReferences, unescape("searchCategory%3A"), "searchCategory_", function MethodReferences__searchCategory_(aName){
var found = nil;
const self = this; self.triggerEvent_("searchStarted");
found=(smalltalk.Exporter.$$new()).matchCategory_from_(aName,(self.rootClasses()));
found=(found.first())._comma((found.last()));
found.do_((function MethodReferences__(each){
(self.results()).add_(each);
return self.triggerEvent_with_("found:",each);
}
));
self.triggerEvent_("searchFinished");
return found;
}
, "searching", unescape("searchCategory%3A%20aName%0D%09%22%20Find%20%28source%29%20references%20to%20category%20starting%20from%20root%20classes.%20%22%0D%0D%09%7C%20found%20%7C%0D%09self%20triggerEvent%3A%20%23searchStarted.%0D%09found%20%3A%3D%20Exporter%20new%20matchCategory%3A%20aName%20from%3A%20self%20rootClasses.%0D%09found%20%3A%3D%20found%20first%20%2C%20found%20last.%0D%09found%20do%3A%20%5B%3Aeach%7C%0D%09%09%09self%20results%20add%3A%20each.%0D%09%09%09self%20triggerEvent%3A%20%23found%3A%20with%3A%20each.%0D%09%5D.%0D%09self%20triggerEvent%3A%20%23searchFinished.%0D%09%5Efound"));
smalltalk.bind(smalltalk.MethodReferences, unescape("sendPatternsOf%3A"), "sendPatternsOf_", function MethodReferences__sendPatternsOf_(aSelector){
const self = this; return smalltalk.Array.with_with_((self.normalSendPatternOf_(aSelector)),(self.superSendPatternOf_(aSelector)));
}
, "patterns", unescape("sendPatternsOf%3A%20aSelector%0D%09%22%20Private%20-%20Return%20the%20search%20patterns%20for%20references%20of%20aSelector.%20%22%0D%0D%09%5EArray%0D%09%09with%3A%20%28self%20normalSendPatternOf%3A%20aSelector%29%0D%09%09with%3A%20%28self%20superSendPatternOf%3A%20aSelector%29"));
smalltalk.bind(smalltalk.MethodReferences, unescape("normalSendPatternOf%3A"), "normalSendPatternOf_", function MethodReferences__normalSendPatternOf_(aSelector){
const self = this; return ("."._comma((aSelector.asSelector())))._comma(unescape("%28"));
}
, "patterns", unescape("normalSendPatternOf%3A%20aSelector%0D%09%22%20Private%20-%20Return%20the%20search%20pattern%20for%20normal%20senders%20of%20aSelector.%20%22%0D%0D%09%5E%27.%27%20%2CaSelector%20asSelector%20%2C%27%28%27"));
smalltalk.bind(smalltalk.MethodReferences, unescape("superSendPatternOf%3A"), "superSendPatternOf_", function MethodReferences__superSendPatternOf_(aSelector){
const self = this; return (unescape(".%24superclass.%24fn.prototype%5B%27")._comma((aSelector.asSelector())))._comma(unescape("%27%5D.apply%28"));
}
, "patterns", unescape("superSendPatternOf%3A%20aSelector%0D%09%22%20Private%20-%20Return%20the%20search%20pattern%20for%20senders%20%28to%20super%29%20of%20aSelector.%20%22%0D%0D%09%5E%27.%24superclass.%24fn.prototype%5B%27%27%27%20%2CaSelector%20asSelector%20%2C%27%27%27%5D.apply%28%27"));
smalltalk.bind(smalltalk.MethodReferences, unescape("instVarPatternOf%3A"), "instVarPatternOf_", function MethodReferences__instVarPatternOf_(instVarName){
const self = this; return (unescape("self%5B%27@")._comma((instVarName.asJavascriptName())))._comma(unescape("%27%5D"));
}
, "patterns", unescape("instVarPatternOf%3A%20instVarName%0D%09%22%20Private%20-%20Return%20the%20search%20pattern%20for%20instance%20variable%20access.%20%22%0D%0D%09%5E%27self%5B%27%27@%27%20%2CinstVarName%20asJavascriptName%20%2C%27%27%27%5D%27"));
smalltalk.bind(smalltalk.MethodReferences, unescape("globalPatternOf%3A"), "globalPatternOf_", function MethodReferences__globalPatternOf_(globalName){
const self = this; return "smalltalk."._comma(globalName);
}
, "patterns", unescape("globalPatternOf%3A%20globalName%0D%09%22%20Private%20-%20Return%20the%20search%20pattern%20for%20global%20variable%20access.%20%22%0D%0D%09%5E%27smalltalk.%27%20%2CglobalName"));
smalltalk.bind(smalltalk.MethodReferences, unescape("types"), "types", function MethodReferences__types(){
const self = this; return ["referencesOf:", "referencesOfGlobal:", "referencesOfClassVariable:", "referencesOfInstanceVariable:", "findClasses:", "findMessages:", "searchCategory:", "search:", "searchSource:", "globalReferences", "missingGlobals", "inlines", "methodOverwrites", "variableOverwrites"];
}
, "types", unescape("types%0D%09%22%20Private%20-%20Return%20the%20types%20of%20search%20implemented%20by%20the%20receiver.%20%22%0D%0D%09%5E%23%28%09%23referencesOf%3A%20%23referencesOfGlobal%3A%0D%09%09%23referencesOfClassVariable%3A%0D%09%09%23referencesOfInstanceVariable%3A%0D%09%09%23findClasses%3A%20%23findMessages%3A%0D%09%09%23searchCategory%3A%0D%09%09%23search%3A%20%23searchSource%3A%0D%09%09%23globalReferences%20%23missingGlobals%20%23inlines%0D%09%09%23methodOverwrites%20%23variableOverwrites%0D%09%29"));
smalltalk.bind(smalltalk.MethodReferences, unescape("search%3Atype%3A"), "search_type_", function MethodReferences__search_type_(aName,typeSelector){
var selector = nil;
const self = this; selector=(typeSelector.includes_(":")).ifTrue_ifFalse_((function MethodReferences__(){
return (typeSelector.upTo_(":"))._comma(":");
}
),(function MethodReferences__(){
return typeSelector.upTo_(" ");
}
));
if (((smalltalk.responds_to_(self,selector))).valueOf()) {return self.perform_with_(selector,(aName.trimBlanks()))} else {return nil};
}
, "searching", unescape("search%3A%20aName%20type%3A%20typeSelector%0D%09%22%20Return%20the%20result%20of%20searching%20for%20aName%20as%20a%20search%20of%20specified%20type%20%28or%20nil%29.%20%22%0D%0D%09%7C%20selector%20%7C%0D%09selector%20%3A%3D%20%28typeSelector%20includes%3A%20%24%3A%29%0D%09ifTrue%3A%20%5B%20%28typeSelector%20upTo%3A%20%24%3A%29%20%2C%24%3A%20%5D%0D%09ifFalse%3A%20%5B%20typeSelector%20upTo%3A%20%24%20%20%5D.%0D%09%5E%28self%20respondsTo%3A%20selector%29%20ifTrue%3A%20%5B%0D%09%09self%20perform%3A%20selector%20with%3A%20aName%20trimBlanks%0D%09%5D"));
smalltalk.bind(smalltalk.MethodReferences, unescape("sendersOf%3A"), "sendersOf_", function MethodReferences__sendersOf_(aSelector){
const self = this; return (self.sendPatternsOf_(aSelector)).inject_into_((smalltalk.Array.$$new()),(function MethodReferences__(total,each){
return total._comma((self.search_(each)));
}
));
}
, "searching", unescape("sendersOf%3A%20aSelector%0D%09%22%20Find%20the%20requested%20elements%20from%20root%20classes.%20%22%0D%0D%09%5E%28self%20sendPatternsOf%3A%20aSelector%29%20inject%3A%20Array%20new%20into%3A%20%5B%3Atotal%20%3Aeach%7C%0D%09%09total%20%2C%20%28self%20search%3A%20each%29%0D%09%5D"));
smalltalk.bind(smalltalk.MethodReferences, unescape("referencesOf%3A"), "referencesOf_", function MethodReferences__referencesOf_(aSelector){
const self = this; (function MethodReferences__($1$){
$1$.add_(((unescape("---%20Implementors%20of%20%23")._comma(aSelector))._comma(unescape("%20---"))));
$1$.addAll_((self.implementorsOf_(aSelector)));
return $1$.add_(((unescape("---%20Senders%20of%20%23")._comma(aSelector))._comma(unescape("%20---"))))}
)(self.results());
self.sendersOf_(aSelector);
return self['@results'];
}
, "searching", unescape("referencesOf%3A%20aSelector%0D%09%22%20Find%20the%20references%20to%20message%20%28aSelector%29.%20%22%0D%0D%09self%20results%0D%09%09add%3A%20%27---%20Implementors%20of%20%23%27%20%2CaSelector%20%2C%27%20---%27%3B%0D%09%09addAll%3A%20%28self%20implementorsOf%3A%20aSelector%29%3B%0D%09%09add%3A%20%27---%20Senders%20of%20%23%27%20%2CaSelector%20%2C%27%20---%27.%0D%09self%20sendersOf%3A%20aSelector.%0D%09%5Eresults"));
smalltalk.bind(smalltalk.MethodReferences, unescape("referencesOfInstanceVariable%3A"), "referencesOfInstanceVariable_", function MethodReferences__referencesOfInstanceVariable_(instVarName){
const self = this; return self.search_((self.instVarPatternOf_(instVarName)));
}
, "searching", unescape("referencesOfInstanceVariable%3A%20instVarName%0D%09%22%20Find%20the%20requested%20elements%20from%20root%20classes.%20%22%0D%0D%09%5Eself%20search%3A%20%28self%20instVarPatternOf%3A%20instVarName%29"));
smalltalk.bind(smalltalk.MethodReferences, unescape("settersOfInstanceVariable%3A"), "settersOfInstanceVariable_", function MethodReferences__settersOfInstanceVariable_(instVarName){
const self = this; return self.search_(((self.instVarPatternOf_(instVarName))._comma(unescape("%3D"))));
}
, "searching", unescape("settersOfInstanceVariable%3A%20instVarName%0D%09%22%20Find%20the%20requested%20elements%20from%20root%20classes.%20%22%0D%0D%09%5Eself%20search%3A%20%28self%20instVarPatternOf%3A%20instVarName%29%20%2C%27%3D%27"));
smalltalk.bind(smalltalk.MethodReferences, unescape("referencesOfGlobal%3A"), "referencesOfGlobal_", function MethodReferences__referencesOfGlobal_(globalName){
const self = this; return self.search_((self.globalPatternOf_(globalName)));
}
, "searching", unescape("referencesOfGlobal%3A%20globalName%0D%09%22%20Find%20the%20requested%20elements%20from%20root%20classes.%20%22%0D%0D%09%5Eself%20search%3A%20%28self%20globalPatternOf%3A%20globalName%29"));
smalltalk.bind(smalltalk.MethodReferences, unescape("searchGlobalReferences"), "searchGlobalReferences", function MethodReferences__searchGlobalReferences(){
const self = this; return self.search_((self.globalPatternOf_("")));
}
, "searching", unescape("searchGlobalReferences%0D%09%22%20Find%20the%20requested%20elements%20from%20root%20classes.%20%22%0D%0D%09%5Eself%20search%3A%20%28self%20globalPatternOf%3A%20%27%27%29"));
smalltalk.bind(smalltalk.MethodReferences, unescape("settersOfGlobalVariable%3A"), "settersOfGlobalVariable_", function MethodReferences__settersOfGlobalVariable_(globalName){
const self = this; return self.search_(((self.globalPatternOf_(globalName))._comma(unescape("%3D"))));
}
, "searching", unescape("settersOfGlobalVariable%3A%20globalName%0D%09%22%20Find%20the%20requested%20elements%20from%20root%20classes.%20%22%0D%0D%09%5Eself%20search%3A%20%28self%20globalPatternOf%3A%20globalName%29%20%2C%27%3D%27"));
smalltalk.bind(smalltalk.MethodReferences, unescape("referencesOfClassVariable%3A"), "referencesOfClassVariable_", function MethodReferences__referencesOfClassVariable_(classVarName){
const self = this; return self.search_(((unescape(".classVariableAt_%28%22")._comma(classVarName))._comma(unescape("%22%29"))));
}
, "searching", unescape("referencesOfClassVariable%3A%20classVarName%0D%09%22%20Find%20the%20requested%20elements%20from%20root%20classes.%20%22%0D%0D%09%5Eself%20search%3A%20%27.classVariableAt_%28%22%27%2CclassVarName%2C%27%22%29%27"));
smalltalk.bind(smalltalk.MethodReferences, unescape("settersOfClassVariable%3A"), "settersOfClassVariable_", function MethodReferences__settersOfClassVariable_(classVarName){
const self = this; return self.search_(((unescape(".classVariableAt_put_%28%22")._comma(classVarName))._comma(unescape("%22%2C"))));
}
, "searching", unescape("settersOfClassVariable%3A%20classVarName%0D%09%22%20Find%20the%20requested%20elements%20from%20root%20classes.%20%22%0D%0D%09%5Eself%20search%3A%20%27.classVariableAt_put_%28%22%27%2CclassVarName%2C%27%22%2C%27"));
smalltalk.bind(smalltalk.MethodReferences, unescape("globalReferences"), "globalReferences", function MethodReferences__globalReferences(){
var pool = nil;
const self = this; pool=(self.$klass).globals();
((pool.keys()).sorted()).do_((function MethodReferences__(aName){
return (function MethodReferences__($1$){
$1$.add_(((unescape("---%20References%20to%3A%20")._comma(aName))._comma(unescape("%20---"))));
return $1$.addAll_((pool.at_(aName)))}
)(self.results());
}
));
return self['@results'];
}
, "searching", unescape("globalReferences%0D%09%22%20Find%20the%20references%20to%20globals.%20%22%0D%0D%09%7C%20pool%20%7C%0D%09pool%20%3A%3D%20self%20class%20globals.%0D%09pool%20keys%20sorted%20do%3A%20%5B%3AaName%7C%0D%09%09self%20results%0D%09%09%09add%3A%20%27---%20References%20to%3A%20%27%2CaName%2C%27%20---%27%3B%0D%09%09%09addAll%3A%20%28pool%20at%3A%20aName%29%0D%09%5D.%0D%09%5Eresults"));
smalltalk.bind(smalltalk.MethodReferences, unescape("missingGlobals"), "missingGlobals", function MethodReferences__missingGlobals(){
var pool = nil;
const self = this; pool=(self.$klass).globals();
(((pool.keys()).sorted()).reject_((function MethodReferences__(key){
return smalltalk.Smalltalk.includesKey_(key);
}
))).do_((function MethodReferences__(aName){
return (function MethodReferences__($1$){
$1$.add_(((unescape("---%20Missing%20global%3A%20")._comma(aName))._comma(unescape("%20---"))));
return $1$.addAll_((pool.at_(aName)))}
)(self.results());
}
));
if (((self.results()).isEmpty()).valueOf()) {(self.results()).add_(unescape("---%20All%20global%20references%20are%20bound%20to%20Smalltalk%20---"))};
return self['@results'];
}
, "searching", unescape("missingGlobals%0D%09%22%20Find%20the%20references%20to%20missing%20globals.%20%22%0D%0D%09%7C%20pool%20%7C%0D%09pool%20%3A%3D%20self%20class%20globals.%0D%09%28pool%20keys%20sorted%0D%09%09reject%3A%20%5B%3Akey%7C%20%28Smalltalk%20includesKey%3A%20key%29%20%5D%29%0D%09%09do%3A%20%5B%3AaName%7C%0D%09%09%09self%20results%0D%09%09%09%09add%3A%20%27---%20Missing%20global%3A%20%27%2CaName%2C%27%20---%27%3B%0D%09%09%09%09addAll%3A%20%28pool%20at%3A%20aName%29%0D%09%09%5D.%0D%09self%20results%20isEmpty%20ifTrue%3A%20%5B%0D%09%09self%20results%20add%3A%20%27---%20All%20global%20references%20are%20bound%20to%20Smalltalk%20---%27%0D%09%5D.%0D%09%5Eresults"));
smalltalk.bind(smalltalk.MethodReferences, unescape("implementorsOf%3A"), "implementorsOf_", function MethodReferences__implementorsOf_(aSelector){
const self = this; return (smalltalk.Smalltalk.current()).implementorsOf_(aSelector);
}
, "private", unescape("implementorsOf%3A%20aSelector%0D%09%22%20Private%20-%20Return%20the%20implementors%20of%20aSelector.%20%22%0D%0D%09%5ESmalltalk%20current%20implementorsOf%3A%20aSelector"));
smalltalk.bind(smalltalk.MethodReferences, unescape("messagesOf%3A"), "messagesOf_", function MethodReferences__messagesOf_(aCompiledMethod){
var stream = nil;
var selectors = nil;
var string = nil;
const self = this; stream=((aCompiledMethod.fn()).toString()).stream();
stream.upTo_(unescape("%7B"));
selectors=smalltalk.Set.$$new();
while((stream.atEnd()).not()){selectors.add_(((((function MethodReferences__($1$){
$1$.upTo_(".");
return $1$.upTo_(unescape("%28"))}
)(stream).asArrayOfSubstringsSeparatedBy_(".")).last()).asStSelector()))};;
selectors.remove_ifAbsent_("",(function MethodReferences__(){
return nil;
}
));
return ((selectors.asArray()).select_((function MethodReferences__(each){
return each.isLiteral();
}
))).sorted();
}
, "accessing", unescape("messagesOf%3A%20aCompiledMethod%0D%09%22%20Return%20all%20the%20messages%20that%20can%20be%20sent%20during%20execution%20of%20aCompiledMethod.%20%22%0D%0D%09%7C%20stream%20selectors%20string%20%7C%0D%09stream%20%3A%3D%20aCompiledMethod%20fn%20toString%20stream.%0D%09stream%20upTo%3A%20%24%7B.%0D%09selectors%20%3A%3D%20Set%20new.%0D%09%5Bstream%20atEnd%5D%20whileFalse%3A%20%5B%0D%09%09selectors%20add%3A%20%28%28%0D%09%09%09stream%20upTo%3A%20%24.%3BupTo%3A%20%24%28%0D%09%09%09%29%20asArrayOfSubstringsSeparatedBy%3A%20%24.%29%0D%09%09%09last%20asStSelector%0D%09%5D.%0D%09selectors%20remove%3A%20%27%27%20ifAbsent%3A%20%5B%5D.%0D%09%5E%28selectors%20asArray%20select%3A%20%5B%3Aeach%7C%20each%20isLiteral%20%5D%29%20sorted"));
smalltalk.bind(smalltalk.MethodReferences, unescape("globalReferencesOf%3A"), "globalReferencesOf_", function MethodReferences__globalReferencesOf_(aCompiledMethod){
var result = nil;
const self = this; result=smalltalk.Set.$$new();
return (result.asArray()).sorted();
}
, "accessing", unescape("globalReferencesOf%3A%20aCompiledMethod%0D%09%22%20Return%20all%20the%20global%20reference%20names%20in%20aCompiledMethod.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20Set%20new.%0D%22%0D%09self%0D%09%09when%3A%20%23needsMethods%20do%3A%20%5B%20Array%20with%3A%20aCompiledMethod%20%5D%3B%0D%09%09when%3A%20%23found%3Apattern%3Ain%3A%20do%3A%20%5B%3Amth%20%3Amask%20%3Astream%7C%20%7C%20global%20%7C%0D%09%09%09global%20%3A%3D%20SmalltalkParser%20new%20globalNameParser%20parse%3A%20stream.%0D%09%09%09global%20isParseFailure%20ifFalse%3A%20%5B%20result%20add%3A%20global%20%5D.%0D%09%09%5D%3B%0D%09%09yourself.%0D%09self%20searchGlobalReferences.%0D%22%0D%09%5Eresult%20asArray%20sorted"));
smalltalk.bind(smalltalk.MethodReferences, unescape("findClasses%3A"), "findClasses_", function MethodReferences__findClasses_(what){
var keys = nil;
var system = nil;
const self = this; if ((what.isString()).valueOf()) {return self.findClasses_(((what.trimBlanks()).asArrayOfSubstrings()))};
self.triggerEvent_("searchStarted");
keys=what.collect_((function MethodReferences__(each){
return (each.asString()).asLowercase();
}
));
system=smalltalk.Smalltalk.current();
if ((keys.notEmpty()).valueOf()) {(system.classes()).do_((function MethodReferences__(aClass){
var key = nil;
key=(aClass.name()).asLowercase();
if (((nil.isNil_(keys.detect_ifNone_((function MethodReferences__(one){
return key.includes_(one);
}
),(function MethodReferences__(){
return nil;
}
)))===false)).valueOf()) {(self.results()).add_(aClass);
return self.triggerEvent_with_("found:",aClass)} else {return nil};
}
))};
self.triggerEvent_("searchFinished");
return self.results();
}
, "searching", unescape("findClasses%3A%20what%0D%09%22%20Find%20classes%20matching%20what.%20%22%0D%0D%09%7C%20keys%20system%20%7C%0D%09what%20isString%20ifTrue%3A%20%5B%0D%09%09%5Eself%20findClasses%3A%20what%20trimBlanks%20asArrayOfSubstrings%0D%09%5D.%0D%09self%20triggerEvent%3A%20%23searchStarted.%0D%09keys%20%3A%3D%20what%20collect%3A%20%5B%3Aeach%7C%20each%20asString%20asLowercase%20%5D.%0D%09system%20%3A%3D%20Smalltalk%20current.%0D%09keys%20notEmpty%20ifTrue%3A%20%5B%0D%09%09system%20classes%20do%3A%20%5B%3AaClass%7C%20%7C%20key%20%7C%0D%09%09%09key%20%3A%3D%20aClass%20name%20asLowercase.%0D%09%09%09%28keys%20detect%3A%20%5B%3Aone%7C%20key%20includes%3A%20one%20%5D%20ifNone%3A%20%5B%5D%29%20notNil%20ifTrue%3A%20%5B%0D%09%09%09%09self%20results%20add%3A%20aClass.%0D%09%09%09%09self%20triggerEvent%3A%20%23found%3A%20with%3A%20aClass.%0D%09%09%09%5D%0D%09%09%5D.%0D%09%5D.%0D%09self%20triggerEvent%3A%20%23searchFinished.%0D%09%5Eself%20results"));
smalltalk.bind(smalltalk.MethodReferences, unescape("methodOverwritesOf%3A"), "methodOverwritesOf_", function MethodReferences__methodOverwritesOf_(aClass){
var map = nil;
var subclasses = nil;
const self = this; subclasses=aClass.allSubclasses();
map=smalltalk.PoolDictionary.$$new();
if ((subclasses.isEmpty()).valueOf()) {return map};
aClass.methodsDo_((function MethodReferences__(mth){
var selector = nil;
selector=mth.selector();
map.at_put_(selector,(smalltalk.Array.with_(mth)));
return subclasses.do_((function MethodReferences__(each){
if (((each.selectors()).includes_(selector)).valueOf()) {return (map.at_(selector)).add_((each._gt_gt(selector)))} else {return nil};
}
));
}
));
subclasses.do_((function MethodReferences__(each){
return (self.methodOverwritesOf_(each)).keysAndValuesDo_((function MethodReferences__(key,value){
return (map.at_ifAbsentPut_(key,(function MethodReferences__(){
return smalltalk.Array.$$new();
}
))).addAll_(value);
}
));
}
));
(((map.keys()).asArray()).select_((function MethodReferences__(key){
return ((map.at_(key)).size())._lt_eq((1));
}
))).do_((function MethodReferences__(key){
return map.removeKey_(key);
}
));
return map;
}
, "private", unescape("methodOverwritesOf%3A%20aClass%0D%09%22%20Private%20-%20Find%20the%20methods%20subimplemented%20by%20subclasses%20of%20aClass.%20%22%0D%0D%09%7C%20map%20subclasses%20%7C%0D%09subclasses%20%3A%3D%20aClass%20allSubclasses.%0D%09map%20%3A%3D%20PoolDictionary%20new.%0D%09subclasses%20isEmpty%20ifTrue%3A%20%5B%20%5Emap%20%5D.%0D%09aClass%20methodsDo%3A%20%5B%3Amth%7C%20%7C%20selector%20%7C%0D%09%09selector%20%3A%3D%20mth%20selector.%0D%09%09map%20at%3A%20selector%20put%3A%20%28Array%20with%3A%20mth%29.%0D%09%09subclasses%20do%3A%20%5B%3Aeach%7C%0D%09%09%09%28each%20selectors%20includes%3A%20selector%29%20ifTrue%3A%20%5B%0D%09%09%09%09%28map%20at%3A%20selector%29%20add%3A%20each%20%3E%3E%20selector%0D%09%09%09%5D.%0D%09%09%5D.%0D%09%5D.%0D%09subclasses%20do%3A%20%5B%3Aeach%7C%0D%09%09%28self%20methodOverwritesOf%3A%20each%29%20keysAndValuesDo%3A%20%5B%3Akey%20%3Avalue%7C%0D%09%09%09%28map%20at%3A%20key%20ifAbsentPut%3A%20%5BArray%20new%5D%29%20addAll%3A%20value%0D%09%09%5D.%0D%09%5D.%0D%09%28map%20keys%20asArray%0D%09%09select%3A%20%5B%3Akey%7C%20%28map%20at%3A%20key%29%20size%20%3C%3D%201%20%5D%0D%09%09%29%20do%3A%20%5B%3Akey%7C%20map%20removeKey%3A%20key%20%5D.%0D%09%5Emap"));
smalltalk.bind(smalltalk.MethodReferences, unescape("addMethodOverwrites%3A"), "addMethodOverwrites_", function MethodReferences__addMethodOverwrites_(map){
const self = this; map.associationsDo_((function MethodReferences__(assoc){
return (assoc.value()).do_((function MethodReferences__(each){
self.triggerEvent_with_("found:",each);
return (self.results()).add_(each);
}
));
}
));
return self;
}
, "private", unescape("addMethodOverwrites%3A%20map%0D%09%22%20Private%20-%20Register%20the%20methods%20overwrites%20in%20map.%20%22%0D%0D%09map%20associationsDo%3A%20%5B%3Aassoc%7C%0D%09%09assoc%20value%20do%3A%20%5B%3Aeach%7C%0D%09%09%09self%20triggerEvent%3A%20%23found%3A%20with%3A%20each.%0D%09%09%09self%20results%20add%3A%20each.%0D%09%09%5D%0D%09%5D"));
smalltalk.bind(smalltalk.MethodReferences, unescape("methodOverwrites"), "methodOverwrites", function MethodReferences__methodOverwrites(){
const self = this; self.triggerEvent_("searchStarted");
(smalltalk.Smalltalk.rootClasses()).do_((function MethodReferences__(aClass){
self.addMethodOverwrites_((self.methodOverwritesOf_(aClass)));
return self.addMethodOverwrites_((self.methodOverwritesOf_((aClass.$klass))));
}
));
self.triggerEvent_("searchFinished");
return self.results();
}
, "searching", unescape("methodOverwrites%0D%09%22%20Find%20the%20methods%20that%20are%20implemented/overwritten%20by%20subclasses.%20%22%0D%0D%09self%20triggerEvent%3A%20%23searchStarted.%0D%09Smalltalk%20rootClasses%20do%3A%20%5B%3AaClass%7C%0D%09%09self%20addMethodOverwrites%3A%20%28self%20methodOverwritesOf%3A%20aClass%29.%0D%09%09self%20addMethodOverwrites%3A%20%28self%20methodOverwritesOf%3A%20aClass%20class%29.%0D%09%5D.%0D%09self%20triggerEvent%3A%20%23searchFinished.%0D%09%5Eself%20results"));
smalltalk.bind(smalltalk.MethodReferences, unescape("hasArgumentOverwrites%3Ain%3A"), "hasArgumentOverwrites_in_", function MethodReferences__hasArgumentOverwrites_in_(names,stream){
var args = nil;
const self = this; var $early={name:"stReturn"};
try {
args=(function MethodReferences__($1$){
$1$.upTo_(unescape("%28"));
return $1$.upTo_(unescape("%29"))}
)(stream).asArrayOfSubstringsSeparatedBy_(unescape("%2C"));
args.do_((function MethodReferences__(each){
if ((names.includes_(each)).valueOf()) {$early.result=true; throw ($early)} else {return nil};
}
));
return false;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "private", unescape("hasArgumentOverwrites%3A%20names%20in%3A%20stream%0D%09%22%20Private%20-%20Returns%20true%20if%20stream%20of%20code%20has%20argument%20name%20conflicts.%20%22%0D%0D%09%7C%20args%20%7C%0D%09args%20%3A%3D%20%28stream%20upTo%3A%20%24%28%3B%20upTo%3A%20%24%29%29%20asArrayOfSubstringsSeparatedBy%3A%20%24%2C.%0D%09args%20do%3A%20%5B%3Aeach%7C%0D%09%09%28names%20includes%3A%20each%29%20ifTrue%3A%20%5B%20%5Etrue%20%5D.%0D%09%5D.%0D%09%5Efalse"));
smalltalk.bind(smalltalk.MethodReferences, unescape("hasLocalOverwrites%3Ain%3A"), "hasLocalOverwrites_in_", function MethodReferences__hasLocalOverwrites_in_(names,stream){
var candidate = nil;
const self = this; var $early={name:"stReturn"};
try {
while((stream.atEnd()).not()){candidate=(function MethodReferences__($1$){
$1$.upTo_("var ");
return $1$.upTo_(unescape("%3D"))}
)(stream).trimBlanks();
if ((names.includes_(candidate)).valueOf()) {$early.result=true; throw ($early)}};;
return false;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "private", unescape("hasLocalOverwrites%3A%20names%20in%3A%20stream%0D%09%22%20Private%20-%20Returns%20true%20if%20stream%20of%20code%20has%20local%20name%20conflicts.%20%22%0D%0D%09%7C%20candidate%20%7C%0D%09%5Bstream%20atEnd%5D%20whileFalse%3A%20%5B%0D%09%09candidate%20%3A%3D%20%28stream%20upTo%3A%20%27var%20%27%3B%20upTo%3A%20%24%3D%29%20trimBlanks.%0D%09%09%28names%20includes%3A%20candidate%29%20ifTrue%3A%20%5B%0D%09%09%09%5Etrue%0D%09%09%5D.%0D%09%5D.%0D%09%5Efalse"));
smalltalk.bind(smalltalk.MethodReferences, unescape("addVariableOverwrites%3Ain%3A"), "addVariableOverwrites_in_", function MethodReferences__addVariableOverwrites_in_(names,mth){
var stream = nil;
const self = this; stream=((mth.fn()).toString()).stream();
if (((self.hasArgumentOverwrites_in_(names,stream)).or_((function MethodReferences__(){
return self.hasLocalOverwrites_in_(names,stream);
}
))).valueOf()) {self.triggerEvent_with_("found:",mth);
(self.results()).add_(mth)};
return self;
}
, "private", unescape("addVariableOverwrites%3A%20names%20in%3A%20mth%0D%09%22%20Private%20-%20Register%20the%20methods%20that%20has%20name%20overwrites.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20mth%20fn%20toString%20stream.%0D%09%28%28self%20hasArgumentOverwrites%3A%20names%20in%3A%20stream%29%0D%09or%3A%20%5B%20self%20hasLocalOverwrites%3A%20names%20in%3A%20stream%20%5D%29%0D%09ifTrue%3A%20%5B%0D%09%09self%20triggerEvent%3A%20%23found%3A%20with%3A%20mth.%0D%09%09self%20results%20add%3A%20mth.%0D%09%5D"));
smalltalk.bind(smalltalk.MethodReferences, unescape("variableOverwrites"), "variableOverwrites", function MethodReferences__variableOverwrites(){
const self = this; self.triggerEvent_("searchStarted");
((smalltalk.Smalltalk.current()).classes()).do_((function MethodReferences__(aClass){
var names = nil;
names=aClass.allInstVarNames();
aClass.methodsDo_((function MethodReferences__(mth){
return self.addVariableOverwrites_in_(names,mth);
}
));
names=(aClass.$klass).allInstVarNames();
return (aClass.$klass).methodsDo_((function MethodReferences__(mth){
return self.addVariableOverwrites_in_(names,mth);
}
));
}
));
self.triggerEvent_("searchFinished");
return self.results();
}
, "searching", unescape("variableOverwrites%0D%09%22%20Find%20the%20methods%20that%20has%20potential%20overwrite%20of%20variable%20names.%20%22%0D%0D%09self%20triggerEvent%3A%20%23searchStarted.%0D%09Smalltalk%20current%20classes%20do%3A%20%5B%3AaClass%7C%20%7C%20names%20%7C%0D%09%09names%20%3A%3D%20aClass%20allInstVarNames.%0D%09%09aClass%20methodsDo%3A%20%5B%3Amth%7C%0D%09%09%09self%20addVariableOverwrites%3A%20names%20in%3A%20mth.%0D%09%09%5D.%0D%09%09names%20%3A%3D%20aClass%20class%20allInstVarNames.%0D%09%09aClass%20class%20methodsDo%3A%20%5B%3Amth%7C%0D%09%09%09self%20addVariableOverwrites%3A%20names%20in%3A%20mth.%0D%09%09%5D.%0D%09%5D.%0D%09self%20triggerEvent%3A%20%23searchFinished.%0D%09%5Eself%20results"));
smalltalk.bind(smalltalk.MethodReferences.$klass, unescape("findMessages%3A"), "findMessages_", function MethodReferences_class__findMessages_(what){
const self = this; return (self.$$new()).findMessages_(what);
}
, "testing", unescape("findMessages%3A%20what%0D%09%22%20Find%20messages%20in%20the%20system%20matching%20what.%20%22%0D%0D%09%5Eself%20new%20findMessages%3A%20what"));
smalltalk.bind(smalltalk.MethodReferences, unescape("findMessages%3A"), "findMessages_", function MethodReferences__findMessages_(what){
var keys = nil;
const self = this; if ((what.isString()).valueOf()) {return self.findMessages_(((what.trimBlanks()).asArrayOfSubstrings()))};
self.triggerEvent_("searchStarted");
keys=what.collect_((function MethodReferences__(each){
return each.asString();
}
));
if ((keys.notEmpty()).valueOf()) {var all = nil;
var collect = nil;
all=self.allMethods();
all.do_((function MethodReferences__(mth){
var current = nil;
current=mth.selector();
if (((nil.isNil_(keys.detect_ifNone_((function MethodReferences__(one){
return current.includes_(one);
}
),(function MethodReferences__(){
return nil;
}
)))===false)).valueOf()) {(self.results()).add_(mth);
return self.triggerEvent_with_("found:",mth)} else {return nil};
}
))};
self.triggerEvent_("searchFinished");
return self.results();
}
, "searching", unescape("findMessages%3A%20what%0D%09%22%20Find%20messages%20matching%20what.%20%22%0D%0D%09%7C%20keys%20%7C%0D%09what%20isString%20ifTrue%3A%20%5B%0D%09%09%5Eself%20findMessages%3A%20what%20trimBlanks%20asArrayOfSubstrings%0D%09%5D.%0D%09self%20triggerEvent%3A%20%23searchStarted.%0D%09keys%20%3A%3D%20what%20collect%3A%20%5B%3Aeach%7C%20each%20asString%20%22asLowercase%22%20%5D.%0D%09keys%20notEmpty%20ifTrue%3A%20%5B%20%7C%20all%20collect%20%7C%0D%09%09all%20%3A%3D%20self%20allMethods.%0D%09%09all%20do%3A%20%5B%3Amth%7C%20%7C%20current%20%7C%0D%09%09%09current%20%3A%3D%20mth%20selector%20%22asLowercase%22.%0D%09%09%09%28keys%20detect%3A%20%5B%3Aone%7C%20current%20includes%3A%20one%20%5D%20ifNone%3A%20%5B%5D%29%20notNil%20ifTrue%3A%20%5B%0D%09%09%09%09self%20results%20add%3A%20mth.%0D%09%09%09%09self%20triggerEvent%3A%20%23found%3A%20with%3A%20mth.%0D%09%09%09%5D.%0D%09%09%5D.%0D%09%5D.%0D%09self%20triggerEvent%3A%20%23searchFinished.%0D%09%5Eself%20results"));
smalltalk.addClass("SystemManager", smalltalk.EventManager, [], 'Snapshot');
smalltalk.SystemManager.$classVariableNames=("Current");
smalltalk.bind(smalltalk.SystemManager.$klass, unescape("constructEventsTriggered"), "constructEventsTriggered", function SystemManager_class__constructEventsTriggered(){
const self = this; return (smalltalk.superImplementor(smalltalk.SystemManager.$klass,'constructEventsTriggered').apply(self, []))._comma(["aboutToBind:to:", "methodBound:to:", "aboutToRemove:from:", "methodRemoved:from:", "aboutToChange:to:", "aboutToCreateClass:with:", "classChanged:", "classShapeChanged:", "object:at:notFoundIn:", "log:", "memoryWarning:"]);
}
, "events", unescape("constructEventsTriggered%0D%09%22%20Private%20-%20Return%20the%20events%20managed%20by%20instances%20of%20the%20receiver.%20%22%0D%0D%09%5Esuper%20constructEventsTriggered%20%2C%23%28%0D%09%09%23aboutToBind%3Ato%3A%0D%09%09%23methodBound%3Ato%3A%0D%09%09%23aboutToRemove%3Afrom%3A%0D%09%09%23methodRemoved%3Afrom%3A%0D%09%09%23aboutToChange%3Ato%3A%0D%09%09%23aboutToCreateClass%3Awith%3A%0D%09%09%23classChanged%3A%0D%09%09%23classShapeChanged%3A%0D%09%09%23object%3Aat%3AnotFoundIn%3A%0D%09%09%23log%3A%0D%09%09%23memoryWarning%3A%0D%09%29"));
smalltalk.bind(smalltalk.SystemManager.$klass, unescape("currentOrNil"), "currentOrNil", function SystemManager_class__currentOrNil(){
const self = this; return self.classVariableAt_ifAbsent_("Current",(function SystemManager_class__(){
return nil;
}
));
}
, "singleton", unescape("currentOrNil%0D%09%22%20Return%20the%20current%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20classVariableAt%3A%20%23Current%20ifAbsent%3A%20%5B%20nil%20%5D"));
smalltalk.bind(smalltalk.SystemManager.$klass, unescape("current"), "current", function SystemManager_class__current(){
const self = this; if (((nil.isNil_(smalltalk.SystemManager.classVariableAt_("Current")))).valueOf()) {self.current_((self.$$new()))};
return smalltalk.SystemManager.classVariableAt_("Current");
}
, "singleton", unescape("current%0D%09%22%20Return%20the%20current%20instance%20of%20the%20receiver.%20%22%0D%0D%09Current%20isNil%20ifTrue%3A%20%5B%20self%20current%3A%20self%20new%20%5D.%0D%09%5ECurrent"));
smalltalk.bind(smalltalk.SystemManager.$klass, unescape("current%3A"), "current_", function SystemManager_class__current_(aSystemManager){
const self = this; smalltalk.SystemManager.classVariableAt_put_("Current",aSystemManager);
aSystemManager.install();
return self;
}
, "singleton", unescape("current%3A%20aSystemManager%0D%09%22%20Set%20the%20current%20source%20manager%20of%20the%20system.%20%22%0D%0D%09Current%20%3A%3D%20aSystemManager.%0D%09aSystemManager%20install."));
smalltalk.bind(smalltalk.SystemManager.$klass, unescape("log%3A"), "log_", function SystemManager_class__log_(aString){
const self = this; if (((nil.isNil_(smalltalk.SystemManager.classVariableAt_("Current"))===false)).valueOf()) {smalltalk.SystemManager.classVariableAt_("Current").log_(aString)};
return self;
}
, "log", unescape("log%3A%20aString%0D%09%22%20Log%20aString%20onto%20loggin%20stream.%20%22%0D%0D%09Current%20notNil%20ifTrue%3A%20%5B%20Current%20log%3A%20aString%20%5D"));
smalltalk.bind(smalltalk.SystemManager.$klass, unescape("memoryWarning%3A"), "memoryWarning_", function SystemManager_class__memoryWarning_(anArgument){
const self = this; if (((nil.isNil_(smalltalk.SystemManager.classVariableAt_("Current"))===false)).valueOf()) {smalltalk.SystemManager.classVariableAt_("Current").memoryWarning_(anArgument)};
return self;
}
, "memory", unescape("memoryWarning%3A%20anArgument%0D%09%22%20Trigger%20a%20memory%20warning%20event.%20%22%0D%0D%09Current%20notNil%20ifTrue%3A%20%5B%20Current%20memoryWarning%3A%20anArgument%20%5D"));
smalltalk.bind(smalltalk.SystemManager, unescape("install"), "install", function SystemManager__install(){
const self = this; self;
return self;
}
, "install", unescape("install%0D%09%22%20Private%20-%20Install%20the%20receiver%20as%20the%20source%20manager%20of%20the%20system.%0D%09The%20default%20action%20is%20to%20do%20nothing.%0D%09This%20method%20can%20be%20refined%20by%20subclasses.%0D%09%22"));
smalltalk.bind(smalltalk.SystemManager, unescape("aboutToBind%3Ato%3A"), "aboutToBind_to_", function SystemManager__aboutToBind_to_(aMethod,aClass){
const self = this; return self.triggerEvent_with_with_("aboutToBind:to:",aMethod,aClass);
}
, "tracking-methods", unescape("aboutToBind%3A%20aMethod%20to%3A%20aClass%0D%09%22%20Private%20-%20The%20method%20will%20be%20bound%20to%20aClass.%20%22%0D%0D%09%5Eself%20triggerEvent%3A%20%23aboutToBind%3Ato%3A%20with%3A%20aMethod%20with%3A%20aClass%20"));
smalltalk.bind(smalltalk.SystemManager, unescape("methodBound%3Ato%3A"), "methodBound_to_", function SystemManager__methodBound_to_(aMethod,aClass){
const self = this; return self.triggerEvent_with_with_("methodBound:to:",aMethod,aClass);
}
, "tracking-methods", unescape("methodBound%3A%20aMethod%20to%3A%20aClass%0D%09%22%20Private%20-%20The%20method%20has%20been%20bound%20to%20aClass.%20%22%0D%0D%09%5Eself%20triggerEvent%3A%20%23methodBound%3Ato%3A%20with%3A%20aMethod%20with%3A%20aClass%20"));
smalltalk.bind(smalltalk.SystemManager, unescape("aboutToRemove%3Afrom%3A"), "aboutToRemove_from_", function SystemManager__aboutToRemove_from_(aMethod,aClass){
const self = this; return self.triggerEvent_with_with_("aboutToRemove:from:",aMethod,aClass);
}
, "tracking-methods", unescape("aboutToRemove%3A%20aMethod%20from%3A%20aClass%0D%09%22%20Private%20-%20The%20method%20will%20be%20removed%20from%20aClass.%20%22%0D%0D%09%5Eself%20triggerEvent%3A%20%23aboutToRemove%3Afrom%3A%20with%3A%20aMethod%20with%3A%20aClass%20"));
smalltalk.bind(smalltalk.SystemManager, unescape("methodRemoved%3Afrom%3A"), "methodRemoved_from_", function SystemManager__methodRemoved_from_(aMethod,aClass){
const self = this; return self.triggerEvent_with_with_("methodRemoved:from:",aMethod,aClass);
}
, "tracking-methods", unescape("methodRemoved%3A%20aMethod%20from%3A%20aClass%0D%09%22%20Private%20-%20The%20method%20has%20been%20removed%20from%20aClass.%20%22%0D%0D%09%5Eself%20triggerEvent%3A%20%23methodRemoved%3Afrom%3A%20with%3A%20aMethod%20with%3A%20aClass%20"));
smalltalk.bind(smalltalk.SystemManager, unescape("aboutToChange%3Asuperclass%3AiVarNames%3Acategory%3A"), "aboutToChange_superclass_iVarNames_category_", function SystemManager__aboutToChange_superclass_iVarNames_category_(aClass,superclass,iVarNames,category){
const self = this; return self.triggerEvent_with_with_("aboutToChange:to:",aClass,(smalltalk.Array.with_with_with_(superclass,iVarNames,category)));
}
, "tracking-classes", unescape("aboutToChange%3A%20aClass%20superclass%3A%20superclass%20iVarNames%3A%20iVarNames%20category%3A%20category%0D%09%22%20Private%20-%20aClass%20is%20about%20to%20be%20changed.%20%22%0D%0D%09%5Eself%09triggerEvent%3A%20%23aboutToChange%3Ato%3A%0D%09%09with%3A%20aClass%0D%09%09with%3A%20%28Array%20with%3A%20superclass%20with%3A%20iVarNames%20with%3A%20category%29"));
smalltalk.bind(smalltalk.SystemManager, unescape("aboutToCreateClass%3Asuperclass%3AiVarNames%3Acategory%3A"), "aboutToCreateClass_superclass_iVarNames_category_", function SystemManager__aboutToCreateClass_superclass_iVarNames_category_(globalName,superclass,iVarNames,category){
const self = this; return self.triggerEvent_with_with_("aboutToCreateClass:with:",globalName,(smalltalk.Array.with_with_with_(superclass,iVarNames,category)));
}
, "tracking-classes", unescape("aboutToCreateClass%3A%20globalName%20superclass%3A%20superclass%20iVarNames%3A%20iVarNames%20category%3A%20category%0D%09%22%20Private%20-%20Attemp%20to%20create%20Class%20with%20name%20globalName.%20%22%0D%0D%09%5Eself%09triggerEvent%3A%20%23aboutToCreateClass%3Awith%3A%0D%09%09with%3A%20globalName%0D%09%09with%3A%20%28Array%20with%3A%20superclass%20with%3A%20iVarNames%20with%3A%20category%29"));
smalltalk.bind(smalltalk.SystemManager, unescape("classChanged%3A"), "classChanged_", function SystemManager__classChanged_(aBehavior){
const self = this; return self.triggerEvent_with_("classChanged:",aBehavior);
}
, "tracking-classes", unescape("classChanged%3A%20aBehavior%0D%09%22%20Private%20-%20aBehavior%20has%20been%20changed.%20%22%0D%0D%09%5Eself%20triggerEvent%3A%20%23classChanged%3A%20with%3A%20aBehavior%20"));
smalltalk.bind(smalltalk.SystemManager, unescape("classShapeChanged%3A"), "classShapeChanged_", function SystemManager__classShapeChanged_(aBehavior){
const self = this; return self.triggerEvent_with_ifNotHandled_("classShapeChanged:",aBehavior,(function SystemManager__(){
return aBehavior.recompileAll();
}
));
}
, "tracking-classes", unescape("classShapeChanged%3A%20aBehavior%0D%09%22%20Private%20-%20aBehavior%20has%20changed%20shape.%20%22%0D%0D%09%5Eself%09triggerEvent%3A%20%23classShapeChanged%3A%0D%09%09with%3A%20aBehavior%0D%09%09ifNotHandled%3A%20%5B%20aBehavior%20recompileAll%20%5D"));
smalltalk.bind(smalltalk.SystemManager, unescape("log%3A"), "log_", function SystemManager__log_(aString){
const self = this; return self.triggerEvent_with_("log:",aString);
}
, "log", unescape("log%3A%20aString%0D%09%22%20Private%20-%20Log%20aString%20onto%20loggin%20device.%20%22%0D%0D%09%5Eself%20triggerEvent%3A%20%23log%3A%20with%3A%20aString"));
smalltalk.bind(smalltalk.SystemManager, unescape("memoryWarning%3A"), "memoryWarning_", function SystemManager__memoryWarning_(anArgument){
const self = this; return self.triggerEvent_with_("memoryWarning:",anArgument);
}
, "memory", unescape("memoryWarning%3A%20anArgument%0D%09%22%20Trigger%20a%20memory%20warning%20event.%0D%09The%20execution%20environment%20can%20signal%20memory%20warning/low%20conditions%2C%20we%20trigger%20an%20event%20to%20be%20handled%20at%20application%20level.%0D%09Note%3A%20It%20is%20frequent%20procedure%20to%20clean%20cached%20resources%20that%20can%20be%20reconstructed%20later%2C%20if%20required.%0D%09%22%0D%0D%09%5Eself%20triggerEvent%3A%20%23memoryWarning%3A%20with%3A%20anArgument"));
smalltalk.bind(smalltalk.SystemManager, unescape("object%3Aat%3AnotFoundIn%3A"), "object_at_notFoundIn_", function SystemManager__object_at_notFoundIn_(anObject,indexOrKey,aCollection){
const self = this; return self.triggerEvent_withArguments_ifNotHandled_("object:at:notFoundIn:",(smalltalk.Array.with_with_with_(anObject,indexOrKey,aCollection)),(function SystemManager__(){
return self.print_((((unescape("Object/key%28")._comma(((((nil.isNil_(indexOrKey))).ifTrue_ifFalse_((function SystemManager__(){
return anObject;
}
),(function SystemManager__(){
return indexOrKey;
}
))).toString())))._comma(unescape("%29%20not%20found%20in%20")))._comma((aCollection.printString()))));
}
));
}
, "failures", unescape("object%3A%20anObject%20at%3A%20indexOrKey%20notFoundIn%3A%20aCollection%0D%09%22%20Trigger%20a%20missing%20object%20event.%20%22%0D%0D%09%5Eself%20triggerEvent%3A%20%23object%3Aat%3AnotFoundIn%3A%0D%09%09withArguments%3A%20%28Array%20with%3A%20anObject%20with%3A%20indexOrKey%20with%3A%20aCollection%29%0D%09%09ifNotHandled%3A%20%5B%0D%09%09%09self%20print%3A%20%27Object/key%28%27%0D%09%09%09%09%2C%28indexOrKey%20isNil%20ifTrue%3A%20%5BanObject%5D%20ifFalse%3A%20%5BindexOrKey%5D%29%20toString%0D%09%09%09%09%2C%27%29%20not%20found%20in%20%27%2CaCollection%20printString%0D%09%09%5D"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("initialize"), "initialize", function PoolDictionary__initialize(){
const self = this; smalltalk.superImplementor(smalltalk.PoolDictionary,'initialize').apply(self, []);
self.initializeHash();
return self;
}
, "initialize", unescape("initialize%0D%09%22%20Private%20-%20Initialize%20the%20receiver.%20%22%0D%0D%09super%20initialize.%0D%09self%20initializeHash.%20"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("initializeHash"), "initializeHash", function PoolDictionary__initializeHash(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKPoolDictionary.primInitializeHash(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "initialization", unescape("initializeHash%0D%0D%09%3Cprimitive%3A%20%27primInitializeHash%27%20module%3A%20%27SKPoolDictionary%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("at%3Aput%3A"), "at_put_", function PoolDictionary__at_put_(aKey,value){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKPoolDictionary.primAtPut(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("at%3A%20aKey%20put%3A%20value%0D%09%22%20Set%20the%20value%20at%20aKey%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAtPut%27%20module%3A%20%27SKPoolDictionary%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("removeKey%3AifAbsent%3A"), "removeKey_ifAbsent_", function PoolDictionary__removeKey_ifAbsent_(aKey,aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKPoolDictionary.primRemoveKeyIfAbsent(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "removing", unescape("removeKey%3A%20aKey%20ifAbsent%3A%20aBlock%0D%09%22%20Remove%20the%20binding%20at%20aKey.%20%22%0D%0D%09%3Cprimitive%3A%20%27primRemoveKeyIfAbsent%27%20module%3A%20%27SKPoolDictionary%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("size"), "size", function PoolDictionary__size(){
const self = this; if (((nil.isNil_(self['@size']))).valueOf()) {self['@size']=(self.keys()).size()};
return self['@size'];
}
, "accessing", unescape("size%0D%09%22%20Return%20the%20size%20of%20the%20receiver.%20%22%0D%0D%09size%20isNil%20ifTrue%3A%20%5B%20size%20%3A%3D%20self%20keys%20size%20%5D.%0D%09%5Esize"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("at%3AifAbsent%3A"), "at_ifAbsent_", function PoolDictionary__at_ifAbsent_(aKey,aBlock){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKPoolDictionary.primAtIfAbsent(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("at%3A%20aKey%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20value%20at%20aKey%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%3Cprimitive%3A%27primAtIfAbsent%27%20module%3A%27SKPoolDictionary%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("includesKey%3A"), "includesKey_", function PoolDictionary__includesKey_(aKey){
const self = this; var $early={name:"stReturn"};
try {
self.at_ifAbsent_(aKey,(function PoolDictionary__(){
$early.result=false; throw ($early);
}
));
return true;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "testing", unescape("includesKey%3A%20aKey%0D%09%22%20Return%20true%20if%20the%20receiver%27s%20keys%20include%20aKey.%20%22%0D%0D%09self%20at%3A%20aKey%20ifAbsent%3A%20%5B%20%5Efalse%20%5D.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("keysAndValuesDo%3A"), "keysAndValuesDo_", function PoolDictionary__keysAndValuesDo_(aBlock){
const self = this; var $early={name:"stReturn"};
try {
(self.keys()).do_((function PoolDictionary__(key){
return aBlock.value_value_(key,(self.at_ifAbsent_(key,(function PoolDictionary__(){
$early.result=self.error_("Key not found in dictionary"); throw ($early);
}
))));
}
));
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "enumerating", unescape("keysAndValuesDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20for%20key/value%20pairs%20of%20the%20receiver.%20%22%0D%0D%09self%20keys%20do%3A%20%5B%3Akey%20%7C%20aBlock%20value%3A%20key%20value%3A%20%28self%20at%3A%20key%20ifAbsent%3A%20%5B%5Eself%20error%3A%20%27Key%20not%20found%20in%20dictionary%27%5D%29%20%5D"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("keys"), "keys", function PoolDictionary__keys(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKPoolDictionary.primKeys(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "accessing", unescape("keys%0D%09%22%20Return%20the%20keys%20of%20the%20receiver.%20%22%0D%0D%09%3Cprimitive%3A%27primKeys%27%20module%3A%20%27SKPoolDictionary%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("values"), "values", function PoolDictionary__values(){
const self = this; var $early={name:"stReturn"};
try {
return (self.keys()).collect_((function PoolDictionary__(key){
return self.at_ifAbsent_(key,(function PoolDictionary__(){
$early.result=self.error_("Key not found in dictionary"); throw ($early);
}
));
}
));
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "accessing", unescape("values%0D%09%22%20Return%20the%20values%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20keys%20collect%3A%20%5B%3Akey%7C%20self%20at%3A%20key%20ifAbsent%3A%20%5B%5Eself%20error%3A%20%27Key%20not%20found%20in%20dictionary%27%5D%20%5D"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("asJavascript"), "asJavascript", function PoolDictionary__asJavascript(){
const self = this; return ((("smalltalk."._comma(((self.$klass).name())))._comma(unescape(".fromTuples_%28")))._comma(((self.tuples()).asJavascript())))._comma(unescape("%29"));
}
, "converting", unescape("asJavascript%0D%09%22%20Return%20the%20javascript%20representation%20of%20the%20receiver.%20%22%0D%0D%09%5E%27smalltalk.%27%2Cself%20class%20name%0D%09%09%2C%27.fromTuples_%28%27%20%2Cself%20tuples%20asJavascript%20%2C%27%29%27"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("detect%3AifNone%3A"), "detect_ifNone_", function PoolDictionary__detect_ifNone_(aBlock,anotherBlock){
const self = this; var $early={name:"stReturn"};
try {
self.keysAndValuesDo_((function PoolDictionary__(key,value){
if ((aBlock.value_(value)).valueOf()) {$early.result=value; throw ($early)} else {return nil};
}
));
return anotherBlock.value();
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "enumerating", unescape("detect%3A%20aBlock%20ifNone%3A%20anotherBlock%0D%09%22%20Detect%20the%20value%20who%20matches%20aBlock.%0D%09Return%20the%20result%20of%20evaluating%20aBlock%20if%20no%20value%20matches%20detection%20block.%0D%09%22%0D%0D%09self%20keysAndValuesDo%3A%20%5B%3Akey%20%3Avalue%20%7C%0D%09%09%28aBlock%20value%3A%20value%29%20ifTrue%3A%20%5B%20%5Evalue%20%5D%0D%09%5D.%0D%09%5EanotherBlock%20value"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("do%3A"), "do_", function PoolDictionary__do_(aBlock){
const self = this; self.keysAndValuesDo_((function PoolDictionary__(key,value){
return aBlock.value_(value);
}
));
return self;
}
, "enumerating", unescape("do%3A%20aBlock%0D%09%22%20Evaluates%20aBlock%20for%20all%20values%20in%20the%20receiver.%20%22%0D%0D%09self%20keysAndValuesDo%3A%20%5B%3Akey%20%3Avalue%20%7C%20aBlock%20value%3A%20value%20%5D"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("includes%3A"), "includes_", function PoolDictionary__includes_(anObject){
const self = this; var $early={name:"stReturn"};
try {
self.keysAndValuesDo_((function PoolDictionary__(key,value){
if ((anObject._eq(value)).valueOf()) {$early.result=true; throw ($early)} else {return nil};
}
));
return false;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "testing", unescape("includes%3A%20anObject%0D%09%22%20Return%20true%20if%20the%20receiver%27s%20values%20include%20anObject.%20%22%0D%0D%09self%20keysAndValuesDo%3A%20%5B%3Akey%20%3Avalue%20%7C%0D%09%09anObject%20%3D%20value%20ifTrue%3A%20%5B%20%5Etrue%20%5D.%0D%09%5D.%0D%09%5Efalse"));
smalltalk.bind(smalltalk.PoolDictionary, unescape("keysDo%3A"), "keysDo_", function PoolDictionary__keysDo_(aBlock){
const self = this; (self.keys()).do_(aBlock);
return self;
}
, "enumerating", unescape("keysDo%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20keys%20of%20the%20receiver.%20%22%0D%0D%09self%20keys%20do%3A%20aBlock"));
smalltalk.addClass("RuntimePrimitiveManager", smalltalk.Object, [], 'nil');
smalltalk.RuntimePrimitiveManager.$classVariableNames=("");
smalltalk.addClass("PrimitiveModule", smalltalk.Object, ['primFailValue'], 'Primitive Support');
smalltalk.PrimitiveModule.$classVariableNames=("");
smalltalk.addClass("PrimitiveFailed", smalltalk.Error, [], 'nil');
smalltalk.PrimitiveFailed.$classVariableNames=("");
smalltalk.bind(smalltalk.Object, unescape("primitiveFailed"), "primitiveFailed", function Object__primitiveFailed(){
var stk = nil;
const self = this; return smalltalk.PrimitiveFailed.signal_("Primitve failed");
}
, "", unescape("primitiveFailed%0D%09%7C%20stk%20%7C%0D%09%22Private%20-%20Initiate%20a%20walkback%20with%20label%0D%09%20containing%20primitive%20failed%20message.%22%0D%20%0D%20%09%22%20enable%20this%20if%20you%20need%20the%20primitive%20failed%20stack%22%0D%09%22%0D%09%7B%27stk%20%3D%20%28new%20Error%28%29%29.stack%3B%0D%09console.log%28stk%29%3B%0D%09%27%7D.%0D%09%5EPrimitiveFailed%20signal%3A%20stk%0D%09%22%0D%09%5EPrimitiveFailed%20signal%3A%20%27Primitve%20failed%27"));
smalltalk.bind(smalltalk.Object, unescape("primitiveFailed%3A"), "primitiveFailed_", function Object__primitiveFailed_(aString){
const self = this; return smalltalk.PrimitiveFailed.signal_(aString);
}
, "", unescape("primitiveFailed%3A%20aString%0D%09%0D%09%22%20enable%20this%20if%20you%20need%20the%20primitive%20failed%20stack%22%0D%09%22%0D%09%7B%27stk%20%3D%20%28new%20Error%28%29%29.stack%3B%0D%09console.log%28aString%29%3B%0D%09console.log%28stk%29%3B%0D%09%27%7D.%0D%09%22%0D%09%5EPrimitiveFailed%20signal%3A%20aString"));
smalltalk.bind(smalltalk.RuntimePrimitiveManager.$klass, unescape("setPlatformName%3A"), "setPlatformName_", function RuntimePrimitiveManager_class__setPlatformName_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.RuntimePrimitiveManager.primSetPlatformName(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self;
return self;
}
, "registration", unescape("setPlatformName%3A%20aString%0D%0D%09%3Cprimitive%3A%20%27primSetPlatformName%27%20module%3A%20%27RuntimePrimitiveManager%27%3E"));
smalltalk.bind(smalltalk.RuntimePrimitiveManager.$klass, unescape("registerModule%3A"), "registerModule_", function RuntimePrimitiveManager_class__registerModule_(aPrimitiveModule){
const self = this; self.registerModule_named_with_(aPrimitiveModule,(aPrimitiveModule.moduleName()),(aPrimitiveModule.primitiveMap()));
return self;
}
, "registration", unescape("registerModule%3A%20aPrimitiveModule%0D%0D%09self%0D%09%09registerModule%3A%20aPrimitiveModule%0D%09%09named%3A%20aPrimitiveModule%20moduleName%0D%09%09with%3A%20aPrimitiveModule%20primitiveMap"));
smalltalk.bind(smalltalk.RuntimePrimitiveManager.$klass, unescape("newPrimitiveSpec"), "newPrimitiveSpec", function RuntimePrimitiveManager_class__newPrimitiveSpec(){
var $$primitiveResult = smalltalk.primitiveManager.modules.RuntimePrimitiveManager.primNewPrimitiveSpec(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self;
return self;
}
, "registration", unescape("newPrimitiveSpec%0D%0D%09%3Cprimitive%3A%20%27primNewPrimitiveSpec%27%20module%3A%20%27RuntimePrimitiveManager%27%3E"));
smalltalk.bind(smalltalk.RuntimePrimitiveManager.$klass, unescape("registerSpec%3Anamed%3A"), "registerSpec_named_", function RuntimePrimitiveManager_class__registerSpec_named_(aSpec,aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.RuntimePrimitiveManager.primRegisterSpec(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self;
return self;
}
, "registration", unescape("registerSpec%3A%20aSpec%0Dnamed%3A%20aString%0D%0D%09%3Cprimitive%3A%20%27primRegisterSpec%27%20module%3A%20%27RuntimePrimitiveManager%27%3E"));
smalltalk.bind(smalltalk.RuntimePrimitiveManager.$klass, unescape("registerModule%3Anamed%3Awith%3A"), "registerModule_named_with_", function RuntimePrimitiveManager_class__registerModule_named_with_(aPrimitiveModule,aString,aDictionary){
var $$primitiveResult = smalltalk.primitiveManager.modules.RuntimePrimitiveManager.primRegisterSmalltalkModule(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self;
return self;
}
, "registration", unescape("registerModule%3A%20aPrimitiveModule%0Dnamed%3A%20aString%0Dwith%3A%20aDictionary%0D%0D%09%3Cprimitive%3A%20%27primRegisterSmalltalkModule%27%20module%3A%20%27RuntimePrimitiveManager%27%3E"));
smalltalk.bind(smalltalk.RuntimePrimitiveManager.$klass, unescape("deregisterModule%3A"), "deregisterModule_", function RuntimePrimitiveManager_class__deregisterModule_(aModule){
var $$primitiveResult = smalltalk.primitiveManager.modules.RuntimePrimitiveManager.primDeregisterSmalltalkModule(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self;
return self;
}
, "registration", unescape("deregisterModule%3A%20aModule%0D%0D%09%3Cprimitive%3A%20%27primDeregisterSmalltalkModule%27%20module%3A%20%27RuntimePrimitiveManager%27%3E"));
smalltalk.bind(smalltalk.PrimitiveModule, unescape("primitiveMap"), "primitiveMap", function PrimitiveModule__primitiveMap(){
const self = this; return smalltalk.Dictionary.$$new();
}
, "accessing", unescape("primitiveMap%0D%09%22This%20method%20should%20return%20a%20mapping%20between%20the%20primitive%20name%0D%09and%20the%20selector%20that%20should%20be%20performed.%0D%09A%20Smalltalk%20primitive%20should%20take%20two%20arguments.%0D%091.%20Primitive%20receiver.%0D%092.%20Array%20of%20arguments%20to%20the%20primitive%20method.%22%0D%0D%09%5EDictionary%20new"));
smalltalk.bind(smalltalk.PrimitiveModule, unescape("primFailValue"), "primFailValue", function PrimitiveModule__primFailValue(){
const self = this; return (function(){var $1$; $1$ = self['@primFailValue']; if (nil.isNil_($1$)) { return self['@primFailValue']=smalltalk.Object.$$new() } else { return $1$; }})();
}
, "accessing", unescape("primFailValue%0D%0D%09%5EprimFailValue%20ifNil%3A%20%5BprimFailValue%20%3A%3D%20Object%20new%5D"));
smalltalk.bind(smalltalk.PrimitiveModule, unescape("moduleName"), "moduleName", function PrimitiveModule__moduleName(){
const self = this; return (self.$klass).name();
}
, "accessing", unescape("moduleName%0D%09%5Eself%20class%20name"));
smalltalk.bind(smalltalk.PrimitiveModule, unescape("register"), "register", function PrimitiveModule__register(){
const self = this; smalltalk.RuntimePrimitiveManager.registerModule_(self);
return self;
}
, "initialize-release", unescape("register%0D%0D%09RuntimePrimitiveManager%20registerModule%3A%20self."));
smalltalk.bind(smalltalk.PrimitiveModule, unescape("deregister"), "deregister", function PrimitiveModule__deregister(){
const self = this; smalltalk.RuntimePrimitiveManager.deregisterModule_(self);
return self;
}
, "initialize-release", unescape("deregister%0D%0D%09RuntimePrimitiveManager%20deregisterModule%3A%20self"));
smalltalk.bind(smalltalk.PrimitiveModule, unescape("primitiveFailed"), "primitiveFailed", function PrimitiveModule__primitiveFailed(){
const self = this; return self.primFailValue();
}
, "error handling", unescape("primitiveFailed%0D%0D%09%5Eself%20primFailValue"));
smalltalk.bind(smalltalk.PrimitiveModule, unescape("primitiveFailed%3A"), "primitiveFailed_", function PrimitiveModule__primitiveFailed_(message){
const self = this; return self.primFailValue();
}
, "error handling", unescape("primitiveFailed%3A%20message%0D%0D%09%5Eself%20primFailValue"));
smalltalk.bind(smalltalk.String, unescape("outputToFile%3A"), "outputToFile_", function String__outputToFile_(fileName){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKTools.primWriteToFile(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "Snapshot-io", unescape("outputToFile%3A%20fileName%0D%09%22%20Save%20the%20receiver%27s%20contents%20onto%20a%20file%20at%20fileName.%20%22%0D%0D%20%09%3Cprimitive%3A%20%27primWriteToFile%27%20module%3A%20%27SKTools%27%3E%0D%20%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.String, unescape("appendToFile%3A"), "appendToFile_", function String__appendToFile_(fileName){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKTools.primAppendToFile(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "Snapshot-io", unescape("appendToFile%3A%20fileName%0D%09%22%20Append%20the%20receiver%27s%20contents%20onto%20a%20file%20at%20fileName.%20%22%0D%0D%20%09%3Cprimitive%3A%20%27primAppendToFile%27%20module%3A%20%27SKTools%27%3E%0D%20%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.Object, unescape("isFile%3AolderThan%3A"), "isFile_olderThan_", function Object__isFile_olderThan_(fileName,referenceFileName){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKTools.primFileOlderThan(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return true;
}
, "Builders-emmiting", unescape("isFile%3A%20fileName%20olderThan%3A%20referenceFileName%0D%09%22Return%20true%20if%20the%20file%20at%20pathName%20is%20older%20than%20file%20at%20referenceFileName.%22%0D%20%09%3Cprimitive%3A%20%27primFileOlderThan%27%20module%3A%20%27SKTools%27%3E%0D%20%09%5Etrue"));
smalltalk.bind(smalltalk.Object, unescape("fileContents%3A"), "fileContents_", function Object__fileContents_(fileName){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKTools.primFileContents(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return false;
}
, "Builders-emmiting", unescape("fileContents%3A%20fileName%0D%0D%20%09%3Cprimitive%3A%20%27primFileContents%27%20module%3A%20%27SKTools%27%3E%0D%20%09%5Efalse"));
smalltalk.bind(smalltalk.Object, unescape("emmit%3AstartingWith%3A"), "emmit_startingWith_", function Object__emmit_startingWith_(fileName,initial){
var output = nil;
var cr = nil;
var jsFileName = nil;
const self = this; var $early={name:"stReturn"};
try {
jsFileName=fileName._comma(".js");
if ((self.isFile_olderThan_(fileName,jsFileName)).valueOf()) {self.fileInJS_(jsFileName);
return self.fileContents_(jsFileName)};
output=initial;
cr=unescape("%0D");
self.print_(((unescape("//%20emmit%28%22")._comma(fileName))._comma(unescape("%22%29"))));
(function Object__(){
self.printingWith_do_((function Object__(what){
return output=((nil.isNil_(output))).ifTrue_ifFalse_((function Object__(){
return what;
}
),(function Object__(){
return (output._comma(cr))._comma(what);
}
));
}
),(function Object__(){
return self.fileIn_(fileName);
}
));
return output.outputToFile_(jsFileName);
}
).on_do_(smalltalk.Error,(function Object__(ex){
(((output.asString())._comma(cr))._comma((ex.toString()))).outputToFile_((fileName._comma(".error.txt")));
self.print_((ex.toString()));
$early.result=ex.toString(); throw ($early);
}
));
return output;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "Builders-emmiting", unescape("emmit%3A%20fileName%20startingWith%3A%20initial%0D%09%22%20FileIn%20the%20contents%20of%20file%20at%20fileName%20redirecting%20output%28emmited%20code%29%20to%20a%20.js%20file.%20%22%0D%0D%09%7C%20output%20cr%20jsFileName%20%7C%0D%09jsFileName%20%3A%3D%20fileName%2C%27.js%27.%0D%09%28self%20isFile%3A%20fileName%20olderThan%3A%20jsFileName%29%20ifTrue%3A%20%5B%0D%09%09self%20fileInJS%3A%20jsFileName.%0D%09%09%5Eself%20fileContents%3A%20jsFileName%0D%09%5D.%0D%09output%20%3A%3D%20initial.%0D%09cr%20%3A%3D%20%27%0D%27.%0D%09self%20print%3A%20%27//%20emmit%28%22%27%2CfileName%2C%27%22%29%27.%0D%09%5Bself%20printingWith%3A%20%5B%3Awhat%7C%0D%09%09output%20%3A%3D%20output%20isNil%0D%09%09%09ifTrue%3A%20%5Bwhat%5D%0D%09%09%09ifFalse%3A%20%5B%20output%2C%20cr%20%2Cwhat%5D%0D%09%09%5D%20do%3A%20%5Bself%20fileIn%3A%20fileName%5D.%0D%09output%20outputToFile%3A%20jsFileName.%0D%09%5D%20on%3A%20Error%20do%3A%20%5B%3Aex%7C%0D%09%09%28output%20asString%20%2Ccr%20%2Cex%20toString%29%0D%09%09%09outputToFile%3A%20fileName%2C%27.error.txt%27.%0D%09%09%09self%20print%3A%20ex%20toString.%0D%09%09%09%5Eex%20toString%0D%09%5D.%0D%09%5Eoutput"));
smalltalk.bind(smalltalk.Object, unescape("emmit%3A"), "emmit_", function Object__emmit_(fileName){
const self = this; if ((fileName.isString()).not()) {return (fileName.asArray()).emmit()};
return self.emmit_startingWith_(fileName,nil);
}
, "Builders-emmiting", unescape("emmit%3A%20fileName%0D%09%22%20FileIn%20the%20contents%20of%20file%20at%20fileName%20redirecting%20output%28emmited%20code%29%20to%20a%20.js%20file.%20%22%0D%0D%09fileName%20isString%20ifFalse%3A%20%5B%20%5EfileName%20asArray%20emmit%20%5D.%0D%09%5Eself%20emmit%3A%20fileName%20startingWith%3A%20nil"));
smalltalk.bind(smalltalk.Collection, unescape("emmit"), "emmit", function Collection__emmit(){
const self = this; return self.inject_into_("",(function Collection__(total,each){
return total._comma((self.emmit_(each)));
}
));
}
, "Builders-emmiting", unescape("emmit%0D%09%22%20Emmit%28fileIn%20%26%20save%20generated%20code%20of%29%20the%20fileNames%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20inject%3A%20%27%27%20into%3A%20%5B%3Atotal%20%3Aeach%7C%20total%20%2C%28self%20emmit%3A%20each%29%20%5D"));
smalltalk.bind(smalltalk.Collection, unescape("emmitSt"), "emmitSt", function Collection__emmitSt(){
const self = this; return (self.collect_((function Collection__(module){
return module._comma(".st");
}
))).emmit();
}
, "Builders-emmiting", unescape("emmitSt%0D%09%22%20Emmit%20the%20code%20of%20modules%20%28.st%20files%29%20in%20the%20receiver.%20%22%0D%0D%09%5E%28self%20collect%3A%20%5B%3Amodule%7C%20module%20%2C%27.st%27%20%5D%29%20emmit"));
smalltalk.bind(smalltalk.Stream, unescape("nextChunk"), "nextChunk", function Stream__nextChunk(){
var result = nil;
const self = this; result=self.upTo_(unescape("%21"));
while(((self.peek())._eq(unescape("%21"))).valueOf()){self.next();
result=(result._comma(unescape("%21")))._comma((self.upTo_(unescape("%21"))))};;
return result.trimFirst_((function Stream__(c){
return (c.asciiValue())._lt_eq((32));
}
));
}
, "Tools-fileIn", unescape("nextChunk%0D%09%22%20FileIn%20-%20Return%20the%20next%20chunk%20read%20from%20the%20receiver.%0D%09Trailing%20non-printing%20characters%20are%20skipped.%20%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20upTo%3A%20%24%21.%0D%09%5B%20self%20peek%20%3D%20%24%21%20%5D%20whileTrue%3A%20%5B%0D%09%09self%20next.%0D%09%09result%20%3A%3D%20result%2C%20%27%21%27%2C%20%28self%20upTo%3A%20%24%21%29%0D%09%5D.%0D%09%5Eresult%20trimFirst%3A%20%5B%3Ac%7C%20c%20asciiValue%20%3C%3D%2032%20%5D"));
smalltalk.bind(smalltalk.Stream, unescape("fileInto%3A"), "fileInto_", function Stream__fileInto_(aReceiver){
var scanner = nil;
const self = this; while((self.atEnd()).not()){if (((nil.isNil_(scanner))).valueOf()) {scanner=aReceiver};
scanner=scanner.scanFrom_(self)};;
return scanner;
}
, "Tools-fileIn", unescape("fileInto%3A%20aReceiver%0D%09%22%20FileIn%20-%20FileIn%20the%20receiver%27s%20contents%20%28in%20chunk%20format%29%20using%20aReceiver%20as%20default%20scanner.%20%22%0D%0D%09%7C%20scanner%20%7C%0D%09%5Bself%20atEnd%5D%20whileFalse%3A%20%5B%0D%09%09scanner%20isNil%20ifTrue%3A%20%5B%20scanner%20%3A%3D%20aReceiver%20%5D.%0D%09%09scanner%20%3A%3D%20scanner%20scanFrom%3A%20self%0D%09%5D.%0D%09%5Escanner"));
smalltalk.bind(smalltalk.Stream, unescape("fileIn"), "fileIn", function Stream__fileIn(){
const self = this; return self.fileInto_(nil);
}
, "Tools-fileIn", unescape("fileIn%0D%09%22%20FileIn%20-%20FileIn%20the%20receiver%27s%20contents%20%28in%20chunk%20format%29.%20%22%0D%0D%09%5Eself%20fileInto%3A%20nil"));
smalltalk.bind(smalltalk.Stream, unescape("nextChunkPut%3A"), "nextChunkPut_", function Stream__nextChunkPut_(aString){
var eoc = nil;
var parts = nil;
const self = this; eoc=unescape("%21");
if ((((nil.isNil_(aString)===false)).and_((function Stream__(){
return aString.notEmpty();
}
))).valueOf()) {(aString.asArrayOfSubstringsSeparatedBy_(eoc)).do_separatedBy_((function Stream__(each){
return self.nextPutAll_(each);
}
),(function Stream__(){
return self.nextPutAll_((eoc._comma(eoc)));
}
))} else {self.nextPut_(" ")};
self.nextPut_(eoc);
return aString;
}
, "Tools-fileOut", unescape("nextChunkPut%3A%20aString%0D%09%22%20Output%20aString%20in%20chunk%20format.%20%22%0D%0D%09%7C%20eoc%20parts%20%7C%0D%09eoc%20%3A%3D%20%24%21.%0D%09%28aString%20notNil%20and%3A%20%5BaString%20notEmpty%5D%29%20ifTrue%3A%20%5B%0D%09%09%28aString%20asArrayOfSubstringsSeparatedBy%3A%20eoc%29%0D%09%09%09do%3A%20%5B%3Aeach%7C%20self%20nextPutAll%3A%20each%20%5D%0D%09%09%09separatedBy%3A%20%5B%20self%20nextPutAll%3A%20eoc%2Ceoc%20%5D.%0D%09%5D%20ifFalse%3A%20%5B%20self%20nextPut%3A%20%24%20%5D.%0D%09self%20nextPut%3A%20eoc.%0D%09%5EaString"));
smalltalk.bind(smalltalk.Object, unescape("scanFrom%3A"), "scanFrom_", function Object__scanFrom_(aStream){
var chunk = nil;
const self = this; chunk=aStream.nextChunk();
if ((chunk.isEmpty()).valueOf()) {return nil};
return chunk.evaluateIn_(self);
}
, "Tools-fileIn", unescape("scanFrom%3A%20aStream%0D%09%22%20FileIn%20-%20Return%20the%20result%20of%20evaluating%20the%20next%20chunk%20of%20data%20from%20aStream.%0D%09The%20method%20can%20be%20refined%20by%20chunk%20readers%20to%20support%20custom%20fileIn%20features.%0D%09Must%20return%20the%20next%20reader%20to%20use%20for%20reading%20remaining%20contents%20from%20aStream.%0D%09%22%0D%0D%09%7C%20chunk%20%7C%0D%09chunk%20%3A%3D%20aStream%20nextChunk.%0D%09chunk%20isEmpty%20ifTrue%3A%20%5B%20%5Enil%20%5D.%0D%09%5Echunk%20evaluateIn%3A%20self"));
smalltalk.addClass("FileInReader", smalltalk.Object, [], 'nil');
smalltalk.FileInReader.$classVariableNames=("");
smalltalk.bind(smalltalk.FileInReader, unescape("scanFrom%3A"), "scanFrom_", function FileInReader__scanFrom_(aStream){
const self = this; return self.subclassResponsibility_("scanFrom:");
}
, "fileIn", unescape("scanFrom%3A%20aStream%0D%09%22%20FileIn%20-%20Return%20the%20result%20of%20evaluating%20the%20next%20chunk%20of%20data%20from%20aStream.%0D%09The%20method%20must%20be%20implemented%20by%20chunk%20readers%20to%20support%20custom%20fileIn%20features.%0D%09%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23scanFrom%3A"));
smalltalk.addClass("ChunkReader", smalltalk.FileInReader, ['actionBlock', 'terminationBlock'], 'Tools-FileIn');
smalltalk.ChunkReader.$classVariableNames=("");
smalltalk.bind(smalltalk.ChunkReader.$klass, unescape("doing%3Auntil%3A"), "doing_until_", function ChunkReader_class__doing_until_(aBlock,terminationBlock){
const self = this; return (function ChunkReader_class__($1$){
$1$.actionBlock_(aBlock);
$1$.terminationBlock_(terminationBlock);
return $1$.yourself()}
)(self.$$new());
}
, "instantiation", unescape("doing%3A%20aBlock%20until%3A%20terminationBlock%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%0D%09%09actionBlock%3A%20aBlock%3B%0D%09%09terminationBlock%3A%20terminationBlock%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.ChunkReader.$klass, unescape("doing%3A"), "doing_", function ChunkReader_class__doing_(aBlock){
const self = this; return self.doing_until_(aBlock,(function ChunkReader_class__(){
return true;
}
));
}
, "instantiation", unescape("doing%3A%20aBlock%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20doing%3A%20aBlock%20until%3A%20%5B%20true%20%5D"));
smalltalk.bind(smalltalk.ChunkReader.$klass, unescape("until%3A"), "until_", function ChunkReader_class__until_(terminationBlock){
const self = this; return self.doing_until_(nil,terminationBlock);
}
, "instantiation", unescape("until%3A%20terminationBlock%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20doing%3A%20nil%20until%3A%20terminationBlock"));
smalltalk.bind(smalltalk.ChunkReader.$klass, unescape("ignore"), "ignore", function ChunkReader_class__ignore(){
const self = this; return self.$$new();
}
, "instantiation", unescape("ignore%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%0D%09The%20returned%20reader%20will%20ignore/absorb%20next%20chunk.%0D%09%22%0D%0D%09%5Eself%20new"));
smalltalk.bind(smalltalk.ChunkReader.$klass, unescape("javascriptChunk"), "javascriptChunk", function ChunkReader_class__javascriptChunk(){
const self = this; return self.doing_((function ChunkReader_class__(aStream){
return (smalltalk.Smalltalk.current()).eval_((aStream.nextChunk()));
}
));
}
, "instantiation", unescape("javascriptChunk%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%0D%09The%20returned%20reader%20will%20evaluate%20next%20chunk%20as%20javascript%20code%20%28in%20global%20context%29.%0D%09%22%0D%0D%09%5Eself%20doing%3A%20%5B%3AaStream%7C%20Smalltalk%20current%20eval%3A%20aStream%20nextChunk%20%5D"));
smalltalk.bind(smalltalk.ChunkReader.$klass, unescape("javascript"), "javascript", function ChunkReader_class__javascript(){
const self = this; return self.doing_((function ChunkReader_class__(aStream){
return (smalltalk.Smalltalk.current()).eval_((aStream.upToEnd()));
}
));
}
, "instantiation", unescape("javascript%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%0D%09The%20returned%20reader%20will%20evaluate%20following%20contents%20as%20javascript%20code%20%28in%20global%20context%29.%0D%09The%20stream%20will%20be%20consumed%20up%20to%20end.%0D%09%22%0D%0D%09%5Eself%20doing%3A%20%5B%3AaStream%7C%20Smalltalk%20current%20eval%3A%20aStream%20upToEnd%20%5D"));
smalltalk.bind(smalltalk.ChunkReader, unescape("actionBlock"), "actionBlock", function ChunkReader__actionBlock(){
const self = this; return self['@actionBlock'];
}
, "accessing", unescape("actionBlock%0D%09%22%20Return%20the%20actionBlock%20of%20the%20receiver.%20%22%0D%0D%09%5EactionBlock"));
smalltalk.bind(smalltalk.ChunkReader, unescape("actionBlock%3A"), "actionBlock_", function ChunkReader__actionBlock_(aBlock){
const self = this; self['@actionBlock']=aBlock;
return self;
}
, "accessing", unescape("actionBlock%3A%20aBlock%0D%09%22%20Set%20the%20actionBlock%20of%20the%20receiver.%20%22%0D%0D%09actionBlock%20%3A%3D%20aBlock"));
smalltalk.bind(smalltalk.ChunkReader, unescape("terminationBlock"), "terminationBlock", function ChunkReader__terminationBlock(){
const self = this; return self['@terminationBlock'];
}
, "accessing", unescape("terminationBlock%0D%09%22%20Return%20the%20terminationBlock%20of%20the%20receiver.%20%22%0D%0D%09%5EterminationBlock"));
smalltalk.bind(smalltalk.ChunkReader, unescape("terminationBlock%3A"), "terminationBlock_", function ChunkReader__terminationBlock_(aBlock){
const self = this; self['@terminationBlock']=aBlock;
return self;
}
, "accessing", unescape("terminationBlock%3A%20aBlock%0D%09%22%20Set%20the%20terminationBlock%20of%20the%20receiver.%20%22%0D%0D%09terminationBlock%20%3A%3D%20aBlock"));
smalltalk.bind(smalltalk.ChunkReader, unescape("scanFrom%3A"), "scanFrom_", function ChunkReader__scanFrom_(aStream){
var chunk = nil;
const self = this; if (((nil.isNil_(self.actionBlock()))).valueOf()) {chunk=aStream.nextChunk();
if ((chunk.isEmpty()).valueOf()) {return nil}} else {(self.actionBlock()).value_(aStream)};
if ((((nil.isNil_(self.terminationBlock()))).or_((function ChunkReader__(){
return (nil.is_eqeq_(true,(self.terminationBlock()).value()));
}
))).valueOf()) {return nil};
return self;
}
, "fileIn", unescape("scanFrom%3A%20aStream%0D%09%22%20Scan%20the%20next%20chunk%20of%20data%20from%20aStream.%20%22%0D%0D%09%7C%20chunk%20%7C%0D%09self%20actionBlock%20isNil%20ifTrue%3A%20%5B%0D%09%09chunk%20%3A%3D%20aStream%20nextChunk.%0D%09%09chunk%20isEmpty%20ifTrue%3A%20%5B%20%5Enil%20%5D.%0D%09%5D%20ifFalse%3A%20%5B%20self%20actionBlock%20value%3A%20aStream%20%5D.%0D%09%28self%20terminationBlock%20isNil%0D%09%09or%3A%20%5B%20true%20%3D%3D%20self%20terminationBlock%20value%20%5D%29%0D%09%09ifTrue%3A%20%5B%20%5Enil%20%5D.%0D%09%5Eself"));
smalltalk.bind(smalltalk.Object, unescape("javascriptCodeFollows"), "javascriptCodeFollows", function Object__javascriptCodeFollows(){
const self = this; return smalltalk.ChunkReader.javascript();
}
, "Tools-fileIn", unescape("javascriptCodeFollows%0D%09%22%20FileIn%20-%20FileIn%20javascript%20code%20on%20current%20stream.%0D%09Consume%20stream%20contents%20upto%20end%20of%20stream%20evaluating%20the%20contents%20as%20javascript%20code.%0D%09%22%0D%0D%09%5EChunkReader%20javascript"));
smalltalk.addClass("ClassCategoryReader", smalltalk.FileInReader, ['class', 'category'], 'Tools-FileIn');
smalltalk.ClassCategoryReader.$classVariableNames=("");
smalltalk.bind(smalltalk.ClassCategoryReader, unescape("class%3Acategory%3A"), "class_category_", function ClassCategoryReader__class_category_(aClass,aString){
const self = this; self['@class']=aClass;
self['@category']=aString;
return self;
}
, "accessing", unescape("class%3A%20aClass%20category%3A%20aString%0D%09%22%20Private%20-%20Set%20the%20class%20and%20category%20of%20the%20receiver.%20%22%0D%0D%09class%20%3A%3D%20aClass.%0D%09category%20%3A%3D%20aString"));
smalltalk.bind(smalltalk.ClassCategoryReader, unescape("scanFrom%3A"), "scanFrom_", function ClassCategoryReader__scanFrom_(aStream){
var chunk = nil;
const self = this; chunk=aStream.nextChunk();
return (function ClassCategoryReader__(){
if ((chunk.isEmpty()).not()) {return self.compileMethod_(chunk)} else {return nil};
}
).logEvaluate_(chunk);
}
, "fileIn", unescape("scanFrom%3A%20aStream%0D%09%22%20Scan%20the%20next%20chunk%20of%20data%20from%20aStream.%20%22%0D%0D%09%7C%20chunk%20%7C%0D%09chunk%20%3A%3D%20aStream%20nextChunk.%0D%09%5E%5B%20chunk%20isEmpty%20ifFalse%3A%20%5B%20self%20compileMethod%3A%20chunk%20%5D%0D%09%5D%20logEvaluate%3A%20chunk"));
smalltalk.bind(smalltalk.ClassCategoryReader, unescape("compileMethod%3A"), "compileMethod_", function ClassCategoryReader__compileMethod_(aString){
var method = nil;
const self = this; method=(self['@class'].compiler()).load_forClass_(aString,self['@class']);
method.category_(self['@category']);
self['@class'].addCompiledMethod_(method);
return self;
}
, "private", unescape("compileMethod%3A%20aString%0D%09%22%20Compile%20aString%20as%20a%20method%20source.%20%22%0D%0D%09%7C%20method%20%7C%0D%09method%20%3A%3D%20class%20compiler%20load%3A%20aString%20forClass%3A%20class.%0D%09method%20category%3A%20category.%0D%09class%20addCompiledMethod%3A%20method"));
smalltalk.bind(smalltalk.Behavior, unescape("methodsFor%3A"), "methodsFor_", function Behavior__methodsFor_(aString){
const self = this; return (smalltalk.ClassCategoryReader.$$new()).class_category_(self,aString);
}
, "Tools-fileIn", unescape("methodsFor%3A%20aString%0D%09%22%20FileIn%20-%20Return%20a%20chunk%20reader%20to%20fileIn%20methods%20onto%20the%20receiver.%20%22%0D%0D%09%5EClassCategoryReader%20new%20class%3A%20self%20category%3A%20aString"));
smalltalk.bind(smalltalk.Behavior, unescape("methodsFor%3Astamp%3A"), "methodsFor_stamp_", function Behavior__methodsFor_stamp_(aString,aTimeStampString){
const self = this; return (smalltalk.ClassCategoryReader.$$new()).class_category_(self,aString);
}
, "Tools-fileIn", unescape("methodsFor%3A%20aString%0Dstamp%3A%20aTimeStampString%0D%09%22%20FileIn%20-%20Return%20a%20chunk%20reader%20to%20fileIn%20methods%20onto%20the%20receiver.%20%22%0D%0D%09%5EClassCategoryReader%20new%20class%3A%20self%20category%3A%20aString"));
smalltalk.bind(smalltalk.Behavior, unescape("methods"), "methods", function Behavior__methods(){
const self = this; return self.methodsFor_("unclassified");
}
, "Tools-fileIn", unescape("methods%0D%09%22%20FileIn%20-%20Return%20a%20chunk%20reader%20to%20fileIn%20methods%20onto%20the%20receiver.%20%22%0D%0D%09%5Eself%20methodsFor%3A%20%23unclassified%20"));
smalltalk.addClass("ClassCommentReader", smalltalk.FileInReader, ['class'], 'Tools-FileIn');
smalltalk.ClassCommentReader.$classVariableNames=("");
smalltalk.bind(smalltalk.ClassCommentReader, unescape("class%3A"), "class_", function ClassCommentReader__class_(aClass){
const self = this; self['@class']=aClass;
return self;
}
, "accessing", unescape("class%3A%20aClass%0D%09%22%20Set%20the%20destination%20class%20of%20the%20receiver.%20%22%0D%0D%09class%20%3A%3D%20aClass"));
smalltalk.bind(smalltalk.ClassCommentReader, unescape("scanFrom%3A"), "scanFrom_", function ClassCommentReader__scanFrom_(aStream){
const self = this; self.comment_((aStream.nextChunk()));
return nil;
}
, "fileIn", unescape("scanFrom%3A%20aStream%0D%09%22%20FileIn%20-%20Parse%20next%20chunk%20in%20aStream%20as%20a%20comment%20for%20target%20class.%20%22%0D%0D%09self%20comment%3A%20aStream%20nextChunk.%0D%09%5Enil"));
smalltalk.bind(smalltalk.ClassCommentReader, unescape("comment%3A"), "comment_", function ClassCommentReader__comment_(aString){
const self = this; self['@class'].comment_(((aString.isEmpty()).ifFalse_((function ClassCommentReader__(){
return aString;
}
))));
return self;
}
, "private", unescape("comment%3A%20aString%0D%09%22%20Set%20the%20comment%20of%20target%20class.%20%22%0D%0D%09class%20comment%3A%20%28aString%20isEmpty%20ifFalse%3A%20%5B%20aString%20%5D%29"));
smalltalk.bind(smalltalk.Behavior, unescape("commentStamp"), "commentStamp", function Behavior__commentStamp(){
const self = this; return (smalltalk.ClassCommentReader.$$new()).class_(self);
}
, "Tools-fileIn", unescape("commentStamp%0D%09%22%20Return%20a%20comment%20reader%20for%20the%20receiver.%20%22%0D%0D%09%5EClassCommentReader%20new%20class%3A%20self"));
smalltalk.addClass("SkipFileInReader", smalltalk.FileInReader, ['limit'], 'Tools-FileIn');
smalltalk.SkipFileInReader.$classVariableNames=("");
smalltalk.bind(smalltalk.SkipFileInReader.$klass, unescape("upTo%3A"), "upTo_", function SkipFileInReader_class__upTo_(aToken){
const self = this; return (self.$$new()).limit_(aToken);
}
, "instantiation", unescape("upTo%3A%20aToken%0D%09%22%20Return%20an%20instance%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20new%20limit%3A%20aToken"));
smalltalk.bind(smalltalk.SkipFileInReader, unescape("scanFrom%3A"), "scanFrom_", function SkipFileInReader__scanFrom_(aStream){
const self = this; if (((nil.isNil_(self['@limit']))).valueOf()) {aStream.setToEnd()} else {aStream.skipTo_(self['@limit'])};
return nil;
}
, "fileIn", unescape("scanFrom%3A%20aStream%0D%09%22%20Consume/Ignore%20contents%20in%20aStream.%20%22%0D%0D%09limit%20isNil%0D%09%09ifTrue%3A%20%5B%20aStream%20setToEnd%20%5D%0D%09%09ifFalse%3A%20%5B%20aStream%20skipTo%3A%20limit%20%5D.%0D%09%5Enil"));
smalltalk.bind(smalltalk.SkipFileInReader, unescape("limit%3A"), "limit_", function SkipFileInReader__limit_(aToken){
const self = this; self['@limit']=aToken;
return self;
}
, "accessing", unescape("limit%3A%20aToken%0D%09%22%20Set%20the%20token%20limit.%20%22%0D%0D%09limit%20%3A%3D%20aToken"));
smalltalk.bind(smalltalk.Object, unescape("cancelFileIn"), "cancelFileIn", function Object__cancelFileIn(){
const self = this; return self.ignoreFileInUpTo_(nil);
}
, "Tools-fileIn", unescape("cancelFileIn%0D%09%22%20FileIn%20-%20Cancel%20fileIn%20on%20current%20stream.%20%22%0D%0D%09%5Eself%20ignoreFileInUpTo%3A%20nil"));
smalltalk.bind(smalltalk.Object, unescape("ignoreFileInUpTo%3A"), "ignoreFileInUpTo_", function Object__ignoreFileInUpTo_(aToken){
const self = this; return smalltalk.SkipFileInReader.upTo_(aToken);
}
, "Tools-fileIn", unescape("ignoreFileInUpTo%3A%20aToken%0D%09%22%20FileIn%20-%20Ignore%20fileIn%20on%20current%20stream%20upto%20token.%20%22%0D%0D%09%5ESkipFileInReader%20upTo%3A%20aToken"));
smalltalk.addClass("AssociationsReader", smalltalk.FileInReader, [], 'nil');
smalltalk.AssociationsReader.$classVariableNames=("");
smalltalk.bind(smalltalk.AssociationsReader, unescape("keyFrom%3A"), "keyFrom_", function AssociationsReader__keyFrom_(aStream){
const self = this; if (((aStream.peek())._eq(unescape("%23"))).valueOf()) {return (function AssociationsReader__($1$){
$1$.next();
return $1$.upTo_(" ")}
)(aStream).asSymbol()};
if (((aStream.peek())._eq(unescape("%27"))).valueOf()) {return (function AssociationsReader__($2$){
$2$.next();
return $2$.upTo_(unescape("%27"))}
)(aStream)};
return aStream.upTo_(" ");
}
, "reading", unescape("keyFrom%3A%20aStream%0D%09%22%20Private%20-%20Return%20the%20name%20of%20the%20current%20binding%20in%20aStream.%20%22%0D%0D%09aStream%20peek%20%3D%20%24%23%20ifTrue%3A%20%5B%20%5E%28aStream%20next%3B%20upTo%3A%20%24%20%29%20asSymbol%20%5D.%0D%09aStream%20peek%20%3D%20%24%27%20ifTrue%3A%20%5B%20%5EaStream%20next%3B%20upTo%3A%20%24%27%20%5D.%0D%09%5EaStream%20upTo%3A%20%24%20"));
smalltalk.bind(smalltalk.AssociationsReader, unescape("valueFrom%3A"), "valueFrom_", function AssociationsReader__valueFrom_(aStream){
const self = this; return (self.compilerSupport()).evaluate_((aStream.upToEnd()));
}
, "reading", unescape("valueFrom%3A%20aStream%0D%09%22%20Private%20-%20Return%20the%20value%20of%20the%20current%20binding%20in%20aStream.%20%22%0D%0D%09%5Eself%20compilerSupport%20evaluate%3A%20aStream%20upToEnd%20"));
smalltalk.bind(smalltalk.AssociationsReader, unescape("compilerSupport"), "compilerSupport", function AssociationsReader__compilerSupport(){
const self = this; return (self.smalltalk()).compilerSupport();
}
, "evaluating", unescape("compilerSupport%0D%09%22%20Private%20-%20Return%20compiler%20in%20use%20to%20get%20values%20from%20stream.%20%22%0D%0D%09%5Eself%20smalltalk%20compilerSupport"));
smalltalk.bind(smalltalk.AssociationsReader, unescape("bind%3A"), "bind_", function AssociationsReader__bind_(tuples){
const self = this; return self.subclassResponsibility_("bind:");
}
, "binding", unescape("bind%3A%20tuples%0D%09%22%20Private%20-%20Bind%20the%20filedIn%20tuples%20to%20target.%0D%09Must%20return%20the%20result%20of%20the%20fileIn/binding%20process.%0D%09%22%0D%0D%09%5Eself%20subclassResponsibility%3A%20%23bind%3A%20"));
smalltalk.bind(smalltalk.AssociationsReader, unescape("scanFrom%3A"), "scanFrom_", function AssociationsReader__scanFrom_(aStream){
var chunk = nil;
var tuples = nil;
const self = this; tuples=smalltalk.Array.$$new();
while((((aStream.atEnd()).not()).and_((function AssociationsReader__(){
chunk=(aStream.nextChunk()).trimBlanks();
return chunk.notEmpty();
}
))).valueOf()){chunk=chunk.stream();
tuples.add_((smalltalk.Array.with_with_((self.keyFrom_(chunk)),(self.valueFrom_(chunk)))))};;
return self.bind_(tuples);
}
, "fileIn", unescape("scanFrom%3A%20aStream%0D%09%22%20Consume%20chunks%20in%20aStream%20until%20empty%20chunk.%0D%09The%20chunks%20are%20considered%20associative%20bindings%20with%20the%20syntax%3A%0D%09%09%3Ckey%3E%20%3Cexpression%3E%0D%09Where%0D%09%09key%20is%20the%20keyword%20of%20the%20binding%20%28name%2C%20string%20or%20symbol%29.%0D%09%09expression%20is%20a%20valid%20smalltalk%20expression%20that%20will%20be%20evaluated%20to%20generate%20the%20value%20of%20the%20binding.%0D%09%22%0D%0D%09%7C%20chunk%20tuples%20%7C%0D%09tuples%20%3A%3D%20Array%20new.%0D%09%5B%20aStream%20atEnd%20not%20and%3A%20%5B%0D%09%20%20chunk%20%3A%3D%20aStream%20nextChunk%20trimBlanks.%0D%09%20%20chunk%20notEmpty%20%5D%5D%20whileTrue%3A%20%5B%0D%09%20%20chunk%20%3A%3D%20chunk%20stream.%0D%09%20%20tuples%20add%3A%20%28Array%0D%09%09with%3A%20%28self%20keyFrom%3A%20chunk%29%0D%09%09with%3A%20%28self%20valueFrom%3A%20chunk%29%29.%0D%09%5D.%0D%09%5Eself%20bind%3A%20tuples"));
smalltalk.addClass("PoolDictionaryReader", smalltalk.AssociationsReader, ['scope'], 'Tools-FileIn');
smalltalk.PoolDictionaryReader.$classVariableNames=("");
smalltalk.bind(smalltalk.PoolDictionaryReader, unescape("scope%3A"), "scope_", function PoolDictionaryReader__scope_(aScope){
const self = this; self['@scope']=aScope;
return self;
}
, "accessing", unescape("scope%3A%20aScope%0D%09%22%20Set%20the%20scope%20where%20the%20read%20bindings%20will%20be%20stored.%20%22%0D%0D%09scope%20%3A%3D%20aScope"));
smalltalk.bind(smalltalk.PoolDictionaryReader, unescape("bind%3A"), "bind_", function PoolDictionaryReader__bind_(tuples){
const self = this; if ((self['@scope'].isString()).valueOf()) {return smalltalk.Smalltalk.definePool_with_(self['@scope'],tuples)};
if (((nil.isNil_(self['@scope']))).valueOf()) {self['@scope']=smalltalk.PoolDictionary.$$new()};
tuples.do_((function PoolDictionaryReader__(each){
return self['@scope'].at_put_((each.first()),(each.last()));
}
));
return self['@scope'];
}
, "binding", unescape("bind%3A%20tuples%0D%09%22%20Private%20-%20Bind%20the%20filedIn%20tuples%20to%20target.%0D%09Must%20return%20the%20result%20of%20the%20fileIn/binding%20process.%0D%09%22%0D%0D%09scope%20isString%20ifTrue%3A%20%5B%0D%09%09%5ESmalltalk%20definePool%3A%20scope%20with%3A%20tuples%0D%09%5D.%0D%09scope%20isNil%20ifTrue%3A%20%5B%20scope%20%3A%3D%20PoolDictionary%20new%20%5D.%0D%09tuples%20do%3A%20%5B%3Aeach%7C%20scope%20at%3A%20each%20first%20put%3A%20each%20last%20%5D.%0D%09%5Escope"));
smalltalk.bind(smalltalk.PoolDictionaryReader, unescape("valueFrom%3A"), "valueFrom_", function PoolDictionaryReader__valueFrom_(aStream){
var code = nil;
var result = nil;
var word = nil;
const self = this; code=aStream.upToEnd();
word=code.trimBlanks();
if (((word._eq("nil")).or_((function PoolDictionaryReader__(){
return word.isEmpty();
}
))).valueOf()) {return nil};
result=word.asNumber();
if ((result.isNumber()).valueOf()) {return result};
return smalltalk.superImplementor(smalltalk.PoolDictionaryReader,'valueFrom_').apply(self, [code.stream()]);
}
, "reading", unescape("valueFrom%3A%20aStream%0D%09%22%20Private%20-%20Return%20the%20value%20of%20the%20current%20binding%20in%20aStream.%20%22%0D%0D%09%7C%20code%20result%20word%20%7C%0D%09code%20%3A%3D%20aStream%20upToEnd.%0D%09word%20%3A%3D%20code%20trimBlanks.%0D%09%28word%20%3D%20%23nil%20or%3A%20%5B%20word%20isEmpty%20%5D%29%20ifTrue%3A%20%5B%20%5Enil%20%5D.%0D%09result%20%3A%3D%20word%20asNumber.%0D%09result%20isNumber%20ifTrue%3A%20%5B%20%5Eresult%20%5D.%0D%09%5Esuper%20valueFrom%3A%20code%20stream%20"));
smalltalk.bind(smalltalk.Smalltalk.$klass, unescape("bindingsFor%3A"), "bindingsFor_", function Smalltalk_class__bindingsFor_(aScope){
const self = this; return (smalltalk.PoolDictionaryReader.$$new()).scope_(aScope);
}
, "Tools-pool variables", unescape("bindingsFor%3A%20aScope%0D%09%22%20FileIn%20-%20Return%20a%20reader%20to%20fileIn%20bindings%20in%20a%20%28global%29%20scope.%0D%09aScope%20can%20be%20a%20string%20or%20a%20dictionary.%0D%09In%20case%20of%20aScope%20been%20a%20String%2C%20it%20will%20be%20considered%20a%20PoolDictionaryName%0D%09See%20PoolDictionaryReader%3E%3E%23scanFrom%3A%0D%09%22%0D%0D%09%5EPoolDictionaryReader%20new%20scope%3A%20aScope"));
smalltalk.addClass("JSReader", smalltalk.AssociationsReader, ['object'], 'Tools-FileIn');
smalltalk.JSReader.$classVariableNames=("");
smalltalk.bind(smalltalk.JSReader, unescape("bind%3A"), "bind_", function JSReader__bind_(tuples){
const self = this; if (((nil.isNil_(self['@object']))).valueOf()) {self.initializeObject()};
tuples.do_((function JSReader__(each){
return (self['@object'][each.first()]=each.last());
}
));
return self['@object'];
}
, "binding", unescape("bind%3A%20tuples%0D%09%22%20Private%20-%20Bind%20the%20filedIn%20tuples%20to%20target.%0D%09Must%20return%20the%20result%20of%20the%20fileIn/binding%20process.%0D%09%22%0D%0D%09object%20isNil%20ifTrue%3A%20%5B%20self%20initializeObject%20%5D.%0D%09tuples%20do%3A%20%5B%3Aeach%7C%20object%20basicAt%3A%20each%20first%20put%3A%20each%20last%20%5D.%0D%09%5Eobject"));
smalltalk.bind(smalltalk.JSReader, unescape("object%3A"), "object_", function JSReader__object_(anObject){
const self = this; self['@object']=anObject;
return self;
}
, "accessing", unescape("object%3A%20anObject%0D%09%22%20Set%20the%20object%20where%20the%20bindings%20will%20be%20stored.%20%22%0D%0D%09object%20%3A%3D%20anObject"));
smalltalk.bind(smalltalk.JSReader, unescape("initializeObject"), "initializeObject", function JSReader__initializeObject(){
const self = this; self['@object']=smalltalk.Smalltalk.emptyJSONObject();
return self;
}
, "initialize", unescape("initializeObject%0D%09%22%20Private%20-%20Initialize%20the%20object%20where%20the%20bindings%20will%20be%20stored.%20%22%0D%0D%09object%20%3A%3D%20Smalltalk%20emptyJSONObject"));
smalltalk.addClass("Exporter", smalltalk.Object, [], 'nil');
smalltalk.Exporter.$classVariableNames=("");
smalltalk.bind(smalltalk.Exporter.$klass, unescape("fileOutCategories%3A"), "fileOutCategories_", function Exporter_class__fileOutCategories_(categories){
const self = this; return (self.$$new()).fileOutCategories_(categories);
}
, "fileOut", unescape("fileOutCategories%3A%20categories%0D%09%22%20Return%20the%20result%20of%20fileOut%20all%20the%20classes%20in%20categories.%20%22%0D%0D%09%5Eself%20new%20fileOutCategories%3A%20categories"));
smalltalk.bind(smalltalk.Exporter.$klass, unescape("fileOutCategory%3A"), "fileOutCategory_", function Exporter_class__fileOutCategory_(aString){
const self = this; return (self.$$new()).fileOutCategory_(aString);
}
, "fileOut", unescape("fileOutCategory%3A%20aString%0D%09%22%20Return%20the%20result%20of%20fileOut%20all%20the%20classes%20in%20category%20aString.%20%22%0D%0D%09%5Eself%20new%20fileOutCategory%3A%20aString"));
smalltalk.bind(smalltalk.Exporter.$klass, unescape("fileOutAll%3A"), "fileOutAll_", function Exporter_class__fileOutAll_(elements){
const self = this; return (self.$$new()).fileOutAll_(elements);
}
, "fileOut", unescape("fileOutAll%3A%20elements%0D%09%22%20Return%20the%20result%20of%20fileOut%20elements%20%28classes%2C%20methods%20and/or%20categories%29.%20%22%0D%0D%09%5Eself%20new%20fileOutAll%3A%20elements"));
smalltalk.bind(smalltalk.Exporter.$klass, unescape("fileOutAll"), "fileOutAll", function Exporter_class__fileOutAll(){
const self = this; return self.fileOutAll_((self.allClasses()));
}
, "fileOut", unescape("fileOutAll%0D%09%22%20Return%20the%20result%20of%20fileOut%20of%20all%20classes%20in%20the%20system.%20%22%0D%0D%09%5Eself%20fileOutAll%3A%20self%20allClasses"));
smalltalk.bind(smalltalk.Exporter.$klass, unescape("fileOut%3A"), "fileOut_", function Exporter_class__fileOut_(spec){
var aName = nil;
const self = this; if (((nil.isNil_(spec))).valueOf()) {return ""};
if ((spec.isString()).not()) {if (((smalltalk.is_kindOf_(spec,smalltalk.Behavior))).valueOf()) {return (self.$$new()).fileOut_(spec)};
return (spec.asArray()).fileOut()};
if ((spec.includes_(unescape("%2C"))).valueOf()) {return self.fileOut_((spec.asArrayOfSubstringsSeparatedBy_(unescape("%2C"))))};
if ((spec.includes_(" ")).valueOf()) {return self.fileOut_((spec.asArrayOfSubstringsSeparatedBy_(" ")))};
aName=spec.trimBlanks();
if ((smalltalk.Smalltalk.includesKey_(aName)).valueOf()) {return self.fileOut_((smalltalk.Smalltalk.at_(aName)))};
return self.fileOutCategories_(aName);
}
, "fileOut", unescape("fileOut%3A%20spec%0D%09%22%20Return%20the%20result%20of%20fileOut%20of%20literals%20in%20spec.%20%22%0D%0D%09%7C%20aName%20%7C%0D%09spec%20isNil%20ifTrue%3A%20%5B%20%5E%27%27%20%5D.%0D%09spec%20isString%20ifFalse%3A%20%5B%0D%09%09%28spec%20isKindOf%3A%20Behavior%29%20ifTrue%3A%20%5B%20%5Eself%20new%20fileOut%3A%20spec%20%5D.%0D%09%09%5Espec%20asArray%20fileOut%0D%09%5D.%0D%09%28spec%20includes%3A%20%24%2C%29%20ifTrue%3A%20%5B%20%5Eself%20fileOut%3A%20%28spec%20asArrayOfSubstringsSeparatedBy%3A%20%24%2C%29%20%5D.%0D%09%28spec%20includes%3A%20%24%20%29%20ifTrue%3A%20%5B%20%5Eself%20fileOut%3A%20%28spec%20asArrayOfSubstringsSeparatedBy%3A%20%24%20%29%20%5D.%0D%09aName%20%3A%3D%20spec%20trimBlanks.%0D%09%28Smalltalk%20includesKey%3A%20aName%29%20ifTrue%3A%20%5B%20%5Eself%20fileOut%3A%20%28Smalltalk%20at%3A%20aName%29%5D.%0D%09%5Eself%20fileOutCategories%3A%20aName"));
smalltalk.bind(smalltalk.Exporter.$klass, unescape("exportCategories%3A"), "exportCategories_", function Exporter_class__exportCategories_(categories){
const self = this; return (self.$$new()).exportCategories_(categories);
}
, "export", unescape("exportCategories%3A%20categories%0D%09%22%20Return%20the%20result%20of%20exporting%20all%20the%20classes%20in%20categories.%20%22%0D%0D%09%5Eself%20new%20exportCategories%3A%20categories"));
smalltalk.bind(smalltalk.Exporter.$klass, unescape("exportCategory%3A"), "exportCategory_", function Exporter_class__exportCategory_(aString){
const self = this; return (self.$$new()).exportCategory_(aString);
}
, "export", unescape("exportCategory%3A%20aString%0D%09%22%20Return%20the%20result%20of%20exporting%20all%20the%20classes%20in%20category%20aString.%20%22%0D%0D%09%5Eself%20new%20exportCategory%3A%20aString"));
smalltalk.bind(smalltalk.Exporter.$klass, unescape("export%3A"), "export_", function Exporter_class__export_(spec){
var aName = nil;
const self = this; if (((nil.isNil_(spec))).valueOf()) {return ""};
if ((spec.isString()).not()) {if (((smalltalk.is_kindOf_(spec,smalltalk.Behavior))).valueOf()) {return (self.$$new()).export_(spec)};
return (spec.asArray()).$$export()};
if ((spec.includes_(unescape("%2C"))).valueOf()) {return self.export_((spec.asArrayOfSubstringsSeparatedBy_(unescape("%2C"))))};
if ((spec.includes_(" ")).valueOf()) {return self.export_((spec.asArrayOfSubstringsSeparatedBy_(" ")))};
aName=spec.trimBlanks();
if ((smalltalk.Smalltalk.includesKey_(aName)).valueOf()) {return self.export_((smalltalk.Smalltalk.at_(aName)))};
return self.exportCategories_(aName);
}
, "export", unescape("export%3A%20spec%0D%09%22%20Return%20the%20result%20of%20exporting%20literals%20in%20spec.%20%22%0D%0D%09%7C%20aName%20%7C%0D%09spec%20isNil%20ifTrue%3A%20%5B%20%5E%27%27%20%5D.%0D%09spec%20isString%20ifFalse%3A%20%5B%0D%09%09%28spec%20isKindOf%3A%20Behavior%29%20ifTrue%3A%20%5B%20%5Eself%20new%20export%3A%20spec%20%5D.%0D%09%09%5Espec%20asArray%20export%0D%09%5D.%0D%09%28spec%20includes%3A%20%24%2C%29%20ifTrue%3A%20%5B%20%5Eself%20export%3A%20%28spec%20asArrayOfSubstringsSeparatedBy%3A%20%24%2C%29%20%5D.%0D%09%28spec%20includes%3A%20%24%20%29%20ifTrue%3A%20%5B%20%5Eself%20export%3A%20%28spec%20asArrayOfSubstringsSeparatedBy%3A%20%24%20%29%20%5D.%0D%09aName%20%3A%3D%20spec%20trimBlanks.%0D%09%28Smalltalk%20includesKey%3A%20aName%29%20ifTrue%3A%20%5B%20%5Eself%20export%3A%20%28Smalltalk%20at%3A%20aName%29%5D.%0D%09%5Eself%20exportCategories%3A%20aName"));
smalltalk.bind(smalltalk.Exporter.$klass, unescape("exportAll"), "exportAll", function Exporter_class__exportAll(){
const self = this; return (self.$$new()).exportAll();
}
, "export", unescape("exportAll%0D%09%22%20Return%20the%20result%20of%20exporting%20all%20classes%20in%20the%20system.%20%22%0D%0D%09%5Eself%20new%20exportAll"));
smalltalk.bind(smalltalk.Exporter.$klass, unescape("exportAll%3A"), "exportAll_", function Exporter_class__exportAll_(elements){
const self = this; return (self.$$new()).exportAll_(elements);
}
, "export", unescape("exportAll%3A%20elements%0D%09%22%20Return%20the%20result%20of%20exporting%20all%20elements%20%28classes%2C%20methods%20and/or%20categories%29.%20%22%0D%0D%09%5Eself%20new%20exportAll%3A%20elements"));
smalltalk.bind(smalltalk.Exporter.$klass, unescape("allClasses"), "allClasses", function Exporter_class__allClasses(){
const self = this; return (smalltalk.Smalltalk.rootClasses()).inject_into_((smalltalk.Array.$$new()),(function Exporter_class__(total,each){
return total._comma((each.withAllSubclasses()));
}
));
}
, "private", unescape("allClasses%0D%09%22%20Private%20-%20Return%20all%20the%20classes%20in%20the%20system%20%28in%20fileIn%20order%29.%20%22%0D%0D%09%5ESmalltalk%20rootClasses%0D%09%09inject%3A%20Array%20new%0D%09%09into%3A%20%5B%3Atotal%20%3Aeach%7C%20total%20%2C%20each%20withAllSubclasses%20%5D"));
smalltalk.bind(smalltalk.Exporter, unescape("matchCategory%3A"), "matchCategory_", function Exporter__matchCategory_(aString){
const self = this; return self.matchCategory_from_(aString,(smalltalk.Smalltalk.rootClasses()));
}
, "categories", unescape("matchCategory%3A%20aString%0D%09%22%20Return%20the%20result%20of%20filtering%20all%20the%20classes%20%28and%20orphan%20methods%29%20in%20category%20aString.%20%22%0D%0D%09%5Eself%20matchCategory%3A%20aString%20from%3A%20Smalltalk%20rootClasses"));
smalltalk.bind(smalltalk.Exporter, unescape("matchCategory%3Afrom%3A"), "matchCategory_from_", function Exporter__matchCategory_from_(aString,rootClasses){
var selection = nil;
var selected = nil;
var rejected = nil;
var orphanMethods = nil;
var fileOutMethods = nil;
const self = this; selected=smalltalk.Array.$$new();
rejected=smalltalk.Array.$$new();
orphanMethods=smalltalk.Array.$$new();
selection=(aString.includes_(unescape("-"))).ifTrue_ifFalse_((function Exporter__(){
return (function Exporter__(each){
return ((each.category()).asString())._eq(aString);
}
);
}
),(function Exporter__(){
return (function Exporter__(each){
return (((each.category()).asString()).upTo_(unescape("-")))._eq(aString);
}
);
}
));
rootClasses.do_((function Exporter__(root){
return ((root.instanceClass()).withAllSubclasses()).do_((function Exporter__(each){
return ((selection.value_(each)).ifTrue_ifFalse_((function Exporter__(){
return selected;
}
),(function Exporter__(){
return rejected;
}
))).add_(each);
}
));
}
));
fileOutMethods=(function Exporter__(cls){
return cls.methodsDo_((function Exporter__(aMethod){
if ((selection.value_(aMethod)).valueOf()) {return orphanMethods.add_(aMethod)} else {return nil};
}
));
}
);
rejected.do_((function Exporter__(each){
return (function Exporter__($1$){
$1$.value_(each);
return $1$.value_((each.$klass))}
)(fileOutMethods);
}
));
return smalltalk.Array.with_with_with_(selected,rejected,orphanMethods);
}
, "categories", unescape("matchCategory%3A%20aString%20from%3A%20rootClasses%0D%09%22%20Return%20the%20result%20of%20filtering%20all%20the%20classes%20%28and%20orphan%20methods%29%20in%20category%20aString.%20%22%0D%0D%09%7C%20selection%20selected%20rejected%20orphanMethods%20fileOutMethods%20%7C%0D%09selected%20%3A%3D%20Array%20new.%0D%09rejected%20%3A%3D%20Array%20new.%0D%09orphanMethods%20%3A%3D%20Array%20new.%0D%09selection%20%3A%3D%20%28aString%20includes%3A%20%24-%29%0D%09%09ifTrue%3A%20%5B%20%5B%3Aeach%7C%20each%20category%20asString%20%3D%20aString%20%5D%20%5D%0D%09%09ifFalse%3A%20%5B%20%5B%3Aeach%7C%20%28each%20category%20asString%20upTo%3A%20%24-%29%20%3D%20aString%20%5D%20%5D.%0D%09rootClasses%20do%3A%20%5B%3Aroot%7C%0D%09%09root%20instanceClass%20withAllSubclasses%20do%3A%20%5B%3Aeach%7C%0D%09%09%09%28%28selection%20value%3A%20each%29%0D%09%09%09%09ifTrue%3A%20%5B%20selected%20%5D%20ifFalse%3A%20%5B%20rejected%20%5D%29%0D%09%09%09%09add%3A%20each%0D%09%09%5D%0D%09%5D.%0D%09fileOutMethods%20%3A%3D%20%5B%3Acls%7C%0D%09%09cls%20methodsDo%3A%20%5B%3AaMethod%20%7C%0D%09%09%09%28selection%20value%3A%20aMethod%29%20ifTrue%3A%20%5B%20orphanMethods%20add%3A%20aMethod%20%5D%0D%09%09%5D.%0D%09%5D.%0D%09rejected%20do%3A%20%5B%3Aeach%7C%20fileOutMethods%20value%3A%20each%3B%20value%3A%20each%20class%20%5D.%0D%09%5EArray%20with%3A%20selected%20with%3A%20rejected%20with%3A%20orphanMethods"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutCategories%3A"), "fileOutCategories_", function Exporter__fileOutCategories_(categories){
const self = this; if ((categories.isString()).valueOf()) {return self.fileOutCategories_((categories.asArrayOfSubstrings()))};
return (categories.asArray()).inject_into_("",(function Exporter__(total,each){
return total._comma((self.fileOutCategory_(each)));
}
));
}
, "fileOut", unescape("fileOutCategories%3A%20categories%0D%09%22%20Return%20the%20result%20of%20fileOut%20all%20the%20classes%20in%20categories.%20%22%0D%0D%09categories%20isString%20ifTrue%3A%20%5B%20%5Eself%20fileOutCategories%3A%20categories%20asArrayOfSubstrings%20%5D.%0D%09%5Ecategories%20asArray%20inject%3A%20%27%27%20into%3A%20%5B%3Atotal%20%3Aeach%7C%0D%09%09total%2C%20%28self%20fileOutCategory%3A%20each%29%0D%09%5D"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutCategory%3A"), "fileOutCategory_", function Exporter__fileOutCategory_(aString){
var stream = nil;
var match = nil;
const self = this; stream="".writeStream();
match=self.matchCategory_(aString);
self.fileOutAll_on_((match.first()),stream);
(match.last()).do_((function Exporter__(aMethod){
return self.fileOutMethod_of_on_(aMethod,(aMethod.classField()),stream);
}
));
return stream.contents();
}
, "fileOut", unescape("fileOutCategory%3A%20aString%0D%09%22%20Return%20the%20result%20of%20fileOut%20all%20the%20classes%20in%20category%20aString.%20%22%0D%0D%09%7C%20stream%20match%20%7C%0D%09stream%20%3A%3D%20%27%27%20writeStream.%0D%09match%20%3A%3D%20self%20matchCategory%3A%20aString.%0D%09self%20fileOutAll%3A%20match%20first%20on%3A%20stream.%0D%09match%20last%20do%3A%20%5B%3AaMethod%20%7C%0D%09%09self%20fileOutMethod%3A%20aMethod%20of%3A%20aMethod%20classField%20on%3A%20stream%0D%09%5D.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOut%3A"), "fileOut_", function Exporter__fileOut_(aClass){
var stream = nil;
const self = this; stream="".writeStream();
self.fileOut_on_(aClass,stream);
return stream.contents();
}
, "fileOut", unescape("fileOut%3A%20aClass%0D%09%22%20Return%20fileOut%20definition%20and%20code%20of%20a%20class.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20%27%27%20writeStream.%0D%09self%20fileOut%3A%20aClass%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutClass%3A"), "fileOutClass_", function Exporter__fileOutClass_(aClass){
const self = this; return self.fileOut_(aClass);
}
, "fileOut", unescape("fileOutClass%3A%20aClass%0D%09%22%20Return%20fileOut%20definition%20and%20code%20of%20a%20class.%20%22%0D%0D%09%5Eself%20fileOut%3A%20aClass"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutAll%3A"), "fileOutAll_", function Exporter__fileOutAll_(elements){
var stream = nil;
const self = this; stream="".writeStream();
self.fileOutAll_on_(elements,stream);
return stream.contents();
}
, "fileOut", unescape("fileOutAll%3A%20elements%0D%09%22%20Return%20fileOut%20definition%20and%20code%20of%20elements%20%28classes%2C%20methods%20and/or%20categories%29.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20%27%27%20writeStream.%0D%09self%20fileOutAll%3A%20elements%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutMethod%3Aof%3A"), "fileOutMethod_of_", function Exporter__fileOutMethod_of_(aMethod,aClass){
var stream = nil;
const self = this; stream="".writeStream();
self.fileOutMethod_of_on_(aMethod,aClass,stream);
return stream.contents();
}
, "fileOut", unescape("fileOutMethod%3A%20aMethod%20of%3A%20aClass%0D%09%22%20Return%20fileOut%20method%20of%20a%20class.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20%27%27%20writeStream.%0D%09self%20fileOutMethod%3A%20aMethod%20of%3A%20aClass%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutAllMethodsOf%3Aon%3A"), "fileOutAllMethodsOf_on_", function Exporter__fileOutAllMethodsOf_on_(aClass,stream){
const self = this; self.fileOutMethodsOf_on_((aClass.$klass),stream);
self.fileOutMethodsOf_on_(aClass,stream);
return self;
}
, "fileOut", unescape("fileOutAllMethodsOf%3A%20aClass%20on%3A%20stream%0D%09%22%20FileOut%20all%20methods%20of%20aClass%20%28and%20metaclass%29%20onto%20stream.%20%22%0D%0D%09self%20fileOutMethodsOf%3A%20aClass%20class%20on%3A%20stream.%0D%09self%20fileOutMethodsOf%3A%20aClass%20on%3A%20stream."));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutDefinitionOfClass%3Aon%3A"), "fileOutDefinitionOfClass_on_", function Exporter__fileOutDefinitionOfClass_on_(aClass,stream){
const self = this; self.fileOutDefinitionOf_on_(aClass,stream);
self.fileOutDefinitionOf_on_((aClass.$klass),stream);
return self;
}
, "fileOut", unescape("fileOutDefinitionOfClass%3A%20aClass%20on%3A%20stream%0D%09%22%20FileOut%20definition%20of%20aClass%20%28and%20metaclass%29%20onto%20stream.%20%22%0D%0D%09self%20fileOutDefinitionOf%3A%20aClass%20on%3A%20stream.%0D%09self%20fileOutDefinitionOf%3A%20aClass%20class%20on%3A%20stream"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutAll%3Aon%3A"), "fileOutAll_on_", function Exporter__fileOutAll_on_(elements,stream){
const self = this; if ((elements.isString()).valueOf()) {return self.fileOutAll_on_((elements.asArrayOfSubstrings()),stream)};
elements.do_((function Exporter__(each){
if (((smalltalk.is_kindOf_(each,smalltalk.Behavior))).valueOf()) {return self.fileOutDefinitionOfClass_on_(each,stream)} else {return nil};
}
));
stream.cr();
elements.do_((function Exporter__(each){
if (((smalltalk.is_kindOf_(each,smalltalk.Behavior))).valueOf()) {return self.fileOutAllMethodsOf_on_(each,stream)} else {if ((each.isString()).valueOf()) {return (function Exporter__($1$){
$1$.nextPutAll_((self.fileOutCategory_(each)));
return $1$.cr()}
)(stream)} else {return self.fileOutAllMethod_on_(each,stream)}};
}
));
return self;
}
, "fileOut", unescape("fileOutAll%3A%20elements%20on%3A%20stream%0D%09%22%20FileOut%20definition%20and%20code%20of%20elements%20%28classes%2C%20methods%20and/or%20categories%29%20onto%20stream.%20%22%0D%0D%09elements%20isString%20ifTrue%3A%20%5B%20%5Eself%20fileOutAll%3A%20elements%20asArrayOfSubstrings%20on%3A%20stream%20%5D.%0D%09elements%20do%3A%20%5B%3Aeach%7C%0D%09%09%28each%20isKindOf%3A%20Behavior%29%20ifTrue%3A%20%5B%0D%09%09%09self%20fileOutDefinitionOfClass%3A%20each%20on%3A%20stream%0D%09%09%5D.%0D%09%5D.%09stream%20cr.%0D%09elements%20do%3A%20%5B%3Aeach%7C%0D%09%09%28each%20isKindOf%3A%20Behavior%29%20ifTrue%3A%20%5B%0D%09%09%09self%20fileOutAllMethodsOf%3A%20each%20on%3A%20stream%0D%09%09%5D%20ifFalse%3A%20%5B%0D%09%09%09each%20isString%0D%09%09%09ifTrue%3A%20%5B%20stream%20nextPutAll%3A%20%28self%20fileOutCategory%3A%20each%29%3Bcr%20%5D%0D%09%09%09ifFalse%3A%20%5B%20self%20fileOutAllMethod%3A%20each%20on%3A%20stream%20%5D%0D%09%09%5D%0D%09%5D."));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutDefinitionOf%3A"), "fileOutDefinitionOf_", function Exporter__fileOutDefinitionOf_(aClass){
var stream = nil;
const self = this; stream="".writeStream();
self.fileOutDefinitionOfClass_on_((aClass.instanceClass()),stream);
return stream.contents();
}
, "fileOut", unescape("fileOutDefinitionOf%3A%20aClass%0D%09%22%20Return%20the%20definition%20of%20a%20class.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20%27%27%20writeStream.%0D%09self%20fileOutDefinitionOfClass%3A%20aClass%20instanceClass%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOut%3Aon%3A"), "fileOut_on_", function Exporter__fileOut_on_(aClass,stream){
const self = this; self.fileOutAll_on_((smalltalk.Array.with_(aClass)),stream);
return self;
}
, "fileOut", unescape("fileOut%3A%20aClass%20on%3A%20stream%0D%09%22%20FileOut%20definition%20and%20code%20of%20a%20class%20onto%20stream.%20%22%0D%0D%09self%20fileOutAll%3A%20%28Array%20with%3A%20aClass%29%20on%3A%20stream."));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutDefinitionOf%3Aon%3A"), "fileOutDefinitionOf_on_", function Exporter__fileOutDefinitionOf_on_(aClass,stream){
const self = this; if ((aClass.isMetaclass()).valueOf()) {if ((self.fileOutStrings_of_on_("instanceVariableNames",aClass,stream)).valueOf()) {(function Exporter__($1$){
$1$.nextChunkPut_("");
return $1$.cr()}
)(stream)};
if ((self.fileOutArray_of_on_("propertyNames",aClass,stream)).valueOf()) {(function Exporter__($2$){
$2$.nextChunkPut_("");
return $2$.cr()}
)(stream)};
return self};
(function Exporter__($3$){
$3$.nextPutAll_(((aClass.superclass()).name()));
$3$.cr();
$3$.tab();
return $3$.nextPutAll_(unescape("subclass%3A%20%23"))}
)(stream);
if ((self.fileOutStrings_of_on_("instanceVariableNames",aClass,stream)).not()) {(function Exporter__($4$){
$4$.nextPutAll_((self.globalNameFor_(aClass)));
$4$.cr();
$4$.tab();
$4$.nextPutAll_("instanceVariableNames: ");
return $4$.nextPutAll_(("".printString()))}
)(stream)};
if (((nil.isNil_(aClass.classVariables())===false)).valueOf()) {(function Exporter__($5$){
$5$.cr();
$5$.tab();
$5$.nextPutAll_("classVariableNames: ");
return $5$.nextPutAll_(((aClass.classVariablesString()).printString()))}
)(stream)};
if (((nil.isNil_(aClass.poolDictionaries())===false)).valueOf()) {(function Exporter__($6$){
$6$.cr();
$6$.tab();
$6$.nextPutAll_("poolDictionaries: ");
return $6$.nextPutAll_(((aClass.poolDictionariesString()).printString()))}
)(stream)};
(function Exporter__($7$){
$7$.cr();
$7$.tab();
$7$.nextPutAll_("category: ");
return $7$.nextPutAll_(((aClass.category()).asLiteral()))}
)(stream);
(function Exporter__($8$){
$8$.nextChunkPut_("");
return $8$.cr()}
)(stream);
if ((self.fileOutArray_of_on_("propertyNames",aClass,stream)).valueOf()) {(function Exporter__($9$){
$9$.nextChunkPut_("");
return $9$.cr()}
)(stream)};
if ((((nil.isNil_(aClass.comment())===false)).and_((function Exporter__(){
return (aClass.comment()).notEmpty();
}
))).valueOf()) {stream.nextPutAll_((((self.globalNameFor_(aClass))._comma(" comment: "))._comma(((aClass.comment()).printString()))));
(function Exporter__($10$){
$10$.nextChunkPut_("");
return $10$.cr()}
)(stream)};
return self;
}
, "fileOut", unescape("fileOutDefinitionOf%3A%20aClass%20on%3A%20stream%0D%09%22%20FileOut%20definition%20of%20a%20class%20onto%20stream.%20%22%0D%0D%09aClass%20isMetaclass%20ifTrue%3A%20%5B%0D%09%09%28self%20fileOutStrings%3A%20%23instanceVariableNames%20of%3A%20aClass%20on%3A%20stream%29%20ifTrue%3A%20%5B%0D%09%09%09stream%20nextChunkPut%3A%20%27%27%3Bcr.%0D%09%09%5D.%0D%09%09%28self%20fileOutArray%3A%20%23propertyNames%20of%3A%20aClass%20on%3A%20stream%29%20ifTrue%3A%20%5B%0D%09%09%09stream%20nextChunkPut%3A%20%27%27%3Bcr.%0D%09%09%5D.%0D%09%09%5Eself%0D%09%5D.%0D%0D%09stream%0D%09%09nextPutAll%3A%20aClass%20superclass%20name%3B%20cr%3Btab%3B%0D%09%09nextPutAll%3A%20%27subclass%3A%20%23%27.%0D%09%28self%20fileOutStrings%3A%20%23instanceVariableNames%20of%3A%20aClass%20on%3A%20stream%29%20ifFalse%3A%20%5B%0D%09%09stream%0D%09%09%09nextPutAll%3A%20%28self%20globalNameFor%3A%20aClass%29%3B%20cr%3Btab%3B%0D%09%09%09nextPutAll%3A%20%27instanceVariableNames%3A%20%27%3B%0D%09%09%09nextPutAll%3A%20%27%27%20printString%0D%09%5D.%0D%09aClass%20classVariables%20notNil%20ifTrue%3A%20%5B%0D%09%20%20%20%20stream%09%20cr%3Btab%3B%0D%09%09nextPutAll%3A%20%27classVariableNames%3A%20%27%3B%0D%09%09nextPutAll%3A%20aClass%20classVariablesString%20printString%0D%09%5D.%0D%09aClass%20poolDictionaries%20notNil%20ifTrue%3A%20%5B%0D%09%20%20%20%20stream%09%20cr%3Btab%3B%0D%09%09nextPutAll%3A%20%27poolDictionaries%3A%20%27%3B%0D%09%09nextPutAll%3A%20aClass%20poolDictionariesString%20printString%0D%09%5D.%0D%09stream%20cr%3Btab%3B%0D%09%09nextPutAll%3A%20%27category%3A%20%27%3B%0D%09%09nextPutAll%3A%20aClass%20category%20asLiteral.%0D%09stream%20nextChunkPut%3A%20%27%27%3Bcr.%0D%09%28self%20fileOutArray%3A%20%23propertyNames%20of%3A%20aClass%20on%3A%20stream%29%20ifTrue%3A%20%5B%0D%09%09stream%20nextChunkPut%3A%20%27%27%3Bcr.%0D%09%5D.%0D%09%28aClass%20comment%20notNil%20and%3A%20%5BaClass%20comment%20notEmpty%5D%29%20ifTrue%3A%20%5B%0D%09%09stream%20nextPutAll%3A%20%28self%20globalNameFor%3A%20aClass%29%2C%27%20comment%3A%20%27%2C%20aClass%20comment%20printString.%0D%09%09stream%20nextChunkPut%3A%20%27%27%3Bcr.%0D%09%5D."));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutStrings%3Aof%3Aon%3A"), "fileOutStrings_of_on_", function Exporter__fileOutStrings_of_on_(selector,aClass,stream){
var strings = nil;
const self = this; strings=aClass.perform_(selector);
if ((strings.isEmpty()).valueOf()) {return false};
(function Exporter__($1$){
$1$.nextPutAll_((self.globalNameFor_(aClass)));
$1$.cr();
$1$.tab();
return $1$.nextPutAll_((selector._comma(unescape("%3A%20%27"))))}
)(stream);
strings.do_((function Exporter__(each){
return stream.nextPutAll_((" "._comma(each)));
}
));
stream.nextPutAll_(unescape("%20%27"));
return true;
}
, "fileOut", unescape("fileOutStrings%3A%20selector%20of%3A%20aClass%20on%3A%20stream%0D%09%22%20Private%20-%20FileOut%20selector%20strings%20of%20a%20class%20onto%20stream.%0D%09Return%20true%20if%20code%20has%20been%20filedOut.%0D%09%22%0D%0D%09%7C%20strings%20%7C%0D%09strings%20%3A%3D%20aClass%20perform%3A%20selector.%0D%09strings%20isEmpty%20ifTrue%3A%20%5B%20%5Efalse%20%5D.%0D%09stream%0D%09%09nextPutAll%3A%20%28self%20globalNameFor%3A%20aClass%29%3B%20cr%3Btab%3B%0D%09%09nextPutAll%3A%20selector%2C%27%3A%20%27%27%27.%0D%09strings%20do%3A%20%5B%3Aeach%7C%20stream%20nextPutAll%3A%20%27%20%27%2Ceach%20%5D.%0D%09stream%20nextPutAll%3A%20%27%20%27%27%27.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutArray%3Aof%3Aon%3A"), "fileOutArray_of_on_", function Exporter__fileOutArray_of_on_(selector,aClass,stream){
var strings = nil;
const self = this; strings=aClass.perform_(selector);
if ((strings.isEmpty()).valueOf()) {return false};
(function Exporter__($1$){
$1$.nextPutAll_((self.globalNameFor_(aClass)));
return $1$.nextPutAll_((((" "._comma(selector))._comma(": "))._comma((strings.asLiteral()))))}
)(stream);
return true;
}
, "fileOut", unescape("fileOutArray%3A%20selector%20of%3A%20aClass%20on%3A%20stream%0D%09%22%20Private%20-%20FileOut%20selector%20arrayed%20strings%20of%20a%20class%20onto%20stream.%0D%09Return%20true%20if%20code%20has%20been%20filedOut.%0D%09%22%0D%0D%09%7C%20strings%20%7C%0D%09strings%20%3A%3D%20aClass%20perform%3A%20selector.%0D%09strings%20isEmpty%20ifTrue%3A%20%5B%20%5Efalse%20%5D.%0D%09stream%0D%09%09nextPutAll%3A%20%28self%20globalNameFor%3A%20aClass%29%3B%0D%09%09nextPutAll%3A%20%27%20%27%2Cselector%2C%27%3A%20%27%2C%20strings%20asLiteral.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutMethodsOf%3Aon%3A"), "fileOutMethodsOf_on_", function Exporter__fileOutMethodsOf_on_(aClass,stream){
var selectors = nil;
const self = this; selectors=aClass.selectors();
if ((selectors.isEmpty()).valueOf()) {return self};
stream.cr();
self.fileOutSelectors_of_on_(selectors,aClass,stream);
return self;
}
, "fileOut", unescape("fileOutMethodsOf%3A%20aClass%20on%3A%20stream%0D%09%22%20FileOut%20methods%20of%20a%20class%20onto%20stream.%20%22%0D%0D%09%7C%20selectors%20%7C%0D%09selectors%20%3A%3D%20aClass%20selectors.%0D%09selectors%20isEmpty%20ifTrue%3A%20%5B%20%5Eself%20%5D.%0D%09stream%20cr.%0D%09self%0D%09%09fileOutSelectors%3A%20selectors%0D%09%09of%3A%20aClass%20on%3A%20stream"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutClusters"), "fileOutClusters", function Exporter__fileOutClusters(){
const self = this; return (["APIBuilder"].select_((function Exporter__(key){
return smalltalk.Smalltalk.includesKey_(key);
}
))).collect_((function Exporter__(each){
return (smalltalk.Smalltalk.at_(each)).$$default();
}
));
}
, "private", unescape("fileOutClusters%0D%09%22%20Private%20-%20Return%20the%20fileOut%20chustering%20dumpers%20of%20the%20receiver.%0D%09A%20fileOutCluster%20is%20an%20object%20that%20potentially%20dump%20clustered%20actions%20for%20selectors%20implemented%20by%20aClass.%0D%09The%20fileOut%20write%20%28smalltalk%29code%20for%20multiple%20selectors%20removing%20them%20from%20selectors%20collection.%0D%09Note%3A%20the%20selectors%20collection%20is%20modified%20during%20fileOut.%0D%09The%20default%20answer%20is%20an%20empty%20collection%20of%20custed%20or%20a%20collection%20with%20default%20APIBuilder.%0D%09This%20method%20can%20be%20refined%20by%20the%20subclasses.%0D%09%22%0D%0D%09%5E%28%23%28%20%23APIBuilder%20%29%0D%09%09select%3A%20%5B%3Akey%7C%20Smalltalk%20includesKey%3A%20key%20%5D%29%0D%09%09collect%3A%20%5B%3Aeach%7C%20%28Smalltalk%20at%3A%20each%29%20default%20%5D"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutSelectors%3Aof%3Aon%3A"), "fileOutSelectors_of_on_", function Exporter__fileOutSelectors_of_on_(selectors,aClass,stream){
const self = this; (self.fileOutClusters()).do_((function Exporter__(each){
return each.fileOut_selectors_of_on_(self,selectors,aClass,stream);
}
));
(selectors.sorted()).do_((function Exporter__(each){
return self.fileOutMethod_of_on_((aClass.compiledMethodAt_(each)),aClass,stream);
}
));
return self;
}
, "fileOut", unescape("fileOutSelectors%3A%20selectors%20of%3A%20aClass%20on%3A%20stream%0D%09%22%20FileOut%20methods%20implementing%20selectors%20of%20a%20class%20onto%20stream.%20%22%0D%0D%09self%20fileOutClusters%20do%3A%20%5B%3Aeach%7C%0D%09%09each%0D%09%09%09fileOut%3A%20self%20selectors%3A%20selectors%0D%09%09%09of%3A%20aClass%20on%3A%20stream%0D%09%5D.%0D%09selectors%20sorted%20do%3A%20%5B%3Aeach%7C%0D%09%09self%0D%09%09%09fileOutMethod%3A%20%28aClass%20compiledMethodAt%3A%20each%29%0D%09%09%09of%3A%20aClass%20on%3A%20stream%0D%09%5D."));
smalltalk.bind(smalltalk.Exporter, unescape("isASymbol%3A"), "isASymbol_", function Exporter__isASymbol_(aString){
const self = this; return (nil.isNil_((smalltalk.RegularExpression.fromString_(unescape("%5B%5Ea-zA-Z0-9_%3A%5D"))).exec_(aString)));
}
, "private", unescape("isASymbol%3A%20aString%0D%09%22%20Private%20-%20Return%20true%20if%20aString%20can%20be%20output%20with%20symbol%20notation.%20%22%0D%0D%09%5E%28%28RegularExpression%20fromString%3A%20%27%5B%5Ea-zA-Z0-9_%3A%5D%27%29%20exec%3A%20aString%29%20isNil"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutMethod%3A"), "fileOutMethod_", function Exporter__fileOutMethod_(aMethod){
var stream = nil;
const self = this; stream="".writeStream();
self.fileOutMethod_of_on_(aMethod,(aMethod.classField()),stream);
return stream.contents();
}
, "fileOut", unescape("fileOutMethod%3A%20aMethod%0D%09%22%20Return%20the%20fileOut%20of%20aMethod.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20%27%27%20writeStream.%0D%09self%20fileOutMethod%3A%20aMethod%20of%3A%20aMethod%20classField%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutMethod%3Aon%3A"), "fileOutMethod_on_", function Exporter__fileOutMethod_on_(aMethod,aStream){
const self = this; return self.fileOutMethod_of_on_(aMethod,(aMethod.classField()),aStream);
}
, "fileOut", unescape("fileOutMethod%3A%20aMethod%20on%3A%20aStream%0D%09%22%20Return%20the%20fileOut%20of%20aMethod.%20%22%0D%0D%09%5Eself%0D%09%09fileOutMethod%3A%20aMethod%0D%09%09of%3A%20aMethod%20classField%0D%09%09on%3A%20aStream"));
smalltalk.bind(smalltalk.Exporter, unescape("fileOutMethod%3Aof%3Aon%3A"), "fileOutMethod_of_on_", function Exporter__fileOutMethod_of_on_(aMethod,aClass,stream){
const self = this; (function Exporter__($1$){
$1$.cr();
$1$.nextChunkPut_("");
$1$.nextChunkPut_(((((" "._comma((self.globalNameFor_(aClass))))._comma(" methodsFor: "))._comma(((aMethod.category()).asLiteral())))._comma(" ")));
$1$.cr();
$1$.nextChunkPut_((aMethod.source()));
$1$.nextChunkPut_(" ");
return $1$.cr()}
)(stream);
return self;
}
, "fileOut", unescape("fileOutMethod%3A%20aMethod%20of%3A%20aClass%20on%3A%20stream%0D%09%22%20FileOut%20method%20of%20a%20class%20onto%20stream.%20%22%0D%0D%09stream%0D%09%09cr%3BnextChunkPut%3A%20%27%27%3B%0D%09%09nextChunkPut%3A%20%27%20%27%2C%20%28self%20globalNameFor%3A%20aClass%29%2C%20%27%20methodsFor%3A%20%27%2C%20aMethod%20category%20asLiteral%20%2C%27%20%27%3B%20cr%3B%0D%09%09nextChunkPut%3A%20aMethod%20source%3B%0D%09%09nextChunkPut%3A%20%27%20%27%3Bcr"));
smalltalk.bind(smalltalk.Exporter, unescape("exportCategory%3A"), "exportCategory_", function Exporter__exportCategory_(aString){
var stream = nil;
var match = nil;
const self = this; stream="".writeStream();
match=self.matchCategory_(aString);
(match.first()).do_((function Exporter__(each){
return stream.nextPutAll_((self.export_(each)));
}
));
(match.last()).do_((function Exporter__(aMethod){
return self.export_method_on_((aMethod.classField()),aMethod,stream);
}
));
return stream.contents();
}
, "export", unescape("exportCategory%3A%20aString%0D%09%22%20Return%20the%20result%20of%20exporting%20all%20the%20classes%20in%20category%20aString.%20%22%0D%0D%09%7C%20stream%20match%20%7C%0D%09stream%20%3A%3D%20%27%27%20writeStream.%0D%09match%20%3A%3D%20self%20matchCategory%3A%20aString.%0D%09match%20first%20do%3A%20%5B%3Aeach%7C%20stream%20nextPutAll%3A%20%28self%20export%3A%20each%29%20%5D.%0D%09match%20last%20do%3A%20%5B%3AaMethod%20%7C%0D%09%09self%20export%3A%20aMethod%20classField%20method%3A%20aMethod%20on%3A%20stream%0D%09%5D.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("exportCategories%3A"), "exportCategories_", function Exporter__exportCategories_(categories){
const self = this; if ((categories.isString()).valueOf()) {return self.exportCategories_((categories.asArrayOfSubstrings()))};
return (categories.asArray()).inject_into_("",(function Exporter__(total,each){
return total._comma((self.exportCategory_(each)));
}
));
}
, "export", unescape("exportCategories%3A%20categories%0D%09%22%20Return%20the%20result%20of%20exporting%20all%20the%20classes%20in%20categories.%20%22%0D%0D%09categories%20isString%20ifTrue%3A%20%5B%20%5Eself%20exportCategories%3A%20categories%20asArrayOfSubstrings%20%5D.%0D%09%5Ecategories%20asArray%20inject%3A%20%27%27%20into%3A%20%5B%3Atotal%20%3Aeach%7C%0D%09%09total%2C%20%28self%20exportCategory%3A%20each%29%0D%09%5D"));
smalltalk.bind(smalltalk.Exporter, unescape("exportAllMethodsOf%3Aon%3A"), "exportAllMethodsOf_on_", function Exporter__exportAllMethodsOf_on_(aClass,stream){
const self = this; self.exportMethodsOf_on_((aClass.$klass),stream);
self.exportMethodsOf_on_(aClass,stream);
return self;
}
, "export", unescape("exportAllMethodsOf%3A%20aClass%20on%3A%20stream%0D%09%22%20Export%20all%20methods%20of%20a%20class%20%28and%20metaclass%29%20onto%20stream.%20%22%0D%0D%09self%20exportMethodsOf%3A%20aClass%20class%20on%3A%20stream.%0D%09self%20exportMethodsOf%3A%20aClass%20on%3A%20stream."));
smalltalk.bind(smalltalk.Exporter, unescape("exportDefinitionOfClass%3Aon%3A"), "exportDefinitionOfClass_on_", function Exporter__exportDefinitionOfClass_on_(aClass,stream){
const self = this; self.exportDefinitionOf_on_(aClass,stream);
self.exportMetaDefinitionOf_on_(aClass,stream);
return self;
}
, "export", unescape("exportDefinitionOfClass%3A%20aClass%20on%3A%20stream%0D%09%22%20Export%20definition%20of%20aClass%20%28and%20metaclass%29%20onto%20stream.%20%22%0D%0D%09self%20exportDefinitionOf%3A%20aClass%20on%3A%20stream.%0D%09self%20exportMetaDefinitionOf%3A%20aClass%20on%3A%20stream."));
smalltalk.bind(smalltalk.Exporter, unescape("export%3A"), "export_", function Exporter__export_(aClass){
var stream = nil;
const self = this; stream="".writeStream();
self.exportDefinitionOfClass_on_(aClass,stream);
self.exportAllMethodsOf_on_(aClass,stream);
return stream.contents();
}
, "export", unescape("export%3A%20aClass%0D%09%22%20Return%20the%20result%20of%20exporting%20definition%20and%20source%20code%20of%20a%20class.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20%27%27%20writeStream.%0D%09self%20exportDefinitionOfClass%3A%20aClass%20on%3A%20stream.%0D%09self%20exportAllMethodsOf%3A%20aClass%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("exportNew%3A"), "exportNew_", function Exporter__exportNew_(aClass){
const self = this; return self.exportDefinitionOf_(aClass);
}
, "export", unescape("exportNew%3A%20aClass%0D%09%22%20Return%20the%20result%20of%20exporting%20definition%20of%20aClass.%20%22%0D%0D%09%5Eself%20exportDefinitionOf%3A%20aClass"));
smalltalk.bind(smalltalk.Exporter, unescape("defaultRequirementsFor%3A"), "defaultRequirementsFor_", function Exporter__defaultRequirementsFor_(aClass){
var constructorName = nil;
var code = nil;
const self = this; constructorName=aClass.constructorName();
if (((nil.isNil_(constructorName))).valueOf()) {return []};
return smalltalk.Array.with_(((((((((((((unescape("if%28")._comma(constructorName))._comma(unescape("%20%26%26%20%21")))._comma((self.smalltalkNameFor_(aClass))))._comma(unescape("%29%20smalltalk.mapClassName%28%22")))._comma((self.globalNameFor_(aClass))))._comma(unescape("%22%2C%22")))._comma((aClass.category())))._comma(unescape("%22%2C")))._comma(constructorName))._comma(unescape("%2C")))._comma((self.smalltalkNameFor_((aClass.superclass())))))._comma(unescape("%29%3B"))));
}
, "requirements", unescape("defaultRequirementsFor%3A%20aClass%0D%09%22%20Private%20-%20Return%20the%20default%20requirements%20to%20load%20aClass.%0D%09Detect%20native%20bindings%20and%20generate%20code%20to%20rebind%20before%20class%20definition.%0D%09%22%0D%0D%09%7C%20constructorName%20code%20%7C%0D%09constructorName%20%3A%3D%20aClass%20constructorName.%0D%09constructorName%20isNil%20ifTrue%3A%20%5B%20%5E%23%28%29%20%5D.%0D%09%5EArray%20with%3A%0D%09%09%27if%28%27%2CconstructorName%2C%27%20%26%26%20%21%27%0D%09%09%2C%20%28self%20smalltalkNameFor%3A%20aClass%29%0D%09%09%2C%27%29%20smalltalk.mapClassName%28%22%27%0D%09%09%2C%28self%20globalNameFor%3A%20aClass%29%20%2C%27%22%2C%22%27%0D%09%09%2CaClass%20category%2C%20%27%22%2C%27%0D%09%09%2CconstructorName%2C%20%27%2C%27%0D%09%09%2C%28self%20smalltalkNameFor%3A%20aClass%20superclass%29%0D%09%09%2C%27%29%3B%27"));
smalltalk.bind(smalltalk.Exporter, unescape("loadRequirementsOf%3A"), "loadRequirementsOf_", function Exporter__loadRequirementsOf_(aClass){
var requirements = nil;
const self = this; requirements=self.defaultRequirementsFor_(aClass);
aClass.loadRequirementsInto_(requirements);
return requirements;
}
, "requirements", unescape("loadRequirementsOf%3A%20aClass%0D%09%22%20Return%20the%20requirements%20to%20load%20aClass.%0D%09It%20must%20be%20a%20collection%20of%20requirements.%0D%09aRequirement%20must%20implement%20%23fileOutOn%3A%20or%20must%20be%20a%20string%20with%20javascript%20code%20to%20execute%20just%20before%20defining%20aClass.%0D%09%22%0D%0D%09%7C%20requirements%20%7C%0D%09requirements%20%3A%3D%20self%20defaultRequirementsFor%3A%20aClass.%0D%09aClass%20loadRequirementsInto%3A%20requirements.%0D%09%5Erequirements"));
smalltalk.bind(smalltalk.Exporter, unescape("exportDefinitionOf%3Aon%3A"), "exportDefinitionOf_on_", function Exporter__exportDefinitionOf_on_(aClass,aStream){
const self = this; (self.loadRequirementsOf_(aClass)).do_((function Exporter__(each){
if ((each.isString()).valueOf()) {return (function Exporter__($1$){
$1$.nextPutAll_(each);
return $1$.cr()}
)(aStream)} else {return aStream.fileOutOn_(aStream)};
}
));
(function Exporter__($2$){
$2$.nextPutAll_(((unescape("smalltalk.addClass%28%22")._comma((self.globalNameFor_(aClass))))._comma(unescape("%22%2C"))));
$2$.nextPutAll_((self.smalltalkNameFor_((aClass.superclass()))));
return $2$.nextPutAll_(unescape("%2C%20%5B"))}
)(aStream);
(aClass.instanceVariableNames()).do_separatedBy_((function Exporter__(each){
return aStream.nextPutAll_(((unescape("%27")._comma(each))._comma(unescape("%27"))));
}
),(function Exporter__(){
return aStream.nextPutAll_(unescape("%2C%20"));
}
));
(function Exporter__($3$){
$3$.nextPutAll_(unescape("%5D%2C%20%27"));
$3$.nextPutAll_(((aClass.category())._comma(unescape("%27"))));
$3$.nextPutAll_(unescape("%29%3B"));
return $3$.cr()}
)(aStream);
if ((((nil.isNil_(aClass.comment())===false)).and_((function Exporter__(){
return (aClass.comment()).notEmpty();
}
))).valueOf()) {(function Exporter__($4$){
$4$.nextPutAll_((self.smalltalkNameFor_(aClass)));
$4$.nextPutAll_((unescape(".%24comment%3D")._comma(((aClass.comment()).escapedCode()))));
$4$.nextPutAll_(unescape("%3B"));
return $4$.cr()}
)(aStream)};
if (((nil.isNil_(aClass.classVariables())===false)).valueOf()) {(function Exporter__($5$){
$5$.nextPutAll_((self.smalltalkNameFor_(aClass)));
$5$.nextPutAll_((unescape(".%24classVariableNames%3D")._comma(((aClass.classVariablesString()).escapedCode()))));
$5$.nextPutAll_(unescape("%3B"));
return $5$.cr()}
)(aStream)};
if (((nil.isNil_(aClass.poolDictionaries())===false)).valueOf()) {(function Exporter__($6$){
$6$.nextPutAll_((self.smalltalkNameFor_(aClass)));
return $6$.nextPutAll_(unescape(".%24poolDictionaries%3D%5B"))}
)(aStream);
(aClass.poolDictionaries()).do_separatedBy_((function Exporter__(each){
return aStream.nextPutAll_(((unescape("%27")._comma(each))._comma(unescape("%27"))));
}
),(function Exporter__(){
return aStream.nextPutAll_(unescape("%2C%20"));
}
));
(function Exporter__($7$){
$7$.nextPutAll_(unescape("%5D%3B"));
return $7$.cr()}
)(aStream)};
if (((aClass.propertyNames()).notEmpty()).valueOf()) {(function Exporter__($8$){
$8$.nextPutAll_((self.smalltalkNameFor_(aClass)));
return $8$.nextPutAll_(unescape(".%24propertyNames%3D%5B"))}
)(aStream);
(aClass.propertyNames()).do_separatedBy_((function Exporter__(each){
return aStream.nextPutAll_(((unescape("%27")._comma(each))._comma(unescape("%27"))));
}
),(function Exporter__(){
return aStream.nextPutAll_(unescape("%2C%20"));
}
));
(function Exporter__($9$){
$9$.nextPutAll_(unescape("%5D%3B"));
return $9$.cr()}
)(aStream)};
return self;
}
, "private", unescape("exportDefinitionOf%3A%20aClass%20on%3A%20aStream%0D%09%22%20Export%20definition%20of%20aClass%20onto%20aStream.%20%22%0D%0D%09%28self%20loadRequirementsOf%3A%20aClass%29%20do%3A%20%5B%3Aeach%7C%0D%09%09each%20isString%0D%09%09ifTrue%3A%20%5B%20aStream%20nextPutAll%3A%20each%3Bcr%20%5D%0D%09%09ifFalse%3A%20%5B%20aStream%20fileOutOn%3A%20aStream%20%5D.%0D%09%5D.%0D%09aStream%0D%09%20%20%20%20nextPutAll%3A%20%27smalltalk.addClass%28%22%27%2C%20%28self%20globalNameFor%3A%20aClass%29%2C%20%27%22%2C%27%3B%0D%09%20%20%20%20nextPutAll%3A%20%28self%20smalltalkNameFor%3A%20aClass%20superclass%29%3B%0D%09%20%20%20%20nextPutAll%3A%20%27%2C%20%5B%27.%0D%09aClass%20instanceVariableNames%0D%09%20%20%20%20do%3A%20%5B%3Aeach%20%7C%20aStream%20nextPutAll%3A%20%27%27%27%27%2C%20each%2C%20%27%27%27%27%20%5D%0D%09%20%20%20%20separatedBy%3A%20%5B%20aStream%20nextPutAll%3A%20%27%2C%20%27%20%5D.%0D%09aStream%0D%09%20%20%20%20nextPutAll%3A%20%27%5D%2C%20%27%27%27%3B%0D%09%20%20%20%20nextPutAll%3A%20aClass%20category%2C%20%27%27%27%27%3B%0D%09%20%20%20%20nextPutAll%3A%20%27%29%3B%27%3B%20cr.%0D%09%28aClass%20comment%20notNil%20and%3A%20%5BaClass%20comment%20notEmpty%5D%29%20ifTrue%3A%20%5B%0D%09%20%20%20%20aStream%0D%09%09nextPutAll%3A%20%28self%20smalltalkNameFor%3A%20aClass%29%3B%0D%09%09nextPutAll%3A%20%27.%24comment%3D%27%20%2CaClass%20comment%20escapedCode%3B%0D%09%09nextPutAll%3A%20%27%3B%27%3B%20cr%0D%09%5D.%0D%09aClass%20classVariables%20notNil%20ifTrue%3A%20%5B%0D%09%20%20%20%20aStream%0D%09%09nextPutAll%3A%20%28self%20smalltalkNameFor%3A%20aClass%29%3B%0D%09%09nextPutAll%3A%20%27.%24classVariableNames%3D%27%20%2CaClass%20classVariablesString%20escapedCode%3B%0D%09%09nextPutAll%3A%20%27%3B%27%3B%20cr%0D%09%5D.%0D%09aClass%20poolDictionaries%20notNil%20ifTrue%3A%20%5B%0D%09%20%20%20%20aStream%0D%09%09nextPutAll%3A%20%28self%20smalltalkNameFor%3A%20aClass%29%3B%0D%09%09nextPutAll%3A%20%27.%24poolDictionaries%3D%5B%27.%0D%09%20%20%20%20aClass%20poolDictionaries%0D%09%20%20%20%20%09do%3A%20%5B%3Aeach%20%7C%20aStream%20nextPutAll%3A%20%27%27%27%27%2C%20each%2C%20%27%27%27%27%20%5D%0D%09%20%20%20%20%09separatedBy%3A%20%5B%20aStream%20nextPutAll%3A%20%27%2C%20%27%20%5D.%0D%09%20%20%20%20aStream%20%20nextPutAll%3A%20%27%5D%3B%27%3B%20cr%0D%09%5D.%0D%09aClass%20propertyNames%20notEmpty%20ifTrue%3A%20%5B%0D%09%20%20%20%20aStream%0D%09%09nextPutAll%3A%20%28self%20smalltalkNameFor%3A%20aClass%29%3B%0D%09%09nextPutAll%3A%20%27.%24propertyNames%3D%5B%27.%0D%09%20%20%20%20aClass%20propertyNames%0D%09%20%20%20%20%09do%3A%20%5B%3Aeach%20%7C%20aStream%20nextPutAll%3A%20%27%27%27%27%2C%20each%2C%20%27%27%27%27%20%5D%0D%09%20%20%20%20%09separatedBy%3A%20%5B%20aStream%20nextPutAll%3A%20%27%2C%20%27%20%5D.%0D%09%20%20%20%20aStream%20%20nextPutAll%3A%20%27%5D%3B%27%3B%20cr%0D%09%5D."));
smalltalk.bind(smalltalk.Exporter, unescape("exportMetaDefinitionOf%3Aon%3A"), "exportMetaDefinitionOf_on_", function Exporter__exportMetaDefinitionOf_on_(aClass,aStream){
const self = this; if ((((aClass.$klass).instanceVariableNames()).notEmpty()).valueOf()) {(function Exporter__($1$){
$1$.nextPutAll_((self.smalltalkNameFor_((aClass.$klass))));
return $1$.nextPutAll_(unescape(".%24iVarNames%20%3D%20%5B"))}
)(aStream);
((aClass.$klass).instanceVariableNames()).do_separatedBy_((function Exporter__(each){
return aStream.nextPutAll_(((unescape("%27")._comma(each))._comma(unescape("%27"))));
}
),(function Exporter__(){
return aStream.nextPutAll_(unescape("%2C"));
}
));
(function Exporter__($2$){
$2$.nextPutAll_(unescape("%5D%3B"));
return $2$.cr()}
)(aStream)};
if ((((aClass.$klass).propertyNames()).notEmpty()).valueOf()) {(function Exporter__($3$){
$3$.nextPutAll_((self.smalltalkNameFor_((aClass.$klass))));
return $3$.nextPutAll_(unescape(".%24propertyNames%20%3D%20%5B"))}
)(aStream);
((aClass.$klass).propertyNames()).do_separatedBy_((function Exporter__(each){
return aStream.nextPutAll_(((unescape("%27")._comma(each))._comma(unescape("%27"))));
}
),(function Exporter__(){
return aStream.nextPutAll_(unescape("%2C"));
}
));
(function Exporter__($4$){
$4$.nextPutAll_(unescape("%5D%3B"));
return $4$.cr()}
)(aStream)};
return self;
}
, "private", unescape("exportMetaDefinitionOf%3A%20aClass%20on%3A%20aStream%0D%09%22%20Export%20class%20side%20definition%20of%20aClass%20onto%20aStream.%20%22%0D%0D%09aClass%20class%20instanceVariableNames%20notEmpty%20ifTrue%3A%20%5B%0D%09%09aStream%0D%09%09%09nextPutAll%3A%20%28self%20smalltalkNameFor%3A%20aClass%20class%29%3B%0D%09%09%09nextPutAll%3A%20%27.%24iVarNames%20%3D%20%5B%27.%0D%09%09aClass%20class%20instanceVariableNames%0D%09%09%09do%3A%20%5B%3Aeach%20%7C%20aStream%20nextPutAll%3A%20%27%27%27%27%2C%20each%2C%20%27%27%27%27%20%5D%0D%09%09%09separatedBy%3A%20%5B%20aStream%20nextPutAll%3A%20%27%2C%27%20%5D.%0D%09%09aStream%20nextPutAll%3A%20%27%5D%3B%27%3B%20cr.%0D%09%5D.%0D%0D%09aClass%20class%20propertyNames%20notEmpty%20ifTrue%3A%20%5B%0D%09%09aStream%0D%09%09%09nextPutAll%3A%20%28self%20smalltalkNameFor%3A%20aClass%20class%29%3B%0D%09%09%09nextPutAll%3A%20%27.%24propertyNames%20%3D%20%5B%27.%0D%09%09aClass%20class%20propertyNames%0D%09%09%09do%3A%20%5B%3Aeach%20%7C%20aStream%20nextPutAll%3A%20%27%27%27%27%2C%20each%2C%20%27%27%27%27%20%5D%0D%09%09%09separatedBy%3A%20%5B%20aStream%20nextPutAll%3A%20%27%2C%27%20%5D.%0D%09%09aStream%20nextPutAll%3A%20%27%5D%3B%27%3B%20cr.%0D%09%5D."));
smalltalk.bind(smalltalk.Exporter, unescape("smalltalkNameFor%3A"), "smalltalkNameFor_", function Exporter__smalltalkNameFor_(aClass){
const self = this; if (((nil.isNil_(aClass))).valueOf()) {return "undefined"};
return "smalltalk."._comma(((aClass.isMetaclass()).ifTrue_ifFalse_((function Exporter__(){
return ((aClass.instanceClass()).name())._comma(".$klass");
}
),(function Exporter__(){
return aClass.name();
}
))));
}
, "private", unescape("smalltalkNameFor%3A%20aClass%0D%09%22%20Private%20-%20Return%20the%20javascript%20reference%20expression%20of%20aClass%20%28or%20nil%29.%20%22%0D%0D%09aClass%20isNil%20ifTrue%3A%20%5B%20%5E%23undefined%20%5D.%0D%09%5E%27smalltalk.%27%2C%20%28aClass%20isMetaclass%0D%09%20%20%20%20ifTrue%3A%20%5B%20aClass%20instanceClass%20name%2C%20%27.%24klass%27%20%5D%0D%09%20%20%20%20ifFalse%3A%20%5B%20aClass%20name%20%5D%29"));
smalltalk.bind(smalltalk.Exporter, unescape("globalNameFor%3A"), "globalNameFor_", function Exporter__globalNameFor_(aClass){
const self = this; if (((nil.isNil_(aClass))).valueOf()) {return "nil"} else {return aClass.name()};
}
, "private", unescape("globalNameFor%3A%20aClass%0D%09%22%20Private%20-%20Return%20the%20smalltalk%20name%20of%20aClass%20%28or%20nil%29.%20%22%0D%0D%09%5EaClass%20isNil%20ifTrue%3A%20%5B%20%23nil%20%5D%20ifFalse%3A%20%5B%20aClass%20name%20%5D"));
smalltalk.bind(smalltalk.Exporter, unescape("exportAll"), "exportAll", function Exporter__exportAll(){
const self = this; return self.exportClasses_(((self.$klass).allClasses()));
}
, "export", unescape("exportAll%0D%09%22%20Return%20the%20result%20of%20exporting%20all%20classes%20in%20the%20system.%20%22%0D%0D%09%5Eself%20exportClasses%3A%20self%20class%20allClasses"));
smalltalk.bind(smalltalk.Exporter, unescape("exportAllCategories"), "exportAllCategories", function Exporter__exportAllCategories(){
var categories = nil;
const self = this; categories=smalltalk.Array.$$new();
((self.$klass).allClasses()).do_((function Exporter__(each){
if ((categories.includes_((each.category()))).not()) {return categories.add_((each.category()))} else {return nil};
}
));
return categories.inject_into_("",(function Exporter__(total,each){
return total._comma((self.exportCategory_(each)));
}
));
}
, "export", unescape("exportAllCategories%0D%09%22%20Return%20the%20result%20of%20exporting%20all%20categories%20in%20the%20system.%20%22%0D%0D%09%7C%20categories%20%7C%0D%09categories%20%3A%3D%20Array%20new.%0D%09self%20class%20allClasses%20do%3A%20%5B%3Aeach%20%7C%0D%09%09%28categories%20includes%3A%20each%20category%29%20ifFalse%3A%20%5B%0D%09%09%09categories%20add%3A%20each%20category%0D%09%09%5D%0D%09%5D.%0D%09%5Ecategories%20inject%3A%20%27%27%20into%3A%20%5B%3Atotal%20%3Aeach%20%7C%20total%20%2C%28self%20exportCategory%3A%20each%29%20%5D"));
smalltalk.bind(smalltalk.Exporter, unescape("exportDefinitionOf%3A"), "exportDefinitionOf_", function Exporter__exportDefinitionOf_(aClass){
var stream = nil;
const self = this; stream=(smalltalk.String.$$new()).writeStream();
self.exportDefinitionOf_on_(aClass,stream);
return stream.contents();
}
, "export", unescape("exportDefinitionOf%3A%20aClass%0D%09%22%20Return%20the%20result%20of%20exporting%20definition%20of%20aClass.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20String%20new%20writeStream.%0D%09self%20exportDefinitionOf%3A%20aClass%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("exportMetaDefinitionOf%3A"), "exportMetaDefinitionOf_", function Exporter__exportMetaDefinitionOf_(aClass){
var stream = nil;
const self = this; stream=(smalltalk.String.$$new()).writeStream();
self.exportMetaDefinitionOf_on_(aClass,stream);
return stream.contents();
}
, "export", unescape("exportMetaDefinitionOf%3A%20aClass%0D%09%22%20Return%20the%20result%20of%20exporting%20class%20side%20definition%20of%20aClass.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20String%20new%20writeStream.%0D%09self%20exportMetaDefinitionOf%3A%20aClass%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("exportClasses%3Aon%3A"), "exportClasses_on_", function Exporter__exportClasses_on_(classes,stream){
const self = this; return self.exportAll_on_(classes,stream);
}
, "export", unescape("exportClasses%3A%20classes%20on%3A%20stream%0D%09%22%20Return%20the%20result%20of%20exporting%20class%20definitions%20onto%20stream.%20%22%0D%0D%09%5Eself%20exportAll%3A%20classes%20on%3A%20stream"));
smalltalk.bind(smalltalk.Exporter, unescape("exportAll%3Aon%3A"), "exportAll_on_", function Exporter__exportAll_on_(elements,stream){
const self = this; if ((elements.isString()).valueOf()) {return self.exportAll_on_((elements.asArrayOfSubstrings()),stream)};
elements.do_((function Exporter__(each){
if (((smalltalk.is_kindOf_(each,smalltalk.Behavior))).valueOf()) {return self.exportDefinitionOfClass_on_(each,stream)} else {return nil};
}
));
stream.cr();
elements.do_((function Exporter__(each){
if (((smalltalk.is_kindOf_(each,smalltalk.Behavior))).valueOf()) {return self.exportAllMethodsOf_on_(each,stream)} else {if ((each.isString()).valueOf()) {return (function Exporter__($1$){
$1$.nextPutAll_((self.exportCategory_(each)));
return $1$.cr()}
)(stream)} else {return self.exportMethod_on_(each,stream)}};
}
));
return self;
}
, "export", unescape("exportAll%3A%20elements%20on%3A%20stream%0D%09%22%20Return%20the%20result%20of%20exporting%20elements%20%28classes%2C%20methods%20and/or%20categories%29%20onto%20stream.%20%22%0D%0D%09elements%20isString%20ifTrue%3A%20%5B%20%5Eself%20exportAll%3A%20elements%20asArrayOfSubstrings%20on%3A%20stream%20%5D.%0D%09elements%20do%3A%20%5B%3Aeach%7C%0D%09%09%28each%20isKindOf%3A%20Behavior%29%20ifTrue%3A%20%5B%0D%09%09%09self%20exportDefinitionOfClass%3A%20each%20on%3A%20stream%0D%09%09%5D.%0D%09%5D.%0D%09stream%20cr.%0D%09elements%20do%3A%20%5B%3Aeach%7C%0D%09%09%28each%20isKindOf%3A%20Behavior%29%20ifTrue%3A%20%5B%0D%09%09%09self%20exportAllMethodsOf%3A%20each%20on%3A%20stream%0D%09%09%5D%20ifFalse%3A%20%5B%0D%09%09%09each%20isString%0D%09%09%09ifTrue%3A%20%5B%20stream%20nextPutAll%3A%20%28self%20exportCategory%3A%20each%29%3Bcr%20%5D%0D%09%09%09ifFalse%3A%20%5B%20self%20exportMethod%3A%20each%20on%3A%20stream%20%5D%0D%09%09%5D%0D%09%5D."));
smalltalk.bind(smalltalk.Exporter, unescape("exportAll%3A"), "exportAll_", function Exporter__exportAll_(elements){
var stream = nil;
const self = this; stream=(smalltalk.String.$$new()).writeStream();
self.exportAll_on_(elements,stream);
return stream.contents();
}
, "export", unescape("exportAll%3A%20elements%0D%09%22%20Return%20the%20result%20of%20exporting%20elements%20%28classes%2C%20methods%20and/or%20categories%29.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20String%20new%20writeStream.%0D%09self%20exportAll%3A%20elements%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("exportClasses%3A"), "exportClasses_", function Exporter__exportClasses_(classes){
var stream = nil;
const self = this; stream=(smalltalk.String.$$new()).writeStream();
self.exportClasses_on_(classes,stream);
return stream.contents();
}
, "export", unescape("exportClasses%3A%20classes%0D%09%22%20Return%20the%20result%20of%20exporting%20classes.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20String%20new%20writeStream.%0D%09self%20exportClasses%3A%20classes%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("exportObject%3Aon%3A"), "exportObject_on_", function Exporter__exportObject_on_(anObject,stream){
const self = this; stream.nextPutAll_((anObject.asJavascript()));
return self;
}
, "export", unescape("exportObject%3A%20anObject%20on%3A%20stream%0D%09%22%20Export%20a%20%28javascript%29literal%20representation%20of%20anObject%20onto%20stream.%20%22%0D%0D%09stream%20nextPutAll%3A%20anObject%20asJavascript."));
smalltalk.bind(smalltalk.Exporter, unescape("exportObject%3A"), "exportObject_", function Exporter__exportObject_(anObject){
var stream = nil;
const self = this; stream=(smalltalk.String.$$new()).writeStream();
self.exportObject_on_(anObject,stream);
return stream.contents();
}
, "export", unescape("exportObject%3A%20anObject%0D%09%22%20Return%20the%20result%20of%20exporting%20a%20literal%20representation%20of%20anObject.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20String%20new%20writeStream.%0D%09self%20exportObject%3A%20anObject%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("export%3Amethod%3A"), "export_method_", function Exporter__export_method_(aClass,aMethod){
var stream = nil;
const self = this; stream=(smalltalk.String.$$new()).writeStream();
self.export_method_on_(aClass,aMethod,stream);
return stream.contents();
}
, "export", unescape("export%3A%20aClass%20method%3A%20aMethod%0D%09%22%20Return%20the%20result%20of%20exporting%20aClass%20method.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20String%20new%20writeStream.%0D%09self%20export%3A%20aClass%20method%3A%20aMethod%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("exportMethod%3A"), "exportMethod_", function Exporter__exportMethod_(aMethod){
const self = this; return self.export_method_((aMethod.classField()),aMethod);
}
, "export", unescape("exportMethod%3A%20aMethod%0D%09%22%20Return%20the%20result%20of%20exporting%20aMethod.%20%22%0D%0D%09%5Eself%20export%3A%20aMethod%20classField%20method%3A%20aMethod"));
smalltalk.bind(smalltalk.Exporter, unescape("exportMethod%3Aon%3A"), "exportMethod_on_", function Exporter__exportMethod_on_(aMethod,aStream){
const self = this; return self.export_method_on_((aMethod.classField()),aMethod,aStream);
}
, "export", unescape("exportMethod%3A%20aMethod%20on%3A%20aStream%0D%09%22%20Return%20the%20result%20of%20exporting%20aMethod%20on%20stream.%20%22%0D%0D%09%5Eself%20export%3A%20aMethod%20classField%20method%3A%20aMethod%20on%3A%20aStream"));
smalltalk.bind(smalltalk.Exporter, unescape("exportMethods%3Aon%3A"), "exportMethods_on_", function Exporter__exportMethods_on_(aCollection,aStream){
const self = this; aCollection.do_((function Exporter__(each){
return self.exportMethod_on_(each,aStream);
}
));
return self;
}
, "export", unescape("exportMethods%3A%20aCollection%20on%3A%20aStream%0D%09%22%20Return%20the%20result%20of%20exporting%20aCollection%20of%20methods%20on%20stream.%20%22%0D%0D%09aCollection%20do%3A%20%5B%3Aeach%7C%20self%20exportMethod%3A%20each%20on%3A%20aStream%20%5D"));
smalltalk.bind(smalltalk.Exporter, unescape("exportMethods%3A"), "exportMethods_", function Exporter__exportMethods_(aCollection){
var stream = nil;
const self = this; stream=(smalltalk.String.$$new()).writeStream();
self.exportMethods_on_(aCollection,stream);
return stream.contents();
}
, "export", unescape("exportMethods%3A%20aCollection%0D%09%22%20Return%20the%20result%20of%20exporting%20aCollection%20of%20methods.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20String%20new%20writeStream.%0D%09self%20exportMethods%3A%20aCollection%20on%3A%20stream.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.Exporter, unescape("exportMethodsOf%3Aon%3A"), "exportMethodsOf_on_", function Exporter__exportMethodsOf_on_(aClass,aStream){
const self = this; aClass.methodsDo_((function Exporter__(each){
return self.export_method_on_(aClass,each,aStream);
}
));
return self;
}
, "private", unescape("exportMethodsOf%3A%20aClass%20on%3A%20aStream%0D%09%22%20Export%20methods%20of%20aClass%20onto%20aStream.%20%22%0D%0D%09aClass%20methodsDo%3A%20%5B%3Aeach%7C%0D%09%09self%20export%3A%20aClass%20method%3A%20each%20on%3A%20aStream%0D%09%5D"));
smalltalk.bind(smalltalk.Exporter, unescape("javascriptSourceFor%3A"), "javascriptSourceFor_", function Exporter__javascriptSourceFor_(aMethod){
const self = this; return (aMethod.fn()).compiledSource();
}
, "private", unescape("javascriptSourceFor%3A%20aMethod%0D%09%22%20Private%20-%20Return%20the%20code%20of%20javascript%20function%20implementing%20aMethod.%20%22%0D%0D%09%5EaMethod%20fn%20compiledSource"));
smalltalk.bind(smalltalk.Exporter, unescape("export%3Amethod%3Aon%3A"), "export_method_on_", function Exporter__export_method_on_(aClass,aMethod,aStream){
var functionName = nil;
var selectorName = nil;
var bar = nil;
const self = this; bar=unescape("%22").asString();
functionName=aMethod.selector();
if (((functionName.first()).isBackSlash()).valueOf()) {selectorName=(aMethod.selector()).escapedCode();
functionName=(functionName.asSelector()).escapedCode()} else {selectorName=(bar._comma((aMethod.selector())))._comma(bar);
if (((functionName.asSelector())._eq(((aMethod.selector()).replace_with_(unescape("%5C%3A"),"_")))).valueOf()) {functionName="0"} else {functionName=(bar._comma((functionName.asSelector())))._comma(bar)}};
aStream.nextPutAll_((((((((unescape("smalltalk.bind%28")._comma((self.smalltalkNameFor_(aClass))))._comma(unescape("%2C")))._comma(selectorName))._comma(unescape("%2C")))._comma(functionName))._comma(unescape("%0D%2C")))._comma((self.javascriptSourceFor_(aMethod)))));
if ((((nil.isNil_(aMethod.source())===false)).and_((function Exporter__(){
return (aMethod.source()).notEmpty();
}
))).valueOf()) {(function Exporter__($1$){
$1$.cr();
return $1$.nextPutAll_((((unescape("%2C")._comma(((aMethod.category()).escapedCode())))._comma(unescape("%2C")))._comma(((aMethod.source()).escapedCode()))))}
)(aStream)};
aStream.nextPutAll_(unescape("%29%3B%0D"));
return self;
}
, "export", unescape("export%3A%20aClass%20method%3A%20aMethod%20on%3A%20aStream%0D%09%22%20Export%20a%20method%20definition%20of%20aClass%20onto%20aStream.%20%22%0D%0D%09%7C%20functionName%20selectorName%20bar%20%7C%0D%09bar%20%3A%3D%20%24%22%20asString.%0D%09functionName%20%3A%3D%20aMethod%20selector.%0D%09functionName%20first%20isBackSlash%20ifTrue%3A%20%5B%0D%09%09selectorName%20%3A%3D%20aMethod%20selector%20escapedCode.%0D%09%09functionName%20%3A%3D%20functionName%20asSelector%20escapedCode.%0D%09%5D%20ifFalse%3A%20%5B%0D%09%09selectorName%20%3A%3D%20bar%20%2CaMethod%20selector%2C%20bar.%0D%09%09functionName%20asSelector%20%3D%20%28aMethod%20selector%20replace%3A%20%27%5C%3A%27%20with%3A%20%24_%29%20ifTrue%3A%20%5B%0D%09%09%09functionName%20%3A%3D%20%270%27%20%22we%20exploit%20the%20fact%20that%200%20isNil%20to%20signal%20a%20compact%20selector%22%0D%09%09%5D%20ifFalse%3A%20%5B%0D%09%09%09functionName%20%3A%3D%20bar%20%2CfunctionName%20asSelector%2C%20bar%0D%09%09%5D.%0D%09%5D.%0D%09aStream%0D%09%09nextPutAll%3A%20%27smalltalk.bind%28%27%2C%20%28self%20smalltalkNameFor%3A%20aClass%29%0D%09%09%09%2C%27%2C%27%2C%20selectorName%2C%20%27%2C%27%2C%20functionName%20%2C%27%0D%2C%27%09%09%09%2C%20%28self%20javascriptSourceFor%3A%20aMethod%29.%0D%09%28aMethod%20source%20notNil%20and%3A%20%5B%20aMethod%20source%20notEmpty%20%5D%29%20ifTrue%3A%20%5B%0D%09%20%20%20%20aStream%20cr%3B%20%22warning%3A%20this%20cr%20is%20important%20for%20debugger%22%0D%09%09nextPutAll%3A%20%27%2C%27%2C%20aMethod%20category%20escapedCode%0D%09%09%09%2C%27%2C%27%2C%20aMethod%20source%20escapedCode.%0D%09%5D.%0D%09aStream%20nextPutAll%3A%20%27%29%3B%0D%27"));
smalltalk.bind(smalltalk.String, unescape("showIt"), "showIt", function String__showIt(){
const self = this; return self.print_((self.logEvaluate()));
}
, "Tools-evaluating", unescape("showIt%0D%09%22%20Show/Print%20the%20result%20of%20evaluating%20the%20receiver.%20%22%0D%0D%09%5Eself%20print%3A%20self%20logEvaluate"));
smalltalk.bind(smalltalk.String, unescape("logEvaluate"), "logEvaluate", function String__logEvaluate(){
const self = this; return (function String__(){
return self.evaluate();
}
).logEvaluate_(self);
}
, "Tools-evaluating", unescape("logEvaluate%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver.%0D%09The%20source%20of%20evaluation%20will%20be%20logged.%0D%09%22%0D%0D%09%5E%5B%20self%20evaluate%20%5D%20logEvaluate%3A%20self%20"));
smalltalk.bind(smalltalk.String, unescape("evaluate"), "evaluate", function String__evaluate(){
const self = this; return ((self.smalltalk()).compilerSupport()).evaluate_(self);
}
, "Tools-evaluating", unescape("evaluate%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver.%20%22%0D%0D%09%5Eself%20smalltalk%20compilerSupport%20evaluate%3A%20self%20"));
smalltalk.bind(smalltalk.String, unescape("evaluateIn%3A"), "evaluateIn_", function String__evaluateIn_(aReceiver){
const self = this; return ((self.smalltalk()).compilerSupport()).evaluate_to_(self,aReceiver);
}
, "Tools-evaluating", unescape("evaluateIn%3A%20aReceiver%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver%20in%20the%20context%20of%20aReceiver.%20%22%0D%0D%09%5Eself%20smalltalk%20compilerSupport%20evaluate%3A%20self%20to%3A%20aReceiver"));
smalltalk.bind(smalltalk.String, unescape("doIt"), "doIt", function String__doIt(){
const self = this; return ((self.smalltalk()).compilerSupport()).doIt_(self);
}
, "Tools-evaluating", unescape("doIt%0D%09%22%20Return%20the%20result%20of%20evaluating%20the%20receiver%20or%20the%20error%20occurred%20during%20compilation%20or%20evaluation.%20%22%0D%0D%09%5Eself%20smalltalk%20compilerSupport%20doIt%3A%20self"));
smalltalk.bind(smalltalk.Smalltalk, unescape("fileInCode%3A"), "fileInCode_", function Smalltalk__fileInCode_(code){
const self = this; return (code.stream()).fileIn();
}
, "Tools-fileIn", unescape("fileInCode%3A%20code%0D%09%22%20FileIn%20the%20code%20into%20the%20receiver.%20%22%0D%0D%09%5Ecode%20stream%20fileIn"));
smalltalk.bind(smalltalk.String, unescape("fileIn"), "fileIn", function String__fileIn(){
const self = this; return (self.stream()).fileIn();
}
, "Tools-fileIn", unescape("fileIn%0D%09%22%20FileIn%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20stream%20fileIn"));
smalltalk.bind(smalltalk.String, unescape("fileOut"), "fileOut", function String__fileOut(){
const self = this; return smalltalk.Exporter.fileOut_(self);
}
, "Tools-fileOut", unescape("fileOut%0D%09%22%20FileOut%20the%20classes/categories%20in%20the%20receiver.%20%22%0D%0D%09%5EExporter%20fileOut%3A%20self"));
smalltalk.bind(smalltalk.String, unescape("export"), "$$export", function String__$$export(){
const self = this; return smalltalk.Exporter.export_(self);
}
, "Tools-fileOut", unescape("export%0D%09%22%20Export%20the%20classes/categories%20in%20the%20receiver.%20%22%0D%0D%09%5EExporter%20export%3A%20self"));
smalltalk.bind(smalltalk.Behavior, unescape("fileOut"), "fileOut", function Behavior__fileOut(){
const self = this; return smalltalk.Exporter.fileOut_((self.instanceClass()));
}
, "Tools-fileOut", unescape("fileOut%0D%09%22%20Return%20fileOut%20definition%20and%20code%20of%20a%20class.%20%22%0D%0D%09%5EExporter%20fileOut%3A%20self%20instanceClass"));
smalltalk.bind(smalltalk.Behavior, unescape("export"), "$$export", function Behavior__$$export(){
const self = this; return smalltalk.Exporter.export_((self.instanceClass()));
}
, "Tools-export", unescape("export%0D%09%22%20Return%20the%20result%20of%20exporting%20definition%20and%20source%20code%20of%20a%20class.%20%22%0D%0D%09%5EExporter%20export%3A%20self%20instanceClass"));
smalltalk.bind(smalltalk.Collection, unescape("fileOut"), "fileOut", function Collection__fileOut(){
var cr = nil;
const self = this; cr=unescape("%0D");
return self.inject_into_("",(function Collection__(total,each){
return (total._comma(cr))._comma((each.fileOut()));
}
));
}
, "Tools-fileOut", unescape("fileOut%0D%09%22%20Return%20fileOut%20definition%20and%20code%20of%20classes%20in%20the%20receiver.%20%22%0D%0D%09%7C%20cr%20%7C%0D%09cr%20%3A%3D%20%27%0D%27.%09%5Eself%20inject%3A%20%27%27%20into%3A%20%5B%3Atotal%20%3Aeach%7C%20total%20%2Ccr%2C%20each%20fileOut%20%5D"));
smalltalk.bind(smalltalk.Collection, unescape("export"), "$$export", function Collection__$$export(){
var cr = nil;
const self = this; cr=unescape("%0D");
return self.inject_into_("",(function Collection__(total,each){
return (total._comma(cr))._comma((each.$$export()));
}
));
}
, "Tools-export", unescape("export%0D%09%22%20Return%20the%20result%20of%20exporting%20definition%20and%20source%20code%20of%20classes%20in%20the%20receiver.%20%22%0D%0D%09%7C%20cr%20%7C%0D%09cr%20%3A%3D%20%27%0D%27.%09%5Eself%20inject%3A%20%27%27%20into%3A%20%5B%3Atotal%20%3Aeach%7C%20total%20%2Ccr%2C%20each%20export%20%5D"));
smalltalk.bind(smalltalk.String, unescape("asStSelector"), "asStSelector", function String__asStSelector(){
var operations = nil;
const self = this; var $early={name:"stReturn"};
try {
if ((self._eq("$")).valueOf()) {return ""};
if ((self._eq("_bk")).valueOf()) {return unescape("%5C")};
if ((self.match_(unescape("%5E%5B%24%5D%5B%24%5D"))).valueOf()) {return (self.copyFrom_to_((3),(self.size()))).asStSelector()};
operations=[[unescape("+"), "_plus"], [unescape("-"), "_minus"], [unescape("*"), "_star"], [unescape("/"), "_slash"], [unescape("%7C"), "_bar"], [unescape("%26"), "_amp"], [unescape("%3E"), "_gt"], [unescape("%3C"), "_lt"], [unescape("%3D"), "_eq"], [unescape("%2C"), "_comma"], [unescape("@"), "_at"], [unescape("%7E"), "_no"], [unescape("%5C"), "_bk"]];
operations.do_((function String__(tuple){
if ((self.match_((unescape("%5E")._comma((tuple.last()))))).valueOf()) {$early.result=(operations.reversed()).inject_into_(self,(function String__(result,each){
return result.replace_with_((each.last()),(each.first()));
}
)); throw ($early)} else {return nil};
}
));
return self.replace_with_("_",":");
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "Tools-converting", unescape("asStSelector%0D%09%22%20Return%20a%20smalltalk%20selector%20from%20a%20javascript%20function%20name.%0D%09Note%3A%20it%20must%20be%20the%20reverse%20operation%20of%20%23asSelector%0D%09%22%0D%0D%09%7C%20operations%20%7C%0D%09self%20%3D%20%27%24%27%20ifTrue%3A%20%5B%20%5E%27%27%20%5D.%0D%09self%20%3D%20%27_bk%27%20ifTrue%3A%20%5B%20%5E%24%5C%20%5D.%0D%09%28self%20match%3A%20%27%5E%5B%24%5D%5B%24%5D%27%29%20ifTrue%3A%20%5B%20%5E%28self%20copyFrom%3A%203%20to%3A%20self%20size%29%20asStSelector%20%5D.%0D%09operations%20%3A%3D%20%23%28%0D%09%09%23%28%20%24+%20%23_plus%20%29%0D%09%09%23%28%20%24-%20%23_minus%20%29%0D%09%09%23%28%20%24*%20%23_star%20%29%0D%09%09%23%28%20%24/%20%23_slash%20%29%0D%09%09%23%28%20%24%7C%20%23_bar%20%29%0D%09%09%23%28%20%24%26%20%23_amp%20%29%0D%09%09%23%28%20%24%3E%20%23_gt%20%29%0D%09%09%23%28%20%24%3C%20%23_lt%20%29%0D%09%09%23%28%20%24%3D%20%23_eq%20%29%0D%09%09%23%28%20%24%2C%20%23_comma%20%29%0D%09%09%23%28%20%24@%20%23_at%20%29%0D%09%09%23%28%20%24%7E%20%23_no%20%29%0D%09%09%23%28%20%24%5C%20%23_bk%20%29%0D%09%29.%0D%09operations%20do%3A%20%5B%3Atuple%7C%0D%09%09%28self%20match%3A%20%24%5E%20%2C%20tuple%20last%29%20ifTrue%3A%20%5B%0D%09%09%09%5Eoperations%20reversed%20inject%3A%20self%20into%3A%20%5B%3Aresult%20%3Aeach%7C%0D%09%09%09%09result%20replace%3A%20each%20last%20with%3A%20each%20first%0D%09%09%09%5D%0D%09%09%5D.%0D%09%5D.%0D%09%5Eself%20replace%3A%20%24_%20with%3A%20%24%3A"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("compiler"), "compiler", function UndefinedObject__compiler(){
const self = this; return ((self.smalltalk()).compilerSupport()).for_(nil);
}
, "Tools-printing", unescape("compiler%0D%09%22%20Return%20the%20compiler%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%20smalltalk%20compilerSupport%20for%3A%20nil"));
smalltalk.bind(smalltalk.Object, unescape("%3D%3D"), "_eq_eq", function Object___eq_eq(anObject){
const self = this; return (nil.is_eqeq_(anObject,self));
}
, "Tools-comparing", unescape("%3D%3D%20anObject%0D%09%5EanObject%20%3D%3D%20self"));
smalltalk.bind(smalltalk.Object, unescape("%7E%7E"), "_no_no", function Object___no_no(anObject){
const self = this; return (nil.is_eqeq_((nil.is_eqeq_(self,anObject)),false));
}
, "Tools-comparing", unescape("%7E%7E%20anObject%0D%09%5E%28self%20%3D%3D%20anObject%29%20%3D%3D%20false"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("%3D%3D"), "_eq_eq", function UndefinedObject___eq_eq(anObject){
const self = this; return (nil.isNil_(anObject));
}
, "Tools-comparing", unescape("%3D%3D%20anObject%0D%09%5EanObject%20isNil"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("%7E%7E"), "_no_no", function UndefinedObject___no_no(anObject){
const self = this; return (nil.isNil_(anObject)===false);
}
, "Tools-comparing", unescape("%7E%7E%20anObject%0D%09%5EanObject%20notNil"));
smalltalk.addClass("Transcript", smalltalk.Object, [], 'Transcript');
smalltalk.Transcript.$classVariableNames=("");
smalltalk.bind(smalltalk.Transcript.$klass, unescape("cr"), "cr", function Transcript_class__cr(){
const self = this; self.nextPutAll_((smalltalk.Character.cr()));
return self;
}
, "io", unescape("cr%0D%09%22%20Put%20a%20line%20break%20sequence%20onto%20the%20receiver.%20%22%0D%09self%20nextPutAll%3A%20Character%20cr"));
smalltalk.bind(smalltalk.Transcript.$klass, unescape("show%3A"), "show_", function Transcript_class__show_(aString){
const self = this; self.nextPutAll_((aString.asString()));
return self;
}
, "io", unescape("show%3A%20aString%0D%09self%20nextPutAll%3A%20aString%20asString."));
smalltalk.bind(smalltalk.Transcript.$klass, unescape("nextPutAll%3A"), "nextPutAll_", function Transcript_class__nextPutAll_(aCollection){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKTranscript.primNextPutAll(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "io", unescape("nextPutAll%3A%20aCollection%0D%09%22%20Put%20aCollection%20onto%20the%20receiver.%20%22%0D%0D%20%09%3Cprimitive%3A%20%27primNextPutAll%27%20module%3A%20%27SKTranscript%27%3E%0D%20%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.Class, unescape("launch"), "launch", function Class__launch(){
const self = this; self;
return self;
}
, "Snapshot-startup", unescape("launch%0D%09%22%20Private%20-%20The%20system%20has%20been%20launched%20and%20start%20execution.%0D%09The%20default%20action%20is%20to%20do%20nothing.%0D%09Subclasses%20can%20refine%20this%20method%20to%20execute%20actions%20on%20startup.%0D%09%22"));
smalltalk.bind(smalltalk.Class, unescape("pwrUp"), "pwrUp", function Class__pwrUp(){
const self = this; return self;
}
, "Snapshot-startup", unescape("pwrUp%0D%09%22Private%20-%20Subclasses%20should%20refine%20this%20method%20to%20execute%20actions%20on%20startup.%22%0D%09%5Eself"));
smalltalk.bind(smalltalk.Smalltalk, unescape("globalsDo%3A"), "globalsDo_", function Smalltalk__globalsDo_(aBlock){
const self = this; return self.globalsDo_(aBlock);
}
, "Snapshot-evaluating", unescape("globalsDo%3A%20aBlock%0D%09%22%20Private%20-%20Evaluates%20aBlock%20for%20each%20globals%20defined%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%20globalsDo%3A%20aBlock"));
smalltalk.bind(smalltalk.Smalltalk, unescape("globalsDo%3AseparatedBy%3A"), "globalsDo_separatedBy_", function Smalltalk__globalsDo_separatedBy_(aBlock,anotherBlock){
var first = nil;
const self = this; first=true;
return self.globalsDo_((function Smalltalk__(each){
if ((first).valueOf()) {first=false} else {anotherBlock.value()};
return aBlock.value_(each);
}
));
}
, "Snapshot-evaluating", unescape("globalsDo%3A%20aBlock%20separatedBy%3A%20anotherBlock%0D%09%22%20Private%20-%20Evaluates%20aBlock%20for%20each%20globals%20defined%20in%20the%20receiver.%20%22%0D%0D%09%7C%20first%20%7C%20first%20%3A%3D%20true.%0D%09%5Eself%20globalsDo%3A%20%5B%3Aeach%7C%0D%09%20%20%20%20first%0D%09%09ifTrue%3A%20%5B%20first%20%3A%3D%20false%20%5D%0D%09%09ifFalse%3A%20%5B%20anotherBlock%20value%20%5D.%0D%09%20%20%20%20aBlock%20value%3A%20each%0D%09%5D"));
smalltalk.bind(smalltalk.Smalltalk, unescape("launch"), "launch", function Smalltalk__launch(){
const self = this; (function Smalltalk__($1$){
$1$.do_((function Smalltalk__(each){
return each.launch();
}
));
$1$.do_((function Smalltalk__(each){
return each.initialize();
}
));
return $1$.do_((function Smalltalk__(each){
return each.pwrUp();
}
))}
)(self.classes());
return self;
}
, "Snapshot-startup", unescape("launch%0D%09%22%20The%20system%20has%20been%20launched%20and%20start%20execution.%0D%09The%20default%20action%20is%20to%20propagate%20%23launch%20to%20current%20classes%20then%20%23initialize%20and%20finally%20%23pwrUp.%0D%09%22%0D%0D%09self%20classes%0D%09%09do%3A%20%5B%3Aeach%20%7C%20each%20launch%5D%3B%0D%09%09do%3A%20%5B%3Aeach%20%7C%20each%20initialize%5D%3B%0D%09%09do%3A%20%5B%3Aeach%20%7C%20each%20pwrUp%5D"));
smalltalk.bind(smalltalk.Object, unescape("logEvaluate%3A"), "logEvaluate_", function Object__logEvaluate_(source){
var result = nil;
const self = this; result=self.evaluate();
return result;
}
, "evaluating", unescape("logEvaluate%3A%20source%0D%09%22%20Return%20the%20result%20of%20valuating%20the%20receiver.%0D%09Log%20the%20source%20expression%20as%20reference%20of%20evaluation.%0D%09%22%0D%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20evaluate.%0D%09%22SystemManager%20log%3A%20source.%22%0D%09%5Eresult"));
smalltalk.bind(smalltalk.Collection, unescape("anySatisfy%3A"), "anySatisfy_", function Collection__anySatisfy_(aBlock){
const self = this; var $early={name:"stReturn"};
try {
self.do_((function Collection__(each){
if ((aBlock.value_(each)).valueOf()) {$early.result=true; throw ($early)} else {return nil};
}
));
return false;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "enumerating", unescape("anySatisfy%3A%20aBlock%0D%0D%09self%0D%09%09do%3A%0D%09%09%09%5B%3Aeach%20%7C%0D%09%09%09%28aBlock%20value%3A%20each%29%0D%09%09%09%09ifTrue%3A%20%5B%5Etrue%5D%5D.%0D%09%5Efalse"));
smalltalk.addClass("ByteArray", smalltalk.SequenceableCollection, [], 'ByteArray');
smalltalk.ByteArray.$classVariableNames=("");
smalltalk.bind(smalltalk.ByteArray.$klass, unescape("new"), "$$new", function ByteArray_class__$$new(){
const self = this; return self.new_((0));
}
, "instance creation", unescape("new%0D%0D%09%5Eself%20new%3A%200"));
smalltalk.bind(smalltalk.ByteArray.$klass, unescape("new%3A"), "new_", function ByteArray_class__new_(aByteCount){
const self = this; return (function ByteArray_class__($1$){
$1$.initialize_(aByteCount);
return $1$.yourself()}
)(self.basicNew());
}
, "instance creation", unescape("new%3A%20aByteCount%0D%0D%09%5Eself%20basicNew%0D%09%09initialize%3A%20aByteCount%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.ByteArray, unescape("initializeStorage%3A"), "initializeStorage_", function ByteArray__initializeStorage_(aByteCount){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKByteArray.primInitializeStorage(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "initializing", unescape("initializeStorage%3A%20aByteCount%0D%0D%09%3Cprimitive%3A%20%27primInitializeStorage%27%20module%3A%20%27SKByteArray%27%3E%0D%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.ByteArray, unescape("initialize%3A"), "initialize_", function ByteArray__initialize_(aByteCount){
const self = this; (function ByteArray__($1$){
$1$.initialize();
return $1$.initializeStorage_(aByteCount)}
)(self);
return self;
}
, "initializing", unescape("initialize%3A%20aByteCount%0D%0D%09self%0D%09%09initialize%3B%0D%09%09initializeStorage%3A%20aByteCount"));
smalltalk.bind(smalltalk.ByteArray, unescape("size"), "size", function ByteArray__size(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKByteArray.primSize(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "", unescape("size%0D%09%22return%20size%20of%20ByteArray%22%0D%0D%09%3Cprimitive%3A%20%27primSize%27%20module%3A%20%27SKByteArray%27%3E%0D%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.ByteArray, unescape("add%3A"), "add_", function ByteArray__add_(anObject){
const self = this; return self.invalidMessage();
}
, "", unescape("add%3A%20anObject%20%0D%09%22Add%20anObject%20to%20the%20receiver.%09This%20method%20reports%0D%09%09%20an%20error%20since%20fixed%20size%20collections%20cannot%20grow.%22%0D%0D%20%20%20%20%5Eself%20invalidMessage"));
smalltalk.bind(smalltalk.ByteArray, unescape("do%3A"), "do_", function ByteArray__do_(aBlock){
const self = this; (1).to_do_((self.size()),(function ByteArray__(i){
return aBlock.value_((self.at_(i)));
}
));
return self;
}
, "", unescape("do%3A%20aBlock%0D%09%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver.%20%22%0D%0D%091%0D%09%09to%3A%20self%20size%0D%09%09do%3A%20%5B%3Ai%20%7C%20aBlock%20value%3A%20%28self%20at%3A%20i%29%5D"));
smalltalk.bind(smalltalk.ByteArray, unescape("detect%3AifNone%3A"), "detect_ifNone_", function ByteArray__detect_ifNone_(aBlock,anotherBlock){
const self = this; var $early={name:"stReturn"};
try {
self.do_((function ByteArray__(each){
if ((aBlock.value_(each)).valueOf()) {$early.result=each; throw ($early)} else {return nil};
}
));
return anotherBlock.value();
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "", unescape("detect%3A%20aBlock%20ifNone%3A%20anotherBlock%0D%09%22%20Return%20the%20object%20in%20the%20receiver%20that%20return%20true%20when%20evaluated%20with%20aBlock%20or%20the%20result%20of%20evaluating%20anotherBlock.%20%22%0D%0D%09self%0D%09%09do%3A%0D%09%09%09%5B%3Aeach%20%7C%0D%09%09%09%28aBlock%20value%3A%20each%29%0D%09%09%09%09ifTrue%3A%20%5B%5Eeach%5D%5D.%0D%09%5EanotherBlock%20value"));
smalltalk.bind(smalltalk.ByteArray, unescape("includes%3A"), "includes_", function ByteArray__includes_(anObject){
const self = this; return self.anySatisfy_((function ByteArray__(each){
return each._eq(anObject);
}
));
}
, "", unescape("includes%3A%20anObject%0D%09%22%20Return%20true%20if%20anObject%20is%20in%20the%20receiver.%22%0D%0D%09%5Eself%20anySatisfy%3A%20%5B%3Aeach%20%7C%20each%20%3D%20anObject%5D"));
smalltalk.bind(smalltalk.ByteArray, unescape("isEmpty"), "isEmpty", function ByteArray__isEmpty(){
const self = this; return (self.size())._eq((0));
}
, "", unescape("isEmpty%0D%0D%09%5Eself%20size%20%3D%200"));
smalltalk.bind(smalltalk.ByteArray, unescape("occurrencesOf%3A"), "occurrencesOf_", function ByteArray__occurrencesOf_(anObject){
const self = this; return self.inject_into_((0),(function ByteArray__(count,each){
if ((each._eq(anObject)).valueOf()) {return count._plus((1))} else {return count};
}
));
}
, "", unescape("occurrencesOf%3A%20anObject%0D%09%22%20Return%20the%20occurrences%20of%20anObject%20in%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09inject%3A%200%0D%09%09into%3A%0D%09%09%09%5B%3Acount%20%3Aeach%20%7C%0D%09%09%09%28each%20%3D%20anObject%29%0D%09%09%09%09ifTrue%3A%20%5Bcount%20+%201%5D%0D%09%09%09%09ifFalse%3A%20%5Bcount%5D%5D"));
smalltalk.bind(smalltalk.ByteArray, unescape("reverseDo%3A"), "reverseDo_", function ByteArray__reverseDo_(aBlock){
var i = nil;
const self = this; i=self.size();
while((i._gt((0))).valueOf()){aBlock.value_((self.at_(i)));
i=i._minus((1))};;
return self;
}
, "", unescape("reverseDo%3A%20aBlock%0D%20%20%20%20%22%20Evaluate%20aBlock%20with%20the%20contents%20of%20the%20receiver%20in%20reverse%20order%20of%20iteration.%20%22%0D%0D%09%7C%20i%20%7C%0D%09i%20%3A%3D%20self%20size.%0D%09%5Bi%20%3E%200%5D%0D%09%09whileTrue%3A%0D%09%09%09%5BaBlock%20value%3A%20%28self%20at%3A%20i%29.%0D%09%09%09i%20%3A%3D%20i%20-%201%5D"));
smalltalk.bind(smalltalk.ByteArray, unescape("copy"), "copy", function ByteArray__copy(){
const self = this; return self.deepCopy();
}
, "", unescape("copy%0D%09%22make%20a%20shallowcopy%20of%20the%20receiver%22%0D%0D%20%20%20%20%5Eself%20deepCopy"));
smalltalk.bind(smalltalk.ByteArray, unescape("deepCopy"), "deepCopy", function ByteArray__deepCopy(){
const self = this; return self.copyFrom_to_((1),(self.size()));
}
, "", unescape("deepCopy%0D%09%22make%20a%20deep%20copy%22%0D%0D%09%5Eself%0D%09%09copyFrom%3A%201%0D%09%09to%3A%20self%20size"));
smalltalk.bind(smalltalk.ByteArray, unescape("printOn%3A"), "printOn_", function ByteArray__printOn_(aStream){
const self = this; (function ByteArray__($1$){
$1$.nextPutAll_(((self.$klass).name()));
return $1$.nextPut_(unescape("%28"))}
)(aStream);
self.do_separatedBy_((function ByteArray__(each){
return each.printOn_base_showRadix_(aStream,(10),false);
}
),(function ByteArray__(){
return aStream.space();
}
));
aStream.nextPut_(unescape("%29"));
return self;
}
, "", unescape("printOn%3A%20aStream%20%0D%09%22print%20in%20hex%22%0D%09%0D%20%20%20%20aStream%0D%20%20%20%20%20%20%20%20nextPutAll%3A%20self%20class%20name%3B%0D%20%20%20%20%20%20%20%20nextPut%3A%20%24%28.%0D%20%20%20%20self%20do%3A%20%5B%3Aeach%20%7C%0D%20%20%20%20%20%20%20%20each%20printOn%3A%20aStream%20base%3A%2010%20showRadix%3A%20false%5D%20separatedBy%3A%20%5BaStream%20space%5D.%0D%20%20%20%20aStream%20nextPut%3A%20%24%29"));
smalltalk.bind(smalltalk.ByteArray, unescape("indexOf%3AifAbsent%3A"), "indexOf_ifAbsent_", function ByteArray__indexOf_ifAbsent_(anObject,aBlock){
const self = this; var $early={name:"stReturn"};
try {
self.doWithIndex_((function ByteArray__($$byte,i){
if (($$byte._eq(anObject)).valueOf()) {$early.result=i; throw ($early)} else {return nil};
}
));
return aBlock.value();
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "", unescape("indexOf%3A%20anObject%20ifAbsent%3A%20aBlock%0D%09%22%20Return%20the%20position%20of%20anObject%20in%20the%20receiver%2C%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09self%0D%09%09doWithIndex%3A%0D%09%09%09%5B%3Abyte%20%3Ai%20%7C%0D%09%09%09%28byte%20%3D%20anObject%29%0D%09%09%09%09ifTrue%3A%20%5B%5Ei%5D%5D.%0D%09%5EaBlock%20value"));
smalltalk.bind(smalltalk.ByteArray, unescape("asByteArray"), "asByteArray", function ByteArray__asByteArray(){
const self = this; return self;
}
, "", unescape("asByteArray%0D%09%22I%20am%20who%20I%20am%22%0D%0D%20%20%20%20%5Eself"));
smalltalk.bind(smalltalk.ByteArray, unescape("at%3A"), "at_", function ByteArray__at_(anIndex){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKByteArray.primAt(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "", unescape("at%3A%20anIndex%0D%20%20%20%20%22return%20item%20at%20indexed%20zero%20based%20location%22%0D%0D%09%3Cprimitive%3A%20%27primAt%27%20module%3A%20%27SKByteArray%27%3E%0D%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.ByteArray, unescape("at%3Aput%3A"), "at_put_", function ByteArray__at_put_(anIndex,anObject){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKByteArray.primAtPut(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "", unescape("at%3A%20anIndex%20put%3A%20anObject%20%0D%20%20%20%20%22%20Set%20the%20object%20in%20the%20receiver%20at%20anIndex%20position.%20%22%0D%0D%09%3Cprimitive%3A%20%27primAtPut%27%20module%3A%20%27SKByteArray%27%3E%0D%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.ByteArray, unescape("shallowCopy"), "shallowCopy", function ByteArray__shallowCopy(){
const self = this; return self.deepCopy();
}
, "", unescape("shallowCopy%0D%09%22make%20a%20shallowcopy%20of%20the%20receiver%22%0D%0D%20%20%20%20%5Eself%20deepCopy"));
smalltalk.bind(smalltalk.ByteArray, unescape("copyFrom%3Ato%3A"), "copyFrom_to_", function ByteArray__copyFrom_to_(startIndex,endIndex){
var size = nil;
var copy = nil;
const self = this; size=((endIndex._minus(startIndex))._plus((1))).max_((0));
copy=smalltalk.ByteArray.new_(size);
copy.replaceFrom_to_with_startingAt_((1),size,self,startIndex);
return copy;
}
, "", unescape("copyFrom%3A%20startIndex%20to%3A%20endIndex%0D%09%22%20Return%20a%20copy%20of%20the%20receiver.%20%22%0D%0D%09%7C%20size%20copy%20%7C%0D%09size%20%3A%3D%20%28endIndex%20-%20startIndex%20+%201%29%20max%3A%200.%0D%09copy%20%3A%3D%20ByteArray%20new%3A%20size.%0D%09copy%0D%09%09replaceFrom%3A%201%0D%09%09to%3A%20size%0D%09%09with%3A%20self%0D%09%09startingAt%3A%20startIndex.%0D%09%5Ecopy"));
smalltalk.bind(smalltalk.ByteArray, unescape("reversed"), "reversed", function ByteArray__reversed(){
var size = nil;
var reversed = nil;
const self = this; size=self.size();
reversed=smalltalk.ByteArray.new_(size);
self.doWithIndex_((function ByteArray__($$byte,i){
return reversed.at_put_(((size._minus(i))._plus((1))),$$byte);
}
));
return reversed;
}
, "", unescape("reversed%0D%09%22%20Return%20an%20array%20with%20the%20contents%20of%20the%20receiver%20in%20reverse%20order.%20%22%0D%0D%09%7C%20size%20reversed%20%7C%0D%09size%20%3A%3D%20self%20size.%0D%09reversed%20%3A%3D%20ByteArray%20new%3A%20size.%0D%09self%0D%09%09doWithIndex%3A%0D%09%09%09%5B%3Abyte%20%3Ai%20%7C%0D%09%09%09reversed%20at%3A%20%28size%20-%20i%20+%201%29%20put%3A%20byte%5D.%0D%09%5Ereversed"));
smalltalk.bind(smalltalk.ByteArray, unescape("asString"), "asString", function ByteArray__asString(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKByteArray.primUTF8ToString(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "", unescape("asString%0D%09%22return%20as%20String%20object%22%0D%0D%09%3Cprimitive%3A%20%27primUTF8ToString%27%20module%3A%20%27SKByteArray%27%3E%0D%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.String, unescape("asByteArray"), "asByteArray", function String__asByteArray(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKByteArray.primAsByteArray(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "", unescape("asByteArray%0D%09%22Convert%20the%20string%20to%20a%20byte%20Array%22%0D%0D%09%3Cprimitive%3A%20%27primAsByteArray%27%20module%3A%20%27SKByteArray%27%3E%0D%09self%20primitiveFailed"));
smalltalk.bind(smalltalk.String, unescape("asByteArrayWithNoEncoding"), "asByteArrayWithNoEncoding", function String__asByteArrayWithNoEncoding(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKByteArray.primAsByteArrayNoEncoding(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; self.primitiveFailed();
return self;
}
, "", unescape("asByteArrayWithNoEncoding%0D%09%20%22Convert%20the%20string%20to%20a%20byte%20Array%22%0D%0D%09%20%3Cprimitive%3A%20%27primAsByteArrayNoEncoding%27%20module%3A%20%27SKByteArray%27%3E%0D%09%20self%20primitiveFailed"));
smalltalk.bind(smalltalk.ByteArray.$klass, unescape("contents%3A"), "contents_", function ByteArray_class__contents_(aUint8Array){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKByteArray.primFromUint8Array(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "deprecated", unescape("contents%3A%20aUint8Array%0D%09%22This%20method%20is%20deprecated.%20Any%20primitive%20methods%20that%20need%20to%20return%20bytes%0D%09should%20return%20a%20ByteArray%20instance%20instead%20of%20a%20Uint8Array.%22%0D%0D%09%3Cprimitive%3A%20%27primFromUint8Array%27%20module%3A%20%27SKByteArray%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.ByteArray, unescape("contents"), "contents", function ByteArray__contents(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKByteArray.primContents(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "deprecated", unescape("contents%0D%0D%09%3Cprimitive%3A%20%27primContents%27%20module%3A%20%27SKByteArray%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Set, unescape("indexOf%3AifAbsent%3A"), "indexOf_ifAbsent_", function Set__indexOf_ifAbsent_(anObject,aBlock){
const self = this; if ((self.includes_(anObject)).not()) {return aBlock.value()};
return self['@contents'].indexOf_ifAbsent_(anObject,aBlock);
}
, "", unescape("indexOf%3A%20anObject%20ifAbsent%3A%20aBlock%0D%09%22%20Private%2CInternal%20-%20Return%20the%20position%20of%20anObject%20in%20the%20receiver%2C%20or%20the%20result%20of%20evaluating%20aBlock.%20%22%0D%0D%09%28self%20includes%3A%20anObject%29%20ifFalse%3A%20%5B%20%5EaBlock%20value%20%5D.%0D%09%5Econtents%20indexOf%3A%20anObject%20ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.Collection, unescape("allSatisfy%3A"), "allSatisfy_", function Collection__allSatisfy_(aBlock){
const self = this; var $early={name:"stReturn"};
try {
self.do_((function Collection__(each){
if ((aBlock.value_(each)).not()) {$early.result=false; throw ($early)} else {return nil};
}
));
return true;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "", unescape("allSatisfy%3A%20aBlock%0D%09%22Evaluate%20aBlock%20with%20the%20elements%20of%20the%20receiver.%0D%09If%20aBlock%20returns%20false%20for%20any%20element%20return%20false.%0D%09Otherwise%20return%20true.%22%0D%0D%09self%20do%3A%20%5B%3Aeach%20%7C%20%28aBlock%20value%3A%20each%29%20ifFalse%3A%20%5B%5E%20false%5D%5D.%0D%09%5E%20true"));
smalltalk.addClass("OrderedCollection", smalltalk.SequenceableCollection, ['contents'], 'nil');
smalltalk.OrderedCollection.$classVariableNames=("");
smalltalk.OrderedCollection.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.OrderedCollection, unescape("%2C"), "_comma", function OrderedCollection___comma(aCollection){
const self = this; return self.copyWithAll_(aCollection);
}
, "", unescape("%2C%20aCollection%0D%0D%09%5Eself%20copyWithAll%3A%20aCollection"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("add%3A"), "add_", function OrderedCollection__add_(anObject){
const self = this; return (self.contents()).add_(anObject);
}
, "", unescape("add%3A%20anObject%0D%0D%09%5Eself%20contents%20add%3A%20anObject"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("add%3Aafter%3A"), "add_after_", function OrderedCollection__add_after_(anObject,anotherObject){
const self = this; return (self.contents()).add_after_(anObject,anotherObject);
}
, "", unescape("add%3A%20anObject%0Dafter%3A%20anotherObject%0D%0D%09%5Eself%20contents%0D%09%09add%3A%20anObject%0D%09%09after%3A%20anotherObject"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("addAll%3A"), "addAll_", function OrderedCollection__addAll_(aCollection){
const self = this; aCollection.do_((function OrderedCollection__(each){
return self.add_(each);
}
));
return aCollection;
}
, "", unescape("addAll%3A%20aCollection%0D%0D%09aCollection%20do%3A%20%5B%3Aeach%20%7C%20self%20add%3A%20each%5D.%0D%09%5EaCollection"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("addFirst%3A"), "addFirst_", function OrderedCollection__addFirst_(anObject){
const self = this; return (self.contents()).addFirst_(anObject);
}
, "", unescape("addFirst%3A%20anObject%0D%0D%09%5Eself%20contents%20addFirst%3A%20anObject"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("addLast%3A"), "addLast_", function OrderedCollection__addLast_(anObject){
const self = this; return (self.contents()).addLast_(anObject);
}
, "", unescape("addLast%3A%20anObject%0D%0D%09%5Eself%20contents%20addLast%3A%20anObject"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("asArray"), "asArray", function OrderedCollection__asArray(){
var array = nil;
const self = this; array=smalltalk.Array.new_((self.size()));
self.doWithIndex_((function OrderedCollection__(each,index){
return array.at_put_(index,each);
}
));
return array;
}
, "", unescape("asArray%0D%0D%09%7C%20array%20%7C%0D%09array%20%3A%3D%20Array%20new%3A%20self%20size.%0D%09self%20doWithIndex%3A%20%5B%3Aeach%20%3Aindex%20%7C%20array%20at%3A%20index%20put%3A%20each%5D.%0D%09%5Earray"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("asJSONObject"), "asJSONObject", function OrderedCollection__asJSONObject(){
const self = this; return (self.contents()).asJSONObject();
}
, "", unescape("asJSONObject%0D%0D%09%5Eself%20contents%20asJSONObject"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("asJavascript"), "asJavascript", function OrderedCollection__asJavascript(){
const self = this; return (self.contents()).asJavascript();
}
, "", unescape("asJavascript%0D%0D%09%5Eself%20contents%20asJavascript"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("at%3AifAbsent%3A"), "at_ifAbsent_", function OrderedCollection__at_ifAbsent_(anIndex,aBlock){
const self = this; return (self.contents()).at_ifAbsent_(anIndex,aBlock);
}
, "", unescape("at%3A%20anIndex%0DifAbsent%3A%20aBlock%0D%0D%09%5Eself%20contents%0D%09%09at%3A%20anIndex%0D%09%09ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("atAllPut%3A"), "atAllPut_", function OrderedCollection__atAllPut_(anObject){
const self = this; (self.contents()).atAllPut_(anObject);
return anObject;
}
, "", unescape("atAllPut%3A%20anObject%0D%0D%09self%20contents%20atAllPut%3A%20anObject.%0D%09%5EanObject"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("copyFrom%3Ato%3A"), "copyFrom_to_", function OrderedCollection__copyFrom_to_(startIndex,endIndex){
var copiedContents = nil;
const self = this; copiedContents=(self.contents()).copyFrom_to_(startIndex,endIndex);
return (self.$klass).contents_(copiedContents);
}
, "", unescape("copyFrom%3A%20startIndex%0Dto%3A%20endIndex%0D%0D%09%7C%20copiedContents%20%7C%0D%09copiedContents%20%3A%3D%20self%20contents%20copyFrom%3A%20startIndex%20to%3A%20endIndex.%0D%09%5Eself%20class%20contents%3A%20copiedContents"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("copyWithAll%3A"), "copyWithAll_", function OrderedCollection__copyWithAll_(aCollection){
const self = this; return (function OrderedCollection__($1$){
$1$.addAll_(self);
$1$.addAll_(aCollection);
return $1$.yourself()}
)((self.$klass).$$new());
}
, "", unescape("copyWithAll%3A%20aCollection%0D%0D%09%5Eself%20class%20new%0D%09%09addAll%3A%20self%3B%0D%09%09addAll%3A%20aCollection%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("deepCopy"), "deepCopy", function OrderedCollection__deepCopy(){
const self = this; return smalltalk.OrderedCollection.contents_(((self.contents()).deepCopy()));
}
, "", unescape("deepCopy%0D%0D%09%5EOrderedCollection%20contents%3A%20self%20contents%20deepCopy"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("reversed"), "reversed", function OrderedCollection__reversed(){
const self = this; return smalltalk.OrderedCollection.contents_(((self.contents()).reversed()));
}
, "", unescape("reversed%0D%0D%09%5EOrderedCollection%20contents%3A%20self%20contents%20reversed"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("shallowCopy"), "shallowCopy", function OrderedCollection__shallowCopy(){
const self = this; return smalltalk.OrderedCollection.contents_(((self.contents()).shallowCopy()));
}
, "", unescape("shallowCopy%0D%0D%09%5EOrderedCollection%20contents%3A%20self%20contents%20shallowCopy"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("do%3A"), "do_", function OrderedCollection__do_(aBlock){
const self = this; (self.contents()).do_(aBlock);
return self;
}
, "", unescape("do%3A%20aBlock%0D%0D%09self%20contents%20do%3A%20aBlock"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("detect%3AifNone%3A"), "detect_ifNone_", function OrderedCollection__detect_ifNone_(aBlock,anotherBlock){
const self = this; return (self.contents()).detect_ifNone_(aBlock,anotherBlock);
}
, "", unescape("detect%3A%20aBlock%0DifNone%3A%20anotherBlock%0D%0D%09%5Eself%20contents%0D%09%09detect%3A%20aBlock%0D%09%09ifNone%3A%20anotherBlock"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("reverseDo%3A"), "reverseDo_", function OrderedCollection__reverseDo_(aBlock){
const self = this; (self.contents()).reverseDo_(aBlock);
return self;
}
, "", unescape("reverseDo%3A%20aBlock%0D%0D%09self%20contents%20reverseDo%3A%20aBlock"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("isEmpty"), "isEmpty", function OrderedCollection__isEmpty(){
const self = this; return (self.size())._eq((0));
}
, "", unescape("isEmpty%0D%0D%09%20%5Eself%20size%20%3D%200"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("includes%3A"), "includes_", function OrderedCollection__includes_(anObject){
const self = this; return (self.contents()).includes_(anObject);
}
, "", unescape("includes%3A%20anObject%0D%0D%09%5Eself%20contents%20includes%3A%20anObject"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("indexOf%3AifAbsent%3A"), "indexOf_ifAbsent_", function OrderedCollection__indexOf_ifAbsent_(anObject,aBlock){
const self = this; return (self.contents()).indexOf_ifAbsent_(anObject,aBlock);
}
, "", unescape("indexOf%3A%20anObject%0DifAbsent%3A%20aBlock%0D%0D%09%5Eself%20contents%0D%09%09indexOf%3A%20anObject%0D%09%09ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("first"), "first", function OrderedCollection__first(){
const self = this; return (self.contents()).first();
}
, "", unescape("first%0D%0D%09%5Eself%20contents%20first"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("fourth"), "fourth", function OrderedCollection__fourth(){
const self = this; return (self.contents()).fourth();
}
, "", unescape("fourth%0D%0D%09%5Eself%20contents%20fourth"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("three"), "three", function OrderedCollection__three(){
const self = this; return self.third();
}
, "", unescape("three%0D%0D%09%5Eself%20third"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("two"), "two", function OrderedCollection__two(){
const self = this; return self.second();
}
, "", unescape("two%0D%0D%09%5Eself%20second"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("occurrencesOf%3A"), "occurrencesOf_", function OrderedCollection__occurrencesOf_(anObject){
const self = this; return (self.contents()).occurrencesOf_(anObject);
}
, "", unescape("occurrencesOf%3A%20anObject%0D%0D%09%20%5Eself%20contents%20occurrencesOf%3A%20anObject"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("printOn%3A"), "printOn_", function OrderedCollection__printOn_(aStream){
const self = this; (function OrderedCollection__($1$){
$1$.nextPutAll_(((self.$klass).name()));
return $1$.nextPut_(unescape("%28"))}
)(aStream);
self.do_separatedBy_((function OrderedCollection__(each){
return each.printOn_(aStream);
}
),(function OrderedCollection__(){
return aStream.space();
}
));
aStream.nextPut_(unescape("%29"));
return self;
}
, "", unescape("printOn%3A%20aStream%0D%0D%09aStream%0D%09%09nextPutAll%3A%20self%20class%20name%3B%0D%09%09nextPut%3A%20%24%28.%0D%09self%0D%09%09do%3A%20%5B%3Aeach%20%7C%20each%20printOn%3A%20aStream%5D%0D%09%09separatedBy%3A%20%5BaStream%20space%5D.%0D%09aStream%20nextPut%3A%20%24%29"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("remove%3AifAbsent%3A"), "remove_ifAbsent_", function OrderedCollection__remove_ifAbsent_(anObject,aBlock){
const self = this; return (self.contents()).remove_ifAbsent_(anObject,aBlock);
}
, "", unescape("remove%3A%20anObject%0DifAbsent%3A%20aBlock%0D%0D%09%5Eself%20contents%0D%09%09remove%3A%20anObject%0D%09%09ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("removeAll"), "removeAll", function OrderedCollection__removeAll(){
const self = this; self.initializeContents();
return self;
}
, "", unescape("removeAll%0D%0D%09self%20initializeContents"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("removeFirst"), "removeFirst", function OrderedCollection__removeFirst(){
const self = this; return (self.contents()).removeFirst();
}
, "", unescape("removeFirst%0D%0D%09%5Eself%20contents%20removeFirst"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("removeIndex%3A"), "removeIndex_", function OrderedCollection__removeIndex_(anIndex){
const self = this; return (self.contents()).removeIndex_(anIndex);
}
, "", unescape("removeIndex%3A%20anIndex%0D%0D%09%5Eself%20contents%20removeIndex%3A%20anIndex"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("removeLast"), "removeLast", function OrderedCollection__removeLast(){
const self = this; return (self.contents()).removeLast();
}
, "", unescape("removeLast%0D%0D%09%5Eself%20contents%20removeLast"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("second"), "second", function OrderedCollection__second(){
const self = this; return (self.contents()).second();
}
, "", unescape("second%0D%0D%09%5Eself%20contents%20second"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("size"), "size", function OrderedCollection__size(){
const self = this; return (self.contents()).size();
}
, "", unescape("size%0D%0D%09%5Eself%20contents%20size"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("sort%3A"), "sort_", function OrderedCollection__sort_(aBlock){
const self = this; (self.contents()).sort_(aBlock);
return self;
}
, "", unescape("sort%3A%20aBlock%0D%0D%09self%20contents%20sort%3A%20aBlock"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("sorted"), "sorted", function OrderedCollection__sorted(){
const self = this; return smalltalk.OrderedCollection.contents_(((self.contents()).sorted()));
}
, "", unescape("sorted%0D%0D%09%5EOrderedCollection%20contents%3A%20self%20contents%20sorted"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("sorted%3A"), "sorted_", function OrderedCollection__sorted_(aBlock){
const self = this; return smalltalk.OrderedCollection.contents_(((self.contents()).sorted_(aBlock)));
}
, "", unescape("sorted%3A%20aBlock%0D%0D%09%5EOrderedCollection%20contents%3A%20%28self%20contents%20sorted%3A%20aBlock%29"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("third"), "third", function OrderedCollection__third(){
const self = this; return (self.contents()).third();
}
, "", unescape("third%0D%0D%09%5Eself%20contents%20third"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("initializeContents"), "initializeContents", function OrderedCollection__initializeContents(){
const self = this; self['@contents']=smalltalk.Array.$$new();
return self;
}
, "", unescape("initializeContents%0D%0D%09contents%20%3A%3D%20Array%20new"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("initialize"), "initialize", function OrderedCollection__initialize(){
const self = this; smalltalk.superImplementor(smalltalk.OrderedCollection,'initialize').apply(self, []);
self.initializeContents();
return self;
}
, "", unescape("initialize%0D%0D%09super%20initialize.%0D%09self%20initializeContents"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("contents"), "contents", function OrderedCollection__contents(){
const self = this; return self['@contents'];
}
, "", unescape("contents%0D%0D%09%5Econtents"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("contents%3A"), "contents_", function OrderedCollection__contents_(anArray){
const self = this; self['@contents']=anArray;
return self;
}
, "", unescape("contents%3A%20anArray%0D%0D%09contents%20%3A%3D%20anArray"));
smalltalk.bind(smalltalk.OrderedCollection.$klass, unescape("contents%3A"), "contents_", function OrderedCollection_class__contents_(anArray){
const self = this; return (function OrderedCollection_class__($1$){
$1$.contents_(anArray);
return $1$.yourself()}
)(self.$$new());
}
, "", unescape("contents%3A%20anArray%0D%0D%09%5Eself%20new%0D%09%09contents%3A%20anArray%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.OrderedCollection.$klass, unescape("basicNew%3A"), "basicNew_", function OrderedCollection_class__basicNew_(anInteger){
const self = this; return self.$$new();
}
, "", unescape("basicNew%3A%20anInteger%0D%0D%09%5Eself%20new"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("at%3A"), "at_", function OrderedCollection__at_(anIndex){
const self = this; return (self.contents()).at_(anIndex);
}
, "", unescape("at%3A%20anIndex%0D%0D%09%5Eself%20contents%20at%3A%20anIndex"));
smalltalk.bind(smalltalk.OrderedCollection, unescape("at%3Aput%3A"), "at_put_", function OrderedCollection__at_put_(anIndex,anObject){
const self = this; return (self.contents()).at_put_(anIndex,anObject);
}
, "", unescape("at%3A%20anIndex%20put%3A%20anObject%0D%0D%09%5Eself%20contents%20at%3A%20anIndex%20put%3A%20anObject"));
smalltalk.addClass("SortedCollection", smalltalk.ArrayedContents, ['sortBlock', 'sorted'], 'nil');
smalltalk.SortedCollection.$classVariableNames=("");
smalltalk.SortedCollection.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.SortedCollection.$klass, unescape("new"), "$$new", function SortedCollection_class__$$new(){
const self = this; return (smalltalk.superImplementor(smalltalk.SortedCollection.$klass,'$$new').apply(self, [])).ascendingOrder();
}
, "", unescape("new%0D%20%20%20%20%22Answer%20a%20SortedCollection%20capable%20of%20sort%20in%20ascending%20order.%22%0D%20%20%20%20%5Esuper%20new%20ascendingOrder"));
smalltalk.bind(smalltalk.SortedCollection.$klass, unescape("sortBlock%3A"), "sortBlock_", function SortedCollection_class__sortBlock_(aBlock){
const self = this; return (smalltalk.superImplementor(smalltalk.SortedCollection.$klass,'$$new').apply(self, [])).sortBlock_(aBlock);
}
, "", unescape("sortBlock%3A%20aBlock%0D%20%20%20%22Answer%20a%20SortedCollection%20which%20will%0D%20%20%20sort%20in%20the%20order%20defined%20by%20aBlock.%22%0D%20%20%20%5Esuper%20new%20sortBlock%3A%20aBlock"));
smalltalk.bind(smalltalk.SortedCollection, unescape("sortBlock"), "sortBlock", function SortedCollection__sortBlock(){
const self = this; if (((nil.isNil_(self['@sortBlock']))).valueOf()) {self['@sortBlock']=self.defaultSortBlock()};
return self['@sortBlock'];
}
, "", unescape("sortBlock%0D%20%20%20%20%22Return%20the%20block%20that%20determines%20sort%0D%20%20%20%20ordering%20for%20the%20receiver.%22%0D%20%20%20%28sortBlock%20isNil%29%0D%20%20%20%20%20%20ifTrue%3A%5BsortBlock%20%3A%3D%20self%20defaultSortBlock%5D.%0D%20%20%20%5EsortBlock"));
smalltalk.bind(smalltalk.SortedCollection, unescape("ascendingOrder"), "ascendingOrder", function SortedCollection__ascendingOrder(){
const self = this; self.sortBlock_((self.defaultSortBlock()));
self['@sorted']=true;
return self;
}
, "", unescape("ascendingOrder%0D%20%20%20%22Sets%20default%20ascending%20order%22%0D%20%20%20self%20sortBlock%3A%20self%20defaultSortBlock.%0D%20%20%20sorted%20%3A%3D%20true."));
smalltalk.bind(smalltalk.SortedCollection, unescape("add%3A"), "add_", function SortedCollection__add_(anObject){
const self = this; smalltalk.superImplementor(smalltalk.SortedCollection,'add_').apply(self, [anObject]);
self['@sorted']=false;
return anObject;
}
, "", unescape("add%3A%20anObject%0D%20%20%20%22Add%20anObject%20to%20the%20receiver.%20%22%0D%20%20%20super%20add%3A%20anObject.%0D%20%20%20sorted%20%3A%3D%20false.%0D%20%20%20%5EanObject"));
smalltalk.bind(smalltalk.SortedCollection, unescape("defaultSortBlock"), "defaultSortBlock", function SortedCollection__defaultSortBlock(){
const self = this; return (function SortedCollection__(object1,object2){
return object1._lt_eq(object2);
}
);
}
, "", unescape("defaultSortBlock%0D%0D%20%20%20%5E%5B%3Aobject1%20%3Aobject2%7C%20object1%20%3C%3D%20object2%5D"));
smalltalk.bind(smalltalk.SortedCollection, unescape("sortBlock%3A"), "sortBlock_", function SortedCollection__sortBlock_(aBlock){
const self = this; self['@sortBlock']=aBlock;
self.reSort();
return self;
}
, "", unescape("sortBlock%3A%20aBlock%0D%20%20%20%22Return%20the%20receiver.%20%20Set%20the%20sort%20block%20for%0D%20%20%20the%20receiver%20to%20aBlock%20and%20resort%20the%20receiver.%22%0D%20%20%20sortBlock%20%3A%3D%20aBlock.%0D%20%20%20self%20reSort"));
smalltalk.bind(smalltalk.SortedCollection, unescape("reSort"), "reSort", function SortedCollection__reSort(){
const self = this; self.sort_((self.sortBlock()));
return self;
}
, "", unescape("reSort%0D%20%20%20%22Private%20-%20Return%20the%20receiver%20collection%0D%20%20%20resorted%20according%20to%20sortBlock.%22%0D%20%20%20self%20sort%3A%20%28self%20sortBlock%29"));
smalltalk.bind(smalltalk.SortedCollection, unescape("sort%3A"), "sort_", function SortedCollection__sort_(aBlock){
const self = this; if (((nil.isNil_(self['@contents']))).not()) {self['@contents'].sort_(aBlock);
self['@sorted']=true};
return self;
}
, "", unescape("sort%3A%20aBlock%0D%20%20%20%22Sort%20%28inplace%29%20the%20receiver%27s%20contents%20with%20aBlock.%20%22%0D%0D%20%20%20contents%20isNil%0D%20%20%20%20%20%20ifFalse%3A%5Bcontents%20sort%3A%20aBlock.%0D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20sorted%20%3A%3D%20true%5D"));
smalltalk.bind(smalltalk.SortedCollection, unescape("checkSorting"), "checkSorting", function SortedCollection__checkSorting(){
const self = this; if ((self['@sorted']).not()) {self.reSort()};
return self;
}
, "", unescape("checkSorting%0D%20%20%20%22Private%20-%20Check%20the%20properly%20sorting%20state%2C%0D%20%20%20sorting%20the%20receiver%20if%20needed%22%0D%20%20%20sorted%20ifFalse%3A%5B%20self%20reSort%20%5D"));
smalltalk.bind(smalltalk.SortedCollection, unescape("remove%3AifAbsent%3A"), "remove_ifAbsent_", function SortedCollection__remove_ifAbsent_(anObject,aBlock){
var result = nil;
const self = this; result=smalltalk.superImplementor(smalltalk.SortedCollection,'remove_ifAbsent_').apply(self, [anObject,aBlock]);
self['@sorted']=false;
return result;
}
, "", unescape("remove%3A%20anObject%20ifAbsent%3A%20aBlock%0D%20%20%20%22%20Remove%20anObject%20from%20the%20receiver.%0D%20%20%20Return%20the%20result%20of%20evaluating%20aBlock%20if%20anObject%20is%20not%20in%20the%20receiver.%09%22%0D%20%20%20%7C%20result%20%7C%0D%20%20%20result%20%3A%3D%20super%20remove%3A%20anObject%20ifAbsent%3A%20aBlock.%0D%20%20%20sorted%20%3A%3D%20false.%0D%20%20%20%5Eresult"));
smalltalk.bind(smalltalk.SortedCollection, unescape("removeIndex%3A"), "removeIndex_", function SortedCollection__removeIndex_(index){
var result = nil;
const self = this; result=smalltalk.superImplementor(smalltalk.SortedCollection,'removeIndex_').apply(self, [index]);
self['@sorted']=false;
return result;
}
, "", unescape("removeIndex%3A%20index%0D%20%20%20%22Remove%20the%20element%20at%20index.%20%22%0D%20%20%20%7C%20result%20%7C%0D%20%20%20result%20%3A%3D%20super%20removeIndex%3A%20index.%0D%20%20%20sorted%20%3A%3D%20false.%0D%20%20%20%5Eresult"));
smalltalk.bind(smalltalk.SortedCollection, unescape("withIndexDo%3A"), "withIndexDo_", function SortedCollection__withIndexDo_(aBlock){
const self = this; self.checkSorting();
smalltalk.superImplementor(smalltalk.SortedCollection,'withIndexDo_').apply(self, [aBlock]);
return self;
}
, "", unescape("withIndexDo%3A%20aBlock%0D%20%20%20%22Evaluate%20aBlock%20with%20all%20the%20index%20positions%20in%20the%20receiver.%20%22%0D%0D%20%20%20self%20checkSorting.%0D%20%20%20super%20withIndexDo%3A%20aBlock"));
smalltalk.bind(smalltalk.SortedCollection, unescape("sorted%3A"), "sorted_", function SortedCollection__sorted_(aValue){
const self = this; self['@sorted']=aValue;
return self;
}
, "", unescape("sorted%3A%20aValue%0D%0D%20%20%20%20%20%20%20%20%22Set%20my%20%27sorted%27%20instance%20variable%20to%20aValue.%22%0D%20%20%20%20sorted%20%3A%3D%20aValue"));
smalltalk.addClass("OrderedSet", smalltalk.OrderedCollection, [], 'nil');
smalltalk.OrderedSet.$classVariableNames=("");
smalltalk.OrderedSet.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.Number.$klass, unescape("multiplicativeIdentity"), "multiplicativeIdentity", function Number_class__multiplicativeIdentity(){
const self = this; return (1);
}
, "math", unescape("multiplicativeIdentity%0D%09%09%22Answer%20the%20multiplicative%20identity%20element%20for%20instances%20of%0D%09%09the%20receiver%3A%20the%20number%20which%2C%20when%20multiplied%20by%20any%20other%0D%09%09number%20yields%20the%20other%20number.%22%0D%09%5E1"));
smalltalk.bind(smalltalk.Number.$klass, unescape("e"), "e", function Number_class__e(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primE(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "instantiation", unescape("e%0D%09%22Answer%20the%20floating%20point%20representation%20of%20pi.%22%0D%0D%09%3Cprimitive%3A%20%27primE%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.bind(smalltalk.Number, unescape("log"), "log", function Number__log(){
const self = this; return (self.ln())._slash(((10).ln()));
}
, "arithmetic", unescape("log%0D%09%22Return%20the%20log%2010%20of%20the%20receiver.%22%0D%0D%09%5Eself%20ln%20/%2010%20ln"));
smalltalk.bind(smalltalk.Number, unescape("reciprocal"), "reciprocal", function Number__reciprocal(){
const self = this; return ((self.$klass).multiplicativeIdentity())._slash(self);
}
, "math", unescape("reciprocal%0D%09%09%22Answer%20one%20divided%20by%20the%20receiver.%22%0D%09%5Eself%20class%20multiplicativeIdentity%20/%20self"));
smalltalk.bind(smalltalk.Number, unescape("asFloat"), "asFloat", function Number__asFloat(){
const self = this; return self.valueOf();
}
, "converting", unescape("asFloat%0D%0D%09%5Eself%20valueOf"));
smalltalk.bind(smalltalk.Number, unescape("hash"), "hash", function Number__hash(){
const self = this; return self;
}
, "comparing", unescape("hash%0D%09%5Eself"));
smalltalk.bind(smalltalk.Number, unescape("isZero"), "isZero", function Number__isZero(){
const self = this; return (self.asFloat())._eq((0));
}
, "testing", unescape("isZero%0D%0D%09%5Eself%20asFloat%20%3D%200.0"));
smalltalk.bind(smalltalk.Number, unescape("isNaN"), "isNaN", function Number__isNaN(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primIsNaN(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "testing", unescape("isNaN%0D%0D%09%3Cprimitive%3A%20%27primIsNaN%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Number, unescape("isInfinite"), "isInfinite", function Number__isInfinite(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primIsInfinite(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "testing", unescape("isInfinite%0D%0D%09%3Cprimitive%3A%20%27primIsInfinite%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Number, unescape("isPowerOfTwo"), "isPowerOfTwo", function Number__isPowerOfTwo(){
const self = this; return (self._no_eq((0))).and_((function Number__(){
return (self.bitAnd_((self._minus((1)))))._eq((0));
}
));
}
, "testing", unescape("isPowerOfTwo%0D%09%22Return%20true%20if%20the%20receiver%20is%20an%20integral%20power%20of%20two.%22%0D%09%5E%20self%20%7E%3D%200%20and%3A%20%5B%28self%20bitAnd%3A%20self-1%29%20%3D%200%5D"));
smalltalk.bind(smalltalk.Number, unescape("closeTo%3A"), "closeTo_", function Number__closeTo_(aNumber){
const self = this; return ((self.abs())._minus((aNumber.abs())))._lt_eq((smalltalk.Float.epsilon()));
}
, "comparing", unescape("closeTo%3A%20aNumber%0D%09%5E%28self%20abs%20-%20aNumber%20abs%29%20%3C%3D%20Float%20epsilon%20"));
smalltalk.bind(smalltalk.Number, unescape("round%3A"), "round_", function Number__round_(positions){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primRound(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "rounding", unescape("round%3A%20positions%0D%09%3Cprimitive%3A%20%27primRound%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Number, unescape("gcd%3A"), "gcd_", function Number__gcd_(anInteger){
var u = nil;
var v = nil;
var r = nil;
const self = this; u=self.abs();
v=anInteger.abs();
if ((u._lt(v)).valueOf()) {r=u;
u=v;
v=r};
while((v._eq((0))).not()){r=u._bk_bk(v);
u=v;
v=r};;
return u;
}
, "math", unescape("gcd%3A%20anInteger%0D%09%09%22Answer%20the%20greatest%20common%20divisor%0D%09%09%20between%20the%20receiver%20and%20anInteger.%22%0D%09%7C%20u%20v%20r%20%7C%0D%09u%20%3A%3D%20self%20abs.%0D%09v%20%3A%3D%20anInteger%20abs.%0D%09u%20%3C%20v%0D%09%09ifTrue%3A%20%5B%0D%09%09%09r%20%3A%3D%20u.%0D%09%09%09u%20%3A%3D%20v.%0D%09%09%09v%20%3A%3D%20r%5D.%0D%09%5Bv%20%3D%200%5D%0D%09%09whileFalse%3A%20%5B%0D%09%09%09r%20%3A%3D%20u%20%5C%5C%20v.%0D%09%09%09u%20%3A%3D%20v.%0D%09%09%09v%20%3A%3D%20r%5D.%0D%09%5Eu"));
smalltalk.bind(smalltalk.Number, unescape("exp"), "exp", function Number__exp(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primExp(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "math", unescape("exp%0D%09%3Cprimitive%3A%20%27primExp%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Number, unescape("radiansToDegrees"), "radiansToDegrees", function Number__radiansToDegrees(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primRadiansToDegrees(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "math", unescape("radiansToDegrees%0D%09%22Answer%20the%20number%20of%20degrees%20the%0D%09%20receiver%20represents%20in%20radians.%22%0D%09%3Cprimitive%3A%20%27primRadiansToDegrees%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Number, unescape("degreesToRadians"), "degreesToRadians", function Number__degreesToRadians(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primDegreesToRadians(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "math", unescape("degreesToRadians%0D%09%22Answer%20the%20number%20of%20radians%20the%0D%09%20receiver%20represents%20in%20degrees.%22%0D%09%3Cprimitive%3A%20%27primDegreesToRadians%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Number, unescape("degreeSin"), "degreeSin", function Number__degreeSin(){
const self = this; return (self.degreesToRadians()).sin();
}
, "math", unescape("degreeSin%0D%09%5Eself%20degreesToRadians%20sin"));
smalltalk.bind(smalltalk.Number, unescape("degreeCos"), "degreeCos", function Number__degreeCos(){
const self = this; return (self.degreesToRadians()).cos();
}
, "math", unescape("degreeCos%0D%09%5Eself%20degreesToRadians%20cos"));
smalltalk.bind(smalltalk.Number, unescape("arcTan%3A"), "arcTan_", function Number__arcTan_(aNumber){
const self = this; return self.atan2_(aNumber);
}
, "math", unescape("arcTan%3A%20aNumber%0D%09%5Eself%20atan2%3A%20aNumber"));
smalltalk.addClass("Float", smalltalk.Number, [], 'Number');
smalltalk.Float.$classVariableNames=("");
smalltalk.bind(smalltalk.Float.$klass, unescape("emax"), "emax", function Float_class__emax(){
const self = this; return (1023);
}
, "instance creation", unescape("emax%0D%09%22Answer%20exponent%20of%20maximal%20representable%20value%22%0D%0D%09%5E1023"));
smalltalk.bind(smalltalk.Float.$klass, unescape("negativeInfinity"), "negativeInfinity", function Float_class__negativeInfinity(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primNegativeInfinity(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "instance creation", unescape("negativeInfinity%0D%09%3Cprimitive%3A%20%27primNegativeInfinity%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Float.$klass, unescape("infinity"), "infinity", function Float_class__infinity(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primInfinity(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "instance creation", unescape("infinity%0D%09%3Cprimitive%3A%20%27primInfinity%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Float.$klass, unescape("nan"), "nan", function Float_class__nan(){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primNaN(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "instance creation", unescape("nan%0D%09%3Cprimitive%3A%20%27primNaN%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Float.$klass, unescape("negativeZero"), "negativeZero", function Float_class__negativeZero(){
const self = this; return (0);
}
, "instance creation", unescape("negativeZero%0D%09%5E-0.0"));
smalltalk.bind(smalltalk.Float.$klass, unescape("epsilon"), "epsilon", function Float_class__epsilon(){
const self = this; return (0.001);
}
, "instance creation", unescape("epsilon%0D%09%5E0.001"));
smalltalk.bind(smalltalk.Float.$klass, unescape("multiplicativeIdentity"), "multiplicativeIdentity", function Float_class__multiplicativeIdentity(){
const self = this; return (1);
}
, "math", unescape("multiplicativeIdentity%0D%09%22Answer%20the%20multiplicative%20identity%20element%20for%20instances%20of%0D%09the%20receiver%3A%20the%20number%20which%2C%20when%20multiplied%20by%20any%20other%0D%09number%20yields%20the%20other%20number.%22%0D%0D%09%5E1.0"));
smalltalk.addClass("Integer", smalltalk.Number, [], 'Number');
smalltalk.Integer.$classVariableNames=("");
smalltalk.addClass("SmallInteger", smalltalk.Integer, [], 'Number');
smalltalk.SmallInteger.$classVariableNames=("");
smalltalk.bind(smalltalk.SmallInteger.$klass, unescape("maxVal"), "maxVal", function SmallInteger_class__maxVal(){
const self = this; return ((1).bitShift_((30)))._minus((1));
}
, "instance creation", unescape("maxVal%0D%09%22Answer%20the%20largest%20%28positive%29%20integer%20value%20that%20can%20be%20represented%20as%20a%20SmallInteger.%22%0D%09%2216r3FFFFFFF%201073741823%22%0D%09%5E%28%201%20bitShift%3A%2030%20%29%20-%201"));
smalltalk.bind(smalltalk.SmallInteger.$klass, unescape("minVal"), "minVal", function SmallInteger_class__minVal(){
const self = this; return (-1).bitShift_((30));
}
, "instance creation", unescape("minVal%0D%09%09%22Answer%20the%20smallest%20%28negative%29%20integer%20value%20that%20can%20be%0D%09%09represented%20as%20a%20SmallInteger.%22%0D%09%09%22C0000000%20-1073741824%22%0D%09%5E%28-1%20bitShift%3A%2030%20%29"));
smalltalk.addClass("Character", smalltalk.Object, [], 'Number');
smalltalk.Character.$classVariableNames=("");
smalltalk.bind(smalltalk.Character.$klass, unescape("cr"), "cr", function Character_class__cr(){
const self = this; return smalltalk.String.fromCharCode_((13));
}
, "characters", unescape("cr%0D%09%5EString%20fromCharCode%3A%2013"));
smalltalk.bind(smalltalk.Character.$klass, unescape("lf"), "lf", function Character_class__lf(){
const self = this; return smalltalk.String.fromCharCode_((10));
}
, "characters", unescape("lf%0D%09%5EString%20fromCharCode%3A%2010"));
smalltalk.bind(smalltalk.Character.$klass, unescape("tab"), "tab", function Character_class__tab(){
const self = this; return smalltalk.String.fromCharCode_((9));
}
, "characters", unescape("tab%0D%09%5EString%20fromCharCode%3A%209"));
smalltalk.bind(smalltalk.Behavior, unescape("commentStamp%3Aprior%3A"), "commentStamp_prior_", function Behavior__commentStamp_prior_(changeStamp,indexAndOffset){
const self = this; return self.commentStamp();
}
, "fileIn/Out", unescape("commentStamp%3A%20changeStamp%20prior%3A%20indexAndOffset%0D%09%22Prior%20source%20link%20ignored%20when%20filing%20in.%22%0D%09%5Eself%20commentStamp%0D%09"));
smalltalk.addClass("OutOfScopeNotification", smalltalk.Exception, [], 'Kernel');
smalltalk.OutOfScopeNotification.$classVariableNames=("");
smalltalk.bind(smalltalk.Class, unescape("variableSubclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3Acategory%3A"), "variableSubclass_instanceVariableNames_classVariableNames_poolDictionaries_category_", function Class__variableSubclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(aString,aString2,aString3,poolVarNames,aCategory){
const self = this; return self.subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(aString,aString2,aString3,poolVarNames,aCategory);
}
, "instantiation", unescape("variableSubclass%3A%20aString%0DinstanceVariableNames%3A%20aString2%0DclassVariableNames%3A%20aString3%0DpoolDictionaries%3A%20poolVarNames%0Dcategory%3A%20aCategory%0D%09%22%20Create%20a%20new%20subclass%20of%20the%20receiver.%20%22%0D%0D%09%5Eself%0D%09%09subclass%3A%20aString%0D%09%09instanceVariableNames%3A%20aString2%0D%09%09classVariableNames%3AaString3%0D%09%09poolDictionaries%3A%20poolVarNames%0D%09%09category%3A%20aCategory"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("atAllPut%3A"), "atAllPut_", function SequenceableCollection__atAllPut_(anObject){
const self = this; (1).to_do_((self.size()),(function SequenceableCollection__(index){
return self.at_put_(index,anObject);
}
));
return self;
}
, "accessing", unescape("atAllPut%3A%20anObject%20%0D%09%22Put%20anObject%20at%20every%20one%20of%20the%20receiver%27s%20indices.%22%0D%0D%091%20to%3A%20self%20size%20do%3A%20%5B%3Aindex%20%7C%20self%20at%3A%20index%20put%3A%20anObject%5D"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("allButLastDo%3A"), "allButLastDo_", function SequenceableCollection__allButLastDo_(block){
const self = this; (1).to_do_(((self.size())._minus((1))),(function SequenceableCollection__(index){
return block.value_((self.at_(index)));
}
));
return self;
}
, "enumerating", unescape("allButLastDo%3A%20block%0D%0D%091%20to%3A%20self%20size%20-%201%20do%3A%0D%09%09%5B%3Aindex%20%7C%20block%20value%3A%20%28self%20at%3A%20index%29%5D"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("copyUpTo%3A"), "copyUpTo_", function SequenceableCollection__copyUpTo_(anElement){
var index = nil;
const self = this; index=self.indexOf_(anElement);
if ((index._eq((0))).valueOf()) {return self.copy()};
return self.first_((index._minus((1))));
}
, "copying", unescape("copyUpTo%3A%20anElement%20%0D%09%22Answer%20all%20elements%20up%20to%20but%20not%20including%20anObject.%20If%20there%0D%09is%20no%20such%20object%2C%20answer%20a%20copy%20of%20the%20receiver.%22%0D%0D%09%7C%20index%20%7C%0D%09index%20%3A%3D%20self%20indexOf%3A%20anElement.%0D%09index%20%3D%200%20ifTrue%3A%20%5B%20%5Eself%20copy%20%5D.%0D%09%5Eself%20first%3A%20index%20-%201"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("first%3A"), "first_", function SequenceableCollection__first_(n){
const self = this; return self.copyFrom_to_((1),n);
}
, "copying", unescape("first%3A%20n%0D%09%22Answer%20the%20first%20n%20elements%20of%20the%20receiver.%0D%09Raise%20an%20error%20if%20there%20are%20not%20enough%20elements.%22%0D%0D%09%5E%20self%20copyFrom%3A%201%20to%3A%20n"));
smalltalk.bind(smalltalk.SequenceableCollection, unescape("replaceAllOccurencesOf%3Awith%3A"), "replaceAllOccurencesOf_with_", function SequenceableCollection__replaceAllOccurencesOf_with_(oldObject,newObject){
const self = this; return self.replaceAll_with_(oldObject,newObject);
}
, "accessing", unescape("replaceAllOccurencesOf%3A%20oldObject%20with%3A%20newObject%20%0D%09%22Replace%20all%20occurences%20of%20oldObject%20with%20newObject%22%0D%09%5Eself%20replaceAll%3A%20oldObject%20with%3A%20newObject"));
smalltalk.bind(smalltalk.Array.$klass, unescape("new%3AwithAll%3A"), "new_withAll_", function Array_class__new_withAll_(size,value){
const self = this; return (self.new_(size)).atAllPut_(value);
}
, "instance creation", unescape("new%3A%20size%20withAll%3A%20value%20%0D%09%22Answer%20an%20instance%20of%20me%2C%20with%20number%20of%20elements%20equal%20to%20size%2C%20each%20%0D%09of%20which%20refers%20to%20the%20argument%2C%20value.%22%0D%0D%09%5E%28self%20new%3A%20size%29%20atAllPut%3A%20value"));
smalltalk.bind(smalltalk.Array.$klass, unescape("blockVariableEval"), "blockVariableEval", function Array_class__blockVariableEval(){
const self = this; return (function Array_class__(x){
return x;
}
).value_((2));
}
, "instance creation", unescape("blockVariableEval%0D%09%5E%5B%3Ax%20%7C%20x%5D%20value%3A%202"));
smalltalk.bind(smalltalk.Array, unescape("writeStream"), "writeStream", function Array__writeStream(){
const self = this; return smalltalk.Stream.on_((smalltalk.Array.$$new()));
}
, "accessing", unescape("writeStream%0D%09%5EStream%20on%3A%20Array%20new"));
smalltalk.bind(smalltalk.Stream, unescape("resetToStart"), "resetToStart", function Stream__resetToStart(){
const self = this; self.resetContents();
return self;
}
, "positioning", unescape("resetToStart%0D%09self%20resetContents"));
smalltalk.bind(smalltalk.String, unescape("subStrings"), "subStrings", function String__subStrings(){
const self = this; return self.asArrayOfSubstrings();
}
, "converting", unescape("subStrings%0D%09%5Eself%20asArrayOfSubstrings"));
smalltalk.bind(smalltalk.String, unescape("charCode"), "charCode", function String__charCode(){
const self = this; return self.asciiValue();
}
, "converting", unescape("charCode%0D%09%5Eself%20asciiValue"));
smalltalk.bind(smalltalk.String, unescape("isSymbol"), "isSymbol", function String__isSymbol(){
const self = this; return true;
}
, "converting", unescape("isSymbol%0D%09%5Etrue"));
smalltalk.bind(smalltalk.String, unescape("isBinary"), "isBinary", function String__isBinary(){
var first = nil;
const self = this; first=self.at_((1));
return (((nil.is_eqeq_(first,"_"))).or_((function String__(){
return first.isLetter();
}
))).not();
}
, "testing", unescape("isBinary%0D%09%7C%20first%20%7C%0D%09first%20%3A%3D%20self%20at%3A%201.%0D%09%5E%28first%20%3D%3D%20%24_%20or%3A%20%5Bfirst%20isLetter%5D%29%20not"));
smalltalk.bind(smalltalk.Number.$klass, unescape("primParseFrom%3A"), "primParseFrom_", function Number_class__primParseFrom_(aString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKNumber.primNumberFrom(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "parsing", unescape("primParseFrom%3A%20aString%0D%09%22%20Return%20the%20receiver%20as%20a%20Number.%20%22%0D%09%3Cprimitive%3A%20%27primNumberFrom%27%20module%3A%20%27SKNumber%27%3E%0D%09%5Eself%20primitiveFailed"));
smalltalk.bind(smalltalk.Number.$klass, unescape("parseFrom%3A"), "parseFrom_", function Number_class__parseFrom_(aString){
const self = this; if ((aString.includes_("r")).valueOf()) {return smalltalk.Number.readFrom_((aString.readStream()))};
return self.primParseFrom_(aString);
}
, "parsing", unescape("parseFrom%3A%20aString%0D%09%22%20Return%20the%20receiver%20as%20a%20Number.%20%22%0D%0D%09%28aString%20includes%3A%20%22%24r%22%27r%27%29%20ifTrue%3A%20%5B%0D%09%09%5ENumber%20readFrom%3A%20aString%20readStream%0D%09%5D.%0D%09%5Eself%20primParseFrom%3A%20aString"));
smalltalk.addClass("JSGenerator", smalltalk.Object, ['methodClass', 'stream', 'environment', 'idCounter'], 'Compiler-JS');
smalltalk.JSGenerator.$classVariableNames=("BinaryMap InlineFunctionSet ReservedWords RewriteMap RewriteValueMap");
smalltalk.bind(smalltalk.JSGenerator, unescape("environment%3A"), "environment_", function JSGenerator__environment_(stEnvironment){
const self = this; self['@environment']=stEnvironment;
return self;
}
, "initialize-release", unescape("environment%3A%20stEnvironment%0D%09environment%20%3A%3D%20stEnvironment"));
smalltalk.bind(smalltalk.JSGenerator, unescape("initialize"), "initialize", function JSGenerator__initialize(){
const self = this; self['@idCounter']=(0);
return self;
}
, "initialize-release", unescape("initialize%0D%09%22counter%20is%20reset%20for%20every%20new%20method%22%0D%09idCounter%20%3A%3D%200"));
smalltalk.bind(smalltalk.JSGenerator, unescape("release"), "release", function JSGenerator__release(){
const self = this; self['@stream'].close();
return self;
}
, "initialize-release", unescape("release%0D%09stream%20close"));
smalltalk.bind(smalltalk.JSGenerator, unescape("stream%3A"), "stream_", function JSGenerator__stream_(aStream){
const self = this; self['@stream']=aStream;
return self;
}
, "initialize-release", unescape("stream%3A%20aStream%0D%09stream%20%3A%3D%20aStream"));
smalltalk.bind(smalltalk.JSGenerator, unescape("canBeRewritten%3A"), "canBeRewritten_", function JSGenerator__canBeRewritten_(selector){
const self = this; return (smalltalk.JSGenerator.classVariableAt_("RewriteMap").includesKey_(selector)).or_((function JSGenerator__(){
return smalltalk.JSGenerator.classVariableAt_("RewriteValueMap").includesKey_(selector);
}
));
}
, "testing", unescape("canBeRewritten%3A%20selector%0D%09%5E%28RewriteMap%20includesKey%3A%20selector%29%0D%09%09or%3A%20%5B%28RewriteValueMap%20includesKey%3A%20selector%29%5D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("canBeValueRewritten%3A"), "canBeValueRewritten_", function JSGenerator__canBeValueRewritten_(selector){
const self = this; return smalltalk.JSGenerator.classVariableAt_("RewriteValueMap").includesKey_(selector);
}
, "testing", unescape("canBeValueRewritten%3A%20selector%0D%09%5ERewriteValueMap%20includesKey%3A%20selector"));
smalltalk.bind(smalltalk.JSGenerator, unescape("hasInlinedFunction%3A"), "hasInlinedFunction_", function JSGenerator__hasInlinedFunction_(selector){
const self = this; return smalltalk.JSGenerator.classVariableAt_("InlineFunctionSet").includes_(selector);
}
, "testing", unescape("hasInlinedFunction%3A%20selector%0D%09%5EInlineFunctionSet%20includes%3A%20selector"));
smalltalk.bind(smalltalk.JSGenerator, unescape("methodClassIsPrimitive"), "methodClassIsPrimitive", function JSGenerator__methodClassIsPrimitive(){
var className = nil;
const self = this; var $early={name:"stReturn"};
try {
(function(){var $1$; $1$ = self['@methodClass']; if (nil.isNil_($1$)) { return (function JSGenerator__(){
$early.result=false; throw ($early);
}
)() } else { return $1$; }})();
className=self['@methodClass'].className();
return (className._eq("Number")).or_((function JSGenerator__(){
return (className._eq("String")).or_((function JSGenerator__(){
return (className._eq("Boolean")).or_((function JSGenerator__(){
return className._eq("BlockClosure");
}
));
}
));
}
));
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "testing", unescape("methodClassIsPrimitive%0D%09%22Return%20whether%20the%20method%20class%20%28aka%20receiver%29%20is%20a%20Javascript%20primitive%20type%2C%0D%09Number%2C%20Boolean%2C%20Function%20%28Block%29%2C%20String%22%0D%09%7C%20className%20%7C%0D%09methodClass%20ifNil%3A%20%5B%5Efalse%5D.%0D%09className%20%3A%3D%20methodClass%20className.%0D%09%5EclassName%20%3D%20%27Number%27%0D%09%09or%3A%20%5BclassName%20%3D%20%27String%27%0D%09%09or%3A%20%5BclassName%20%3D%20%27Boolean%27%0D%09%09or%3A%20%5BclassName%20%3D%20%27BlockClosure%27%5D%5D%5D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("eol"), "eol", function JSGenerator__eol(){
const self = this; self['@stream'].lf();
return self;
}
, "private javascript", unescape("eol%0D%09stream%20lf"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateArgumentListFor%3A"), "generateArgumentListFor_", function JSGenerator__generateArgumentListFor_(methodNode){
const self = this; (methodNode.arguments()).do_andBetweenDo_((function JSGenerator__(arg){
return self['@stream'].nextPutAll_((arg.name()));
}
),(function JSGenerator__(){
return self['@stream'].nextPut_(unescape("%2C"));
}
));
return self;
}
, "private javascript", unescape("generateArgumentListFor%3A%20methodNode%0D%09methodNode%20arguments%0D%09%09do%3A%20%5B%3Aarg%20%7C%20stream%20nextPutAll%3A%20arg%20name%5D%20%0D%09%09andBetweenDo%3A%20%5Bstream%20nextPut%3A%20%24%2C%5D%0D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("endSmalltalkMethodBinding%3Aselector%3A"), "endSmalltalkMethodBinding_selector_", function JSGenerator__endSmalltalkMethodBinding_selector_(aClass,aSelector){
const self = this; self['@stream'].nextPutAll_(unescape("%29%3B"));
self.eol();
return self;
}
, "generate method", unescape("endSmalltalkMethodBinding%3A%20aClass%20selector%3A%20aSelector%0D%09stream%20nextPutAll%3A%20%27%29%3B%27.%0D%09self%20eol%0D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("methodClass%3Aselector%3A"), "methodClass_selector_", function JSGenerator__methodClass_selector_(aClass,aSelector){
const self = this; self['@idCounter']=(0);
self['@methodClass']=aClass;
self['@stream'].nextPutAll_("function ");
self.classFunctionName_(self['@methodClass']);
self['@stream'].nextPutAll_("__");
self.selector_(aSelector);
return self;
}
, "generate method", unescape("methodClass%3A%20aClass%20selector%3A%20aSelector%0D%09%22counter%20is%20reset%20for%20every%20new%20method%22%0D%09idCounter%20%3A%3D%200.%0D%09methodClass%20%3A%3D%20aClass.%0D%09stream%20nextPutAll%3A%20%27function%20%27.%0D%09self%20classFunctionName%3A%20methodClass.%0D%09stream%0D%09%09nextPutAll%3A%20%27__%27.%0D%09self%20selector%3A%20aSelector"));
smalltalk.bind(smalltalk.JSGenerator, unescape("methodProtocol%3A"), "methodProtocol_", function JSGenerator__methodProtocol_(protocol){
const self = this; self['@stream'].nextPutAll_(unescape("%2C%20%22"));
(function(){var $1$; $1$ = protocol; if (!nil.isNil_($1$)) { return self['@stream'].nextPutAll_(protocol) } else { return $1$; }})();
self['@stream'].nextPutAll_(unescape("%22"));
return self;
}
, "generate method", unescape("methodProtocol%3A%20protocol%0D%09stream%20nextPutAll%3A%20%27%2C%20%22%27.%0D%09protocol%20ifNotNil%3A%20%5Bstream%20nextPutAll%3A%20protocol%5D.%0D%09stream%20nextPutAll%3A%20%27%22%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("methodSource%3A"), "methodSource_", function JSGenerator__methodSource_(methodSource){
const self = this; (function(){var $1$; $1$ = methodSource; if (!nil.isNil_($1$)) { return (function JSGenerator__(){
return (function JSGenerator__($2$){
$2$.nextPutAll_(unescape("%2C%20"));
return $2$.nextPutAll_((methodSource.asJavascript()))}
)(self['@stream']);
}
)() } else { return $1$; }})();
return self;
}
, "generate method", unescape("methodSource%3A%20methodSource%0D%09methodSource%20%0D%09%09ifNotNil%3A%20%5B%0D%09%09%09stream%0D%09%09%09%09nextPutAll%3A%20%27%2C%20%27%3B%0D%09%09%09%09nextPutAll%3A%20methodSource%20asJavascript%5D%0D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("startSmalltalkMethodBinding%3Aselector%3A"), "startSmalltalkMethodBinding_selector_", function JSGenerator__startSmalltalkMethodBinding_selector_(aClass,aSelector){
const self = this; self['@stream'].nextPutAll_(unescape("smalltalk.bind%28"));
self.smalltalkClassBinding_(aClass);
(function JSGenerator__($1$){
$1$.nextPutAll_(unescape("%2C%20unescape%28%22"));
$1$.nextPutAll_((aSelector.escaped()));
return $1$.nextPutAll_(unescape("%22%29%2C%20%22"))}
)(self['@stream']);
self.selector_(aSelector);
self['@stream'].nextPutAll_(unescape("%22%2C%20"));
return self;
}
, "generate method", unescape("startSmalltalkMethodBinding%3A%20aClass%20selector%3A%20aSelector%0D%09stream%20nextPutAll%3A%20%27smalltalk.bind%28%27.%0D%09self%20smalltalkClassBinding%3A%20aClass.%0D%09stream%20nextPutAll%3A%20%27%2C%20unescape%28%22%27%3B%20nextPutAll%3A%20aSelector%20escaped%3B%20nextPutAll%3A%20%27%22%29%2C%20%22%27.%0D%09self%20selector%3A%20aSelector.%0D%09stream%20nextPutAll%3A%20%27%22%2C%20%27.%0D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("argumentList%3A"), "argumentList_", function JSGenerator__argumentList_(args){
const self = this; self['@stream'].nextPut_(unescape("%28"));
args.do_andBetweenDo_((function JSGenerator__(arg){
return arg.generateAsReceiverOn_(self);
}
),(function JSGenerator__(){
return self['@stream'].nextPut_(unescape("%2C"));
}
));
self['@stream'].nextPut_(unescape("%29"));
return self;
}
, "generate callbacks", unescape("argumentList%3A%20args%0D%09stream%20nextPut%3A%20%24%28.%0D%09args%0D%09%09do%3A%20%5B%3Aarg%20%7C%20arg%20generateAsReceiverOn%3A%20self%5D%20%0D%09%09andBetweenDo%3A%20%5Bstream%20nextPut%3A%20%24%2C%5D.%0D%09stream%20nextPut%3A%20%24%29"));
smalltalk.bind(smalltalk.JSGenerator, unescape("asLocalFunctionInvocation%3Awith%3A"), "asLocalFunctionInvocation_with_", function JSGenerator__asLocalFunctionInvocation_with_(statements,argument){
var argumentVariable = nil;
const self = this; (function JSGenerator__($1$){
$1$.nextPut_(unescape("%28"));
return $1$.nextPutAll_("function ")}
)(self['@stream']);
self.classFunctionName_(self['@methodClass']);
self['@stream'].nextPutAll_("__");
argumentVariable=(smalltalk.StVariableNode.$$new()).name_((self.uniqueVarName()));
self.argumentList_((smalltalk.Array.with_(argumentVariable)));
self.startBlock();
statements.allButLastDo_((function JSGenerator__(message){
self.startStatement();
message.receiver_(argumentVariable);
message.generateOn_(self);
return self.endStatement();
}
));
(statements.last()).receiver_(argumentVariable);
((statements.last()).asReturnNode()).generateOn_(self);
self.endBlock();
self['@stream'].nextPutAll_(unescape("%29%28"));
argument.generateInlinedValueOn_(self);
self['@stream'].nextPut_(unescape("%29"));
return self;
}
, "generate callbacks", unescape("asLocalFunctionInvocation%3A%20statements%20with%3A%20argument%0D%09%7C%20argumentVariable%20%7C%0D%09stream%0D%09%09nextPut%3A%20%24%28%3B%0D%09%09nextPutAll%3A%20%27function%20%27.%0D%09self%20classFunctionName%3A%20methodClass.%0D%09stream%20nextPutAll%3A%20%27__%27.%0D%09argumentVariable%20%3A%3D%20StVariableNode%20new%20name%3A%20self%20uniqueVarName.%0D%09self%20argumentList%3A%20%28Array%20with%3A%20argumentVariable%29.%0D%09self%20startBlock.%0D%09statements%20allButLastDo%3A%20%5B%3Amessage%20%7C%0D%09%09%09self%20startStatement.%0D%09%09%09message%20receiver%3A%20argumentVariable.%0D%09%09%09message%20generateOn%3A%20self.%0D%09%09%09self%20endStatement%5D.%0D%09statements%20last%20receiver%3A%20argumentVariable.%0D%09statements%20last%20asReturnNode%20generateOn%3A%20self.%0D%09self%20endBlock.%0D%09stream%20nextPutAll%3A%20%27%29%28%27.%0D%09argument%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPut%3A%20%24%29"));
smalltalk.bind(smalltalk.JSGenerator, unescape("asReceiverWith%3A"), "asReceiverWith_", function JSGenerator__asReceiverWith_(aBlock){
const self = this; self['@stream'].nextPut_(unescape("%28"));
aBlock.value();
self['@stream'].nextPut_(unescape("%29"));
return self;
}
, "generate callbacks", unescape("asReceiverWith%3A%20aBlock%0D%09%22%20wrap%20in%20%28%29%22%0D%09stream%20nextPut%3A%20%24%28.%0D%09aBlock%20value.%0D%09stream%20nextPut%3A%20%24%29"));
smalltalk.bind(smalltalk.JSGenerator, unescape("blockFunction%3A"), "blockFunction_", function JSGenerator__blockFunction_(args){
const self = this; self['@stream'].nextPutAll_("function ");
self.classFunctionName_(self['@methodClass']);
self['@stream'].nextPutAll_("__");
self.argumentList_(args);
return self;
}
, "generate callbacks", unescape("blockFunction%3A%20args%0D%09stream%20nextPutAll%3A%20%27function%20%27.%0D%09self%20classFunctionName%3A%20methodClass.%0D%09stream%20nextPutAll%3A%20%27__%27.%0D%09self%20argumentList%3A%20args"));
smalltalk.bind(smalltalk.JSGenerator, unescape("blockInvocation"), "blockInvocation", function JSGenerator__blockInvocation(){
const self = this; self['@stream'].nextPutAll_(unescape("%28%29"));
return self;
}
, "generate callbacks", unescape("blockInvocation%0D%09stream%20nextPutAll%3A%20%27%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("blockVariableInvocation"), "blockVariableInvocation", function JSGenerator__blockVariableInvocation(){
const self = this; self.methodCall();
self['@stream'].nextPutAll_(unescape("value%28%29"));
return self;
}
, "generate callbacks", unescape("blockVariableInvocation%0D%09self%20methodCall.%0D%09stream%20nextPutAll%3A%20%27value%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("classFunctionName%3A"), "classFunctionName_", function JSGenerator__classFunctionName_(aClass){
const self = this; if ((aClass.isMeta()).valueOf()) {self['@stream'].nextPutAll_(((aClass.theNonMetaClass()).name()));
self['@stream'].nextPutAll_("_class")} else {self['@stream'].nextPutAll_((aClass.name()))};
return self;
}
, "generate callbacks", unescape("classFunctionName%3A%20aClass%0D%09aClass%20isMeta%0D%09%09ifTrue%3A%20%5B%0D%09%09%09stream%20nextPutAll%3A%20aClass%20theNonMetaClass%20name.%0D%09%09%09stream%20nextPutAll%3A%20%27_class%27%5D%0D%09%09ifFalse%3A%20%5Bstream%20nextPutAll%3A%20aClass%20name%5D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("className%3A"), "className_", function JSGenerator__className_(aClass){
const self = this; if ((aClass.isMeta()).valueOf()) {self['@stream'].nextPutAll_(((aClass.theNonMetaClass()).name()));
self['@stream'].nextPutAll_(".$klass")} else {self['@stream'].nextPutAll_((aClass.name()))};
return self;
}
, "generate callbacks", unescape("className%3A%20aClass%0D%09aClass%20isMeta%0D%09%09ifTrue%3A%20%5B%0D%09%09%09stream%20nextPutAll%3A%20aClass%20theNonMetaClass%20name.%0D%09%09%09stream%20nextPutAll%3A%20%27.%24klass%27%5D%0D%09%09ifFalse%3A%20%5Bstream%20nextPutAll%3A%20aClass%20name%5D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("defineSelf"), "defineSelf", function JSGenerator__defineSelf(){
const self = this; self['@stream'].nextPutAll_(unescape("const%20self%20%3D%20this%3B%20"));
return self;
}
, "generate callbacks", unescape("defineSelf%0D%09stream%20nextPutAll%3A%20%27const%20self%20%3D%20this%3B%20%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("endBlock"), "endBlock", function JSGenerator__endBlock(){
const self = this; self['@stream'].nextPut_(unescape("%7D"));
self.eol();
return self;
}
, "generate callbacks", unescape("endBlock%0D%09stream%20nextPut%3A%20%24%7D.%0D%09self%20eol"));
smalltalk.bind(smalltalk.JSGenerator, unescape("endStatement"), "endStatement", function JSGenerator__endStatement(){
const self = this; self['@stream'].nextPutAll_(unescape("%3B"));
self.eol();
return self;
}
, "generate callbacks", unescape("endStatement%0D%09stream%20nextPutAll%3A%20%27%3B%27.%0D%09self%20eol"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateArrayLiteral%3A"), "generateArrayLiteral_", function JSGenerator__generateArrayLiteral_(anArray){
const self = this; self['@stream'].nextPut_(unescape("%5B"));
anArray.do_andBetweenDo_((function JSGenerator__(element){
return element.generateOn_(self);
}
),(function JSGenerator__(){
return (function JSGenerator__($1$){
$1$.nextPut_(unescape("%2C"));
return $1$.space()}
)(self['@stream']);
}
));
self['@stream'].nextPut_(unescape("%5D"));
return self;
}
, "generate callbacks", unescape("generateArrayLiteral%3A%20anArray%0D%09%22%5B%281%29%2C%20%282%29%2C%20%283%29%5D%22%0D%09stream%20nextPut%3A%20%24%5B.%0D%09anArray%0D%09%09do%3A%20%5B%3Aelement%20%7C%20element%20generateOn%3A%20self%5D%20%0D%09%09andBetweenDo%3A%20%5Bstream%20nextPut%3A%20%24%2C%3B%20space%5D.%0D%09stream%20nextPut%3A%20%24%5D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateAssignment"), "generateAssignment", function JSGenerator__generateAssignment(){
const self = this; self['@stream'].nextPutAll_(unescape("%3D"));
return self;
}
, "generate callbacks", unescape("generateAssignment%0D%09stream%20nextPutAll%3A%20%27%3D%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateBooleanLiteral%3A"), "generateBooleanLiteral_", function JSGenerator__generateBooleanLiteral_(aBoolean){
const self = this; self['@stream'].nextPutAll_((aBoolean.asString()));
return self;
}
, "generate callbacks", unescape("generateBooleanLiteral%3A%20aBoolean%0D%09stream%20nextPutAll%3A%20aBoolean%20asString"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateCharacterLiteral%3A"), "generateCharacterLiteral_", function JSGenerator__generateCharacterLiteral_(aCharacter){
const self = this; self.generateStringLiteral_((aCharacter.asString()));
return self;
}
, "generate callbacks", unescape("generateCharacterLiteral%3A%20aCharacter%0D%09self%20generateStringLiteral%3A%20aCharacter%20asString"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateClassVariableAt%3A"), "generateClassVariableAt_", function JSGenerator__generateClassVariableAt_(classVarNode){
const self = this; self.smalltalkClassBinding_(((classVarNode.key()).nonMetaClass()));
(function JSGenerator__($1$){
$1$.nextPutAll_(unescape(".classVariableAt_%28%22"));
$1$.nextPutAll_((classVarNode.name()));
return $1$.nextPutAll_(unescape("%22%29"))}
)(self['@stream']);
return self;
}
, "generate callbacks", unescape("generateClassVariableAt%3A%20classVarNode%0D%09%22smalltalk.StCompilerTestClass.classVariableAt_%28%22%22ClassVar2%22%22%29%22%0D%09self%20smalltalkClassBinding%3A%20classVarNode%20key%20nonMetaClass.%0D%09stream%0D%09%09nextPutAll%3A%20%27.classVariableAt_%28%22%27%3B%0D%09%09nextPutAll%3A%20classVarNode%20name%3B%0D%09%09nextPutAll%3A%20%27%22%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateClassVariableAt%3Aput%3A"), "generateClassVariableAt_put_", function JSGenerator__generateClassVariableAt_put_(classVarNode,valueNode){
var classVarDefinition = nil;
const self = this; classVarDefinition=classVarNode.key();
self.smalltalkClassBinding_((classVarDefinition.nonMetaClass()));
(function JSGenerator__($1$){
$1$.nextPutAll_(unescape(".classVariableAt_put_%28%22"));
$1$.nextPutAll_((classVarDefinition.name()));
return $1$.nextPutAll_(unescape("%22%2C"))}
)(self['@stream']);
valueNode.generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29"));
return self;
}
, "generate callbacks", unescape("generateClassVariableAt%3A%20classVarNode%20put%3A%20valueNode%0D%09%22smalltalk.StCompilerTestClass.classVariableAt_put_%28%22%22ClassVar2%22%22%2C%22%22classVar2%22%22%29%3B%22%0D%09%7C%20classVarDefinition%20%7C%0D%09classVarDefinition%20%3A%3D%20classVarNode%20key.%0D%09self%20smalltalkClassBinding%3A%20classVarDefinition%20nonMetaClass.%0D%09stream%0D%09%09nextPutAll%3A%20%27.classVariableAt_put_%28%22%27%3B%0D%09%09nextPutAll%3A%20classVarDefinition%20name%3B%0D%09%09nextPutAll%3A%20%27%22%2C%27.%0D%09valueNode%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateInstVarAccess%3Aon%3A"), "generateInstVarAccess_on_", function JSGenerator__generateInstVarAccess_on_(varName,objectNode){
var objName = nil;
const self = this; objName=objectNode.name();
if ((smalltalk.JSGenerator.classVariableAt_("ReservedWords").includes_(objName)).valueOf()) {self['@stream'].nextPutAll_("$$")};
(function JSGenerator__($1$){
$1$.nextPutAll_(objName);
$1$.nextPut_(".");
return $1$.nextPutAll_(varName)}
)(self['@stream']);
return self;
}
, "generate callbacks", unescape("generateInstVarAccess%3A%20varName%20on%3A%20objectNode%0D%09%7C%20objName%20%7C%0D%09objName%20%3A%3D%20objectNode%20name.%0D%09%28ReservedWords%20includes%3A%20objName%29%0D%09%09ifTrue%3A%20%5Bstream%20nextPutAll%3A%20%27%24%24%27%5D.%0D%09stream%0D%09%09nextPutAll%3A%20objName%3B%0D%09%09nextPut%3A%20%24.%20%3B%0D%09%09nextPutAll%3A%20varName"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateInstanceVariable%3A"), "generateInstanceVariable_", function JSGenerator__generateInstanceVariable_(variableNode){
const self = this; (function JSGenerator__($1$){
$1$.nextPutAll_(unescape("self%5B%27@"));
$1$.nextPutAll_((variableNode.name()));
return $1$.nextPutAll_(unescape("%27%5D"))}
)(self['@stream']);
return self;
}
, "generate callbacks", unescape("generateInstanceVariable%3A%20variableNode%0D%09%22self%5B%27@value1%27%5D%22%0D%09stream%0D%09%09nextPutAll%3A%20%27self%5B%27%27@%27%3B%0D%09%09nextPutAll%3A%20variableNode%20name%3B%0D%09%09nextPutAll%3A%20%27%27%27%5D%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateNilLiteral%3A"), "generateNilLiteral_", function JSGenerator__generateNilLiteral_(anUndefinedObject){
const self = this; self['@stream'].nextPutAll_((anUndefinedObject.asString()));
return self;
}
, "generate callbacks", unescape("generateNilLiteral%3A%20anUndefinedObject%0D%09stream%20nextPutAll%3A%20anUndefinedObject%20asString"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateNumberLiteral%3A"), "generateNumberLiteral_", function JSGenerator__generateNumberLiteral_(aNumber){
const self = this; self['@stream'].nextPut_(unescape("%28"));
aNumber.printOn_(self['@stream']);
self['@stream'].nextPut_(unescape("%29"));
return self;
}
, "generate callbacks", unescape("generateNumberLiteral%3A%20aNumber%0D%09%22%281%29%22%0D%09stream%20nextPut%3A%20%24%28.%0D%09aNumber%20printOn%3A%20stream.%0D%09stream%20nextPut%3A%20%24%29"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generatePrimitive%3Amodule%3A"), "generatePrimitive_module_", function JSGenerator__generatePrimitive_module_(primitiveName,moduleName){
const self = this; (function JSGenerator__($1$){
$1$.nextPutAll_(unescape("var%20%24%24primitiveResult%20%3D%20smalltalk.primitiveManager.callPrimitive%28%22"));
$1$.nextPutAll_(moduleName);
$1$.nextPutAll_(unescape("%22%2C%20%22"));
$1$.nextPutAll_(primitiveName);
return $1$.nextPutAll_(unescape("%22%2C%20this"))}
)(self['@stream']);
if ((self.methodClassIsPrimitive()).valueOf()) {self['@stream'].nextPutAll_(unescape(".valueOf%28%29"))};
self['@stream'].nextPutAll_(unescape("%2C%20arguments%29%3B"));
self.eol();
self['@stream'].nextPutAll_(unescape("if%20%28%24%24primitiveResult%20%21%3D%3D%20smalltalk.primitiveManager.primFailValue%29%0D%09%09return%20%24%24primitiveResult%3B"));
self.eol();
return self;
}
, "generate callbacks", unescape("generatePrimitive%3A%20primitiveName%20module%3A%20moduleName%0D%09%22Create%20named%20primitive.%22%0D%09%22%3Cprimitive%3A%20%27primScan%27%20module%3A%20%27NKBarcodeScanner%27%3E%0D%0D%09var%20%24%24primitiveResult%20%3D%20smalltalk.primitiveManager.callPrimitive%28%22%22NKBarcodeScanner%22%22%2C%20%22%22primScan%22%22%2C%20this%2C%20arguments%29%3B%0D%09if%20%28%24%24primitiveResult%20%21%3D%3D%20smalltalk.primitiveManager.primFailValue%29%0D%09%09return%20%24%24primitiveResult%3B%0D%0D%09var%20%24%24primitiveResult%20%3D%20NKBarcodeScanner.primScan%28this%2C%20arguments%29%3B%0D%09if%20%28%24%24primitiveResult%20%21%3D%3D%20smalltalk.primitiveManager.primFailValue%29%0D%09%09return%20%24%24primitiveResult%3B%0D%09%22%0D%09stream%0D%09%09nextPutAll%3A%20%27var%20%24%24primitiveResult%20%3D%20smalltalk.primitiveManager.callPrimitive%28%22%27%3B%0D%09%09nextPutAll%3A%20moduleName%3B%0D%09%09nextPutAll%3A%20%27%22%2C%20%22%27%3B%0D%09%09nextPutAll%3A%20primitiveName%3B%0D%09%09nextPutAll%3A%20%27%22%2C%20this%27.%0D%09self%20methodClassIsPrimitive%0D%09%09ifTrue%3A%20%5Bstream%20nextPutAll%3A%20%27.valueOf%28%29%27%5D.%0D%09stream%0D%09%09nextPutAll%3A%20%27%2C%20arguments%29%3B%27.%0D%09self%20eol.%0D%09stream%0D%09%09nextPutAll%3A%20%27if%20%28%24%24primitiveResult%20%21%3D%3D%20smalltalk.primitiveManager.primFailValue%29%0D%09%09return%20%24%24primitiveResult%3B%27.%0D%09self%20eol"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generatePrimitiveArgumentCopy"), "generatePrimitiveArgumentCopy", function JSGenerator__generatePrimitiveArgumentCopy(){
const self = this; self['@stream'].nextPutAll_(unescape("const%20args%20%3D%20%5B%5D%3B%0D%09const%20length%20%3D%20arguments.length%3B%0D%09for%20%28var%20i%20%3D%200%3B%20i%20%3C%20length%3B%20++i%29%20%7B%0D%09%09args%5Bi%5D%20%3D%20arguments%5Bi%5D%3B%0D%09%7D"));
self.eol();
return self;
}
, "generate callbacks", unescape("generatePrimitiveArgumentCopy%0D%09%22Generate%20the%20code%20to%20copy%20the%20arguments.%22%0D%09%22%09const%20args%20%3D%20%5B%5D%3B%0D%09const%20length%20%3D%20arguments.length%3B%0D%09for%20%28var%20i%20%3D%200%3B%20i%20%3C%20length%3B%20++i%29%20%7B%0D%09%09args%5Bi%5D%20%3D%20arguments%5Bi%5D%3B%0D%09%7D%22%0D%09stream%0D%09%09nextPutAll%3A%20%27const%20args%20%3D%20%5B%5D%3B%0D%09const%20length%20%3D%20arguments.length%3B%0D%09for%20%28var%20i%20%3D%200%3B%20i%20%3C%20length%3B%20++i%29%20%7B%0D%09%09args%5Bi%5D%20%3D%20arguments%5Bi%5D%3B%0D%09%7D%27.%0D%09self%20eol"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generatePrimitiveDirect%3Amodule%3A"), "generatePrimitiveDirect_module_", function JSGenerator__generatePrimitiveDirect_module_(primitiveName,moduleName){
const self = this; (function JSGenerator__($1$){
$1$.nextPutAll_(unescape("var%20%24%24primitiveResult%20%3D%20smalltalk.primitiveManager.modules."));
$1$.nextPutAll_(moduleName);
$1$.nextPutAll_(".");
$1$.nextPutAll_(primitiveName);
return $1$.nextPutAll_(unescape("%28this"))}
)(self['@stream']);
self['@stream'].nextPutAll_(unescape("%2C%20arguments%29%3B"));
self.eol();
self['@stream'].nextPutAll_(unescape("if%20%28%24%24primitiveResult%20%21%3D%3D%20smalltalk.primitiveManager.primFailValue%29%0D%09%09return%20%24%24primitiveResult%3B"));
self.eol();
return self;
}
, "generate callbacks", unescape("generatePrimitiveDirect%3A%20primitiveName%20module%3A%20moduleName%0D%09%22Create%20named%20primitive.%22%0D%09%22%3Cprimitive%3A%20%27primScan%27%20module%3A%20%27NKBarcodeScanner%27%3E%0D%0D%09var%20%24%24primitiveResult%20%3D%20smalltalk.NKBarcodeScanner.primScan%28this%2C%20arguments%29%3B%0D%09if%20%28%24%24primitiveResult%20%21%3D%3D%20smalltalk.primitiveManager.primFailValue%29%0D%09%09return%20%24%24primitiveResult%3B%0D%09%22%0D%09%22self%20generatePrimitiveArgumentCopy.%22%0D%09stream%0D%09%09nextPutAll%3A%20%27var%20%24%24primitiveResult%20%3D%20smalltalk.primitiveManager.modules.%27%3B%0D%09%09nextPutAll%3A%20moduleName%3B%0D%09%09nextPutAll%3A%20%27.%27%3B%0D%09%09nextPutAll%3A%20primitiveName%3B%0D%09%09nextPutAll%3A%20%27%28this%27.%0D%22%09self%20methodClassIsPrimitive%0D%09%09ifTrue%3A%20%5Bstream%20nextPutAll%3A%20%27.valueOf%28%29%27%5D.%0D%22%09stream%0D%09%09nextPutAll%3A%20%27%2C%20arguments%29%3B%27.%0D%09self%20eol.%0D%09stream%0D%09%09nextPutAll%3A%20%27if%20%28%24%24primitiveResult%20%21%3D%3D%20smalltalk.primitiveManager.primFailValue%29%0D%09%09return%20%24%24primitiveResult%3B%27.%0D%09self%20eol"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generatePropertyAccess%3Aon%3A"), "generatePropertyAccess_on_", function JSGenerator__generatePropertyAccess_on_(propertyName,objectNode){
const self = this; (function JSGenerator__($1$){
$1$.nextPutAll_((objectNode.name()));
$1$.nextPut_(unescape("%5B"));
$1$.nextPutAll_((propertyName.asString()));
return $1$.nextPut_(unescape("%5D"))}
)(self['@stream']);
return self;
}
, "generate callbacks", unescape("generatePropertyAccess%3A%20propertyName%20on%3A%20objectNode%0D%09stream%0D%09%09nextPutAll%3A%20objectNode%20name%3B%0D%09%09nextPut%3A%20%24%5B%20%3B%0D%09%09nextPutAll%3A%20propertyName%20asString%3B%0D%09%09nextPut%3A%20%24%5D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateStringLiteral%3A"), "generateStringLiteral_", function JSGenerator__generateStringLiteral_(aString){
const self = this; self['@stream'].nextPutAll_((aString.asJavascript()));
return self;
}
, "generate callbacks", unescape("generateStringLiteral%3A%20aString%0D%09%22Escape%20the%20string%2C%20but%20only%20if%20needed.%20%0D%09Magic%20is%20done%20in%20String%20class%2C%20depending%20on%20platform%22%0D%09stream%20nextPutAll%3A%20aString%20asJavascript"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateTemporaries%3A"), "generateTemporaries_", function JSGenerator__generateTemporaries_(tempVars){
const self = this; self.toDo();
tempVars.do_((function JSGenerator__(tempVar){
self['@stream'].nextPutAll_("var ");
tempVar.generateOn_(self);
self['@stream'].nextPutAll_(unescape("%20%3D%20nil%3B"));
return self.eol();
}
));
return self;
}
, "generate callbacks", unescape("generateTemporaries%3A%20tempVars%0D%09self%20toDo.%0D%09%22%20should%20later%20use%20nilReadBeforeWrittenTemps%20to%20avoid%20unnecessary%20inits%22%0D%09tempVars%0D%09%09do%3A%20%5B%3AtempVar%20%7C%20%0D%09%09%09stream%20nextPutAll%3A%20%27var%20%27.%0D%09%09%09tempVar%20generateOn%3A%20self.%0D%09%09%09stream%20nextPutAll%3A%20%27%20%3D%20nil%3B%27.%0D%09%09%09self%20eol%5D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateUndeclaredVariable%3A"), "generateUndeclaredVariable_", function JSGenerator__generateUndeclaredVariable_(variableNode){
var varName = nil;
const self = this; varName=variableNode.name();
self['@stream'].nextPutAll_("smalltalk.");
self['@stream'].nextPutAll_(varName);
return self;
}
, "generate callbacks", unescape("generateUndeclaredVariable%3A%20variableNode%0D%09%22assume%20this%20is%20a%20global%20variable%22%0D%09%7C%20varName%20%7C%0D%09varName%20%3A%3D%20variableNode%20name.%0D%09stream%20nextPutAll%3A%20%27smalltalk.%27.%0D%09stream%20nextPutAll%3A%20varName"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateVariable%3A"), "generateVariable_", function JSGenerator__generateVariable_(variableNode){
const self = this; if ((variableNode.isSelfPseudoVariable()).valueOf()) {self['@stream'].nextPutAll_("self")} else {var varName = nil;
varName=variableNode.name();
if ((smalltalk.JSGenerator.classVariableAt_("ReservedWords").includes_(varName)).valueOf()) {self['@stream'].nextPutAll_("$$")};
self['@stream'].nextPutAll_(varName)};
return self;
}
, "generate callbacks", unescape("generateVariable%3A%20variableNode%0D%09variableNode%20isSelfPseudoVariable%0D%09%09ifTrue%3A%20%5Bstream%20nextPutAll%3A%20%27self%27%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09%7C%20varName%20%7C%0D%09%09%09varName%20%3A%3D%20variableNode%20name.%0D%09%09%09%28ReservedWords%20includes%3A%20varName%29%0D%09%09%09%09ifTrue%3A%20%5Bstream%20nextPutAll%3A%20%27%24%24%27%5D.%0D%09%09%09stream%20nextPutAll%3A%20varName%5D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("inlineJS%3A"), "inlineJS_", function JSGenerator__inlineJS_(aString){
const self = this; self['@stream'].nextPutAll_(aString);
return self;
}
, "generate callbacks", unescape("inlineJS%3A%20aString%0D%09stream%20nextPutAll%3A%20aString"));
smalltalk.bind(smalltalk.JSGenerator, unescape("literalVariable%3A"), "literalVariable_", function JSGenerator__literalVariable_(variableNode){
const self = this; self['@stream'].nextPutAll_((variableNode.name()));
return self;
}
, "generate callbacks", unescape("literalVariable%3A%20variableNode%0D%09stream%20nextPutAll%3A%20variableNode%20name"));
smalltalk.bind(smalltalk.JSGenerator, unescape("methodCall"), "methodCall", function JSGenerator__methodCall(){
const self = this; self['@stream'].nextPut_(".");
return self;
}
, "generate callbacks", unescape("methodCall%0D%09stream%20nextPut%3A%20%24."));
smalltalk.bind(smalltalk.JSGenerator, unescape("nonLocalReturnWith%3A"), "nonLocalReturnWith_", function JSGenerator__nonLocalReturnWith_(aBlock){
const self = this; self['@stream'].nextPutAll_(unescape("%24early.result%3D"));
aBlock.value();
self['@stream'].nextPutAll_(unescape("%3B%20throw%20%28%24early%29"));
return self;
}
, "generate callbacks", unescape("nonLocalReturnWith%3A%20aBlock%0D%09%22%24early.result%3D%3Cexpression%3E%3B%20throw%20%28%24early%29%3B%22%0D%09stream%0D%09%09nextPutAll%3A%20%27%24early.result%3D%27.%0D%09aBlock%20value.%0D%09stream%0D%09%09nextPutAll%3A%20%27%3B%20throw%20%28%24early%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("nonLocalReturnWrapperEnd"), "nonLocalReturnWrapperEnd", function JSGenerator__nonLocalReturnWrapperEnd(){
const self = this; self['@stream'].nextPutAll_(unescape("%7D%20catch%28%24ex%29%20%7B"));
self.eol();
(function JSGenerator__($1$){
$1$.tab();
return $1$.nextPutAll_(unescape("if%28%24ex%3D%3D%3D%24early%29%20%7B%20return%20%24ex.result%3B%7D"))}
)(self['@stream']);
self.eol();
(function JSGenerator__($2$){
$2$.tab();
return $2$.nextPutAll_("throw $ex")}
)(self['@stream']);
self.eol();
self['@stream'].nextPutAll_(unescape("%7D"));
self.eol();
return self;
}
, "generate callbacks", unescape("nonLocalReturnWrapperEnd%0D%09%22%7D%20catch%28e%29%20%7B%0D%09%09if%28e%3D%3D%3D%24early%29%20return%20e.result%3B%20%0D%09%09throw%20e%0D%09%7D%22%0D%09stream%20nextPutAll%3A%20%27%7D%20catch%28%24ex%29%20%7B%27.%0D%09self%20eol.%0D%09stream%20tab%3B%20nextPutAll%3A%20%27if%28%24ex%3D%3D%3D%24early%29%20%7B%20return%20%24ex.result%3B%7D%27.%0D%09self%20eol.%0D%09stream%20tab%3B%20nextPutAll%3A%20%27throw%20%24ex%27.%0D%09self%20eol.%0D%09stream%20nextPutAll%3A%20%27%7D%27.%0D%09self%20eol"));
smalltalk.bind(smalltalk.JSGenerator, unescape("nonLocalReturnWrapperStart"), "nonLocalReturnWrapperStart", function JSGenerator__nonLocalReturnWrapperStart(){
const self = this; self['@stream'].nextPutAll_(unescape("var%20%24early%3D%7Bname%3A%22stReturn%22%7D%3B"));
self.eol();
self['@stream'].nextPutAll_(unescape("try%20%7B"));
self.eol();
return self;
}
, "generate callbacks", unescape("nonLocalReturnWrapperStart%0D%09%22var%20%24early%3D%7B%7D%3B%0D%09try%20%7B%22%0D%09stream%20nextPutAll%3A%20%27var%20%24early%3D%7Bname%3A%22stReturn%22%7D%3B%27.%0D%09self%20eol.%0D%09stream%20nextPutAll%3A%20%27try%20%7B%27.%0D%09self%20eol"));
smalltalk.bind(smalltalk.JSGenerator, unescape("return"), "$$return", function JSGenerator__$$return(){
const self = this; self['@stream'].nextPutAll_("return ");
return self;
}
, "generate callbacks", unescape("return%0D%09stream%20nextPutAll%3A%20%27return%20%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("selector%3A"), "selector_", function JSGenerator__selector_(selectorSymbol){
var selector = nil;
const self = this; selector=selectorSymbol.asString();
self.toDo();
if (((selectorSymbol.asSymbol()).isBinary()).valueOf()) {selector.do_((function JSGenerator__(c){
return self['@stream'].nextPutAll_((smalltalk.JSGenerator.classVariableAt_("BinaryMap").at_ifAbsent_(c,(function JSGenerator__(){
return c.asString();
}
))));
}
))} else {var mapped = nil;
mapped=selector.replaceAllOccurencesOf_with_(":","_");
if ((smalltalk.JSGenerator.classVariableAt_("ReservedWords").includes_(mapped)).valueOf()) {self['@stream'].nextPutAll_("$$")};
self['@stream'].nextPutAll_(mapped)};
return self;
}
, "generate callbacks", unescape("selector%3A%20selectorSymbol%0D%09%7C%20selector%20%7C%0D%09selector%20%3A%3D%20selectorSymbol%20asString.%0D%09self%20toDo.%20%22this%20would%20get%20around%20the%20reserved%20words%22%0D%22%09stream%20nextPut%3A%20%24_.%22%0D%09selectorSymbol%20asSymbol%20isBinary%0D%09%09ifTrue%3A%20%5B%0D%09%09%09selector%0D%09%09%09%09do%3A%20%5B%3Ac%20%7C%20stream%20nextPutAll%3A%20%28BinaryMap%20at%3A%20c%20ifAbsent%3A%20%5Bc%20asString%5D%29%5D%0D%09%09%09%09%22separatedBy%3A%20%5Bstream%20nextPut%3A%20%24_%5D%22%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09%7C%20mapped%20%7C%0D%09%09%09mapped%20%3A%3D%20selector%20replaceAllOccurencesOf%3A%20%24%3A%20with%3A%20%24_.%0D%09%09%09%28ReservedWords%20includes%3A%20mapped%29%0D%09%09%09%09ifTrue%3A%20%5Bstream%20nextPutAll%3A%20%27%24%24%27%5D.%0D%09%09%09stream%20nextPutAll%3A%20mapped%5D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("selfPseudoVariable%3A"), "selfPseudoVariable_", function JSGenerator__selfPseudoVariable_(variableNode){
const self = this; self['@stream'].nextPutAll_("self");
return self;
}
, "generate callbacks", unescape("selfPseudoVariable%3A%20variableNode%0D%09stream%20nextPutAll%3A%20%27self%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("smalltalkClassBinding%3A"), "smalltalkClassBinding_", function JSGenerator__smalltalkClassBinding_(aClass){
const self = this; self['@stream'].nextPutAll_("smalltalk.");
self.className_(aClass);
return self;
}
, "generate callbacks", unescape("smalltalkClassBinding%3A%20aClass%0D%09stream%20nextPutAll%3A%20%27smalltalk.%27.%0D%09self%20className%3A%20aClass"));
smalltalk.bind(smalltalk.JSGenerator, unescape("startBlock"), "startBlock", function JSGenerator__startBlock(){
const self = this; self['@stream'].nextPut_(unescape("%7B"));
self.eol();
return self;
}
, "generate callbacks", unescape("startBlock%0D%09stream%20nextPut%3A%20%24%7B.%0D%09self%20eol"));
smalltalk.bind(smalltalk.JSGenerator, unescape("startStatement"), "startStatement", function JSGenerator__startStatement(){
const self = this; self;
return self;
}
, "generate callbacks", unescape("startStatement%0D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("superImplementor%3AargumentList%3A"), "superImplementor_argumentList_", function JSGenerator__superImplementor_argumentList_(selector,argList){
const self = this; self['@stream'].nextPutAll_(unescape("smalltalk.superImplementor%28"));
self.smalltalkClassBinding_(self['@methodClass']);
self['@stream'].nextPutAll_(unescape("%2C%27"));
self.selector_(selector);
self['@stream'].nextPutAll_(unescape("%27%29.apply%28self%2C%20"));
self['@stream'].nextPut_(unescape("%5B"));
argList.do_andBetweenDo_((function JSGenerator__(arg){
return arg.generateOn_(self);
}
),(function JSGenerator__(){
return self['@stream'].nextPut_(unescape("%2C"));
}
));
self['@stream'].nextPutAll_(unescape("%5D%29"));
return self;
}
, "generate callbacks", unescape("superImplementor%3A%20selector%20argumentList%3A%20argList%0D%09%22smalltalk.superImplementor%28smalltalk.StCompilerTestClass.%24klass%2C%27%24%24new%27%29.apply%28self%2C%20%5B%5D%29%22%0D%09stream%20nextPutAll%3A%20%27smalltalk.superImplementor%28%27.%0D%09self%20smalltalkClassBinding%3A%20methodClass.%0D%09stream%20nextPutAll%3A%20%27%2C%27%27%27.%0D%09self%20selector%3A%20selector.%0D%09stream%20nextPutAll%3A%20%27%27%27%29.apply%28self%2C%20%27.%0D%0D%09stream%20nextPut%3A%20%24%5B.%0D%09argList%0D%09%09do%3A%20%5B%3Aarg%20%7C%20arg%20generateOn%3A%20self%5D%20%0D%09%09andBetweenDo%3A%20%5Bstream%20nextPut%3A%20%24%2C%5D.%0D%09stream%20nextPutAll%3A%20%27%5D%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("toDo"), "toDo", function JSGenerator__toDo(){
const self = this; self;
return self;
}
, "annotations", "toDo");
smalltalk.bind(smalltalk.JSGenerator, unescape("addDefinition%3Asuperclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3Acategory%3A"), "addDefinition_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_", function JSGenerator__addDefinition_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(subclass,superClass,instVarNames,classVarNames,poolVars,category){
var classDefinition = nil;
const self = this; classDefinition=smalltalk.StClassDefinition.name_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(subclass,superClass,instVarNames,classVarNames,poolVars,category);
self['@environment'].addClassDefinition_(classDefinition);
return self;
}
, "generate", unescape("addDefinition%3A%20subclass%20superclass%3A%20superClass%20instanceVariableNames%3A%20instVarNames%20classVariableNames%3A%20classVarNames%20poolDictionaries%3A%20poolVars%20category%3A%20category%0D%09%7C%20classDefinition%20%7C%0D%09classDefinition%20%3A%3D%20StClassDefinition%0D%09%09name%3A%20subclass%0D%09%09superclass%3A%20superClass%0D%09%09instanceVariableNames%3A%20instVarNames%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20poolVars%0D%09%09category%3A%20category.%0D%09environment%20addClassDefinition%3A%20classDefinition"));
smalltalk.bind(smalltalk.JSGenerator, unescape("environment"), "environment", function JSGenerator__environment(){
const self = this; return self['@environment'];
}
, "generate", unescape("environment%0D%09%5Eenvironment"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generate%3AclassVariableNames%3A"), "generate_classVariableNames_", function JSGenerator__generate_classVariableNames_(subclass,classVars){
const self = this; (function JSGenerator__($1$){
$1$.nextPutAll_("smalltalk.");
$1$.nextPutAll_(subclass);
return $1$.nextPutAll_(unescape(".%24classVariableNames%3D%28%22"))}
)(self['@stream']);
classVars.do_andBetweenDo_((function JSGenerator__(classVar){
return self['@stream'].nextPutAll_((classVar.asString()));
}
),(function JSGenerator__(){
return self['@stream'].space();
}
));
self['@stream'].nextPutAll_(unescape("%22%29%3B"));
self.eol();
return self;
}
, "generate", unescape("generate%3A%20subclass%20classVariableNames%3A%20classVars%0D%0D%09%22smalltalk.StCompilerTestClass.%24classVariableNames%3D%22%22ClassVar1%20ClassVar2%20ClassVar3%22%22%29%3B%22%0D%09stream%0D%09%09nextPutAll%3A%20%27smalltalk.%27%3B%0D%09%09nextPutAll%3A%20subclass%3B%20%0D%09%09nextPutAll%3A%20%27.%24classVariableNames%3D%28%22%27.%0D%0D%09classVars%0D%09%09do%3A%20%5B%3AclassVar%20%7C%20stream%20nextPutAll%3A%20classVar%20asString%5D%20%0D%09%09andBetweenDo%3A%20%5Bstream%20space%5D.%0D%0D%09stream%20nextPutAll%3A%20%27%22%29%3B%27.%0D%09self%20eol"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generate%3Asuperclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3Acategory%3A"), "generate_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_", function JSGenerator__generate_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(subclass,superClass,instVars,classVars,poolVars,category){
const self = this; (function JSGenerator__($1$){
$1$.nextPutAll_(unescape("smalltalk.addClass%28%22"));
$1$.nextPutAll_(subclass);
$1$.nextPutAll_(unescape("%22%2C%20"));
$1$.nextPutAll_("smalltalk.");
$1$.nextPutAll_(superClass);
$1$.nextPut_(unescape("%2C"));
$1$.space();
return $1$.nextPut_(unescape("%5B"))}
)(self['@stream']);
instVars.do_andBetweenDo_((function JSGenerator__(instVar){
return instVar.printOn_(self['@stream']);
}
),(function JSGenerator__(){
return (function JSGenerator__($2$){
$2$.nextPut_(unescape("%2C"));
return $2$.space()}
)(self['@stream']);
}
));
self['@stream'].nextPutAll_(unescape("%5D%2C%20"));
category.printOn_(self['@stream']);
self['@stream'].nextPutAll_(unescape("%29%3B"));
self.eol();
self.generate_classVariableNames_(subclass,classVars);
return self;
}
, "generate", unescape("generate%3A%20subclass%20superclass%3A%20superClass%20instanceVariableNames%3A%20instVars%20classVariableNames%3A%20classVars%20poolDictionaries%3A%20poolVars%20category%3A%20category%0D%0D%09%22smalltalk.addClass%28%22%22StCompilerTestClass%22%22%2Csmalltalk.Object%2C%20%5B%27instVar1%27%2C%20%27instVar2%27%2C%20%27instVar3%27%5D%2C%20%27Compiler-JS-Test%27%29%3B%0D%09smalltalk.StCompilerTestClass.%24classVariableNames%3D%22%22ClassVar1%20ClassVar2%20ClassVar3%22%22%29%3B%22%0D%22%09self%20addDefinition%3A%20subclass%20superclass%3A%20superClass%20instanceVariableNames%3A%20instVars%20classVariableNames%3A%20classVars%20poolDictionaries%3A%20poolVars%20category%3A%20category.%0D%22%0D%09stream%0D%09%09nextPutAll%3A%20%27smalltalk.addClass%28%22%27%3B%0D%09%09nextPutAll%3A%20subclass%3B%20nextPutAll%3A%20%27%22%2C%20%27%20%3B%0D%09%09nextPutAll%3A%20%27smalltalk.%27%3B%20nextPutAll%3A%20superClass%3B%20nextPut%3A%20%24%2C%20%3B%20space%3B%0D%09%09nextPut%3A%20%24%5B%20.%0D%0D%09instVars%0D%09%09do%3A%20%5B%3AinstVar%20%7C%20instVar%20printOn%3A%20stream%5D%20%0D%09%09andBetweenDo%3A%20%5Bstream%20nextPut%3A%20%24%2C%3B%20space%5D.%0D%09stream%20%0D%09%09nextPutAll%3A%20%27%5D%2C%20%27.%0D%09category%20printOn%3A%20stream.%0D%09stream%20nextPutAll%3A%20%27%29%3B%27.%0D%09self%20eol.%0D%09self%20generate%3A%20subclass%20classVariableNames%3A%20classVars"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateMeta%3AinstanceVariableNames%3A"), "generateMeta_instanceVariableNames_", function JSGenerator__generateMeta_instanceVariableNames_(metaClassDefinition,instVarNames){
const self = this; (function JSGenerator__($1$){
$1$.nextPutAll_("smalltalk.");
$1$.nextPutAll_(((metaClassDefinition.theNonMetaClass()).className()));
return $1$.nextPutAll_(unescape(".%24klass.%24iVarNames%20%3D%20%5B"))}
)(self['@stream']);
instVarNames.do_andBetweenDo_((function JSGenerator__(instVar){
return instVar.printOn_(self['@stream']);
}
),(function JSGenerator__(){
return (function JSGenerator__($2$){
$2$.nextPut_(unescape("%2C"));
return $2$.space()}
)(self['@stream']);
}
));
self['@stream'].nextPutAll_(unescape("%5D%3B"));
self.eol();
return self;
}
, "generate", unescape("generateMeta%3A%20metaClassDefinition%20instanceVariableNames%3A%20instVarNames%0D%0D%09%22EventManager%20class%20instanceVariableNames%3A%20%27%20eventsTriggered%20%27%21%0D%09smalltalk.EventManager.%24klass.%24iVarNames%20%3D%20%5B%27eventsTriggered%27%5D%3B%22%0D%09stream%0D%09%09nextPutAll%3A%20%27smalltalk.%27%3B%0D%09%09nextPutAll%3A%20metaClassDefinition%20theNonMetaClass%20className%3B%20%0D%09%09nextPutAll%3A%20%27.%24klass.%24iVarNames%20%3D%20%5B%27.%0D%09instVarNames%0D%09%09do%3A%20%5B%3AinstVar%20%7C%20instVar%20printOn%3A%20stream%5D%20%0D%09%09andBetweenDo%3A%20%5Bstream%20nextPut%3A%20%24%2C%3B%20space%5D.%0D%09stream%20nextPutAll%3A%20%27%5D%3B%27.%0D%09self%20eol"));
smalltalk.bind(smalltalk.JSGenerator, unescape("generateMetaFor%3AinstanceVariableNames%3A"), "generateMetaFor_instanceVariableNames_", function JSGenerator__generateMetaFor_instanceVariableNames_(className,instVarNames){
const self = this; (self.halt()).generateMeta_instanceVariableNames_((self['@environment'].bindingOf_(className)),instVarNames);
return self;
}
, "generate", unescape("generateMetaFor%3A%20className%20instanceVariableNames%3A%20instVarNames%0D%0D%09self%20halt%0D%09%09generateMeta%3A%20%28environment%20bindingOf%3A%20className%29%0D%09%09instanceVariableNames%3A%20instVarNames"));
smalltalk.bind(smalltalk.JSGenerator, unescape("uniqueVarName"), "uniqueVarName", function JSGenerator__uniqueVarName(){
const self = this; self['@idCounter']=self['@idCounter']._plus((1));
return ("$"._comma((self['@idCounter'].asString())))._comma("$");
}
, "generate", unescape("uniqueVarName%0D%09idCounter%20%3A%3D%20idCounter%20+%201.%0D%09%5E%27%24%27%20%2C%20idCounter%20asString%20%2C%20%27%24%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("source"), "source", function JSGenerator__source(){
const self = this; return self['@stream'].contents();
}
, "accessing", unescape("source%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteValueTimesRepeat%3A"), "rewriteValueTimesRepeat_", function JSGenerator__rewriteValueTimesRepeat_(messageNode){
var varName = nil;
const self = this; varName=self.uniqueVarName();
(function JSGenerator__($1$){
$1$.nextPutAll_(unescape("%28function%28%29%7Bfor%28var%20"));
$1$.nextPutAll_(varName);
return $1$.nextPutAll_(unescape("%20%3D%20"))}
)(self['@stream']);
(messageNode.receiver()).generateInlinedValueOn_(self);
(function JSGenerator__($2$){
$2$.nextPutAll_(unescape("%3B"));
$2$.nextPutAll_(varName);
$2$.nextPutAll_(unescape("%3E0%3B"));
$2$.nextPutAll_(varName);
return $2$.nextPutAll_(unescape("--%29%7B%20"))}
)(self['@stream']);
(messageNode.firstArgument()).generateInlinedOn_(self);
self['@stream'].nextPutAll_(unescape("%7D%3Breturn%20nil%7D%29%28%29"));
return self;
}
, "generate rewrite value", unescape("rewriteValueTimesRepeat%3A%20messageNode%0D%09%22%28function%28%29%7Bfor%28var%20%241%24%3D%25receiver%25%3B%241%24%3E0%3B%241%24--%29%7B%25arg1%25%28%29%7D%3Breturn%20nil%7D%29%28%29%22%0D%09%7C%20varName%20%7C%0D%09varName%20%3A%3D%20self%20uniqueVarName.%0D%09stream%0D%09%09nextPutAll%3A%20%27%28function%28%29%7Bfor%28var%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%20%3D%20%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%0D%09stream%0D%09%09nextPutAll%3A%20%27%3B%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%3E0%3B%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%20%27--%29%7B%20%27.%0D%0D%09messageNode%20firstArgument%20generateInlinedOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%7D%3Breturn%20nil%7D%29%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteValueWhileFalse%3A"), "rewriteValueWhileFalse_", function JSGenerator__rewriteValueWhileFalse_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28function%28%29%7Bwhile%28%21"));
(messageNode.receiver()).generateInlinedBlockValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29%7B%7D%3Breturn%20nil%7D%29%28%29"));
return self;
}
, "generate rewrite value", unescape("rewriteValueWhileFalse%3A%20messageNode%0D%09%22%28function%28%29%7Bwhile%28%21%25receiver%25%28%29%29%7B%7D%3Breturn%20nil%7D%29%28%29%22%0D%09stream%20nextPutAll%3A%20%27%28function%28%29%7Bwhile%28%21%27.%0D%09messageNode%20receiver%20generateInlinedBlockValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%7B%7D%3Breturn%20nil%7D%29%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteValueWhileFalseDo%3A"), "rewriteValueWhileFalseDo_", function JSGenerator__rewriteValueWhileFalseDo_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28function%28%29%7Bwhile%28%21"));
(messageNode.receiver()).generateInlinedBlockValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29%7B"));
(messageNode.firstArgument()).generateBlockBodyOn_(self);
self['@stream'].nextPutAll_(unescape("%7D%3Breturn%20nil%7D%29%28%29"));
return self;
}
, "generate rewrite value", unescape("rewriteValueWhileFalseDo%3A%20messageNode%0D%09%22%28function%28%29%7Bwhile%28%21%25receiver%25%28%29%29%7B%25arg1%25%28%29%7D%3Breturn%20nil%7D%29%28%29%22%0D%09stream%20nextPutAll%3A%20%27%28function%28%29%7Bwhile%28%21%27.%0D%09messageNode%20receiver%20generateInlinedBlockValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%7B%27.%0D%09messageNode%20firstArgument%20generateBlockBodyOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%7D%3Breturn%20nil%7D%29%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteValueWhileTrue%3A"), "rewriteValueWhileTrue_", function JSGenerator__rewriteValueWhileTrue_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28function%28%29%7Bwhile%28"));
(messageNode.receiver()).generateInlinedBlockValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29%7B%7D%3Breturn%20nil%7D%29%28%29"));
return self;
}
, "generate rewrite value", unescape("rewriteValueWhileTrue%3A%20messageNode%0D%09%22%28function%28%29%7Bwhile%28%25receiver%25%28%29%29%7B%7D%3Breturn%20nil%7D%29%28%29%22%0D%09stream%20nextPutAll%3A%20%27%28function%28%29%7Bwhile%28%27.%0D%09messageNode%20receiver%20generateInlinedBlockValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%7B%7D%3Breturn%20nil%7D%29%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteValueWhileTrueDo%3A"), "rewriteValueWhileTrueDo_", function JSGenerator__rewriteValueWhileTrueDo_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28function%28%29%7Bwhile%28"));
(messageNode.receiver()).generateInlinedBlockValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29%7B"));
(messageNode.firstArgument()).generateBlockBodyOn_(self);
self['@stream'].nextPutAll_(unescape("%7D%3Breturn%20nil%7D%29%28%29"));
return self;
}
, "generate rewrite value", unescape("rewriteValueWhileTrueDo%3A%20messageNode%0D%09%22%28function%28%29%7Bwhile%28%25receiver%25%28%29%29%7B%25arg1%25%28%29%7D%3Breturn%20nil%7D%29%28%29%22%0D%09stream%20nextPutAll%3A%20%27%28function%28%29%7Bwhile%28%27.%0D%09messageNode%20receiver%20generateInlinedBlockValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%7B%27.%0D%09messageNode%20firstArgument%20generateBlockBodyOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%7D%3Breturn%20nil%7D%29%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewrite%3A"), "rewrite_", function JSGenerator__rewrite_(messageNode){
var rewriteRule = nil;
const self = this; rewriteRule=smalltalk.JSGenerator.classVariableAt_("RewriteMap").at_ifAbsent_(((messageNode.selector()).key()),(function JSGenerator__(){
return (smalltalk.StCompileException.$$new()).signal_((("rewrite selector "._comma(((messageNode.selector()).key())))._comma(" missing")));
}
));
self.perform_with_(rewriteRule,messageNode);
return self;
}
, "generate rewrites", unescape("rewrite%3A%20messageNode%0D%09%7C%20rewriteRule%20%7C%0D%09rewriteRule%20%3A%3D%20RewriteMap%20at%3A%20messageNode%20selector%20key%20ifAbsent%3A%20%5BStCompileException%20new%20signal%3A%20%27rewrite%20selector%20%27%20%2C%20messageNode%20selector%20key%20%2C%20%27%20missing%27%5D.%0D%09self%20perform%3A%20rewriteRule%20with%3A%20messageNode"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteBasicAt%3A"), "rewriteBasicAt_", function JSGenerator__rewriteBasicAt_(messageNode){
var varName = nil;
const self = this; varName=self.uniqueVarName();
(function JSGenerator__($1$){
$1$.nextPutAll_(unescape("%28function%28%29%7Bvar%20"));
$1$.nextPutAll_(varName);
$1$.nextPutAll_(unescape("%3B%20"));
$1$.nextPutAll_(varName);
return $1$.nextPutAll_(unescape("%20%3D%20"))}
)(self['@stream']);
(messageNode.receiver()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%5B"));
(messageNode.firstArgument()).generateInlinedValueOn_(self);
(function JSGenerator__($2$){
$2$.nextPutAll_(unescape("%5D%3B%20return%20nil.isNil_%28"));
$2$.nextPutAll_(varName);
$2$.nextPutAll_(unescape("%29%20%3F%20nil%20%3A%20"));
$2$.nextPutAll_(varName);
return $2$.nextPutAll_(unescape("%7D%29%28%29"))}
)(self['@stream']);
return self;
}
, "generate rewrites", unescape("rewriteBasicAt%3A%20messageNode%0D%09%22%28%28function%28%29%7Bvar%20%241%24%3D%25receiver%25%5B%25arg1%25%5D%3Bif%28nil.isNil_%28%241%24%29%29return%20nil%3Breturn%20%241%24%3B%7D%29%28%29%29%22%0D%09%22%28function%28%29%7Bvar%20%241%24%3B%20%241%24%20%3D%20%25receiver%25%5B%25arg1%25%5D%3B%20return%20nil.isNil_%28%241%24%29%29%20%3F%20nil%20%3A%20%241%24%3B%7D%29%28%29%22%0D%09%7C%20varName%20%7C%0D%09varName%20%3A%3D%20self%20uniqueVarName.%0D%09stream%0D%09%09nextPutAll%3A%20%27%28function%28%29%7Bvar%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%3B%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%20%3D%20%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20%0D%09%09nextPutAll%3A%20%27%5B%27.%0D%09messageNode%20firstArgument%20generateInlinedValueOn%3A%20self.%0D%09stream%0D%09%09nextPutAll%3A%20%27%5D%3B%20return%20nil.isNil_%28%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%20%27%29%20%3F%20nil%20%3A%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%7D%29%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteBasicAtIfAbsent%3A"), "rewriteBasicAtIfAbsent_", function JSGenerator__rewriteBasicAtIfAbsent_(messageNode){
var varName = nil;
const self = this; varName=self.uniqueVarName();
(function JSGenerator__($1$){
$1$.nextPutAll_(unescape("%28function%28%29%7Bvar%20"));
$1$.nextPutAll_(varName);
$1$.nextPutAll_(unescape("%3B%20"));
$1$.nextPutAll_(varName);
return $1$.nextPutAll_(unescape("%20%3D%20"))}
)(self['@stream']);
(messageNode.receiver()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%5B"));
(messageNode.firstArgument()).generateInlinedValueOn_(self);
(function JSGenerator__($2$){
$2$.nextPutAll_(unescape("%5D%3B%20return%20nil.isNil_%28"));
$2$.nextPutAll_(varName);
return $2$.nextPutAll_(unescape("%29%20%3F%20"))}
)(self['@stream']);
(messageNode.secondArgument()).generateInlinedBlockValueOn_(self);
(function JSGenerator__($3$){
$3$.nextPutAll_(" : ");
$3$.nextPutAll_(varName);
return $3$.nextPutAll_(unescape("%7D%29%28%29"))}
)(self['@stream']);
return self;
}
, "generate rewrites", unescape("rewriteBasicAtIfAbsent%3A%20messageNode%0D%09%22%28%28function%28%29%7Bvar%20%241%24%3D%25receiver%25%5B%25arg1%25%5D%3Bif%28nil.isNil_%28%241%24%29%29return%20%28%25arg2%25.value%28%29%29%3Breturn%20%241%24%3B%7D%29%28%29%29%22%0D%09%7C%20varName%20%7C%0D%09varName%20%3A%3D%20self%20uniqueVarName.%0D%09stream%0D%09%09nextPutAll%3A%20%27%28function%28%29%7Bvar%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%3B%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%20%3D%20%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20%0D%09%09nextPutAll%3A%20%27%5B%27.%0D%09messageNode%20firstArgument%20generateInlinedValueOn%3A%20self.%0D%09stream%0D%09%09nextPutAll%3A%20%27%5D%3B%20return%20nil.isNil_%28%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%20%27%29%20%3F%20%27.%0D%09messageNode%20secondArgument%20generateInlinedBlockValueOn%3A%20self.%0D%09stream%0D%09%09nextPutAll%3A%20%20%27%20%3A%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%7D%29%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteBasicAtPut%3A"), "rewriteBasicAtPut_", function JSGenerator__rewriteBasicAtPut_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28"));
(messageNode.receiver()).generateAsReceiverOn_(self);
self['@stream'].nextPutAll_(unescape("%5B"));
(messageNode.firstArgument()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%5D%3D"));
(messageNode.secondArgument()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29"));
return self;
}
, "generate rewrites", unescape("rewriteBasicAtPut%3A%20messageNode%0D%09%22%28%25receiver%25%5B%25arg1%25%5D%3D%28%25arg2%25%29%29%22%0D%09stream%20nextPutAll%3A%20%27%28%27.%0D%09messageNode%20receiver%20generateAsReceiverOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%5B%27.%0D%09messageNode%20firstArgument%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%5D%3D%27.%0D%09messageNode%20secondArgument%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteBasicValueOrNil%3A"), "rewriteBasicValueOrNil_", function JSGenerator__rewriteBasicValueOrNil_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28function%28%29%7Bvar%20%241%24%3Breturn%20%28nil.isNil_%28%241%24%20%3D%20"));
(messageNode.receiver()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29%29%20%3F%20nil%20%3A%20%241%24%3B%7D%29%28%29"));
return self;
}
, "generate rewrites", unescape("rewriteBasicValueOrNil%3A%20messageNode%0D%09%22%28function%28%29%7Bvar%20%241%24%3Breturn%20%28nil.isNil_%28%241%24%20%3D%20%25receiver%25%29%29%20%3F%20nil%20%3A%20%241%24%3B%7D%29%28%29%22%0D%09stream%20nextPutAll%3A%20%27%28function%28%29%7Bvar%20%241%24%3Breturn%20%28nil.isNil_%28%241%24%20%3D%20%27.%0D%09%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%29%20%3F%20nil%20%3A%20%241%24%3B%7D%29%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteClass%3A"), "rewriteClass_", function JSGenerator__rewriteClass_(messageNode){
const self = this; (messageNode.receiver()).generateAsReceiverOn_(self);
self['@stream'].nextPutAll_(".$klass");
return self;
}
, "generate rewrites", unescape("rewriteClass%3A%20messageNode%0D%09%22%25receiver%25.%24klass%22%0D%09messageNode%20receiver%20generateAsReceiverOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27.%24klass%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteEqEq%3A"), "rewriteEqEq_", function JSGenerator__rewriteEqEq_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28nil.is_eqeq_%28"));
(messageNode.receiver()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%2C"));
(messageNode.firstArgument()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29%29"));
return self;
}
, "generate rewrites", unescape("rewriteEqEq%3A%20messageNode%0D%09%22%28nil.is_eqeq_%28%25receiver%25%2C%25arg1%25%29%29%22%0D%09stream%20nextPutAll%3A%20%27%28nil.is_eqeq_%28%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%2C%27.%0D%09messageNode%20firstArgument%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteEqEqEq%3A"), "rewriteEqEqEq_", function JSGenerator__rewriteEqEqEq_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28"));
(messageNode.receiver()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%20%3D%3D%3D%20"));
(messageNode.firstArgument()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29"));
return self;
}
, "generate rewrites", unescape("rewriteEqEqEq%3A%20messageNode%0D%09%22%28%25receiver%25%20%3D%3D%3D%20%25arg1%25%29%22%0D%09stream%20nextPutAll%3A%20%27%28%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%20%3D%3D%3D%20%27.%0D%09messageNode%20firstArgument%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%27.%0D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteFalseCondition%3A"), "rewriteFalseCondition_", function JSGenerator__rewriteFalseCondition_(receiverNode){
const self = this; self.asReceiverWith_((function JSGenerator__(){
return receiverNode.generateInlinedValueOn_(self);
}
));
self['@stream'].nextPutAll_(unescape(".not%28%29"));
return self;
}
, "generate rewrites", unescape("rewriteFalseCondition%3A%20receiverNode%0D%09self%20asReceiverWith%3A%20%5BreceiverNode%20generateInlinedValueOn%3A%20self%5D.%0D%09stream%20nextPutAll%3A%20%27.not%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteIfFalse%3A"), "rewriteIfFalse_", function JSGenerator__rewriteIfFalse_(messageNode){
var args = nil;
const self = this; args=messageNode.arguments();
self['@stream'].nextPutAll_(unescape("if%20%28"));
self.rewriteFalseCondition_((messageNode.receiver()));
self['@stream'].nextPutAll_(unescape("%29%20%7B"));
(args.at_((1))).generateBlockBodyOn_(self);
self['@stream'].nextPutAll_(unescape("%7D"));
if (((args.size())._gt((1))).valueOf()) {self['@stream'].nextPutAll_(unescape("%20else%20%7B"));
(args.at_((2))).generateBlockBodyOn_(self);
self['@stream'].nextPutAll_(unescape("%7D"))};
return self;
}
, "generate rewrites", unescape("rewriteIfFalse%3A%20messageNode%0D%09%22if%20%28%21%25receiver%25%29%20%7B%20%25arg1%25%28%29%7D%22%0D%09%22if%20%28%21%25receiver%25%29%20%7B%20return%20%25arg1%25%28%29%7D%20else%20%7B%20return%20nil%20%7D%22%0D%09%7C%20args%20%7C%0D%09args%20%3A%3D%20messageNode%20arguments.%0D%09stream%20nextPutAll%3A%20%27if%20%28%27.%0D%09self%20rewriteFalseCondition%3A%20messageNode%20receiver.%0D%09stream%20nextPutAll%3A%20%27%29%20%7B%27.%0D%09%28args%20at%3A%201%29%20generateBlockBodyOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%7D%27.%0D%09args%20size%20%3E%201%0D%09%09ifTrue%3A%20%5B%0D%09%09%09stream%20nextPutAll%3A%20%27%20else%20%7B%27.%0D%09%09%09%28args%20at%3A%202%29%20generateBlockBodyOn%3A%20self.%0D%09%09%09stream%20nextPutAll%3A%20%27%7D%27%5D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteIfFalseIfTrue%3A"), "rewriteIfFalseIfTrue_", function JSGenerator__rewriteIfFalseIfTrue_(messageNode){
var args = nil;
const self = this; args=messageNode.arguments();
self['@stream'].nextPutAll_(unescape("if%20%28"));
self.rewriteFalseCondition_((messageNode.receiver()));
self['@stream'].nextPutAll_(unescape("%29%20%7B"));
(args.at_((1))).generateBlockBodyOn_(self);
self['@stream'].nextPutAll_(unescape("%7D%20else%20%7B"));
(args.at_((2))).generateBlockBodyOn_(self);
self['@stream'].nextPutAll_(unescape("%7D"));
return self;
}
, "generate rewrites", unescape("rewriteIfFalseIfTrue%3A%20messageNode%0D%09%22if%20%28%21%25receiver%25%29%20%7B%20%25arg1%25%28%29%7D%20else%20%7B%20%25arg2%25%28%29%20%7D%22%0D%09%7C%20args%20%7C%0D%09args%20%3A%3D%20messageNode%20arguments.%0D%09stream%20nextPutAll%3A%20%27if%20%28%27.%0D%09self%20rewriteFalseCondition%3A%20messageNode%20receiver.%0D%09stream%20nextPutAll%3A%20%27%29%20%7B%27.%0D%09%28args%20at%3A%201%29%20generateBlockBodyOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%7D%20else%20%7B%27.%0D%09%28args%20at%3A%202%29%20generateBlockBodyOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%7D%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteIfNil%3A"), "rewriteIfNil_", function JSGenerator__rewriteIfNil_(messageNode){
var varName = nil;
const self = this; varName=self.uniqueVarName();
(function JSGenerator__($1$){
$1$.nextPutAll_(unescape("%28function%28%29%7Bvar%20"));
$1$.nextPutAll_(varName);
$1$.nextPutAll_(unescape("%3B%20"));
$1$.nextPutAll_(varName);
return $1$.nextPutAll_(unescape("%20%3D%20"))}
)(self['@stream']);
(messageNode.receiver()).generateInlinedValueOn_(self);
(function JSGenerator__($2$){
$2$.nextPutAll_(unescape("%3B%20if%20%28nil.isNil_%28"));
$2$.nextPutAll_(varName);
return $2$.nextPutAll_(unescape("%29%29%20%7B%20return%20"))}
)(self['@stream']);
(messageNode.firstArgument()).generateInlinedBlockValueOn_(self);
(function JSGenerator__($3$){
$3$.nextPutAll_(unescape("%20%7D%20else%20%7B%20return%20"));
$3$.nextPutAll_(varName);
return $3$.nextPutAll_(unescape("%3B%20%7D%7D%29%28%29"))}
)(self['@stream']);
return self;
}
, "generate rewrites", unescape("rewriteIfNil%3A%20messageNode%0D%09%22%28function%28%29%7Bvar%20%241%24%3Breturn%20%28nil.isNil_%28%241%24%20%3D%20%25receiver%25%29%29%20%3F%20%25arg1%25%28%29%20%3A%20%241%24%3B%7D%29%28%29%22%0D%09%22%28function%28%29%7Bvar%20%241%24%3B%20%241%24%20%3D%20%25receiver%25%3B%20if%20%28nil.isNil_%28%241%24%29%29%20%7B%20return%20%25arg1%25%28%29%20%7D%20else%20%7B%20return%20%241%24%3B%7D%7D%29%28%29%22%0D%09%7C%20varName%20%7C%0D%09varName%20%3A%3D%20self%20uniqueVarName.%0D%09stream%0D%09%09nextPutAll%3A%20%27%28function%28%29%7Bvar%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%3B%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%20%3D%20%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20%0D%09%09nextPutAll%3A%20%27%3B%20if%20%28nil.isNil_%28%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%20%27%29%29%20%7B%20return%20%27.%0D%09messageNode%20firstArgument%20generateInlinedBlockValueOn%3A%20self.%0D%09stream%0D%09%09nextPutAll%3A%20%27%20%7D%20else%20%7B%20return%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%3B%20%7D%7D%29%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteIfNilIfNotNil%3A"), "rewriteIfNilIfNotNil_", function JSGenerator__rewriteIfNilIfNotNil_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28nil.isNil_%28"));
(messageNode.receiver()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29%20%3F%20"));
(messageNode.firstArgument()).generateInlinedBlockValueOn_(self);
self['@stream'].nextPutAll_(" : ");
(messageNode.secondArgument()).generateInlinedBlockValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29"));
return self;
}
, "generate rewrites", unescape("rewriteIfNilIfNotNil%3A%20messageNode%0D%09%22%28nil.isNil_%28%25receiver%25%29%29%20%3F%20%25arg1%25%28%29%20%3A%20%25arg2%25%28%29%22%0D%09stream%20nextPutAll%3A%20%27%28nil.isNil_%28%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%20%3F%20%27.%0D%09messageNode%20firstArgument%20generateInlinedBlockValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%20%3A%20%27.%0D%09messageNode%20secondArgument%20generateInlinedBlockValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteIfNotNil%3A"), "rewriteIfNotNil_", function JSGenerator__rewriteIfNotNil_(messageNode){
var varName = nil;
const self = this; varName=self.uniqueVarName();
(function JSGenerator__($1$){
$1$.nextPutAll_(unescape("%28function%28%29%7Bvar%20"));
$1$.nextPutAll_(varName);
$1$.nextPutAll_(unescape("%3B%20"));
$1$.nextPutAll_(varName);
return $1$.nextPutAll_(unescape("%20%3D%20"))}
)(self['@stream']);
(messageNode.receiver()).generateInlinedValueOn_(self);
(function JSGenerator__($2$){
$2$.nextPutAll_(unescape("%3B%20if%20%28%21nil.isNil_%28"));
$2$.nextPutAll_(varName);
return $2$.nextPutAll_(unescape("%29%29%20%7B%20return%20"))}
)(self['@stream']);
(messageNode.firstArgument()).generateInlinedBlockValueOn_(self);
(function JSGenerator__($3$){
$3$.nextPutAll_(unescape("%20%7D%20else%20%7B%20return%20"));
$3$.nextPutAll_(varName);
return $3$.nextPutAll_(unescape("%3B%20%7D%7D%29%28%29"))}
)(self['@stream']);
return self;
}
, "generate rewrites", unescape("rewriteIfNotNil%3A%20messageNode%0D%09%22%28function%28%29%7Bvar%20%241%24%3Breturn%20%28nil.isNil_%28%241%24%20%3D%20%25receiver%25%29%3D%3D%3Dfalse%29%20%3F%20%25arg1%25%28%29%20%3A%20%241%24%3B%7D%29%28%29%22%0D%09%22%28function%28%29%7Bvar%20%241%24%3B%20%241%24%20%3D%20%25receiver%25%3B%20if%20%28%21nil.isNil_%28%241%24%29%29%20%7B%20return%20%25arg1%25%28%29%20%7D%20else%20%7B%20return%20%241%24%3B%7D%7D%29%28%29%22%0D%09%7C%20varName%20%7C%0D%09varName%20%3A%3D%20self%20uniqueVarName.%0D%09stream%0D%09%09nextPutAll%3A%20%27%28function%28%29%7Bvar%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%3B%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%20%3D%20%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20%0D%09%09nextPutAll%3A%20%27%3B%20if%20%28%21nil.isNil_%28%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%20%27%29%29%20%7B%20return%20%27.%0D%09messageNode%20firstArgument%20generateInlinedBlockValueOn%3A%20self.%0D%09stream%0D%09%09nextPutAll%3A%20%27%20%7D%20else%20%7B%20return%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%3B%20%7D%7D%29%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteIfNotNilIfNil%3A"), "rewriteIfNotNilIfNil_", function JSGenerator__rewriteIfNotNilIfNil_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28%21nil.isNil_%28"));
(messageNode.receiver()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29%20%3F%20"));
(messageNode.firstArgument()).generateInlinedBlockValueOn_(self);
self['@stream'].nextPutAll_(" : ");
(messageNode.secondArgument()).generateInlinedBlockValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29"));
return self;
}
, "generate rewrites", unescape("rewriteIfNotNilIfNil%3A%20messageNode%0D%09%22%28nil.isNil_%28%25receiver%25%29%3D%3D%3Dfalse%29%20%3F%20%25arg1%25%28%29%20%3A%20%25arg2%25%28%29%22%0D%09stream%20nextPutAll%3A%20%27%28%21nil.isNil_%28%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%20%3F%20%27.%0D%09messageNode%20firstArgument%20generateInlinedBlockValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%20%3A%20%27.%0D%09messageNode%20secondArgument%20generateInlinedBlockValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteIfTrue%3A"), "rewriteIfTrue_", function JSGenerator__rewriteIfTrue_(messageNode){
var args = nil;
const self = this; args=messageNode.arguments();
self['@stream'].nextPutAll_(unescape("if%20%28"));
self.rewriteTrueCondition_((messageNode.receiver()));
self['@stream'].nextPutAll_(unescape("%29%20%7B"));
(args.at_((1))).generateBlockBodyOn_(self);
self['@stream'].nextPutAll_(unescape("%7D"));
if (((args.size())._gt((1))).valueOf()) {self['@stream'].nextPutAll_(unescape("%20else%20%7B"));
(args.at_((2))).generateBlockBodyOn_(self);
self['@stream'].nextPutAll_(unescape("%7D"))};
return self;
}
, "generate rewrites", unescape("rewriteIfTrue%3A%20messageNode%0D%09%22if%20%28%25receiver%25%29%20%7B%20%25arg1%25%28%29%7D%22%0D%09%22if%20%28%25receiver%25%29%20%7B%20return%20%25arg1%25%28%29%7D%20else%20%7B%20return%20nil%20%7D%22%0D%09%7C%20args%20%7C%0D%09args%20%3A%3D%20messageNode%20arguments.%0D%09stream%20nextPutAll%3A%20%27if%20%28%27.%0D%09self%20rewriteTrueCondition%3A%20messageNode%20receiver.%0D%09stream%20nextPutAll%3A%20%27%29%20%7B%27.%0D%09%28args%20at%3A%201%29%20generateBlockBodyOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%7D%27.%0D%09args%20size%20%3E%201%0D%09%09ifTrue%3A%20%5B%0D%09%09%09stream%20nextPutAll%3A%20%27%20else%20%7B%27.%0D%09%09%09%28args%20at%3A%202%29%20generateBlockBodyOn%3A%20self.%0D%09%09%09stream%20nextPutAll%3A%20%27%7D%27%5D"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteIfTrueIfFalse%3A"), "rewriteIfTrueIfFalse_", function JSGenerator__rewriteIfTrueIfFalse_(messageNode){
var args = nil;
const self = this; args=messageNode.arguments();
self['@stream'].nextPutAll_(unescape("if%20%28"));
self.rewriteTrueCondition_((messageNode.receiver()));
self['@stream'].nextPutAll_(unescape("%29%20%7B"));
(args.at_((1))).generateBlockBodyOn_(self);
self['@stream'].nextPutAll_(unescape("%7D%20else%20%7B"));
(args.at_((2))).generateBlockBodyOn_(self);
self['@stream'].nextPutAll_(unescape("%7D"));
return self;
}
, "generate rewrites", unescape("rewriteIfTrueIfFalse%3A%20messageNode%0D%09%22if%20%28%25receiver%25%29%20%7B%20%25arg1%25%28%29%7D%20else%20%7B%20%25arg2%25%28%29%20%7D%22%0D%09%7C%20args%20%7C%0D%09args%20%3A%3D%20messageNode%20arguments.%0D%09stream%20nextPutAll%3A%20%27if%20%28%27.%0D%09self%20rewriteTrueCondition%3A%20messageNode%20receiver.%0D%09stream%20nextPutAll%3A%20%27%29%20%7B%27.%0D%09%28args%20at%3A%201%29%20generateBlockBodyOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%7D%20else%20%7B%27.%0D%09%28args%20at%3A%202%29%20generateBlockBodyOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%7D%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteIfUndefined%3A"), "rewriteIfUndefined_", function JSGenerator__rewriteIfUndefined_(messageNode){
var varName = nil;
const self = this; varName=self.uniqueVarName();
(function JSGenerator__($1$){
$1$.nextPutAll_(unescape("%28function%28%29%7Bvar%20"));
$1$.nextPutAll_(varName);
$1$.nextPutAll_(unescape("%3B%20"));
$1$.nextPutAll_(varName);
return $1$.nextPutAll_(unescape("%20%3D%20"))}
)(self['@stream']);
(messageNode.receiver()).generateInlinedValueOn_(self);
(function JSGenerator__($2$){
$2$.nextPutAll_(unescape("%3B%20if%20%28typeof%28"));
$2$.nextPutAll_(varName);
return $2$.nextPutAll_(unescape("%29%20%3D%3D%20%22undefined%22%29%20%7B%20return%20"))}
)(self['@stream']);
(messageNode.firstArgument()).generateInlinedBlockValueOn_(self);
(function JSGenerator__($3$){
$3$.nextPutAll_(unescape("%20%7D%20else%20%7B%20return%20"));
$3$.nextPutAll_(varName);
return $3$.nextPutAll_(unescape("%20%7D%7D%29%28%29"))}
)(self['@stream']);
return self;
}
, "generate rewrites", unescape("rewriteIfUndefined%3A%20messageNode%0D%09%22%28function%28%29%7Bvar%20%241%24%20%3D%20%25receiver%25%3Bif%20%28typeof%20%28%241%24%29%20%3D%3D%20%22%22undefined%22%22%29%20return%20%25arg1%25%28%29%3B%20return%20%241%24%3B%7D%29%28%29%22%0D%09%7C%20varName%20%7C%0D%09varName%20%3A%3D%20self%20uniqueVarName.%0D%09stream%0D%09%09nextPutAll%3A%20%27%28function%28%29%7Bvar%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%3B%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%20%3D%20%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20%0D%09%09nextPutAll%3A%20%27%3B%20if%20%28typeof%28%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%20%27%29%20%3D%3D%20%22undefined%22%29%20%7B%20return%20%27.%0D%09messageNode%20firstArgument%20generateInlinedBlockValueOn%3A%20self.%0D%09stream%0D%09%09nextPutAll%3A%20%27%20%7D%20else%20%7B%20return%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%20%7D%7D%29%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteIsKindOf%3A"), "rewriteIsKindOf_", function JSGenerator__rewriteIsKindOf_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28smalltalk.is_kindOf_%28"));
(messageNode.receiver()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%2C"));
(messageNode.firstArgument()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29%29"));
return self;
}
, "generate rewrites", unescape("rewriteIsKindOf%3A%20messageNode%0D%09%22smalltalk.is_kindOf_%28%25receiver%25%2C%28%25arg1%25%29%29%22%0D%09stream%20nextPutAll%3A%20%27%28smalltalk.is_kindOf_%28%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%2C%27.%0D%09messageNode%20firstArgument%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteIsNil%3A"), "rewriteIsNil_", function JSGenerator__rewriteIsNil_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28nil.isNil_%28"));
(messageNode.receiver()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29%29"));
return self;
}
, "generate rewrites", unescape("rewriteIsNil%3A%20messageNode%0D%09%22%28nil.isNil_%28%25receiver%25%29%29%22%0D%09stream%20nextPutAll%3A%20%27%28nil.isNil_%28%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteNotNil%3A"), "rewriteNotNil_", function JSGenerator__rewriteNotNil_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28nil.isNil_%28"));
(messageNode.receiver()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29%3D%3D%3Dfalse%29"));
return self;
}
, "generate rewrites", unescape("rewriteNotNil%3A%20messageNode%0D%09%22%28nil.isNil_%28%25receiver%25%29%3D%3D%3Dfalse%29%22%0D%09stream%20nextPutAll%3A%20%27%28nil.isNil_%28%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%3D%3D%3Dfalse%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteOr%3A"), "rewriteOr_", function JSGenerator__rewriteOr_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28"));
(messageNode.receiver()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%20%7C%7C%20"));
(messageNode.firstArgument()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29"));
return self;
}
, "generate rewrites", unescape("rewriteOr%3A%20messageNode%0D%09%22%28%25receiver%25%20%7C%7C%20%25arg1%25%29%22%0D%09stream%20nextPutAll%3A%20%27%28%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%20%7C%7C%20%27.%0D%09messageNode%20firstArgument%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteRespondsTo%3A"), "rewriteRespondsTo_", function JSGenerator__rewriteRespondsTo_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("%28smalltalk.responds_to_%28"));
(messageNode.receiver()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%2C"));
(messageNode.firstArgument()).generateInlinedValueOn_(self);
self['@stream'].nextPutAll_(unescape("%29%29"));
return self;
}
, "generate rewrites", unescape("rewriteRespondsTo%3A%20messageNode%0D%09%22smalltalk.responds_to_%28%25receiver%25%2C%28%25arg1%25%29%29%22%0D%09stream%20nextPutAll%3A%20%27%28smalltalk.responds_to_%28%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%2C%27.%0D%09messageNode%20firstArgument%20generateInlinedValueOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%29%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteTimesRepeat%3A"), "rewriteTimesRepeat_", function JSGenerator__rewriteTimesRepeat_(messageNode){
var varName = nil;
const self = this; varName=self.uniqueVarName();
(function JSGenerator__($1$){
$1$.nextPutAll_(unescape("for%28var%20"));
$1$.nextPutAll_(varName);
return $1$.nextPutAll_(unescape("%20%3D%20"))}
)(self['@stream']);
(messageNode.receiver()).generateInlinedValueOn_(self);
(function JSGenerator__($2$){
$2$.nextPutAll_(unescape("%3B"));
$2$.nextPutAll_(varName);
$2$.nextPutAll_(unescape("%3E0%3B"));
$2$.nextPutAll_(varName);
return $2$.nextPutAll_(unescape("--%29%7B%20"))}
)(self['@stream']);
(messageNode.firstArgument()).generateInlinedOn_(self);
self['@stream'].nextPutAll_(unescape("%7D%3B"));
return self;
}
, "generate rewrites", unescape("rewriteTimesRepeat%3A%20messageNode%0D%09%22for%28var%20%241%24%3D%25receiver%25%3B%241%24%3E0%3B%241%24--%29%7B%25arg1%25%28%29%7D%3B%22%0D%09%7C%20varName%20%7C%0D%09varName%20%3A%3D%20self%20uniqueVarName.%0D%09stream%0D%09%09nextPutAll%3A%20%27for%28var%20%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%20%3D%20%27.%0D%09messageNode%20receiver%20generateInlinedValueOn%3A%20self.%0D%0D%09stream%0D%09%09nextPutAll%3A%20%27%3B%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%27%3E0%3B%27%3B%0D%09%09nextPutAll%3A%20varName%3B%0D%09%09nextPutAll%3A%20%20%27--%29%7B%20%27.%0D%0D%09messageNode%20firstArgument%20generateInlinedOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%7D%3B%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteTrueCondition%3A"), "rewriteTrueCondition_", function JSGenerator__rewriteTrueCondition_(receiverNode){
const self = this; self.asReceiverWith_((function JSGenerator__(){
return receiverNode.generateInlinedValueOn_(self);
}
));
self['@stream'].nextPutAll_(unescape(".valueOf%28%29"));
return self;
}
, "generate rewrites", unescape("rewriteTrueCondition%3A%20receiverNode%0D%09self%20asReceiverWith%3A%20%5BreceiverNode%20generateInlinedValueOn%3A%20self%5D.%0D%09stream%20nextPutAll%3A%20%27.valueOf%28%29%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteValue%3A"), "rewriteValue_", function JSGenerator__rewriteValue_(messageNode){
var rewriteRule = nil;
const self = this; rewriteRule=smalltalk.JSGenerator.classVariableAt_("RewriteValueMap").at_ifAbsent_(((messageNode.selector()).key()),(function JSGenerator__(){
return (smalltalk.StCompileException.$$new()).signal_((("rewrite selector "._comma(((messageNode.selector()).key())))._comma(" missing")));
}
));
self.perform_with_(rewriteRule,messageNode);
return self;
}
, "generate rewrites", unescape("rewriteValue%3A%20messageNode%0D%09%7C%20rewriteRule%20%7C%0D%09rewriteRule%20%3A%3D%20RewriteValueMap%20at%3A%20messageNode%20selector%20key%20ifAbsent%3A%20%5BStCompileException%20new%20signal%3A%20%27rewrite%20selector%20%27%20%2C%20messageNode%20selector%20key%20%2C%20%27%20missing%27%5D.%0D%09self%20perform%3A%20rewriteRule%20with%3A%20messageNode"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteWhileFalse%3A"), "rewriteWhileFalse_", function JSGenerator__rewriteWhileFalse_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("while%28"));
self.asReceiverWith_((function JSGenerator__(){
return (messageNode.receiver()).generateInlinedBlockValueOn_(self);
}
));
self['@stream'].nextPutAll_(unescape(".not%28%29%29%7B%7D"));
return self;
}
, "generate rewrites", unescape("rewriteWhileFalse%3A%20messageNode%0D%09%22while%28%21%25receiver%25%28%29%29%7B%7D%3B%22%0D%09stream%20nextPutAll%3A%20%27while%28%27.%0D%09self%20asReceiverWith%3A%20%5BmessageNode%20receiver%20generateInlinedBlockValueOn%3A%20self%5D.%0D%09stream%20nextPutAll%3A%20%27.not%28%29%29%7B%7D%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteWhileFalseDo%3A"), "rewriteWhileFalseDo_", function JSGenerator__rewriteWhileFalseDo_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("while%28"));
self.asReceiverWith_((function JSGenerator__(){
return (messageNode.receiver()).generateInlinedBlockValueOn_(self);
}
));
self['@stream'].nextPutAll_(unescape(".not%28%29%29%7B"));
(messageNode.firstArgument()).generateBlockBodyOn_(self);
self['@stream'].nextPutAll_(unescape("%7D%3B"));
return self;
}
, "generate rewrites", unescape("rewriteWhileFalseDo%3A%20messageNode%0D%09%22while%28%21%25receiver%25%28%29%29%7B%25arg1%25%28%29%7D%3B%22%0D%09stream%20nextPutAll%3A%20%27while%28%27.%0D%09self%20asReceiverWith%3A%20%5BmessageNode%20receiver%20generateInlinedBlockValueOn%3A%20self%5D.%0D%09stream%20nextPutAll%3A%20%27.not%28%29%29%7B%27.%0D%09messageNode%20firstArgument%20generateBlockBodyOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%7D%3B%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteWhileTrue%3A"), "rewriteWhileTrue_", function JSGenerator__rewriteWhileTrue_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("while%28"));
self.asReceiverWith_((function JSGenerator__(){
return (messageNode.receiver()).generateInlinedBlockValueOn_(self);
}
));
self['@stream'].nextPutAll_(unescape(".valueOf%28%29%29%7B%7D%3B"));
return self;
}
, "generate rewrites", unescape("rewriteWhileTrue%3A%20messageNode%0D%09%22while%28%25receiver%25%28%29%29%7B%7D%22%0D%09stream%20nextPutAll%3A%20%27while%28%27.%0D%09self%20asReceiverWith%3A%20%5BmessageNode%20receiver%20generateInlinedBlockValueOn%3A%20self%5D.%0D%09stream%20nextPutAll%3A%20%27.valueOf%28%29%29%7B%7D%3B%27"));
smalltalk.bind(smalltalk.JSGenerator, unescape("rewriteWhileTrueDo%3A"), "rewriteWhileTrueDo_", function JSGenerator__rewriteWhileTrueDo_(messageNode){
const self = this; self['@stream'].nextPutAll_(unescape("while%28"));
self.asReceiverWith_((function JSGenerator__(){
return (messageNode.receiver()).generateInlinedBlockValueOn_(self);
}
));
self['@stream'].nextPutAll_(unescape(".valueOf%28%29%29%7B"));
(messageNode.firstArgument()).generateBlockBodyOn_(self);
self['@stream'].nextPutAll_(unescape("%7D%3B"));
return self;
}
, "generate rewrites", unescape("rewriteWhileTrueDo%3A%20messageNode%0D%09%22while%28%25receiver%25%28%29%29%7B%25arg1%25%28%29%7D%3B%22%0D%09stream%20nextPutAll%3A%20%27while%28%27.%0D%09self%20asReceiverWith%3A%20%5BmessageNode%20receiver%20generateInlinedBlockValueOn%3A%20self%5D.%0D%09stream%20nextPutAll%3A%20%27.valueOf%28%29%29%7B%27.%0D%09messageNode%20firstArgument%20generateBlockBodyOn%3A%20self.%0D%09stream%20nextPutAll%3A%20%27%7D%3B%27"));
smalltalk.JSGenerator.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.JSGenerator.$klass, unescape("generateClass%3Ain%3A"), "generateClass_in_", function JSGenerator_class__generateClass_in_(aClass,directoryNamed){
const self = this; self.generateClass_into_environment_(aClass,directoryNamed,(smalltalk.StEnvironment.bootstrap()));
return self;
}
, "file-out", unescape("generateClass%3A%20aClass%20in%3A%20directoryNamed%0D%09self%20generateClass%3A%20aClass%20into%3A%20directoryNamed%20environment%3A%20StEnvironment%20bootstrap"));
smalltalk.bind(smalltalk.JSGenerator.$klass, unescape("generateClass%3Ainto%3Aenvironment%3A"), "generateClass_into_environment_", function JSGenerator_class__generateClass_into_environment_(aClass,directoryNamed,stEnvironment){
var generator = nil;
const self = this; generator=self.onFileNamed_(((directoryNamed._comma((aClass.name())))._comma(".st.js")));
generator.environment_(stEnvironment);
aClass.generateOn_(generator);
(aClass.$klass).generateOn_(generator);
generator.release();
return self;
}
, "file-out", unescape("generateClass%3A%20aClass%20into%3A%20directoryNamed%20environment%3A%20stEnvironment%0D%09%7C%20generator%20%7C%0D%09generator%20%3A%3D%20self%20onFileNamed%3A%20directoryNamed%20%2C%20aClass%20name%20%2C%20%27.st.js%27.%0D%09generator%20environment%3A%20stEnvironment.%0D%09aClass%20generateOn%3A%20generator.%0D%09aClass%20class%20generateOn%3A%20generator.%0D%09generator%20release"));
smalltalk.bind(smalltalk.JSGenerator.$klass, unescape("initialize"), "initialize", function JSGenerator_class__initialize(){
const self = this; self.initializeBinaryMap();
self.initializeInlineFunctionSet();
self.initializeReservedWords();
self.initializeRewriteMap();
self.initializeRewriteValueMap();
return self;
}
, "class initialization", unescape("initialize%0D%09%22JSGenerator%20initialize%22%0D%0D%09self%20initializeBinaryMap.%0D%09self%20initializeInlineFunctionSet.%0D%09self%20initializeReservedWords.%0D%09self%20initializeRewriteMap.%0D%09self%20initializeRewriteValueMap"));
smalltalk.bind(smalltalk.JSGenerator.$klass, unescape("initializeBinaryMap"), "initializeBinaryMap", function JSGenerator_class__initializeBinaryMap(){
const self = this; smalltalk.JSGenerator.classVariableAt_put_("BinaryMap",(function JSGenerator_class__($1$){
$1$.at_put_(unescape("%7C"),"_bar");
$1$.at_put_(unescape("%26"),"_amp");
$1$.at_put_(unescape("%5C"),"_bk");
$1$.at_put_(unescape("+"),"_plus");
$1$.at_put_(unescape("*"),"_star");
$1$.at_put_(unescape("/"),"_slash");
$1$.at_put_(unescape("%3D"),"_eq");
$1$.at_put_(unescape("%3E"),"_gt");
$1$.at_put_(unescape("%3C"),"_lt");
$1$.at_put_(unescape("%2C"),"_comma");
$1$.at_put_(unescape("@"),"_at");
$1$.at_put_(unescape("%25"),"_mod");
$1$.at_put_(unescape("%7E"),"_no");
$1$.at_put_(unescape("-"),"_minus");
return $1$.yourself()}
)(smalltalk.Dictionary.new_((128))));
return self;
}
, "class initialization", unescape("initializeBinaryMap%0D%09%22JSGenerator%20initializeBinaryMap%22%0D%22%09%09.replace%28/%3A/g%2C%27_%27%29%0D%09%09.replace%28/%5B+%5D/g%2C%27_plus%27%29%0D%09%09.replace%28/-/g%2C%27_minus%27%29%0D%09%09.replace%28/%5B*%5D/g%2C%27_star%27%29%0D%09%09.replace%28/%5B/%5D/g%2C%27_slash%27%29%0D%09%09.replace%28/%5B%7C%5D/g%2C%27_bar%27%29%0D%09%09.replace%28/%5B%26%5D/g%2C%27_amp%27%29%0D%09%09.replace%28/%3E/g%2C%27_gt%27%29%0D%09%09.replace%28/%3C/g%2C%27_lt%27%29%0D%09%09.replace%28/%3D/g%2C%27_eq%27%29%0D%09%09.replace%28/%2C/g%2C%27_comma%27%29%0D%09%09.replace%28/%5B@%5D/g%2C%27_at%27%29%0D%09%09.replace%28/%7E/g%2C%27_no%27%29%0D%09%09.replace%28/%5C%5C/g%2C%27_bk%27%29%22%0D%0D%09BinaryMap%20%3A%3D%20%28Dictionary%20new%3A%20128%29%0D%22%09%09at%3A%20%24%7C%20%20put%3A%20%27or%27%3B%0D%09%09at%3A%20%24%26%20put%3A%20%27and%27%3B%22%0D%09%09at%3A%20%24%7C%20%20put%3A%20%27_bar%27%3B%0D%09%09at%3A%20%24%26%20put%3A%20%27_amp%27%3B%0D%09%09at%3A%20%24%5C%20put%3A%20%27_bk%27%3B%0D%09%09at%3A%20%24+%20put%3A%20%27_plus%27%3B%0D%09%09at%3A%20%24*%20put%3A%20%27_star%27%3B%0D%09%09at%3A%20%24/%20put%3A%20%27_slash%27%3B%0D%09%09at%3A%20%24%3D%20put%3A%20%27_eq%27%3B%0D%09%09at%3A%20%24%3E%20put%3A%20%27_gt%27%3B%0D%09%09at%3A%20%24%3C%20put%3A%20%27_lt%27%3B%0D%09%09at%3A%20%24%2C%20put%3A%20%27_comma%27%3B%0D%09%09at%3A%20%24@%20put%3A%20%27_at%27%3B%0D%09%09at%3A%20%24%25%20put%3A%20%27_mod%27%3B%0D%09%09at%3A%20%24%7E%20put%3A%20%27_no%27%3B%0D%09%09at%3A%20%24-%20put%3A%20%27_minus%27%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.JSGenerator.$klass, unescape("initializeInlineFunctionSet"), "initializeInlineFunctionSet", function JSGenerator_class__initializeInlineFunctionSet(){
const self = this; smalltalk.JSGenerator.classVariableAt_put_("InlineFunctionSet",smalltalk.Set.$$new());
(function JSGenerator_class__($1$){
$1$.add_("whileTrue");
$1$.add_("whileFalse");
$1$.add_("basicValueOrNil");
$1$.add_("whileTrue:");
$1$.add_("whileFalse:");
$1$.add_("ifNil:");
$1$.add_("ifNotNil:");
$1$.add_("basicAt:");
$1$.add_("ifUndefined:");
$1$.add_("timesRepeat:");
$1$.add_("basicAt:ifAbsent:");
return $1$.yourself()}
)(smalltalk.JSGenerator.classVariableAt_("InlineFunctionSet"));
return self;
}
, "class initialization", unescape("initializeInlineFunctionSet%0D%09%22JSGenerator%20initializeInlineFunctionSet%22%0D%0D%09InlineFunctionSet%20%3A%3D%20Set%20new.%0D%09InlineFunctionSet%0D%09%09add%3A%20%23whileTrue%3B%0D%09%09add%3A%20%23whileFalse%3B%0D%09%09add%3A%20%23basicValueOrNil%3B%0D%0D%09%09add%3A%20%23whileTrue%3A%3B%0D%09%09add%3A%20%23whileFalse%3A%3B%0D%09%09add%3A%20%23ifNil%3A%3B%0D%09%09add%3A%20%23ifNotNil%3A%3B%0D%0D%09%09add%3A%20%23basicAt%3A%3B%0D%09%09add%3A%20%23ifUndefined%3A%3B%0D%09%09add%3A%20%23timesRepeat%3A%3B%0D%0D%09%09add%3A%20%23basicAt%3AifAbsent%3A%3B%0D%0D%09%09yourself"));
smalltalk.bind(smalltalk.JSGenerator.$klass, unescape("initializeReservedWords"), "initializeReservedWords", function JSGenerator_class__initializeReservedWords(){
const self = this; smalltalk.JSGenerator.classVariableAt_put_("ReservedWords",smalltalk.Set.new_((197)));
smalltalk.JSGenerator.classVariableAt_("ReservedWords").addAll_(["abstract", unescape("%2C"), "as", unescape("%2C"), "boolean", unescape("%2C"), "break", unescape("%2C"), "byte", unescape("%2C"), "case", unescape("%2C"), "catch", unescape("%2C"), "char", unescape("%2C"), "class", unescape("%2C"), "continue", unescape("%2C"), "const", unescape("%2C"), "debugger", unescape("%2C"), "default", unescape("%2C"), "delete", unescape("%2C"), "do", unescape("%2C"), "double", unescape("%2C"), "else", unescape("%2C"), "enum", unescape("%2C"), "export", unescape("%2C"), "extends", unescape("%2C"), "false", unescape("%2C"), "final", unescape("%2C"), "finally", unescape("%2C"), "float", unescape("%2C"), "for", unescape("%2C"), "function", unescape("%2C"), "goto", unescape("%2C"), "if", unescape("%2C"), "implements", unescape("%2C"), "import", unescape("%2C"), "in", unescape("%2C"), "instanceof", unescape("%2C"), "int", unescape("%2C"), "interface", unescape("%2C"), "is", unescape("%2C"), "long", unescape("%2C"), "namespace", unescape("%2C"), "native", unescape("%2C"), "new", unescape("%2C"), "null", unescape("%2C"), "package", unescape("%2C"), "private", unescape("%2C"), "protected", unescape("%2C"), "public", unescape("%2C"), "return", unescape("%2C"), "short", unescape("%2C"), "static", unescape("%2C"), "super", unescape("%2C"), "switch", unescape("%2C"), "synchronized", unescape("%2C"), "this", unescape("%2C"), "throw", unescape("%2C"), "throws", unescape("%2C"), "transient", unescape("%2C"), "true", unescape("%2C"), "try", unescape("%2C"), "typeof", unescape("%2C"), "use", unescape("%2C"), "var", unescape("%2C"), "void", unescape("%2C"), "volatile", unescape("%2C"), "while", unescape("%2C"), "with"]);
return self;
}
, "class initialization", unescape("initializeReservedWords%0D%09%22JSGenerator%20initializeReservedWords%22%0D%0D%09ReservedWords%20%3A%3D%20Set%20new%3A%20197.%0D%09ReservedWords%20addAll%3A%0D%09%23%28%27abstract%27%2C%20%27as%27%2C%20%27boolean%27%2C%20%27break%27%2C%20%27byte%27%2C%20%27case%27%2C%20%27catch%27%2C%20%27char%27%2C%20%27class%27%2C%20%27continue%27%2C%20%27const%27%2C%20%27debugger%27%2C%20%27default%27%2C%20%27delete%27%2C%20%27do%27%2C%20%27double%27%2C%20%27else%27%2C%20%27enum%27%2C%20%27export%27%2C%20%27extends%27%2C%20%27false%27%2C%20%27final%27%2C%20%27finally%27%2C%20%27float%27%2C%20%27for%27%2C%20%27function%27%2C%20%27goto%27%2C%20%27if%27%2C%20%27implements%27%2C%20%27import%27%2C%20%27in%27%2C%20%27instanceof%27%2C%20%27int%27%2C%20%27interface%27%2C%20%27is%27%2C%20%27long%27%2C%20%27namespace%27%2C%20%27native%27%2C%20%27new%27%2C%20%27null%27%2C%20%27package%27%2C%20%27private%27%2C%20%27protected%27%2C%20%27public%27%2C%20%27return%27%2C%20%27short%27%2C%20%27static%27%2C%20%27super%27%2C%20%27switch%27%2C%20%27synchronized%27%2C%20%27this%27%2C%20%27throw%27%2C%20%27throws%27%2C%20%27transient%27%2C%20%27true%27%2C%20%27try%27%2C%20%27typeof%27%2C%20%27use%27%2C%20%27var%27%2C%20%27void%27%2C%20%27volatile%27%2C%20%27while%27%2C%20%27with%27%29"));
smalltalk.bind(smalltalk.JSGenerator.$klass, unescape("initializeRewriteMap"), "initializeRewriteMap", function JSGenerator_class__initializeRewriteMap(){
const self = this; smalltalk.JSGenerator.classVariableAt_put_("RewriteMap",(function JSGenerator_class__($1$){
$1$.at_put_("class","rewriteClass:");
$1$.at_put_("isNil","rewriteIsNil:");
$1$.at_put_("notNil","rewriteNotNil:");
$1$.at_put_("whileTrue","rewriteWhileTrue:");
$1$.at_put_("whileFalse","rewriteWhileFalse:");
$1$.at_put_("basicValueOrNil","rewriteBasicValueOrNil:");
$1$.at_put_("whileTrue:","rewriteWhileTrueDo:");
$1$.at_put_("whileFalse:","rewriteWhileFalseDo:");
$1$.at_put_("ifNil:","rewriteIfNil:");
$1$.at_put_("ifNotNil:","rewriteIfNotNil:");
$1$.at_put_("ifTrue:","rewriteIfTrue:");
$1$.at_put_("ifFalse:","rewriteIfFalse:");
$1$.at_put_("ifTrue:ifFalse:","rewriteIfTrueIfFalse:");
$1$.at_put_("ifFalse:ifTrue:","rewriteIfFalseIfTrue:");
$1$.at_put_(unescape("%3D%3D"),"rewriteEqEq:");
$1$.at_put_(unescape("%3D%3D%3D"),"rewriteEqEqEq:");
$1$.at_put_(unescape("%7C%7C"),"rewriteOr:");
$1$.at_put_("basicAt:","rewriteBasicAt:");
$1$.at_put_("ifUndefined:","rewriteIfUndefined:");
$1$.at_put_("timesRepeat:","rewriteTimesRepeat:");
$1$.at_put_("isKindOf:","rewriteIsKindOf:");
$1$.at_put_("respondsTo:","rewriteRespondsTo:");
$1$.at_put_("ifNil:ifNotNil:","rewriteIfNilIfNotNil:");
$1$.at_put_("ifNotNil:ifNil:","rewriteIfNotNilIfNil:");
$1$.at_put_("basicAt:ifAbsent:","rewriteBasicAtIfAbsent:");
$1$.at_put_("basicAt:put:","rewriteBasicAtPut:");
return $1$.yourself()}
)(smalltalk.Dictionary.new_((128))));
return self;
}
, "class initialization", unescape("initializeRewriteMap%0D%09%22JSGenerator%20initializeRewriteMap%22%0D%0D%09RewriteMap%20%3A%3D%20%28Dictionary%20new%3A%20128%29%0D%09%09at%3A%20%23class%20put%3A%20%23rewriteClass%3A%20%3B%0D%09%09at%3A%20%23isNil%20put%3A%20%23rewriteIsNil%3A%20%3B%0D%09%09at%3A%20%23notNil%20put%3A%20%23rewriteNotNil%3A%20%3B%0D%09%09at%3A%20%23whileTrue%20put%3A%20%23rewriteWhileTrue%3A%20%3B%0D%09%09at%3A%20%23whileFalse%20put%3A%20%23rewriteWhileFalse%3A%20%3B%0D%09%09at%3A%20%23basicValueOrNil%20put%3A%20%23rewriteBasicValueOrNil%3A%20%3B%20%22not%20sure%20this%20is%20actually%20used%22%0D%09%09%0D%09%09at%3A%20%23whileTrue%3A%20put%3A%20%23rewriteWhileTrueDo%3A%20%3B%20%22basic%20need%20this%20as%20a%20call%22%0D%09%09at%3A%20%23whileFalse%3A%20put%3A%20%23rewriteWhileFalseDo%3A%20%3B%0D%09%09at%3A%20%23ifNil%3A%20put%3A%20%23rewriteIfNil%3A%20%3B%0D%09%09at%3A%20%23ifNotNil%3A%20put%3A%20%23rewriteIfNotNil%3A%20%3B%0D%0D%09%09at%3A%20%23ifTrue%3A%20put%3A%20%23rewriteIfTrue%3A%20%3B%0D%09%09at%3A%20%23ifFalse%3A%20put%3A%20%23rewriteIfFalse%3A%20%3B%0D%09%09at%3A%20%23ifTrue%3AifFalse%3A%20put%3A%20%23rewriteIfTrueIfFalse%3A%20%3B%0D%09%09at%3A%20%23ifFalse%3AifTrue%3A%20put%3A%20%23rewriteIfFalseIfTrue%3A%20%3B%0D%0D%09%09at%3A%20%23%3D%3D%20put%3A%20%23rewriteEqEq%3A%20%3B%0D%09%09at%3A%20%23%27%3D%3D%3D%27%20put%3A%20%23rewriteEqEqEq%3A%20%3B%0D%09%09at%3A%20%23%27%7C%7C%27%20put%3A%20%23rewriteOr%3A%20%3B%0D%0D%09%09at%3A%20%23basicAt%3A%20put%3A%20%23rewriteBasicAt%3A%20%3B%0D%09%09at%3A%20%23ifUndefined%3A%20put%3A%20%23rewriteIfUndefined%3A%20%3B%0D%09%09at%3A%20%23timesRepeat%3A%20put%3A%20%23rewriteTimesRepeat%3A%20%3B%0D%09%09at%3A%20%23isKindOf%3A%20put%3A%20%23rewriteIsKindOf%3A%20%3B%0D%09%09at%3A%20%23respondsTo%3A%20put%3A%20%23rewriteRespondsTo%3A%20%3B%0D%0D%09%09at%3A%20%23ifNil%3AifNotNil%3A%20put%3A%20%23rewriteIfNilIfNotNil%3A%20%3B%0D%09%09at%3A%20%23ifNotNil%3AifNil%3A%20put%3A%20%23rewriteIfNotNilIfNil%3A%20%3B%0D%09%09at%3A%20%23basicAt%3AifAbsent%3A%20put%3A%20%23rewriteBasicAtIfAbsent%3A%20%3B%0D%09%09at%3A%20%23basicAt%3Aput%3A%20put%3A%20%23rewriteBasicAtPut%3A%20%3B%0D%0D%09%09yourself"));
smalltalk.bind(smalltalk.JSGenerator.$klass, unescape("initializeRewriteValueMap"), "initializeRewriteValueMap", function JSGenerator_class__initializeRewriteValueMap(){
const self = this; smalltalk.JSGenerator.classVariableAt_put_("RewriteValueMap",(function JSGenerator_class__($1$){
$1$.at_put_("class","rewriteClass:");
$1$.at_put_("isNil","rewriteIsNil:");
$1$.at_put_("notNil","rewriteNotNil:");
$1$.at_put_("whileTrue","rewriteValueWhileTrue:");
$1$.at_put_("whileFalse","rewriteValueWhileFalse:");
$1$.at_put_("basicValueOrNil","rewriteBasicValueOrNil:");
$1$.at_put_("whileTrue:","rewriteValueWhileTrueDo:");
$1$.at_put_("whileFalse:","rewriteValueWhileFalseDo:");
$1$.at_put_("ifNil:","rewriteIfNil:");
$1$.at_put_("ifNotNil:","rewriteIfNotNil:");
$1$.at_put_(unescape("%3D%3D"),"rewriteEqEq:");
$1$.at_put_(unescape("%3D%3D%3D"),"rewriteEqEqEq:");
$1$.at_put_(unescape("%7C%7C"),"rewriteOr:");
$1$.at_put_("basicAt:","rewriteBasicAt:");
$1$.at_put_("ifUndefined:","rewriteIfUndefined:");
$1$.at_put_("timesRepeat:","rewriteValueTimesRepeat:");
$1$.at_put_("isKindOf:","rewriteIsKindOf:");
$1$.at_put_("respondsTo:","rewriteRespondsTo:");
$1$.at_put_("ifNil:ifNotNil:","rewriteIfNilIfNotNil:");
$1$.at_put_("ifNotNil:ifNil:","rewriteIfNotNilIfNil:");
$1$.at_put_("basicAt:ifAbsent:","rewriteBasicAtIfAbsent:");
$1$.at_put_("basicAt:put:","rewriteBasicAtPut:");
return $1$.yourself()}
)(smalltalk.Dictionary.new_((128))));
return self;
}
, "class initialization", unescape("initializeRewriteValueMap%0D%09%22JSGenerator%20initializeRewriteValueMap%22%0D%0D%09RewriteValueMap%20%3A%3D%20%28Dictionary%20new%3A%20128%29%0D%09%09at%3A%20%23class%20put%3A%20%23rewriteClass%3A%20%3B%0D%09%09at%3A%20%23isNil%20put%3A%20%23rewriteIsNil%3A%20%3B%0D%09%09at%3A%20%23notNil%20put%3A%20%23rewriteNotNil%3A%20%3B%0D%09%09at%3A%20%23whileTrue%20put%3A%20%23rewriteValueWhileTrue%3A%20%3B%0D%09%09at%3A%20%23whileFalse%20put%3A%20%23rewriteValueWhileFalse%3A%20%3B%0D%09%09at%3A%20%23basicValueOrNil%20put%3A%20%23rewriteBasicValueOrNil%3A%20%3B%20%22not%20sure%20this%20is%20actually%20used%22%0D%09%09%0D%09%09at%3A%20%23whileTrue%3A%20put%3A%20%23rewriteValueWhileTrueDo%3A%20%3B%20%22basic%20need%20this%20as%20a%20call%22%0D%09%09at%3A%20%23whileFalse%3A%20put%3A%20%23rewriteValueWhileFalseDo%3A%20%3B%0D%09%09at%3A%20%23ifNil%3A%20put%3A%20%23rewriteIfNil%3A%20%3B%0D%09%09at%3A%20%23ifNotNil%3A%20put%3A%20%23rewriteIfNotNil%3A%20%3B%0D%22%0D%09%09at%3A%20%23ifTrue%3A%20put%3A%20%23rewriteValueIfTrue%3A%20%3B%0D%09%09at%3A%20%23ifFalse%3A%20put%3A%20%23rewriteValueIfFalse%3A%20%3B%0D%09%09at%3A%20%23ifTrue%3AifFalse%3A%20put%3A%20%23rewriteValueIfTrueIfFalse%3A%20%3B%0D%09%09at%3A%20%23ifFalse%3AifTrue%3A%20put%3A%20%23rewriteValueIfFalseIfTrue%3A%20%3B%0D%22%0D%09%09at%3A%20%23%3D%3D%20put%3A%20%23rewriteEqEq%3A%20%3B%0D%09%09at%3A%20%23%27%3D%3D%3D%27%20put%3A%20%23rewriteEqEqEq%3A%20%3B%0D%09%09at%3A%20%23%27%7C%7C%27%20put%3A%20%23rewriteOr%3A%20%3B%0D%0D%09%09at%3A%20%23basicAt%3A%20put%3A%20%23rewriteBasicAt%3A%20%3B%0D%09%09at%3A%20%23ifUndefined%3A%20put%3A%20%23rewriteIfUndefined%3A%20%3B%0D%09%09at%3A%20%23timesRepeat%3A%20put%3A%20%23rewriteValueTimesRepeat%3A%20%3B%0D%09%09at%3A%20%23isKindOf%3A%20put%3A%20%23rewriteIsKindOf%3A%20%3B%0D%09%09at%3A%20%23respondsTo%3A%20put%3A%20%23rewriteRespondsTo%3A%20%3B%0D%0D%09%09at%3A%20%23ifNil%3AifNotNil%3A%20put%3A%20%23rewriteIfNilIfNotNil%3A%20%3B%0D%09%09at%3A%20%23ifNotNil%3AifNil%3A%20put%3A%20%23rewriteIfNotNilIfNil%3A%20%3B%0D%09%09at%3A%20%23basicAt%3AifAbsent%3A%20put%3A%20%23rewriteBasicAtIfAbsent%3A%20%3B%0D%09%09at%3A%20%23basicAt%3Aput%3A%20put%3A%20%23rewriteBasicAtPut%3A%20%3B%0D%0D%09%09yourself"));
smalltalk.bind(smalltalk.JSGenerator.$klass, unescape("internal"), "internal", function JSGenerator_class__internal(){
const self = this; return smalltalk.JSGenerator.on_(("".writeStream()));
}
, "instance creation", unescape("internal%0D%09%5EJSGenerator%20on%3A%20%27%27%20writeStream"));
smalltalk.bind(smalltalk.JSGenerator.$klass, unescape("on%3A"), "on_", function JSGenerator_class__on_(aStream){
var generator = nil;
const self = this; generator=(self.$$new()).initialize();
generator.stream_(aStream);
return generator;
}
, "instance creation", unescape("on%3A%20aStream%0D%09%7C%20generator%20%7C%0D%09generator%20%3A%3D%20self%20new%20initialize.%0D%09generator%20stream%3A%20aStream.%0D%09%5Egenerator"));
smalltalk.addClass("StCompilationCue", smalltalk.Object, ['source', 'context', 'receiver', 'class', 'environment'], 'Compiler-JS');
smalltalk.StCompilationCue.$classVariableNames=("");
smalltalk.bind(smalltalk.StCompilationCue, unescape("bindingOf%3A"), "bindingOf_", function StCompilationCue__bindingOf_(aSymbol){
const self = this; return self['@class'].bindingOf_environment_(aSymbol,self['@environment']);
}
, "binding", unescape("bindingOf%3A%20aSymbol%0D%09%5Eclass%20bindingOf%3A%20aSymbol%20environment%3A%20environment"));
smalltalk.bind(smalltalk.StCompilationCue, unescape("literalScannedAs%3Anotifying%3A"), "literalScannedAs_notifying_", function StCompilationCue__literalScannedAs_notifying_(scannedLiteral,anEncoder){
var key = nil;
var value = nil;
const self = this; var $early={name:"stReturn"};
try {
if ((scannedLiteral.isVariableBinding()).not()) {return scannedLiteral};
self.halt();
key=scannedLiteral.key();
value=scannedLiteral.value();
if (((nil.isNil_(key))).valueOf()) {(function(){var $1$; $1$ = self.bindingOf_(value); if (!nil.isNil_($1$)) { return ((smalltalk.is_kindOf_(assoc.value(),smalltalk.Behavior))).ifTrue_((function StCompilationCue__(){
$early.result=nil._minus_gt(((assoc.value()).$klass)); throw ($early);
}
)) } else { return $1$; }})();
anEncoder.notify_("No such metaclass");
$early.result=false; throw ($early)};
if ((key.isSymbol()).valueOf()) {return (function(){var $2$; $2$ = self.bindingOf_(key); if (nil.isNil_($2$)) { return (self.environment()).undeclare_(key) } else { return $2$; }})()};
anEncoder.notify_(unescape("%23%23%20must%20be%20followed%20by%20a%20non-local%20variable%20name"));
return false;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "binding", unescape("literalScannedAs%3A%20scannedLiteral%20notifying%3A%20anEncoder%0D%09%7C%20key%20value%20%7C%0D%09%28scannedLiteral%20isVariableBinding%29%0D%09%09ifFalse%3A%20%5B%5E%20scannedLiteral%5D.%0Dself%20halt.%0D%09key%20%3A%3D%20scannedLiteral%20key.%0D%09value%20%3A%3D%20scannedLiteral%20value.%0D%09key%20isNil%20%0D%09%09ifTrue%3A%20%22%23%23%23%3Cmetaclass%20soleInstance%20name%3E%22%0D%09%09%09%5B%28self%20bindingOf%3A%20value%29%20ifNotNil%3A%5B%3Aassoc%7C%0D%09%09%09%09%20%28assoc%20value%20isKindOf%3A%20Behavior%29%0D%09%09%09%09%09ifTrue%3A%20%5B%5E%20nil-%3Eassoc%20value%20class%5D%5D.%0D%09%09%09%20anEncoder%20notify%3A%20%27No%20such%20metaclass%27.%0D%09%09%09%20%5Efalse%5D.%0D%09%28key%20isSymbol%29%0D%09%09ifTrue%3A%20%22%23%23%3Cglobal%20var%20name%3E%22%0D%09%09%09%5B%5E%20%28self%20bindingOf%3A%20key%29%20ifNil%3A%0D%09%09%09%09%5Bself%20environment%20undeclare%3A%20key%5D%5D.%0D%09anEncoder%20notify%3A%20%27%23%23%20must%20be%20followed%20by%20a%20non-local%20variable%20name%27.%0D%09%5Efalse%0D"));
smalltalk.bind(smalltalk.StCompilationCue, unescape("context"), "context", function StCompilationCue__context(){
const self = this; return self['@context'];
}
, "accessing", unescape("context%0D%09%5E%20context"));
smalltalk.bind(smalltalk.StCompilationCue, unescape("environment"), "environment", function StCompilationCue__environment(){
const self = this; return self['@environment'];
}
, "accessing", unescape("environment%0D%09%5E%20environment"));
smalltalk.bind(smalltalk.StCompilationCue, unescape("getClass"), "getClass", function StCompilationCue__getClass(){
const self = this; return self['@class'];
}
, "accessing", unescape("getClass%0D%09%5E%20class"));
smalltalk.bind(smalltalk.StCompilationCue, unescape("receiver"), "receiver", function StCompilationCue__receiver(){
const self = this; return self['@receiver'];
}
, "accessing", unescape("receiver%0D%09%5E%20receiver"));
smalltalk.bind(smalltalk.StCompilationCue, unescape("requestor"), "requestor", function StCompilationCue__requestor(){
const self = this; return nil;
}
, "accessing", unescape("requestor%0D%09%5Enil"));
smalltalk.bind(smalltalk.StCompilationCue, unescape("sourceStream"), "sourceStream", function StCompilationCue__sourceStream(){
const self = this; return self['@source'];
}
, "accessing", unescape("sourceStream%0D%09%5Esource"));
smalltalk.bind(smalltalk.StCompilationCue, unescape("initializeWithSource%3Acontext%3Areceiver%3Aclass%3Aenvironment%3A"), "initializeWithSource_context_receiver_class_environment_", function StCompilationCue__initializeWithSource_context_receiver_class_environment_(aString,aContext,recObject,aClass,stEnvironment){
const self = this; self.initialize();
self['@source']=aString.readStream();
self['@context']=aContext;
self['@receiver']=recObject;
self['@class']=aClass;
self['@environment']=stEnvironment;
return self;
}
, "initialization", unescape("initializeWithSource%3A%20aString%20context%3A%20aContext%20receiver%3A%20recObject%20class%3A%20aClass%20environment%3A%20stEnvironment%0D%09self%20initialize.%0D%09source%20%3A%3D%20aString%20readStream.%0D%09context%20%3A%3D%20aContext.%0D%09receiver%20%3A%3D%20recObject.%0D%09class%20%3A%3D%20aClass.%0D%09environment%20%3A%3D%20stEnvironment"));
smalltalk.StCompilationCue.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StCompilationCue.$klass, unescape("environment%3Aevaluate%3A"), "environment_evaluate_", function StCompilationCue_class__environment_evaluate_(stEnvironment,aTextOrStream){
const self = this; return (self.basicNew()).initializeWithSource_context_receiver_class_environment_(aTextOrStream,nil,nil,(stEnvironment.bindingOf_("UndefinedObject")),stEnvironment);
}
, "static compile", unescape("environment%3A%20stEnvironment%20evaluate%3A%20aTextOrStream%0D%09%5E%20self%20basicNew%0D%09%09initializeWithSource%3A%20aTextOrStream%20%0D%09%09context%3A%20nil%20%0D%09%09receiver%3A%20nil%0D%09%09class%3A%20%28stEnvironment%20bindingOf%3A%20%23UndefinedObject%29%20%0D%09%09environment%3A%20stEnvironment"));
smalltalk.bind(smalltalk.StCompilationCue.$klass, unescape("source%3Aclass%3A"), "source_class_", function StCompilationCue_class__source_class_(aTextOrStream,aClass){
const self = this; return (self.basicNew()).initializeWithSource_context_receiver_class_environment_(aTextOrStream,nil,nil,aClass,((function(){var $1$; $1$ = aClass; if (!nil.isNil_($1$)) { return aClass.environment() } else { return $1$; }})()));
}
, "instance creation", unescape("source%3A%20aTextOrStream%20class%3A%20aClass%0D%09%5E%20self%20basicNew%0D%09%09initializeWithSource%3A%20aTextOrStream%20%0D%09%09context%3A%20nil%20%0D%09%09receiver%3A%20nil%0D%09%09class%3A%20aClass%20%0D%09%09environment%3A%20%28aClass%20ifNotNil%3A%20%5BaClass%20environment%5D%29"));
smalltalk.bind(smalltalk.StCompilationCue.$klass, unescape("source%3Aclass%3Aenvironment%3A"), "source_class_environment_", function StCompilationCue_class__source_class_environment_(aTextOrStream,aClass,stEnvironment){
const self = this; return (self.basicNew()).initializeWithSource_context_receiver_class_environment_(aTextOrStream,nil,nil,aClass,stEnvironment);
}
, "instance creation", unescape("source%3A%20aTextOrStream%20class%3A%20aClass%20environment%3A%20stEnvironment%0D%09%5E%20self%20basicNew%0D%09%09initializeWithSource%3A%20aTextOrStream%20%0D%09%09context%3A%20nil%20%0D%09%09receiver%3A%20nil%0D%09%09class%3A%20aClass%20%0D%09%09environment%3A%20stEnvironment"));
smalltalk.addClass("StCompiler", smalltalk.Object, ['parser', 'cue'], 'Compiler-JS');
smalltalk.StCompiler.$classVariableNames=("");
smalltalk.bind(smalltalk.StCompiler, unescape("evaluate%3Ain%3AifFail%3A"), "evaluate_in_ifFail_", function StCompiler__evaluate_in_ifFail_(textOrStream,stEnvironment,failBlock){
const self = this; return self.evaluateCue_ifFail_((smalltalk.StCompilationCue.environment_evaluate_(stEnvironment,textOrStream)),failBlock);
}
, "evaluate", unescape("evaluate%3A%20textOrStream%20in%3A%20stEnvironment%20ifFail%3A%20failBlock%0D%09%22Compiles%20the%20sourceStream%20into%20a%20parse%20tree%2C%20then%20generates%20code%20into%0D%09%20a%20method.%20%22%0D%09%0D%09%5Eself%0D%09%09evaluateCue%3A%20%28StCompilationCue%20environment%3A%20stEnvironment%20evaluate%3A%20textOrStream%29%0D%09%09ifFail%3A%20failBlock"));
smalltalk.bind(smalltalk.StCompiler, unescape("evaluateCue%3AifFail%3A"), "evaluateCue_ifFail_", function StCompiler__evaluateCue_ifFail_(aCue,failBlock){
var methodNode = nil;
var method = nil;
var generator = nil;
const self = this; var $early={name:"stReturn"};
try {
self['@cue']=aCue;
methodNode=(self.parser()).parseDoItCue_ifFail_(self['@cue'],(function StCompiler__(){
$early.result=failBlock.value(); throw ($early);
}
));
generator=smalltalk.JSGenerator.internal();
generator.asReceiverWith_((function StCompiler__(){
return methodNode.generateOn_(generator);
}
));
generator.blockInvocation();
method=generator.source();
return method;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "evaluate", unescape("evaluateCue%3A%20aCue%20ifFail%3A%20failBlock%0D%09%22Compiles%20the%20cue%20source%20into%20a%20parse%20tree%2C%20then%20generates%20code%20into%0D%09a%20method.%20Finally%2C%20the%20compiled%20method%20is%20invoked%20from%20here%20via%20%09withArgs%3AexecuteMethod%3A%2C%20hence%20the%20system%20no%20longer%20creates%20Doit%20method%0D%09litter%20on%20errors.%22%0D%0D%09%7C%20methodNode%20method%20generator%20%7C%0D%09cue%20%3A%3D%20aCue.%0D%09methodNode%20%3A%3D%20self%20parser%20parseDoItCue%3A%20cue%20%20ifFail%3A%20%5B%5EfailBlock%20value%5D.%0D%0D%09generator%20%3A%3D%20JSGenerator%20internal.%0D%09generator%20asReceiverWith%3A%20%5B%0D%09%09methodNode%20generateOn%3A%20generator%5D.%0D%09generator%20blockInvocation.%0D%09method%20%3A%3D%20generator%20source.%0D%09%5Emethod"));
smalltalk.bind(smalltalk.StCompiler, unescape("analyze%3Achunk%3A"), "analyze_chunk_", function StCompiler__analyze_chunk_(messageNode,aString){
var args = nil;
const self = this; if ((messageNode.isVariableNode()).valueOf()) {return nil};
args=(messageNode.arguments()).collect_((function StCompiler__(arg){
return arg.key();
}
));
return smalltalk.StChunk.from_receiver_selector_arguments_(aString,(self.extractChunkReceiver_((messageNode.receiver()))),((messageNode.selector()).key()),(args.asArray()));
}
, "chunk processing", unescape("analyze%3A%20messageNode%20chunk%3A%20aString%0D%09%7C%20args%20%7C%0D%09messageNode%20isVariableNode%0D%09%09ifTrue%3A%20%5B%5Enil%5D.%0D%09args%20%3A%3D%20messageNode%20arguments%20collect%3A%20%5B%3Aarg%20%7C%20arg%20key%5D.%0D%09%5EStChunk%0D%09%09from%3A%20aString%0D%09%09receiver%3A%20%28self%20extractChunkReceiver%3A%20messageNode%20receiver%29%0D%09%09selector%3A%20messageNode%20selector%20key%0D%09%09arguments%3A%20args%20asArray"));
smalltalk.bind(smalltalk.StCompiler, unescape("extractChunkReceiver%3A"), "extractChunkReceiver_", function StCompiler__extractChunkReceiver_(node){
var receiver = nil;
const self = this; if ((node.isMessageNode()).not()) {if (((node.key())._eq("nil")).valueOf()) {return nil} else {return node.key()}};
receiver=(node.receiver()).key();
if ((((node.selector()).key())._eq("class")).valueOf()) {return receiver.metaClass()} else {self.error_("no idea")};
return self;
}
, "chunk processing", unescape("extractChunkReceiver%3A%20node%0D%09%7C%20receiver%20%7C%0D%09node%20isMessageNode%0D%09%09ifFalse%3A%20%5B%0D%09%09%09%5Enode%20key%20%3D%20%27nil%27%0D%09%09%09%09ifTrue%3A%20%5Bnil%5D%0D%09%09%09%09ifFalse%3A%20%5Bnode%20key%5D%5D.%0D%09%22we%20are%20likely%20dealing%20with%20a%20metaclass%20reference%22%0D%09receiver%20%3A%3D%20node%20receiver%20key.%0D%09node%20selector%20key%20%3D%20%27class%27%0D%09%09ifTrue%3A%20%5B%5Ereceiver%20metaClass%5D%0D%09%09ifFalse%3A%20%5Bself%20error%3A%20%27no%20idea%27%5D"));
smalltalk.bind(smalltalk.StCompiler, unescape("parseChunk%3Ain%3AifFail%3A"), "parseChunk_in_ifFail_", function StCompiler__parseChunk_in_ifFail_(aString,stEnvironment,failBlock){
var methodNode = nil;
var messageNode = nil;
const self = this; var $early={name:"stReturn"};
try {
self['@cue']=smalltalk.StCompilationCue.environment_evaluate_(stEnvironment,aString);
methodNode=(self.parser()).parseDoItCue_ifFail_(self['@cue'],(function StCompiler__(){
$early.result=failBlock.value(); throw ($early);
}
));
messageNode=methodNode.doitStatement();
return self.analyze_chunk_(messageNode,aString);
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "chunk processing", unescape("parseChunk%3A%20aString%20in%3A%20stEnvironment%20ifFail%3A%20failBlock%0D%09%22Compiles%20the%20sourceStream%20into%20a%20parse%20tree%2C%20then%20generates%20code%20into%0D%09%20a%20method.%20%22%0D%09%0D%09%7C%20methodNode%20messageNode%20%7C%0D%09cue%20%3A%3D%20%28StCompilationCue%20environment%3A%20stEnvironment%20evaluate%3A%20aString%29.%0D%09methodNode%20%3A%3D%20self%20parser%20parseDoItCue%3A%20cue%20%20ifFail%3A%20%5B%5EfailBlock%20value%5D.%0D%09messageNode%20%3A%3D%20methodNode%20doitStatement.%0D%09%5Eself%20analyze%3A%20messageNode%20chunk%3A%20aString"));
smalltalk.bind(smalltalk.StCompiler, unescape("parser"), "parser", function StCompiler__parser(){
const self = this; (function(){var $1$; $1$ = self['@parser']; if (nil.isNil_($1$)) { return self['@parser']=smalltalk.StParser.$$new() } else { return $1$; }})();
return self['@parser'];
}
, "accessing", unescape("parser%0D%0D%22%09parser%20ifNil%3A%20%5Bparser%20%3A%3D%20%28cue%20getClass%20ifNil%3A%20%5Bself%20class%5D%29%20newParser%5D.%22%0D%09parser%20ifNil%3A%20%5Bparser%20%3A%3D%20StParser%20new%5D.%0D%09%5Eparser"));
smalltalk.bind(smalltalk.StCompiler, unescape("parser%3A"), "parser_", function StCompiler__parser_(aParser){
const self = this; self['@parser']=aParser;
return self;
}
, "accessing", unescape("parser%3A%20aParser%0D%0D%09parser%20%3A%3D%20aParser"));
smalltalk.bind(smalltalk.StCompiler, unescape("compile%3Ain%3AgenerateOn%3A"), "compile_in_generateOn_", function StCompiler__compile_in_generateOn_(textOrStream,aClass,generator){
var methodNode = nil;
const self = this; methodNode=self.compileCue_noPattern_ifFail_((smalltalk.StCompilationCue.source_class_environment_(textOrStream,aClass,(smalltalk.StEnvironment.bootstrap()))),false,(function StCompiler__(){
return self.halt();
}
));
methodNode.generateOn_(generator);
return self;
}
, "compile", unescape("compile%3A%20textOrStream%20in%3A%20aClass%20generateOn%3A%20generator%0D%09%22Answer%20a%20MethodNode%20for%20the%20argument%2C%20textOrStream.%20If%20the%20%0D%09MethodNode%20can%20not%20be%20created%2C%20evaluate%20failBlock.%20%0D%09The%20MethodNode%20is%20the%20root%20a%20parse%20tree.%22%0D%0D%09%7C%20methodNode%20%7C%0D%09methodNode%20%3A%3D%20self%0D%09%09compileCue%3A%20%28StCompilationCue%0D%09%09%09source%3A%20textOrStream%0D%09%09%09class%3A%20aClass%0D%09%09%09environment%3A%20StEnvironment%20bootstrap%29%0D%09%09noPattern%3A%20false%0D%09%09ifFail%3A%20%5Bself%20halt%5D.%0D%09methodNode%20generateOn%3A%20generator%0D"));
smalltalk.bind(smalltalk.StCompiler, unescape("compileMethod%3Aclass%3Aenvironment%3AgenerateOn%3A"), "compileMethod_class_environment_generateOn_", function StCompiler__compileMethod_class_environment_generateOn_(methodSource,aClass,stEnvironment,generator){
var methodNode = nil;
const self = this; methodNode=self.compileCue_noPattern_ifFail_((smalltalk.StCompilationCue.source_class_environment_(methodSource,aClass,stEnvironment)),false,(function StCompiler__(){
return self.halt();
}
));
methodNode.generateOn_(generator);
return self;
}
, "compile", unescape("compileMethod%3A%20methodSource%20class%3A%20aClass%20environment%3A%20stEnvironment%20generateOn%3A%20generator%0D%09%22Answer%20a%20MethodNode%20for%20the%20argument%2C%20textOrStream.%20If%20the%20%0D%09MethodNode%20can%20not%20be%20created%2C%20evaluate%20failBlock.%20%0D%09The%20MethodNode%20is%20the%20root%20a%20parse%20tree.%22%0D%0D%09%7C%20methodNode%20%7C%0D%09methodNode%20%3A%3D%20self%0D%09%09compileCue%3A%20%28StCompilationCue%0D%09%09%09source%3A%20methodSource%0D%09%09%09class%3A%20aClass%0D%09%09%09environment%3A%20stEnvironment%29%0D%09%09noPattern%3A%20false%0D%09%09ifFail%3A%20%5Bself%20halt%5D.%0D%09methodNode%20generateOn%3A%20generator%0D"));
smalltalk.bind(smalltalk.StCompiler, unescape("compileMethodChunk%3Aprotocol%3Aclass%3Aenvironment%3AincludeSource%3AgenerateOn%3A"), "compileMethodChunk_protocol_class_environment_includeSource_generateOn_", function StCompiler__compileMethodChunk_protocol_class_environment_includeSource_generateOn_(methodSource,protocol,aClass,stEnvironment,includeSource,generator){
var methodNode = nil;
var selector = nil;
const self = this; methodNode=self.compileCue_noPattern_ifFail_((smalltalk.StCompilationCue.source_class_environment_(methodSource,aClass,stEnvironment)),false,(function StCompiler__(){
return self.halt();
}
));
selector=methodNode.selector();
generator.startSmalltalkMethodBinding_selector_(aClass,selector);
methodNode.generateOn_(generator);
generator.methodProtocol_(protocol);
if ((includeSource).valueOf()) {generator.methodSource_(methodSource)};
generator.endSmalltalkMethodBinding_selector_(aClass,selector);
return self;
}
, "compile", unescape("compileMethodChunk%3A%20methodSource%20protocol%3A%20protocol%20class%3A%20aClass%20environment%3A%20stEnvironment%20includeSource%3A%20includeSource%20generateOn%3A%20generator%0D%09%22Answer%20a%20MethodNode%20for%20the%20argument%2C%20textOrStream.%20If%20the%20%0D%09MethodNode%20can%20not%20be%20created%2C%20evaluate%20failBlock.%20%0D%09The%20MethodNode%20is%20the%20root%20a%20parse%20tree.%22%0D%0D%09%7C%20methodNode%20selector%20%7C%0D%09methodNode%20%3A%3D%20self%0D%09%09compileCue%3A%20%28StCompilationCue%0D%09%09%09source%3A%20methodSource%0D%09%09%09class%3A%20aClass%0D%09%09%09environment%3A%20stEnvironment%29%0D%09%09noPattern%3A%20false%0D%09%09ifFail%3A%20%5Bself%20halt%5D.%0D%09selector%20%3A%3D%20methodNode%20selector.%0D%09generator%20startSmalltalkMethodBinding%3A%20aClass%20selector%3A%20selector.%0D%09methodNode%20generateOn%3A%20generator.%0D%09generator%20methodProtocol%3A%20protocol.%0D%09includeSource%0D%09%09ifTrue%3A%20%5Bgenerator%20methodSource%3A%20methodSource%5D.%0D%09generator%20endSmalltalkMethodBinding%3A%20aClass%20selector%3A%20selector"));
smalltalk.bind(smalltalk.StCompiler, unescape("compileCue%3AnoPattern%3AifFail%3A"), "compileCue_noPattern_ifFail_", function StCompiler__compileCue_noPattern_ifFail_(aCue,noPattern,failBlock){
const self = this; var $early={name:"stReturn"};
try {
self.setCue_(aCue);
return (self.parser()).parseCue_noPattern_ifFail_(self['@cue'],noPattern,(function StCompiler__(){
$early.result=failBlock.value(); throw ($early);
}
));
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "private", unescape("compileCue%3A%20aCue%20noPattern%3A%20noPattern%20ifFail%3A%20failBlock%20%0D%09%22Answer%20a%20MethodNode%20corresponding%20to%20cue%20source.%0D%09If%20the%20MethodNode%20can%20not%20be%20created%2C%20evaluate%20failBlock.%0D%09The%20MethodNode%20is%20the%20root%20%20of%20a%20parse%20tree.%22%0D%09%0D%09self%20setCue%3A%20aCue.%0D%09%5Eself%20parser%0D%09%09parseCue%3A%20cue%20%0D%09%09noPattern%3A%20noPattern%0D%09%09ifFail%3A%20%5B%5EfailBlock%20value%5D"));
smalltalk.bind(smalltalk.StCompiler, unescape("setCue%3A"), "setCue_", function StCompiler__setCue_(aCue){
const self = this; self['@cue']=aCue;
return self;
}
, "private", unescape("setCue%3A%20aCue%0D%09cue%20%3A%3D%20aCue"));
smalltalk.StCompiler.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StCompiler.$klass, unescape("new"), "$$new", function StCompiler_class__$$new(){
var compiler = nil;
const self = this; compiler=smalltalk.superImplementor(smalltalk.StCompiler.$klass,'$$new').apply(self, []);
compiler.parser_((smalltalk.StParser.$$new()));
return compiler;
}
, "instance creation", unescape("new%0D%09%7C%20compiler%20%7C%0D%09compiler%20%3A%3D%20super%20new.%0D%09compiler%20parser%3A%20StParser%20new.%0D%09%5Ecompiler"));
smalltalk.bind(smalltalk.StCompiler.$klass, unescape("compileExpression%3A"), "compileExpression_", function StCompiler_class__compileExpression_(textOrString){
const self = this; return self.compileExpression_environment_(textOrString,(smalltalk.StEnvironment.fromEnvironment()));
}
, "compiling", unescape("compileExpression%3A%20textOrString%20%0D%09%5Eself%20compileExpression%3A%20textOrString%20environment%3A%20StEnvironment%20fromEnvironment"));
smalltalk.bind(smalltalk.StCompiler.$klass, unescape("compileExpression%3Aenvironment%3A"), "compileExpression_environment_", function StCompiler_class__compileExpression_environment_(textOrString,env){
const self = this; return (self.$$new()).evaluateCue_ifFail_((smalltalk.StCompilationCue.source_class_environment_(textOrString,(env.bindingOf_("UndefinedObject")),env)),(function StCompiler_class__(){
return nil;
}
));
}
, "compiling", unescape("compileExpression%3A%20textOrString%20environment%3A%20env%0D%09%5Eself%20new%0D%09%09evaluateCue%3A%20%28StCompilationCue%0D%09%09%09source%3A%20textOrString%0D%09%09%09class%3A%20%28env%20bindingOf%3A%20%23UndefinedObject%29%0D%09%09%09environment%3A%20env%29%0D%09%09ifFail%3A%20%5Bnil%5D"));
smalltalk.bind(smalltalk.StCompiler.$klass, unescape("doIt%3A"), "doIt_", function StCompiler_class__doIt_(textOrString){
const self = this; return self.evaluate_(textOrString);
}
, "compiling", unescape("doIt%3A%20textOrString%20%0D%09%5Eself%20evaluate%3A%20textOrString"));
smalltalk.bind(smalltalk.StCompiler.$klass, unescape("environment%3AparseChunk%3A"), "environment_parseChunk_", function StCompiler_class__environment_parseChunk_(environment,textOrStream){
const self = this; var $early={name:"stReturn"};
try {
return (self.$$new()).parseChunk_in_ifFail_(textOrStream,environment,(function StCompiler_class__(){
$early.result=nil; throw ($early);
}
));
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "compiling", unescape("environment%3A%20environment%20parseChunk%3A%20textOrStream%0D%09%5E%20self%20new%0D%09%09parseChunk%3A%20textOrStream%0D%09%09in%3A%20environment%0D%09%09ifFail%3A%20%5B%5Enil%5D"));
smalltalk.bind(smalltalk.StCompiler.$klass, unescape("evaluate%3A"), "evaluate_", function StCompiler_class__evaluate_(textOrString){
var jsDoIt = nil;
const self = this; jsDoIt=self.compileExpression_(textOrString);
return self.jsEvaluate_(jsDoIt);
}
, "compiling", unescape("evaluate%3A%20textOrString%20%0D%09%7C%20jsDoIt%20%7C%0D%09jsDoIt%20%3A%3D%20self%20compileExpression%3A%20textOrString.%0D%09%5Eself%20jsEvaluate%3A%20jsDoIt"));
smalltalk.bind(smalltalk.StCompiler.$klass, unescape("jsEvaluate%3A"), "jsEvaluate_", function StCompiler_class__jsEvaluate_(jsDoItString){
var $$primitiveResult = smalltalk.primitiveManager.modules.SKSmalltalk.primEval(this, arguments);
if ($$primitiveResult !== smalltalk.primitiveManager.primFailValue)		return $$primitiveResult;
const self = this; return self.primitiveFailed();
}
, "compiling", unescape("jsEvaluate%3A%20jsDoItString%0D%09%3Cprimitive%3A%27primEval%27%20module%3A%27SKSmalltalk%27%3E%0D%09%5Eself%20primitiveFailed.%20"));
smalltalk.addClass("StParseNode", smalltalk.Object, ['comment'], 'Compiler-JS');
smalltalk.StParseNode.$classVariableNames=("NodeFalse NodeNil NodeSelf NodeSuper NodeThisContext NodeTrue StdVariables");
smalltalk.bind(smalltalk.StParseNode, unescape("comment"), "comment", function StParseNode__comment(){
const self = this; return self['@comment'];
}
, "comment", unescape("comment%0D%0D%09%5Ecomment"));
smalltalk.bind(smalltalk.StParseNode, unescape("comment%3A"), "comment_", function StParseNode__comment_(newComment){
const self = this; self['@comment']=newComment;
return self;
}
, "comment", unescape("comment%3A%20newComment%0D%0D%09comment%20%3A%3D%20newComment"));
smalltalk.bind(smalltalk.StParseNode, unescape("asReturnNode"), "asReturnNode", function StParseNode__asReturnNode(){
const self = this; return (smalltalk.StReturnNode.$$new()).expr_(self);
}
, "converting", unescape("asReturnNode%0D%09%5EStReturnNode%20new%20expr%3A%20self"));
smalltalk.bind(smalltalk.StParseNode, unescape("inlineReturns"), "inlineReturns", function StParseNode__inlineReturns(){
const self = this; self.error_("should not get here");
return self;
}
, "converting", unescape("inlineReturns%0D%09self%20error%3A%20%27should%20not%20get%20here%27"));
smalltalk.bind(smalltalk.StParseNode, unescape("returnLast"), "returnLast", function StParseNode__returnLast(){
const self = this; return self.asReturnNode();
}
, "converting", unescape("returnLast%0D%09%5Eself%20asReturnNode"));
smalltalk.bind(smalltalk.StParseNode, unescape("encodeSelector%3A"), "encodeSelector_", function StParseNode__encodeSelector_(selector){
const self = this; return nil;
}
, "encoding", unescape("encodeSelector%3A%20selector%0D%0D%09%5Enil"));
smalltalk.bind(smalltalk.StParseNode, unescape("assignmentCheck%3Aat%3A"), "assignmentCheck_at_", function StParseNode__assignmentCheck_at_(encoder,location){
const self = this; return (-1);
}
, "testing", unescape("assignmentCheck%3A%20encoder%20at%3A%20location%0D%09%22For%20StMessageNodes%20masquerading%20as%20variables%20for%20the%20debugger.%0D%09For%20now%20we%20let%20this%20through%20-%20ie%20we%20allow%20stores%20ev%0D%09into%20args.%20%20Should%20check%20against%20numArgs%2C%20though.%22%0D%09%5E%20-1"));
smalltalk.bind(smalltalk.StParseNode, unescape("canBeInlinedBlockValue"), "canBeInlinedBlockValue", function StParseNode__canBeInlinedBlockValue(){
const self = this; return false;
}
, "testing", unescape("canBeInlinedBlockValue%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("canCascade"), "canCascade", function StParseNode__canCascade(){
const self = this; return false;
}
, "testing", unescape("canCascade%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("ensureCanCascade%3A"), "ensureCanCascade_", function StParseNode__ensureCanCascade_(encoder){
const self = this; self;
return self;
}
, "testing", "ensureCanCascade: encoder");
smalltalk.bind(smalltalk.StParseNode, unescape("hasNonLocalBlockReturn%3A"), "hasNonLocalBlockReturn_", function StParseNode__hasNonLocalBlockReturn_(generator){
const self = this; return false;
}
, "testing", unescape("hasNonLocalBlockReturn%3A%20generator%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("hasNonLocalBlockReturn%3Aoptimized%3A"), "hasNonLocalBlockReturn_optimized_", function StParseNode__hasNonLocalBlockReturn_optimized_(generator,parentOptimized){
const self = this; return false;
}
, "testing", unescape("hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20parentOptimized%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("isBlockNode"), "isBlockNode", function StParseNode__isBlockNode(){
const self = this; return false;
}
, "testing", unescape("isBlockNode%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("isComplex"), "isComplex", function StParseNode__isComplex(){
const self = this; return false;
}
, "testing", unescape("isComplex%0D%09%22Used%20for%20pretty%20printing%20to%20determine%20whether%20to%20start%20a%20new%20line%22%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("isConstantNumber"), "isConstantNumber", function StParseNode__isConstantNumber(){
const self = this; return false;
}
, "testing", unescape("isConstantNumber%20%20%22Overridden%20in%20StLiteralNode%22%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("isExpression"), "isExpression", function StParseNode__isExpression(){
const self = this; return false;
}
, "testing", unescape("isExpression%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("isIf"), "isIf", function StParseNode__isIf(){
const self = this; return false;
}
, "testing", unescape("isIf%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("isJust%3A"), "isJust_", function StParseNode__isJust_(node){
const self = this; return false;
}
, "testing", unescape("isJust%3A%20node%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("isMessageNode"), "isMessageNode", function StParseNode__isMessageNode(){
const self = this; return false;
}
, "testing", unescape("isMessageNode%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("isReturnSelf"), "isReturnSelf", function StParseNode__isReturnSelf(){
const self = this; return false;
}
, "testing", unescape("isReturnSelf%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("isReturningIf"), "isReturningIf", function StParseNode__isReturningIf(){
const self = this; return false;
}
, "testing", unescape("isReturningIf%0D%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("isSelfPseudoVariable"), "isSelfPseudoVariable", function StParseNode__isSelfPseudoVariable(){
const self = this; return false;
}
, "testing", unescape("isSelfPseudoVariable%09%0D%09%22Overridden%20in%20StVariableNode.%22%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("isSuperPseudoVariable"), "isSuperPseudoVariable", function StParseNode__isSuperPseudoVariable(){
const self = this; return false;
}
, "testing", unescape("isSuperPseudoVariable%09%0D%09%22Overridden%20in%20StVariableNode.%22%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("isTemp"), "isTemp", function StParseNode__isTemp(){
const self = this; return false;
}
, "testing", unescape("isTemp%0D%09%5E%20false"));
smalltalk.bind(smalltalk.StParseNode, unescape("isUndefTemp"), "isUndefTemp", function StParseNode__isUndefTemp(){
const self = this; return false;
}
, "testing", unescape("isUndefTemp%0D%09%5E%20false"));
smalltalk.bind(smalltalk.StParseNode, unescape("isUnusedTemp"), "isUnusedTemp", function StParseNode__isUnusedTemp(){
const self = this; return false;
}
, "testing", unescape("isUnusedTemp%0D%09%5E%20false"));
smalltalk.bind(smalltalk.StParseNode, unescape("isVariableNode"), "isVariableNode", function StParseNode__isVariableNode(){
const self = this; return false;
}
, "testing", unescape("isVariableNode%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("markNonLocalReturns"), "markNonLocalReturns", function StParseNode__markNonLocalReturns(){
const self = this; self;
return self;
}
, "testing", "markNonLocalReturns");
smalltalk.bind(smalltalk.StParseNode, unescape("nowHasDef"), "nowHasDef", function StParseNode__nowHasDef(){
const self = this; self;
return self;
}
, "testing", unescape("nowHasDef%20%20%22Ignored%20in%20all%20but%20StVariableNode%22"));
smalltalk.bind(smalltalk.StParseNode, unescape("nowHasRef"), "nowHasRef", function StParseNode__nowHasRef(){
const self = this; self;
return self;
}
, "testing", unescape("nowHasRef%20%20%22Ignored%20in%20all%20but%20StVariableNode%22"));
smalltalk.bind(smalltalk.StParseNode, unescape("returns"), "returns", function StParseNode__returns(){
const self = this; return false;
}
, "testing", unescape("returns%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParseNode, unescape("toDoIncrement%3A"), "toDoIncrement_", function StParseNode__toDoIncrement_(ignored){
const self = this; return nil;
}
, "testing", unescape("toDoIncrement%3A%20ignored%0D%09%22Only%20meant%20for%20Messages%20or%20Assignments%20-%20else%20return%20nil%22%0D%09%5E%20nil"));
smalltalk.bind(smalltalk.StParseNode, unescape("ifNilReceiver"), "ifNilReceiver", function StParseNode__ifNilReceiver(){
const self = this; return self;
}
, "private", unescape("ifNilReceiver%0D%09%22assuming%20this%20object%20is%20the%20receiver%20of%20an%20ifNil%3A%2C%20what%20object%20is%20being%20asked%20about%3F%22%0D%09%5Eself"));
smalltalk.bind(smalltalk.StParseNode, unescape("nextWordFrom%3AsetCharacter%3A"), "nextWordFrom_setCharacter_", function StParseNode__nextWordFrom_setCharacter_(aStream,aBlock){
var outStream = nil;
var $$char = nil;
const self = this; outStream="".writeStream();
while(((aStream.peekFor_((smalltalk.Character.space()))).or_((function StParseNode__(){
return aStream.peekFor_((smalltalk.Character.tab()));
}
))).valueOf()){};;
while(((aStream.atEnd()).or_((function StParseNode__(){
$$char=aStream.next();
return ($$char._eq((smalltalk.Character.cr()))).or_((function StParseNode__(){
return $$char._eq((smalltalk.Character.space()));
}
));
}
))).not()){outStream.nextPut_($$char)};;
aBlock.value_($$char);
return outStream.contents();
}
, "private", unescape("nextWordFrom%3A%20aStream%20setCharacter%3A%20aBlock%0D%09%7C%20outStream%20char%20%7C%0D%09outStream%20%3A%3D%20%27%27%20writeStream.%0D%09%5B%28aStream%20peekFor%3A%20Character%20space%29%20%0D%09%09or%3A%20%5BaStream%20peekFor%3A%20Character%20tab%5D%5D%20whileTrue.%0D%09%5BaStream%20atEnd%0D%09%09or%3A%0D%09%09%09%5Bchar%20%3A%3D%20aStream%20next.%0D%09%09%09char%20%3D%20Character%20cr%20or%3A%20%5Bchar%20%3D%20Character%20space%5D%5D%5D%0D%09%09whileFalse%3A%20%5BoutStream%20nextPut%3A%20char%5D.%0D%09aBlock%20value%3A%20char.%0D%09%5E%20outStream%20contents"));
smalltalk.bind(smalltalk.StParseNode, unescape("generateAsReceiverOn%3A"), "generateAsReceiverOn_", function StParseNode__generateAsReceiverOn_(generator){
const self = this; self.generateOn_(generator);
return self;
}
, "generate", unescape("generateAsReceiverOn%3A%20generator%0D%09self%20generateOn%3A%20generator"));
smalltalk.bind(smalltalk.StParseNode, unescape("generateBlockBodyOn%3A"), "generateBlockBodyOn_", function StParseNode__generateBlockBodyOn_(generator){
const self = this; self.generateInlinedBlockValueOn_(generator);
return self;
}
, "generate", unescape("generateBlockBodyOn%3A%20generator%0D%09%22StCompileException%20signal%3A%20%27Invalid%20code%20generation%20%27%20%2C%20self%20printString%22%0D%09%22self%20shouldNotImplement%22%0D%09self%20generateInlinedBlockValueOn%3A%20generator"));
smalltalk.bind(smalltalk.StParseNode, unescape("generateInlinedBlockValueOn%3A"), "generateInlinedBlockValueOn_", function StParseNode__generateInlinedBlockValueOn_(generator){
const self = this; self.generateAsReceiverOn_(generator);
generator.blockVariableInvocation();
return self;
}
, "generate", unescape("generateInlinedBlockValueOn%3A%20generator%0D%09%22we%20have%20a%20variable%20or%20parameter%20containing%20a%20block%20%28we%20assume%29%22%0D%09self%20generateAsReceiverOn%3A%20generator.%0D%09generator%20blockVariableInvocation"));
smalltalk.bind(smalltalk.StParseNode, unescape("generateInlinedOn%3A"), "generateInlinedOn_", function StParseNode__generateInlinedOn_(generator){
const self = this; self.generateOn_(generator);
return self;
}
, "generate", unescape("generateInlinedOn%3A%20generator%0D%09self%20generateOn%3A%20generator"));
smalltalk.bind(smalltalk.StParseNode, unescape("generateInlinedValueOn%3A"), "generateInlinedValueOn_", function StParseNode__generateInlinedValueOn_(generator){
const self = this; self.generateOn_(generator);
return self;
}
, "generate", unescape("generateInlinedValueOn%3A%20generator%0D%09self%20generateOn%3A%20generator"));
smalltalk.bind(smalltalk.StParseNode, unescape("generateOn%3A"), "generateOn_", function StParseNode__generateOn_(generator){
const self = this; self.subclassResponsibility();
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09self%20subclassResponsibility"));
smalltalk.StParseNode.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StParseNode.$klass, unescape("initialize"), "initialize", function StParseNode_class__initialize(){
var encoder = nil;
const self = this; smalltalk.StParseNode.classVariableAt_put_("StdVariables",smalltalk.Dictionary.new_((16)));
(function StParseNode_class__($1$){
$1$.at_put_("self",((smalltalk.StLiteralVariableNode.$$new()).name_key_("self","self")));
$1$.at_put_("super",((smalltalk.StLiteralVariableNode.$$new()).name_key_("super","super")));
$1$.at_put_("nil",((smalltalk.StLiteralVariableNode.$$new()).name_key_("nil","nil")));
$1$.at_put_("false",((smalltalk.StLiteralVariableNode.$$new()).name_key_("false","false")));
return $1$.at_put_("true",((smalltalk.StLiteralVariableNode.$$new()).name_key_("true","true")))}
)(smalltalk.StParseNode.classVariableAt_("StdVariables"));
encoder=smalltalk.StEncoder.$$new();
encoder.initScopeAndLiteralTables();
smalltalk.StParseNode.classVariableAt_put_("NodeNil",encoder.encodeVariable_("nil"));
smalltalk.StParseNode.classVariableAt_put_("NodeTrue",encoder.encodeVariable_("true"));
smalltalk.StParseNode.classVariableAt_put_("NodeFalse",encoder.encodeVariable_("false"));
smalltalk.StParseNode.classVariableAt_put_("NodeSelf",encoder.encodeVariable_("self"));
smalltalk.StParseNode.classVariableAt_put_("NodeSuper",encoder.encodeVariable_("super"));
return self;
}
, "class initialization", unescape("initialize%0D%09%22StParseNode%20initialize%22%0D%09%7C%20encoder%20%7C%0D%09StdVariables%20%3A%3D%20Dictionary%20new%3A%2016.%0D%09StdVariables%0D%09%09at%3A%20%27self%27%20put%3A%20%20%28StLiteralVariableNode%20new%20name%3A%20%20%27self%27%20key%3A%20%20%27self%27%29%3B%0D%09%09at%3A%20%27super%27%20put%3A%20%20%28StLiteralVariableNode%20new%20name%3A%20%20%27super%27%20key%3A%20%20%27super%27%29%3B%0D%09%09at%3A%20%27nil%27%20put%3A%20%20%28StLiteralVariableNode%20new%20name%3A%20%20%27nil%27%20key%3A%20%20%27nil%27%29%3B%0D%09%09at%3A%20%27false%27%20put%3A%20%20%28StLiteralVariableNode%20new%20name%3A%20%20%27false%27%20key%3A%20%20%27false%27%29%3B%0D%09%09at%3A%20%27true%27%20put%3A%20%20%28StLiteralVariableNode%20new%20name%3A%20%20%27true%27%20key%3A%20%20%27true%27%29.%0D%0D%09encoder%20%3A%3D%20StEncoder%20new.%0D%09encoder%20initScopeAndLiteralTables.%0D%0D%09NodeNil%20%3A%3D%20encoder%20encodeVariable%3A%20%27nil%27.%0D%09NodeTrue%20%3A%3D%20encoder%20encodeVariable%3A%20%27true%27.%0D%09NodeFalse%20%3A%3D%20encoder%20encodeVariable%3A%20%27false%27.%0D%09NodeSelf%20%3A%3D%20encoder%20encodeVariable%3A%20%27self%27.%0D%09NodeSuper%20%3A%3D%20encoder%20encodeVariable%3A%20%27super%27%0D%09"));
smalltalk.bind(smalltalk.StParseNode.$klass, unescape("tempSortBlock"), "tempSortBlock", function StParseNode_class__tempSortBlock(){
const self = this; return (function StParseNode_class__(t1,t2){
var be1 = nil;
var be2 = nil;
var bs1 = nil;
var bs2 = nil;
return ((t1.index())._lt((t2.index()))).or_((function StParseNode_class__(){
return ((t1.index())._eq((t2.index()))).and_((function StParseNode_class__(){
if (((t1.isRemote())._no_eq((t2.isRemote()))).valueOf()) {return t2.isRemote()} else {if ((((nil.isNil_(be1=(t1.definingScope()).blockExtent()))).or_((function StParseNode_class__(){
return (nil.isNil_(be2=(t2.definingScope()).blockExtent()));
}
))).valueOf()) {return (t1.name())._lt((t2.name()))} else {return ((bs1=be1.first())._lt((bs2=be2.first()))).or_((function StParseNode_class__(){
return (bs1._eq(bs2)).and_((function StParseNode_class__(){
return (t1.name())._lt((t2.name()));
}
));
}
))}};
}
));
}
));
}
);
}
, "accessing", unescape("tempSortBlock%0D%09%22Answer%20a%20block%20that%20can%20sort%20a%20set%20of%20temporaries%20into%20a%20stable%0D%09%20order%20so%20that%20different%20compilations%20produce%20the%20same%20results.%22%0D%09%5E%5B%3At1%20%3At2%7C%20%7C%20be1%20be2%20bs1%20bs2%20%7C%0D%09%20%20%20t1%20index%20%3C%20t2%20index%20%22simple%20sort%20by%20index.%22%0D%09%20%20%20or%3A%20%5Bt1%20index%20%3D%20t2%20index%20%22complex%20tie%20break%22%20%0D%09%09%20%20and%3A%20%5Bt1%20isRemote%20%7E%3D%20t2%20isRemote%0D%09%09%09%09ifTrue%3A%20%5Bt2%20isRemote%5D%20%22put%20direct%20temps%20before%20indirect%20temps%22%0D%09%09%09%09ifFalse%3A%20%0D%09%09%09%09%09%5B%28%28be1%20%3A%3D%20t1%20definingScope%20blockExtent%29%20isNil%0D%09%09%09%09%09%20%20or%3A%20%5B%28be2%20%3A%3D%20t2%20definingScope%20blockExtent%29%20isNil%5D%29%0D%09%09%09%09%09%09ifTrue%3A%20%5Bt1%20name%20%3C%20t2%20name%5D%20%22only%20have%20the%20name%20left%20to%20go%20on%22%0D%09%09%09%09%09%09ifFalse%3A%20%22put%20temps%20from%20outer%20scopes%20before%20those%20from%20inner%20scopes%22%0D%09%09%09%09%09%09%09%5B%28bs1%20%3A%3D%20be1%20first%29%20%3C%20%28bs2%20%3A%3D%20be2%20first%29%0D%09%09%09%09%09%09%09%20or%3A%20%5Bbs1%20%3D%20bs2%20and%3A%20%5Bt1%20name%20%3C%20t2%20name%5D%5D%5D%5D%5D%5D%5D%20%22only%20have%20the%20name%20left%20to%20go%20on%22"));
smalltalk.addClass("StAssignmentNode", smalltalk.StParseNode, ['variable', 'value'], 'Compiler-JS');
smalltalk.StAssignmentNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StAssignmentNode, unescape("variable"), "variable", function StAssignmentNode__variable(){
const self = this; return self['@variable'];
}
, "equation translation", unescape("variable%0D%09%5Evariable"));
smalltalk.bind(smalltalk.StAssignmentNode, unescape("toDoIncrement%3A"), "toDoIncrement_", function StAssignmentNode__toDoIncrement_($$var){
const self = this; if (($$var._eq(self['@variable'])).not()) {return nil};
if ((self['@value'].isMemberOf_(smalltalk.StMessageNode)).valueOf()) {return self['@value'].toDoIncrement_($$var)} else {return nil};
}
, "initialize-release", unescape("toDoIncrement%3A%20var%0D%09var%20%3D%20variable%20ifFalse%3A%20%5B%5E%20nil%5D.%0D%09%28value%20isMemberOf%3A%20StMessageNode%29%20%0D%09%09ifTrue%3A%20%5B%5E%20value%20toDoIncrement%3A%20var%5D%0D%09%09ifFalse%3A%20%5B%5E%20nil%5D"));
smalltalk.bind(smalltalk.StAssignmentNode, unescape("value"), "value", function StAssignmentNode__value(){
const self = this; return self['@value'];
}
, "initialize-release", unescape("value%0D%09%5E%20value"));
smalltalk.bind(smalltalk.StAssignmentNode, unescape("variable%3Avalue%3A"), "variable_value_", function StAssignmentNode__variable_value_(aVariable,expression){
const self = this; self['@variable']=aVariable;
self['@value']=expression;
return self;
}
, "initialize-release", unescape("variable%3A%20aVariable%20value%3A%20expression%0D%0D%09variable%20%3A%3D%20aVariable.%0D%09value%20%3A%3D%20expression"));
smalltalk.bind(smalltalk.StAssignmentNode, unescape("generateAsReceiverOn%3A"), "generateAsReceiverOn_", function StAssignmentNode__generateAsReceiverOn_(generator){
const self = this; generator.asReceiverWith_((function StAssignmentNode__(){
return self.generateOn_(generator);
}
));
return self;
}
, "generate", unescape("generateAsReceiverOn%3A%20generator%0D%09generator%20asReceiverWith%3A%20%5B%0D%09%09self%20generateOn%3A%20generator%5D"));
smalltalk.bind(smalltalk.StAssignmentNode, unescape("generateOn%3A"), "generateOn_", function StAssignmentNode__generateOn_(generator){
const self = this; self['@variable'].generateAssignment_on_(self['@value'],generator);
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09variable%20generateAssignment%3A%20value%20on%3A%20generator"));
smalltalk.bind(smalltalk.StAssignmentNode, unescape("hasNonLocalBlockReturn%3A"), "hasNonLocalBlockReturn_", function StAssignmentNode__hasNonLocalBlockReturn_(generator){
const self = this; return self['@value'].hasNonLocalBlockReturn_(generator);
}
, "testing", unescape("hasNonLocalBlockReturn%3A%20generator%0D%09%5Evalue%20hasNonLocalBlockReturn%3A%20generator"));
smalltalk.bind(smalltalk.StAssignmentNode, unescape("hasNonLocalBlockReturn%3Aoptimized%3A"), "hasNonLocalBlockReturn_optimized_", function StAssignmentNode__hasNonLocalBlockReturn_optimized_(generator,parentOptimized){
const self = this; return self['@value'].hasNonLocalBlockReturn_optimized_(generator,parentOptimized);
}
, "testing", unescape("hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20parentOptimized%0D%09%5Evalue%20hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20parentOptimized"));
smalltalk.bind(smalltalk.StAssignmentNode, unescape("isExpression"), "isExpression", function StAssignmentNode__isExpression(){
const self = this; return self['@value'].isExpression();
}
, "testing", unescape("isExpression%0D%09%5Evalue%20isExpression"));
smalltalk.bind(smalltalk.StAssignmentNode, unescape("markNonLocalReturns"), "markNonLocalReturns", function StAssignmentNode__markNonLocalReturns(){
const self = this; self['@value'].markNonLocalReturns();
return self;
}
, "testing", unescape("markNonLocalReturns%0D%09value%20markNonLocalReturns"));
smalltalk.addClass("StBlockNode", smalltalk.StParseNode, ['args', 'statements', 'returns', 'temporaries'], 'Compiler-JS');
smalltalk.StBlockNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StBlockNode, unescape("addArgument%3A"), "addArgument_", function StBlockNode__addArgument_(aStTempVariableNode){
const self = this; self['@temporaries']=self['@temporaries'].copyWith_(aStTempVariableNode);
return self;
}
, "accessing", unescape("addArgument%3A%20aStTempVariableNode%0D%09temporaries%20%3A%3D%20temporaries%20copyWith%3A%20aStTempVariableNode"));
smalltalk.bind(smalltalk.StBlockNode, unescape("arguments"), "arguments", function StBlockNode__arguments(){
const self = this; return (function(){var $1$; $1$ = self['@args']; if (nil.isNil_($1$)) { return [] } else { return $1$; }})();
}
, "accessing", unescape("arguments%0D%09%5Eargs%20ifNil%3A%20%5B%23%28%29%5D"));
smalltalk.bind(smalltalk.StBlockNode, unescape("arguments%3A"), "arguments_", function StBlockNode__arguments_(argNodes){
const self = this; self['@args']=argNodes;
return self;
}
, "accessing", unescape("arguments%3A%20argNodes%20%0D%09%22Decompile.%22%0D%0D%09args%20%3A%3D%20argNodes"));
smalltalk.bind(smalltalk.StBlockNode, unescape("block"), "block", function StBlockNode__block(){
const self = this; return self;
}
, "accessing", unescape("block%0D%09%5E%20self"));
smalltalk.bind(smalltalk.StBlockNode, unescape("firstArgument"), "firstArgument", function StBlockNode__firstArgument(){
const self = this; return self['@args'].first();
}
, "accessing", unescape("firstArgument%0D%09%5E%20args%20first"));
smalltalk.bind(smalltalk.StBlockNode, unescape("numberOfArguments"), "numberOfArguments", function StBlockNode__numberOfArguments(){
const self = this; return self['@args'].size();
}
, "accessing", unescape("numberOfArguments%0D%0D%09%5Eargs%20size"));
smalltalk.bind(smalltalk.StBlockNode, unescape("returnLast"), "returnLast", function StBlockNode__returnLast(){
const self = this; if ((self.returns()).not()) {self['@statements'].at_put_((self['@statements'].size()),((self['@statements'].last()).asReturnNode()))};
return self;
}
, "accessing", unescape("returnLast%0D%09self%20returns%0D%09%09ifFalse%3A%20%0D%09%09%09%5B%22returns%20%3A%3D%20true.%22%0D%09%09%09statements%20at%3A%20statements%20size%20put%3A%20statements%20last%20asReturnNode%5D"));
smalltalk.bind(smalltalk.StBlockNode, unescape("returnSelfIfNoOther%3A"), "returnSelfIfNoOther_", function StBlockNode__returnSelfIfNoOther_(encoder){
const self = this; if ((self.returns()).valueOf()) {return self};
if (((nil.is_eqeq_(self['@statements'].last(),smalltalk.StBlockNode.classVariableAt_("NodeSelf")))).not()) {self['@statements']=self['@statements'].copyWith_((encoder.encodeVariable_("self")))};
self.returnLast();
return self;
}
, "accessing", unescape("returnSelfIfNoOther%3A%20encoder%0D%09self%20returns%20ifTrue%3A%5B%5Eself%5D.%0D%09statements%20last%20%3D%3D%20NodeSelf%20ifFalse%3A%20%5B%0D%09%09statements%20%3A%3D%20statements%20copyWith%3A%20%28encoder%20encodeVariable%3A%20%27self%27%29.%0D%09%5D.%0D%09self%20returnLast.%0D"));
smalltalk.bind(smalltalk.StBlockNode, unescape("statements"), "statements", function StBlockNode__statements(){
const self = this; return self['@statements'];
}
, "accessing", unescape("statements%0D%09%5Estatements"));
smalltalk.bind(smalltalk.StBlockNode, unescape("temporaries"), "temporaries", function StBlockNode__temporaries(){
const self = this; return (function(){var $1$; $1$ = self['@temporaries']; if (nil.isNil_($1$)) { return [] } else { return $1$; }})();
}
, "accessing", unescape("temporaries%0D%09%5Etemporaries%20ifNil%3A%20%5B%23%28%29%5D"));
smalltalk.bind(smalltalk.StBlockNode, unescape("temporaries%3A"), "temporaries_", function StBlockNode__temporaries_(aCollection){
const self = this; self['@temporaries']=aCollection;
return self;
}
, "accessing", unescape("temporaries%3A%20aCollection%0D%09temporaries%20%3A%3D%20aCollection"));
smalltalk.bind(smalltalk.StBlockNode, unescape("arguments%3Astatements%3Areturns%3Afrom%3A"), "arguments_statements_returns_from_", function StBlockNode__arguments_statements_returns_from_(argNodes,statementsCollection,returnBool,encoder){
const self = this; self['@args']=argNodes;
self['@statements']=((statementsCollection.size())._gt((0))).ifTrue_ifFalse_((function StBlockNode__(){
return statementsCollection;
}
),(function StBlockNode__(){
return smalltalk.Array.with_(smalltalk.StBlockNode.classVariableAt_("NodeNil"));
}
));
self['@returns']=returnBool;
return self;
}
, "initialize-release", unescape("arguments%3A%20argNodes%20statements%3A%20statementsCollection%20returns%3A%20returnBool%20from%3A%20encoder%0D%09%22Compile.%22%0D%09args%20%3A%3D%20argNodes.%0D%09statements%20%3A%3D%20statementsCollection%20size%20%3E%200%0D%09%09%09%09%09ifTrue%3A%20%5BstatementsCollection%5D%0D%09%09%09%09%09ifFalse%3A%20%5BArray%20with%3A%20NodeNil%5D.%0D%09returns%20%3A%3D%20returnBool"));
smalltalk.bind(smalltalk.StBlockNode, unescape("returnNil"), "returnNil", function StBlockNode__returnNil(){
const self = this; self['@returns']=false;
self['@temporaries']=smalltalk.OrderedCollection.$$new();
self['@args']=smalltalk.OrderedCollection.$$new();
self['@statements']=smalltalk.Array.with_(smalltalk.StBlockNode.classVariableAt_("NodeNil"));
self.returnLast();
return self;
}
, "initialize-release", unescape("returnNil%0D%09returns%20%3A%3D%20false.%0D%09temporaries%20%3A%3D%20OrderedCollection%20new.%0D%09args%20%3A%3D%20OrderedCollection%20new.%0D%09statements%20%3A%3D%20Array%20with%3A%20NodeNil.%0D%09self%20returnLast"));
smalltalk.bind(smalltalk.StBlockNode, unescape("generateAsReceiverOn%3A"), "generateAsReceiverOn_", function StBlockNode__generateAsReceiverOn_(generator){
const self = this; generator.asReceiverWith_((function StBlockNode__(){
return self.generateOn_(generator);
}
));
return self;
}
, "generate", unescape("generateAsReceiverOn%3A%20generator%0D%09generator%20asReceiverWith%3A%20%5B%0D%09%09self%20generateOn%3A%20generator%5D%0D%09%0D"));
smalltalk.bind(smalltalk.StBlockNode, unescape("generateBlockBodyOn%3A"), "generateBlockBodyOn_", function StBlockNode__generateBlockBodyOn_(generator){
const self = this; self.generateInlinedOn_(generator);
return self;
}
, "generate", unescape("generateBlockBodyOn%3A%20generator%0D%09self%20generateInlinedOn%3A%20generator"));
smalltalk.bind(smalltalk.StBlockNode, unescape("generateInlinedBlockValueOn%3A"), "generateInlinedBlockValueOn_", function StBlockNode__generateInlinedBlockValueOn_(generator){
const self = this; if ((self.canBeInlinedBlockValue()).valueOf()) {(self['@statements'].first()).generateInlinedValueOn_(generator)} else {self.generateAsReceiverOn_(generator);
generator.blockInvocation()};
return self;
}
, "generate", unescape("generateInlinedBlockValueOn%3A%20generator%0D%09self%20canBeInlinedBlockValue%0D%09%09ifTrue%3A%20%5Bstatements%20first%20generateInlinedValueOn%3A%20generator%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09self%20generateAsReceiverOn%3A%20generator.%0D%09%09%09generator%20blockInvocation%5D"));
smalltalk.bind(smalltalk.StBlockNode, unescape("generateInlinedOn%3A"), "generateInlinedOn_", function StBlockNode__generateInlinedOn_(generator){
const self = this; generator.generateTemporaries_(self['@temporaries']);
self['@statements'].do_andBetweenDo_((function StBlockNode__(statement){
generator.startStatement();
return statement.generateOn_(generator);
}
),(function StBlockNode__(){
return generator.endStatement();
}
));
return self;
}
, "generate", unescape("generateInlinedOn%3A%20generator%0D%09generator%20generateTemporaries%3A%20temporaries.%0D%09statements%0D%09%09do%3A%20%5B%3Astatement%20%7C%20%0D%09%09%09%09generator%20startStatement.%0D%09%09%09%09statement%20generateOn%3A%20generator%5D%0D%09%09andBetweenDo%3A%20%5Bgenerator%20endStatement%5D"));
smalltalk.bind(smalltalk.StBlockNode, unescape("generateInlinedValueOn%3A"), "generateInlinedValueOn_", function StBlockNode__generateInlinedValueOn_(generator){
const self = this; self.generateAsReceiverOn_(generator);
return self;
}
, "generate", unescape("generateInlinedValueOn%3A%20generator%0D%09self%20generateAsReceiverOn%3A%20generator"));
smalltalk.bind(smalltalk.StBlockNode, unescape("generateMethodBody%3A"), "generateMethodBody_", function StBlockNode__generateMethodBody_(generator){
const self = this; if ((self.methodBodyHasNonLocalBlockReturn_(generator)).valueOf()) {generator.nonLocalReturnWrapperStart();
self['@statements'].do_((function StBlockNode__(statement){
generator.startStatement();
statement.generateOn_(generator);
return generator.endStatement();
}
));
generator.nonLocalReturnWrapperEnd()} else {self['@statements'].do_((function StBlockNode__(statement){
generator.startStatement();
statement.generateOn_(generator);
return generator.endStatement();
}
))};
return self;
}
, "generate", unescape("generateMethodBody%3A%20generator%0D%09%28self%20methodBodyHasNonLocalBlockReturn%3A%20generator%29%0D%09%09ifTrue%3A%20%5B%0D%09%09%09generator%20nonLocalReturnWrapperStart.%0D%09%09%09statements%20do%3A%0D%09%09%09%09%5B%3Astatement%20%7C%20%0D%09%09%09%09%09generator%20startStatement.%0D%09%09%09%09%09statement%20generateOn%3A%20generator.%0D%09%09%09%09%09generator%20endStatement%5D.%0D%09%09%09generator%20nonLocalReturnWrapperEnd%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09statements%20do%3A%0D%09%09%09%09%5B%3Astatement%20%7C%20%0D%09%09%09%09%09generator%20startStatement.%0D%09%09%09%09%09statement%20generateOn%3A%20generator.%0D%09%09%09%09%09generator%20endStatement%5D%5D"));
smalltalk.bind(smalltalk.StBlockNode, unescape("generateOn%3A"), "generateOn_", function StBlockNode__generateOn_(generator){
const self = this; if ((self.returns()).not()) {self.returnLast()};
generator.blockFunction_((self.arguments()));
generator.startBlock();
generator.generateTemporaries_(self['@temporaries']);
self['@statements'].do_((function StBlockNode__(statement){
generator.startStatement();
statement.generateOn_(generator);
return generator.endStatement();
}
));
generator.endBlock();
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09%28self%20returns%29%0D%09%09ifFalse%3A%20%5Bself%20returnLast%5D.%0D%09generator%20blockFunction%3A%20self%20arguments.%0D%09generator%20startBlock.%0D%09generator%20generateTemporaries%3A%20temporaries.%0D%09statements%20do%3A%0D%09%09%5B%3Astatement%20%7C%20%0D%09%09%09generator%20startStatement.%0D%09%09%09statement%20generateOn%3A%20generator.%0D%09%09%09generator%20endStatement%5D.%0D%09generator%20endBlock"));
smalltalk.bind(smalltalk.StBlockNode, unescape("bodyHasNonLocalBlockReturn%3A"), "bodyHasNonLocalBlockReturn_", function StBlockNode__bodyHasNonLocalBlockReturn_(generator){
var hasNonLocal = nil;
const self = this; hasNonLocal=false;
self['@statements'].do_((function StBlockNode__(each){
return hasNonLocal=(each.hasNonLocalBlockReturn_optimized_(generator,false)).or_((function StBlockNode__(){
return hasNonLocal;
}
));
}
));
return hasNonLocal;
}
, "testing", unescape("bodyHasNonLocalBlockReturn%3A%20generator%0D%09%22as%20we%20are%20now%20in%20a%20block%2C%20any%20return%20is%20non-local%22%0D%09%7C%20hasNonLocal%20%7C%0D%09hasNonLocal%20%3A%3D%20false.%0D%09statements%20do%3A%20%5B%3Aeach%20%7C%0D%09%09hasNonLocal%20%3A%3D%0D%09%09%09%28each%20hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20false%29%0D%09%09%09%09or%3A%20%5BhasNonLocal%5D%5D.%0D%09%5EhasNonLocal"));
smalltalk.bind(smalltalk.StBlockNode, unescape("bodyHasNonLocalBlockReturn%3Aoptimized%3A"), "bodyHasNonLocalBlockReturn_optimized_", function StBlockNode__bodyHasNonLocalBlockReturn_optimized_(generator,optimized){
var hasNonLocal = nil;
const self = this; hasNonLocal=false;
self['@statements'].do_((function StBlockNode__(each){
return hasNonLocal=(each.hasNonLocalBlockReturn_optimized_(generator,optimized)).or_((function StBlockNode__(){
return hasNonLocal;
}
));
}
));
return hasNonLocal;
}
, "testing", unescape("bodyHasNonLocalBlockReturn%3A%20generator%20optimized%3A%20optimized%0D%09%7C%20hasNonLocal%20%7C%0D%09hasNonLocal%20%3A%3D%20false.%0D%09statements%20do%3A%20%5B%3Aeach%20%7C%0D%09%09hasNonLocal%20%3A%3D%0D%09%09%09%28each%20hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20optimized%29%0D%09%09%09%09or%3A%20%5BhasNonLocal%5D%5D.%0D%09%5EhasNonLocal"));
smalltalk.bind(smalltalk.StBlockNode, unescape("canBeInlinedBlockValue"), "canBeInlinedBlockValue", function StBlockNode__canBeInlinedBlockValue(){
const self = this; return ((nil.is_eqeq_(self['@statements'].size(),(1)))).and_((function StBlockNode__(){
return (self['@statements'].first()).isExpression();
}
));
}
, "testing", unescape("canBeInlinedBlockValue%0D%09%5Estatements%20size%20%3D%3D%201%0D%09%09and%3A%20%5Bstatements%20first%20isExpression%5D"));
smalltalk.bind(smalltalk.StBlockNode, unescape("hasNonLocalBlockReturn%3A"), "hasNonLocalBlockReturn_", function StBlockNode__hasNonLocalBlockReturn_(generator){
var hasNonLocal = nil;
const self = this; if ((self.returns()).valueOf()) {hasNonLocal=true} else {hasNonLocal=self.bodyHasNonLocalBlockReturn_(generator)};
if ((hasNonLocal).valueOf()) {self.markNonLocalReturns()};
return hasNonLocal;
}
, "testing", unescape("hasNonLocalBlockReturn%3A%20generator%0D%09%22we%20are%20in%20a%20generic%20context%2C%20optimization%20has%20neither%20been%20confirmed%2C%20nor%20denied%22%0D%09%7C%20hasNonLocal%20%7C%0D%09%22We%20are%20not%20explicitely%20optimized%2C%20so%20any%20return%20is%20non-local%22%0D%09self%20returns%0D%09%09ifTrue%3A%20%5BhasNonLocal%20%3A%3D%20true%5D%0D%09%09ifFalse%3A%20%5BhasNonLocal%20%3A%3D%20self%20bodyHasNonLocalBlockReturn%3A%20generator%5D.%0D%09hasNonLocal%20ifTrue%3A%20%5Bself%20markNonLocalReturns%5D.%0D%09%5EhasNonLocal"));
smalltalk.bind(smalltalk.StBlockNode, unescape("hasNonLocalBlockReturn%3Aoptimized%3A"), "hasNonLocalBlockReturn_optimized_", function StBlockNode__hasNonLocalBlockReturn_optimized_(generator,optimized){
var hasNonLocal = nil;
const self = this; hasNonLocal=((self.returns()).and_((function StBlockNode__(){
return optimized.not();
}
))).or_((function StBlockNode__(){
return self.bodyHasNonLocalBlockReturn_optimized_(generator,optimized);
}
));
if ((hasNonLocal).valueOf()) {self.markNonLocalReturns()};
return hasNonLocal;
}
, "testing", unescape("hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20optimized%0D%09%7C%20hasNonLocal%20%7C%0D%09hasNonLocal%20%3A%3D%20%28self%20returns%20and%3A%20%5Boptimized%20not%5D%29%0D%09%09or%3A%20%5Bself%20bodyHasNonLocalBlockReturn%3A%20generator%20optimized%3A%20optimized%5D.%0D%09hasNonLocal%20ifTrue%3A%20%5Bself%20markNonLocalReturns%5D.%0D%09%5EhasNonLocal"));
smalltalk.bind(smalltalk.StBlockNode, unescape("isBlockNode"), "isBlockNode", function StBlockNode__isBlockNode(){
const self = this; return true;
}
, "testing", unescape("isBlockNode%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StBlockNode, unescape("isComplex"), "isComplex", function StBlockNode__isComplex(){
const self = this; self.halt();
return ((self['@statements'].size())._gt((1))).or_((function StBlockNode__(){
return ((self['@statements'].size())._eq((1))).and_((function StBlockNode__(){
return (self['@statements'].first()).isComplex();
}
));
}
));
}
, "testing", unescape("isComplex%0D%09self%20halt.%0D%09%5Estatements%20size%20%3E%201%20or%3A%20%5Bstatements%20size%20%3D%201%20and%3A%20%5Bstatements%20first%20isComplex%5D%5D"));
smalltalk.bind(smalltalk.StBlockNode, unescape("isExpression"), "isExpression", function StBlockNode__isExpression(){
const self = this; return false;
}
, "testing", unescape("isExpression%0D%09%22only%20an%20expression%20if%20invoked%2C%20not%20in%20optimized%20form%22%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StBlockNode, unescape("isJust%3A"), "isJust_", function StBlockNode__isJust_(node){
const self = this; if ((self['@returns']).valueOf()) {return false};
return ((self['@statements'].size())._eq((1))).and_((function StBlockNode__(){
return (nil.is_eqeq_(self['@statements'].first(),node));
}
));
}
, "testing", unescape("isJust%3A%20node%0D%0D%09returns%20ifTrue%3A%20%5B%5Efalse%5D.%0D%09%5Estatements%20size%20%3D%201%20and%3A%20%5Bstatements%20first%20%3D%3D%20node%5D"));
smalltalk.bind(smalltalk.StBlockNode, unescape("markNonLocalReturns"), "markNonLocalReturns", function StBlockNode__markNonLocalReturns(){
const self = this; self['@statements'].do_((function StBlockNode__(each){
return each.markNonLocalReturns();
}
));
return self;
}
, "testing", unescape("markNonLocalReturns%0D%09statements%20do%3A%20%5B%3Aeach%20%7C%20each%20markNonLocalReturns%5D"));
smalltalk.bind(smalltalk.StBlockNode, unescape("methodBodyHasNonLocalBlockReturn%3A"), "methodBodyHasNonLocalBlockReturn_", function StBlockNode__methodBodyHasNonLocalBlockReturn_(generator){
var hasNonLocal = nil;
const self = this; hasNonLocal=false;
self['@statements'].do_((function StBlockNode__(each){
return hasNonLocal=(each.hasNonLocalBlockReturn_(generator)).or_((function StBlockNode__(){
return hasNonLocal;
}
));
}
));
return hasNonLocal;
}
, "testing", unescape("methodBodyHasNonLocalBlockReturn%3A%20generator%0D%09%22we%20are%20in%20a%20generic%20context%2C%20optimization%20has%20neither%20been%20confirmed%2C%20nor%20denied%22%0D%09%7C%20hasNonLocal%20%7C%0D%09hasNonLocal%20%3A%3D%20false.%0D%09statements%20do%3A%20%5B%3Aeach%20%7C%0D%09%09hasNonLocal%20%3A%3D%0D%09%09%09%28each%20hasNonLocalBlockReturn%3A%20generator%29%0D%09%09%09%09or%3A%20%5BhasNonLocal%5D%5D.%0D%09%5EhasNonLocal"));
smalltalk.bind(smalltalk.StBlockNode, unescape("returns"), "returns", function StBlockNode__returns(){
const self = this; return self['@returns'].or_((function StBlockNode__(){
return (self['@statements'].last()).isReturningIf();
}
));
}
, "testing", unescape("returns%0D%0D%09%5Ereturns%20or%3A%20%5Bstatements%20last%20isReturningIf%5D"));
smalltalk.StBlockNode.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StBlockNode.$klass, unescape("returnNil"), "returnNil", function StBlockNode_class__returnNil(){
const self = this; return (self.$$new()).returnNil();
}
, "instance creation", unescape("returnNil%0D%09%5E%20self%20new%20returnNil"));
smalltalk.bind(smalltalk.StBlockNode.$klass, unescape("withJust%3A"), "withJust_", function StBlockNode_class__withJust_(aNode){
const self = this; return (self.$$new()).statements_returns_((smalltalk.Array.with_(aNode)),false);
}
, "instance creation", unescape("withJust%3A%20aNode%0D%09%5E%20self%20new%20statements%3A%20%28Array%20with%3A%20aNode%29%20returns%3A%20false"));
smalltalk.addClass("StCascadeNode", smalltalk.StParseNode, ['receiver', 'messages'], 'Compiler-JS');
smalltalk.StCascadeNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StCascadeNode, unescape("messages"), "messages", function StCascadeNode__messages(){
const self = this; return self['@messages'];
}
, "accessing", unescape("messages%0D%09%5Emessages"));
smalltalk.bind(smalltalk.StCascadeNode, unescape("receiver"), "receiver", function StCascadeNode__receiver(){
const self = this; return self['@receiver'];
}
, "accessing", unescape("receiver%0D%09%5Ereceiver"));
smalltalk.bind(smalltalk.StCascadeNode, unescape("hasNonLocalBlockReturn%3A"), "hasNonLocalBlockReturn_", function StCascadeNode__hasNonLocalBlockReturn_(generator){
var hasNonLocal = nil;
const self = this; hasNonLocal=self['@receiver'].hasNonLocalBlockReturn_(generator);
self['@messages'].do_((function StCascadeNode__(each){
return hasNonLocal=(each.hasNonLocalBlockReturn_(generator)).or_((function StCascadeNode__(){
return hasNonLocal;
}
));
}
));
if ((hasNonLocal).valueOf()) {self.markNonLocalReturns()};
return hasNonLocal;
}
, "testing", unescape("hasNonLocalBlockReturn%3A%20generator%0D%09%22we%20are%20in%20a%20generic%20context%2C%20optimization%20has%20neither%20been%20confirmed%2C%20nor%20denied%22%0D%09%7C%20hasNonLocal%20%7C%0D%09hasNonLocal%20%3A%3D%20receiver%20hasNonLocalBlockReturn%3A%20generator.%0D%09messages%20do%3A%20%5B%3Aeach%20%7C%20%0D%09%09hasNonLocal%20%3A%3D%20%28each%20hasNonLocalBlockReturn%3A%20generator%29%20or%3A%20%5BhasNonLocal%5D%5D.%0D%09hasNonLocal%20ifTrue%3A%20%5Bself%20markNonLocalReturns%5D.%0D%09%5EhasNonLocal"));
smalltalk.bind(smalltalk.StCascadeNode, unescape("hasNonLocalBlockReturn%3Aoptimized%3A"), "hasNonLocalBlockReturn_optimized_", function StCascadeNode__hasNonLocalBlockReturn_optimized_(generator,parentOptimized){
var hasNonLocal = nil;
const self = this; hasNonLocal=self['@receiver'].hasNonLocalBlockReturn_optimized_(generator,parentOptimized);
self['@messages'].do_((function StCascadeNode__(each){
return hasNonLocal=(each.hasNonLocalBlockReturn_optimized_(generator,parentOptimized)).or_((function StCascadeNode__(){
return hasNonLocal;
}
));
}
));
if ((hasNonLocal).valueOf()) {self.markNonLocalReturns()};
return hasNonLocal;
}
, "testing", unescape("hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20parentOptimized%0D%09%22we%20are%20in%20a%20generic%20context%2C%20optimization%20has%20neither%20been%20confirmed%2C%20nor%20denied%22%0D%09%7C%20hasNonLocal%20%7C%0D%09hasNonLocal%20%3A%3D%20receiver%20hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20parentOptimized.%0D%09messages%20do%3A%20%5B%3Aeach%20%7C%20%0D%09%09hasNonLocal%20%3A%3D%20%28each%20hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20parentOptimized%29%20or%3A%20%5BhasNonLocal%5D%5D.%0D%09hasNonLocal%20ifTrue%3A%20%5Bself%20markNonLocalReturns%5D.%0D%09%5EhasNonLocal"));
smalltalk.bind(smalltalk.StCascadeNode, unescape("markNonLocalReturns"), "markNonLocalReturns", function StCascadeNode__markNonLocalReturns(){
const self = this; self['@receiver'].markNonLocalReturns();
self['@messages'].do_((function StCascadeNode__(each){
return each.markNonLocalReturns();
}
));
return self;
}
, "testing", unescape("markNonLocalReturns%0D%09receiver%20markNonLocalReturns.%0D%09messages%20do%3A%20%5B%3Aeach%20%7C%20each%20markNonLocalReturns%5D"));
smalltalk.bind(smalltalk.StCascadeNode, unescape("receiver%3Amessages%3A"), "receiver_messages_", function StCascadeNode__receiver_messages_(receivingObject,msgs){
const self = this; self['@receiver']=receivingObject;
self['@messages']=msgs;
return self;
}
, "initialize-release", unescape("receiver%3A%20receivingObject%20messages%3A%20msgs%0D%09%22%20Transcript%20show%3A%20%27abc%27%3B%20cr%3B%20show%3A%20%27def%27%20%22%0D%0D%09receiver%20%3A%3D%20receivingObject.%0D%09messages%20%3A%3D%20msgs"));
smalltalk.bind(smalltalk.StCascadeNode, unescape("generateOn%3A"), "generateOn_", function StCascadeNode__generateOn_(generator){
const self = this; generator.asLocalFunctionInvocation_with_(self['@messages'],self['@receiver']);
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09generator%20asLocalFunctionInvocation%3A%20messages%20with%3A%20receiver"));
smalltalk.addClass("StCommentNode", smalltalk.StParseNode, [], 'Compiler-JS');
smalltalk.StCommentNode.$classVariableNames=("");
smalltalk.addClass("StEncoder", smalltalk.StParseNode, ['scopeTable', 'nTemps', 'supered', 'requestor', 'selector', 'sourceRanges', 'globalSourceRanges', 'cue'], 'Compiler-JS');
smalltalk.StEncoder.$classVariableNames=("");
smalltalk.bind(smalltalk.StEncoder, unescape("cantStoreInto%3A"), "cantStoreInto_", function StEncoder__cantStoreInto_(varName){
const self = this; return smalltalk.StEncoder.classVariableAt_("StdVariables").includesKey_(varName);
}
, "encoding", unescape("cantStoreInto%3A%20varName%0D%0D%09%5EStdVariables%20includesKey%3A%20varName"));
smalltalk.bind(smalltalk.StEncoder, unescape("doItInContextName"), "doItInContextName", function StEncoder__doItInContextName(){
const self = this; return "ThisContext";
}
, "encoding", unescape("doItInContextName%0D%09%5E%27ThisContext%27"));
smalltalk.bind(smalltalk.StEncoder, unescape("encodeCharacterLiteral%3A"), "encodeCharacterLiteral_", function StEncoder__encodeCharacterLiteral_(object){
const self = this; return (smalltalk.StLiteralNode.$$new()).name_key_(object,(self['@cue'].literalScannedAs_notifying_(object,self)));
}
, "encoding", unescape("encodeCharacterLiteral%3A%20object%0D%09%5EStLiteralNode%20new%0D%09%09name%3A%20object%0D%09%09key%3A%20%28cue%20%20literalScannedAs%3A%20object%20notifying%3A%20self%29"));
smalltalk.bind(smalltalk.StEncoder, unescape("encodeLiteral%3A"), "encodeLiteral_", function StEncoder__encodeLiteral_(object){
const self = this; return (smalltalk.StLiteralNode.$$new()).name_key_(object,(self['@cue'].literalScannedAs_notifying_(object,self)));
}
, "encoding", unescape("encodeLiteral%3A%20object%0D%09%5EStLiteralNode%20new%0D%09%09name%3A%20object%0D%09%09key%3A%20%28cue%20%20literalScannedAs%3A%20object%20notifying%3A%20self%29"));
smalltalk.bind(smalltalk.StEncoder, unescape("encodeLiteralLiteral%3A"), "encodeLiteralLiteral_", function StEncoder__encodeLiteralLiteral_(object){
const self = this; return (smalltalk.StLiteralNode.$$new()).name_key_(object,object);
}
, "encoding", unescape("encodeLiteralLiteral%3A%20object%0D%09%5EStLiteralNode%20new%0D%09%09name%3A%20object%0D%09%09key%3A%20object"));
smalltalk.bind(smalltalk.StEncoder, unescape("encodeNumberLiteral%3A"), "encodeNumberLiteral_", function StEncoder__encodeNumberLiteral_(object){
const self = this; return (smalltalk.StLiteralNode.$$new()).name_key_(object,object);
}
, "encoding", unescape("encodeNumberLiteral%3A%20object%0D%09%5EStLiteralNode%20new%0D%09%09name%3A%20object%0D%09%09key%3A%20object"));
smalltalk.bind(smalltalk.StEncoder, unescape("encodeSelector%3A"), "encodeSelector_", function StEncoder__encodeSelector_(aSelector){
const self = this; return (smalltalk.StSelectorNode.$$new()).name_key_(aSelector,aSelector);
}
, "encoding", unescape("encodeSelector%3A%20aSelector%0D%09%5EStSelectorNode%20new%20%0D%09%09name%3A%20aSelector%0D%09%09key%3A%20aSelector"));
smalltalk.bind(smalltalk.StEncoder, unescape("encodeStringLiteral%3A"), "encodeStringLiteral_", function StEncoder__encodeStringLiteral_(object){
const self = this; return (smalltalk.StLiteralNode.$$new()).name_key_(object,object);
}
, "encoding", unescape("encodeStringLiteral%3A%20object%0D%09%5EStLiteralNode%20new%0D%09%09name%3A%20object%0D%09%09key%3A%20object"));
smalltalk.bind(smalltalk.StEncoder, unescape("encodeVariable%3A"), "encodeVariable_", function StEncoder__encodeVariable_(name){
const self = this; return self.encodeVariable_sourceRange_ifUnknown_(name,nil,(function StEncoder__(){
return self.undeclared_(name);
}
));
}
, "encoding", unescape("encodeVariable%3A%20name%0D%09%5E%20self%20encodeVariable%3A%20name%20sourceRange%3A%20nil%20ifUnknown%3A%20%5B%20self%20undeclared%3A%20name%20%5D"));
smalltalk.bind(smalltalk.StEncoder, unescape("encodeVariable%3AifUnknown%3A"), "encodeVariable_ifUnknown_", function StEncoder__encodeVariable_ifUnknown_(name,action){
const self = this; return self.encodeVariable_sourceRange_ifUnknown_(name,nil,action);
}
, "encoding", unescape("encodeVariable%3A%20name%20ifUnknown%3A%20action%0D%09%5Eself%20encodeVariable%3A%20name%20sourceRange%3A%20nil%20ifUnknown%3A%20action"));
smalltalk.bind(smalltalk.StEncoder, unescape("encodeVariable%3AsourceRange%3AifUnknown%3A"), "encodeVariable_sourceRange_ifUnknown_", function StEncoder__encodeVariable_sourceRange_ifUnknown_(name,range,action){
var varNode = nil;
const self = this; var $early={name:"stReturn"};
try {
varNode=self['@scopeTable'].at_ifAbsent_(name,(function StEncoder__(){
return self.lookupInPools_(name);
}
));
(function(){var $1$; $1$ = varNode; if (nil.isNil_($1$)) { return (function StEncoder__(){
$early.result=action.value(); throw ($early);
}
)() } else { return $1$; }})();
(function(){var $2$; $2$ = range; if (!nil.isNil_($2$)) { return ((name.first()).isUppercase()).ifTrue_((function StEncoder__(){
return self['@globalSourceRanges'].addLast_((smalltalk.Array.with_with_with_(name,range,false)));
}
)) } else { return $2$; }})();
if (((varNode.isTemp()).and_((function StEncoder__(){
return (varNode.scope())._lt((0));
}
))).valueOf()) {if ((smalltalk.StCompileException.signal()).valueOf()) {return action.value()} else {return self.notify_("out of scope")}};
return varNode;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "encoding", unescape("encodeVariable%3A%20name%20sourceRange%3A%20range%20ifUnknown%3A%20action%0D%09%7C%20varNode%20%7C%0D%22%09varNode%20%3A%3D%20scopeTable%0D%09%09%09%09%09at%3A%20name%0D%09%09%09%09%09ifAbsent%3A%20%0D%09%09%09%09%09%09%5B%28self%20lookupInPools%3A%20name%20%0D%09%09%09%09%09%09%09ifFound%3A%20%5B%3Aassoc%20%7C%20varNode%20%3A%3D%20self%20global%3A%20assoc%20name%3A%20name%5D%29%0D%09%09%09%09%09%09%09ifTrue%3A%20%5BvarNode%5D%0D%09%09%09%09%09%09%09ifFalse%3A%20%5B%5Eaction%20value%5D%5D.%22%0D%09varNode%20%3A%3D%20scopeTable%20at%3A%20name%20ifAbsent%3A%20%5Bself%20lookupInPools%3A%20name%5D.%0D%09varNode%20ifNil%3A%20%5B%5Eaction%20value%5D.%0D%0D%09range%20ifNotNil%3A%0D%09%09%5Bname%20first%20isUppercase%20ifTrue%3A%0D%09%09%09%5BglobalSourceRanges%20addLast%3A%20%28Array%20with%3A%20name%20with%3A%20range%20with%3A%20false%29%5D%5D.%0D%0D%09%28varNode%20isTemp%20and%3A%20%5BvarNode%20scope%20%3C%200%5D%29%20ifTrue%3A%0D%09%09%5B%5E%22OutOfScopeNotification%22%20StCompileException%20signal%0D%09%09%09ifTrue%3A%20%5Baction%20value%5D%0D%09%09%09ifFalse%3A%20%5Bself%20notify%3A%20%27out%20of%20scope%27%5D%5D.%0D%09%5EvarNode"));
smalltalk.bind(smalltalk.StEncoder, unescape("environment"), "environment", function StEncoder__environment(){
const self = this; return self['@cue'].environment();
}
, "encoding", unescape("environment%0D%09%22Answer%20the%20environment%20of%20the%20current%20compilation%20context%2C%0D%09%20be%20it%20in%20a%20class%20or%20global%20%28e.g.%20a%20workspace%29%22%0D%09%5Ecue%20environment"));
smalltalk.bind(smalltalk.StEncoder, unescape("undeclared%3A"), "undeclared_", function StEncoder__undeclared_(name){
var undeclared = nil;
var symbol = nil;
const self = this; symbol=name.asSymbol();
undeclared=(self['@cue'].environment()).undeclare_((name.asSymbol()));
(function(){var $1$; $1$ = undeclared; if (nil.isNil_($1$)) { return self.notify_(("Undeclared variable: "._comma(name))) } else { return $1$; }})();
return (smalltalk.StUndeclaredVariableNode.$$new()).name_key_(symbol,undeclared);
}
, "encoding", unescape("undeclared%3A%20name%20%0D%09%7C%20undeclared%20symbol%20%7C%0D%09symbol%20%3A%3D%20name%20asSymbol.%0D%09undeclared%20%3A%3D%20cue%20environment%20undeclare%3A%20name%20asSymbol.%0D%09undeclared%20ifNil%3A%20%5Bself%20notify%3A%20%27Undeclared%20variable%3A%20%27%20%2C%20name%5D.%0D%09%5EStUndeclaredVariableNode%20new%0D%09%09name%3A%20symbol%0D%09%09key%3A%20undeclared"));
smalltalk.bind(smalltalk.StEncoder, unescape("notify%3A"), "notify_", function StEncoder__notify_(string){
const self = this; smalltalk.StCompileException.signal_(string);
return self;
}
, "error handling", unescape("notify%3A%20string%0D%09%22Put%20a%20separate%20notifier%20on%20top%20of%20the%20requestor%27s%20window%22%0D%09StCompileException%20signal%3A%20string"));
smalltalk.bind(smalltalk.StEncoder, unescape("notify%3Aat%3A"), "notify_at_", function StEncoder__notify_at_(string,location){
var req = nil;
const self = this; self.halt();
if (((nil.is_eqeq_(self['@requestor'],nil))).not()) {req=self['@requestor'];
self.release();
req.notify_at_(string,location)};
return false;
}
, "error handling", unescape("notify%3A%20string%20at%3A%20location%0D%0D%09%7C%20req%20%7C%0D%09self%20halt.%0D%09requestor%20%3D%3D%20nil%0D%09%09ifFalse%3A%20%0D%09%09%09%5Breq%20%3A%3D%20requestor.%0D%09%09%09self%20release.%0D%09%09%09req%20notify%3A%20string%20at%3A%20location%5D.%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StEncoder, unescape("init%3Anotifying%3A"), "init_notifying_", function StEncoder__init_notifying_(aCue,anObject){
const self = this; self.setCue_(aCue);
self['@nTemps']=(0);
self['@supered']=false;
self.initScopeAndLiteralTables();
(self['@cue'].getClass()).variablesDo_((function StEncoder__(variableName){
return self['@scopeTable'].at_put_(variableName,((smalltalk.StInstanceVariableNode.$$new()).name_(variableName)));
}
));
self['@sourceRanges']=smalltalk.Dictionary.new_((32));
self['@globalSourceRanges']=smalltalk.OrderedCollection.new_((32));
return self;
}
, "initialize-release", unescape("init%3A%20aCue%20notifying%3A%20anObject%0D%0D%09self%20setCue%3A%20aCue.%0D%09nTemps%20%3A%3D%200.%0D%09supered%20%3A%3D%20false.%0D%09self%20initScopeAndLiteralTables.%0D%09cue%20getClass%20variablesDo%3A%0D%09%09%5B%3AvariableName%7C%0D%09%09scopeTable%0D%09%09%09at%3A%20variableName%0D%09%09%09put%3A%20%28StInstanceVariableNode%20new%20name%3A%20variableName%29%5D.%0D%09sourceRanges%20%3A%3D%20Dictionary%20new%3A%2032.%0D%09globalSourceRanges%20%3A%3D%20OrderedCollection%20new%3A%2032%0D"));
smalltalk.bind(smalltalk.StEncoder, unescape("initScopeAndLiteralTables"), "initScopeAndLiteralTables", function StEncoder__initScopeAndLiteralTables(){
const self = this; self['@scopeTable']=smalltalk.StEncoder.classVariableAt_("StdVariables").deepCopy();
self['@scopeTable'].do_((function StEncoder__(varNode){
return varNode.comment_(nil);
}
));
return self;
}
, "initialize-release", unescape("initScopeAndLiteralTables%0D%0D%09scopeTable%20%3A%3D%20StdVariables%20deepCopy.%0D%09%22comments%20can%20be%20left%20hanging%20on%20nodes%20from%20previous%20compilations.%0D%09%20probably%20better%20than%20this%20hack%20fix%20is%20to%20create%20the%20nodes%20afresh%20on%20each%20compilation.%22%0D%09scopeTable%20do%3A%0D%09%09%5B%3AvarNode%7C%20varNode%20comment%3A%20nil%5D"));
smalltalk.bind(smalltalk.StEncoder, unescape("noteSuper"), "noteSuper", function StEncoder__noteSuper(){
const self = this; self['@supered']=true;
return self;
}
, "initialize-release", unescape("noteSuper%0D%0D%09supered%20%3A%3D%20true"));
smalltalk.bind(smalltalk.StEncoder, unescape("release"), "release", function StEncoder__release(){
const self = this; self['@requestor']=nil;
return self;
}
, "initialize-release", unescape("release%0D%0D%09requestor%20%3A%3D%20nil"));
smalltalk.bind(smalltalk.StEncoder, unescape("tempsAndBlockArgs"), "tempsAndBlockArgs", function StEncoder__tempsAndBlockArgs(){
var tempNodes = nil;
const self = this; tempNodes=smalltalk.OrderedCollection.$$new();
self['@scopeTable'].associationsDo_((function StEncoder__(assn){
var $$var = nil;
$$var=assn.value();
if ((($$var.isTemp()).and_((function StEncoder__(){
return (($$var.isMethodArg()).not()).and_((function StEncoder__(){
return (($$var.scope())._eq((0))).or_((function StEncoder__(){
return ($$var.scope())._eq((-1));
}
));
}
));
}
))).valueOf()) {return tempNodes.add_($$var)} else {return nil};
}
));
return tempNodes;
}
, "results", unescape("tempsAndBlockArgs%0D%09%7C%20tempNodes%20%7C%0D%09tempNodes%20%3A%3D%20OrderedCollection%20new.%0D%09scopeTable%20associationsDo%3A%0D%09%09%5B%3Aassn%20%7C%20%7C%20var%20%7C%0D%09%09var%20%3A%3D%20assn%20value.%0D%09%09%28var%20isTemp%0D%09%09%20and%3A%20%5Bvar%20isMethodArg%20not%0D%09%09%20and%3A%20%5Bvar%20scope%20%3D%200%20or%3A%20%5Bvar%20scope%20%3D%20-1%5D%5D%5D%29%20ifTrue%3A%0D%09%09%09%5BtempNodes%20add%3A%20var%5D%5D.%0D%09%5EtempNodes"));
smalltalk.bind(smalltalk.StEncoder, unescape("undeclaredTemps"), "undeclaredTemps", function StEncoder__undeclaredTemps(){
const self = this; return (self['@scopeTable'].select_((function StEncoder__($$var){
return ($$var.isVariableNode()).and_((function StEncoder__(){
return $$var.isUndeclared();
}
));
}
))).values();
}
, "results", unescape("undeclaredTemps%20%0D%09%5E%28scopeTable%20select%3A%20%5B%3Avar%20%7C%20var%20isVariableNode%20and%3A%20%5Bvar%20isUndeclared%5D%5D%29%20values"));
smalltalk.bind(smalltalk.StEncoder, unescape("unusedTempNames"), "unusedTempNames", function StEncoder__unusedTempNames(){
var unused = nil;
const self = this; unused=smalltalk.OrderedCollection.$$new();
self['@scopeTable'].associationsDo_((function StEncoder__(assn){
var name = nil;
if (((assn.value()).isUnusedTemp()).valueOf()) {name=(assn.value()).key();
if ((name._no_eq((self.doItInContextName()))).valueOf()) {return unused.add_(name)} else {return nil}} else {return nil};
}
));
return unused;
}
, "results", unescape("unusedTempNames%20%0D%09%7C%20unused%20%7C%0D%09unused%20%3A%3D%20OrderedCollection%20new.%0D%09scopeTable%20associationsDo%3A%0D%09%09%5B%3Aassn%20%7C%20%7C%20name%20%7C%0D%09%09%28assn%20value%20isUnusedTemp%29%20ifTrue%3A%0D%09%09%09%5Bname%20%3A%3D%20assn%20value%20key.%0D%09%09%09%20name%20%7E%3D%20self%20doItInContextName%20ifTrue%3A%20%5Bunused%20add%3A%20name%5D%5D%5D.%0D%09%5E%20unused"));
smalltalk.bind(smalltalk.StEncoder, unescape("globalSourceRanges"), "globalSourceRanges", function StEncoder__globalSourceRanges(){
const self = this; return self['@globalSourceRanges'];
}
, "source mapping", unescape("globalSourceRanges%0D%0D%09%5E%20globalSourceRanges"));
smalltalk.bind(smalltalk.StEncoder, unescape("noteSourceRange%3AforNode%3A"), "noteSourceRange_forNode_", function StEncoder__noteSourceRange_forNode_(range,node){
const self = this; self['@sourceRanges'].at_put_(node,range);
return self;
}
, "source mapping", unescape("noteSourceRange%3A%20range%20forNode%3A%20node%0D%0D%09sourceRanges%20at%3A%20node%20put%3A%20range"));
smalltalk.bind(smalltalk.StEncoder, unescape("rawSourceRanges"), "rawSourceRanges", function StEncoder__rawSourceRanges(){
const self = this; return self['@sourceRanges'];
}
, "source mapping", unescape("rawSourceRanges%0D%0D%09%5E%20sourceRanges%20"));
smalltalk.bind(smalltalk.StEncoder, unescape("sourceMap"), "sourceMap", function StEncoder__sourceMap(){
const self = this; return ((self['@sourceRanges'].keys()).collect_((function StEncoder__(key){
return smalltalk.Association.key_value_((key.pc()),(self['@sourceRanges'].at_(key)));
}
))).asSortedCollection();
}
, "source mapping", unescape("sourceMap%0D%09%22Answer%20with%20a%20sorted%20set%20of%20associations%20%28pc%20range%29.%22%0D%0D%09%5E%20%28sourceRanges%20keys%20collect%3A%20%0D%09%09%5B%3Akey%20%7C%20%20Association%20key%3A%20key%20pc%20value%3A%20%28sourceRanges%20at%3A%20key%29%5D%29%0D%09%09%09asSortedCollection"));
smalltalk.bind(smalltalk.StEncoder, unescape("sourceRangeFor%3A"), "sourceRangeFor_", function StEncoder__sourceRangeFor_(node){
const self = this; return self['@sourceRanges'].at_(node);
}
, "source mapping", unescape("sourceRangeFor%3A%20node%0D%0D%09%5EsourceRanges%20at%3A%20node"));
smalltalk.bind(smalltalk.StEncoder, unescape("autoBind%3A"), "autoBind_", function StEncoder__autoBind_(name){
var node = nil;
const self = this; var $early={name:"stReturn"};
try {
node=self['@scopeTable'].at_ifAbsent_(name,(function StEncoder__(){
if ((self.lookupInPools_ifFound_(name,(function StEncoder__(assoc){
return assoc;
}
))).valueOf()) {self.warnAboutShadowed_(name)};
$early.result=(((self.reallyBind_(name)).nowHasDef()).nowHasRef()).scope_((1)); throw ($early);
}
));
if ((node.isTemp()).valueOf()) {if (((node.scope())._gt_eq((0))).valueOf()) {return self.notify_((((((unescape("Name%20%22")._comma(name))._comma(unescape("%22already%20used%20in%20this%20method%3A%20")))._comma(((self['@cue'].getClass()).name())))._comma(unescape("%3E%3E")))._comma(self['@selector'])))};
((node.nowHasDef()).nowHasRef()).scope_((1))} else {return self.notify_(((unescape("Name%20%22")._comma(name))._comma(unescape("%22%20already%20used%20in%20this%20class"))))};
return node;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "temps", unescape("autoBind%3A%20name%20%0D%09%22Declare%20a%20block%20argument%20as%20a%20temp%20if%20not%20already%20declared.%22%0D%09%7C%20node%20%7C%0D%09node%20%3A%3D%20scopeTable%20%0D%09%09%09at%3A%20name%0D%09%09%09ifAbsent%3A%20%0D%09%09%09%09%5B%28self%20lookupInPools%3A%20name%20ifFound%3A%20%5B%3Aassoc%20%7C%20assoc%5D%29%0D%09%09%09%09%09ifTrue%3A%20%5Bself%20warnAboutShadowed%3A%20name%5D.%0D%09%09%09%09%5E%20%28self%20reallyBind%3A%20name%29%20nowHasDef%20nowHasRef%20scope%3A%201%5D.%0D%09node%20isTemp%0D%09%09ifTrue%3A%20%5Bnode%20scope%20%3E%3D%200%20ifTrue%3A%0D%09%09%09%09%09%5B%5E%20self%20notify%3A%20%27Name%20%22%27%2C%20name%20%2C%20%27%22already%20used%20in%20this%20method%3A%20%27%20%2C%20cue%20getClass%20name%20%2C%20%27%3E%3E%27%2C%20selector%5D.%0D%09%09%09%09node%20nowHasDef%20nowHasRef%20scope%3A%201%5D%0D%09%09ifFalse%3A%20%5B%5E%20self%20notify%3A%20%27Name%20%22%27%20%2C%20name%20%2C%20%27%22%20already%20used%20in%20this%20class%27%5D.%0D%09%5Enode"));
smalltalk.bind(smalltalk.StEncoder, unescape("bindArg%3A"), "bindArg_", function StEncoder__bindArg_(name){
var node = nil;
const self = this; if ((self['@nTemps']._gt_eq((15))).valueOf()) {return self.notify_("Too many arguments")};
node=self.bindTemp_(name);
return (node.nowHasDef()).nowHasRef();
}
, "temps", unescape("bindArg%3A%20name%20%0D%09%22Declare%20an%20argument.%22%0D%09%7C%20node%20%7C%0D%09nTemps%20%3E%3D%2015%0D%09%09ifTrue%3A%20%5B%5Eself%20notify%3A%20%27Too%20many%20arguments%27%5D.%0D%09node%20%3A%3D%20self%20bindTemp%3A%20name.%0D%09%5E%20node%20nowHasDef%20nowHasRef"));
smalltalk.bind(smalltalk.StEncoder, unescape("bindBlockArg%3Awithin%3A"), "bindBlockArg_within_", function StEncoder__bindBlockArg_within_(name,aBlockNode){
const self = this; return self.autoBind_(name);
}
, "temps", unescape("bindBlockArg%3A%20name%20within%3A%20aBlockNode%0D%09%22With%20standard%20Smalltalk-80%20%28BlueBook%29%20blocks%20it%20used%20to%20be%20legal%20to%20use%20a%0D%09%20method%20temp%20as%20a%20block%20argument.%20%20This%20shouldn%27t%20be%20the%20case%20with%20the%0D%09%20current%20compiler%2C%20which%20checks%20for%20temp%20names%20already%20being%20used%20as%0D%09%20block%20arguments.%20%20But%20it%20is%20easily%20fooled%20by%20local%20block%20temps%20in%20optimized%0D%09%20blocks%2C%20e.g.%0D%09%09false%0D%09%09%09ifTrue%3A%20%5B%7C%20temp%20%7C%5D%0D%09%09%09ifFalse%3A%5B%5B%3Atemp%7C%5D%5D%0D%09Rather%20than%20fix%20this%20we%20keep%20the%20semantics%20and%20fix%20it%20in%20the%20closure%20compiler.%22%0D%09%5Eself%20autoBind%3A%20name"));
smalltalk.bind(smalltalk.StEncoder, unescape("bindBlockTemp%3A"), "bindBlockTemp_", function StEncoder__bindBlockTemp_(name){
var node = nil;
const self = this; var $early={name:"stReturn"};
try {
node=self['@scopeTable'].at_ifAbsent_(name,(function StEncoder__(){
$early.result=self.reallyBind_(name); throw ($early);
}
));
if ((node.isTemp()).valueOf()) {if (((node.scope())._gt_eq((0))).valueOf()) {return self.notify_(((unescape("Name%20%22")._comma(name))._comma(unescape("%22%20already%20used%20in%20this%20method"))))};
node.scope_((0))} else {return self.notify_(((unescape("Name%20%22")._comma(name))._comma(unescape("%22%20already%20used%20in%20this%20class"))))};
return node;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "temps", unescape("bindBlockTemp%3A%20name%20%0D%09%22Declare%20a%20temporary%20block%20variable%3B%20complain%20if%20it%27s%20not%20a%20field%20or%20class%20variable.%22%0D%0D%09%7C%20node%20%7C%0D%0D%09node%20%3A%3D%20scopeTable%20at%3A%20name%20ifAbsent%3A%20%5B%5Eself%20reallyBind%3A%20name%5D.%0D%09node%20isTemp%0D%09%09ifTrue%3A%20%5B%0D%09%09%09node%20scope%20%3E%3D%200%20ifTrue%3A%20%5B%5E%20self%20notify%3A%20%27Name%20%22%27%20%2C%20name%20%2C%20%27%22%20already%20used%20in%20this%20method%27%5D.%0D%09%09%09node%20scope%3A%200%5D%0D%09%09ifFalse%3A%20%5B%5Eself%20notify%3A%20%27Name%20%22%27%20%2C%20name%20%2C%20%27%22%20already%20used%20in%20this%20class%27%5D.%0D%09%5Enode%0D"));
smalltalk.bind(smalltalk.StEncoder, unescape("bindBlockTemp%3Awithin%3A"), "bindBlockTemp_within_", function StEncoder__bindBlockTemp_within_(name,aBlockNode){
const self = this; return self.bindBlockTemp_(name);
}
, "temps", unescape("bindBlockTemp%3A%20name%20within%3A%20aBlockNode%0D%09%22The%20BlockContext%20compiler%20%28the%20Smalltalk-80%20BlueBook%20compiler%29%0D%09%20does%20provide%20support%20for%20ANSI%20block%20syntax%2C%20but%20not%20for%20ANSI%20block%0D%09%20semantics.%20%20Here%20all%20temps%20live%20at%20the%20same%20level%2C%20the%20method%20level.%0D%09%20The%20approach%20taken%20to%20two%20block-local%20temps%20in%20different%20blocks%20is%20to%0D%09%20merge%20them%20into%20a%20single%20temp.%20%20e.g.%0D%09%09expr%0D%09%09%09ifTrue%3A%20%5B%7Ctemp%7C%20self%20statementOne%5D%0D%09%09%09ifFalse%3A%20%5B%7Ctemp%7C%20self%20statementTwo%5D%0D%09%20is%20effectvely%20transformed%20into%0D%09%09%7C%20temp%20%7C%0D%09%09expr%0D%09%09%09ifTrue%3A%20%5Bself%20statementOne%5D%0D%09%09%09ifFalse%3A%20%5Bself%20statementTwo%5D%0D%09%20and%0D%09%09expr%20do%3A%20%5B%3Aeach%7C%20%7C%20temp%20%7C%20...%5D.%0D%09%09expr%20do%3A%20%5B%3Aeach%7C%20%7C%20temp%20%7C%20...%5D.%0D%09%20is%20also%20effectively%20transformed%20into%0D%09%09%7C%20temp%20%7C%0D%09%09expr%20do%3A%20%5B%3Aeach%7C%20%20...%5D.%0D%09%09expr%20do%3A%20%5B%3Aeach%7C%20...%5D.%0D%0D%09%20The%20closure%20compiler%20treats%20the%20former%20similarly%2C%20but%20not%20the%20latter.%0D%09%20The%20indirection%20through%20%23bindBlockTemp%3Awithin%3A%20allows%20the%20closure%20StEncoder%20to%20do%20this.%22%0D%09%5Eself%20bindBlockTemp%3A%20name"));
smalltalk.bind(smalltalk.StEncoder, unescape("bindTemp%3A"), "bindTemp_", function StEncoder__bindTemp_(name){
const self = this; var $early={name:"stReturn"};
try {
self['@scopeTable'].at_ifPresent_(name,(function StEncoder__(node){
if ((node.isTemp()).valueOf()) {$early.result=self.notify_(((unescape("Name%20%22")._comma(name))._comma(unescape("%22%20already%20used%20in%20this%20method")))); throw ($early)} else {return self.warnAboutShadowed_(name)};
}
));
return self.reallyBind_(name);
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "temps", unescape("bindTemp%3A%20name%20%0D%09%22Declare%20a%20temporary%3B%20error%20not%20if%20a%20field%20or%20class%20variable.%22%0D%09scopeTable%20at%3A%20name%20ifPresent%3A%5B%3Anode%7C%0D%09%09%22When%20non-interactive%20raise%20the%20error%20only%20if%20its%20a%20duplicate%22%0D%09%09node%20isTemp%0D%09%09%09ifTrue%3A%5B%5Eself%20notify%3A%20%27Name%20%22%27%20%2C%20name%20%2C%20%27%22%20already%20used%20in%20this%20method%27%5D%0D%09%09%09ifFalse%3A%5Bself%20warnAboutShadowed%3A%20name%5D%5D.%0D%09%5Eself%20reallyBind%3A%20name"));
smalltalk.bind(smalltalk.StEncoder, unescape("bindTemp%3Ain%3A"), "bindTemp_in_", function StEncoder__bindTemp_in_(name,methodSelector){
const self = this; var $early={name:"stReturn"};
try {
self['@scopeTable'].at_ifPresent_(name,(function StEncoder__(node){
if ((node.isTemp()).valueOf()) {$early.result=self.notify_(((unescape("Name%20%22")._comma(name))._comma(unescape("%22%20already%20used%20in%20this%20method")))); throw ($early)} else {return smalltalk.Transcript.show_(((((((unescape("%28")._comma(name))._comma(unescape("%20is%20shadowed%20in%20%22")))._comma(((self['@cue'].getClass()).printString())))._comma(unescape("%3E%3E")))._comma((methodSelector.printString())))._comma(unescape("%22%29"))))};
}
));
return self.reallyBind_(name);
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "temps", unescape("bindTemp%3A%20name%20in%3A%20methodSelector%0D%09%22Declare%20a%20temporary%3B%20error%20not%20if%20a%20field%20or%20class%20variable.%22%0D%09scopeTable%20at%3A%20name%20ifPresent%3A%5B%3Anode%7C%0D%09%09%22When%20non-interactive%20raise%20the%20error%20only%20if%20its%20a%20duplicate%22%0D%09%09%28node%20isTemp%29%0D%09%09%09ifTrue%3A%5B%5Eself%20notify%3A%27Name%20%22%27%20%2C%20name%20%2C%20%27%22%20already%20used%20in%20this%20method%27%5D%0D%09%09%09ifFalse%3A%5BTranscript%20%0D%09%09%09%09show%3A%20%27%28%27%2C%20name%2C%20%27%20is%20shadowed%20in%20%22%27%20%2C%20cue%20getClass%20printString%20%2C%20%27%3E%3E%27%20%2C%20methodSelector%20printString%20%2C%20%27%22%29%27%5D%5D.%0D%09%5Eself%20reallyBind%3A%20name"));
smalltalk.bind(smalltalk.StEncoder, unescape("fixTemp%3A"), "fixTemp_", function StEncoder__fixTemp_(name){
var node = nil;
const self = this; node=self['@scopeTable'].at_ifAbsent_(name,(function StEncoder__(){
return nil;
}
));
if (((node.$klass)._no_no(smalltalk.StTempVariableNode)).valueOf()) {self.error_("can only fix a floating temp var")};
node.index_(self['@nTemps']);
self['@nTemps']=self['@nTemps']._plus((1));
return node;
}
, "temps", unescape("fixTemp%3A%20name%0D%09%7C%20node%20%7C%0D%09node%20%3A%3D%20scopeTable%20at%3A%20name%20ifAbsent%3A%20%5B%5D.%0D%09node%20class%20%7E%7E%20StTempVariableNode%20ifTrue%3A%0D%09%09%5Bself%20error%3A%20%27can%20only%20fix%20a%20floating%20temp%20var%27%5D.%0D%09node%20index%3A%20nTemps.%0D%09nTemps%20%3A%3D%20nTemps%20+%201.%0D%09%5Enode"));
smalltalk.bind(smalltalk.StEncoder, unescape("maxTemp"), "maxTemp", function StEncoder__maxTemp(){
const self = this; return self['@nTemps'];
}
, "temps", unescape("maxTemp%0D%0D%09%5EnTemps"));
smalltalk.bind(smalltalk.StEncoder, unescape("newTemp%3A"), "newTemp_", function StEncoder__newTemp_(name){
const self = this; self['@nTemps']=self['@nTemps']._plus((1));
return (smalltalk.StTempVariableNode.$$new()).name_scope_(name,(0));
}
, "temps", unescape("newTemp%3A%20name%0D%0D%09nTemps%20%3A%3D%20nTemps%20+%201.%0D%09%5E%20StTempVariableNode%20new%0D%09%09name%3A%20name%0D%09%09scope%3A%200"));
smalltalk.bind(smalltalk.StEncoder, unescape("newUndeclaredTemp%3A"), "newUndeclaredTemp_", function StEncoder__newUndeclaredTemp_(name){
const self = this; return (smalltalk.StUndeclaredVariableNode.$$new()).name_(name);
}
, "temps", unescape("newUndeclaredTemp%3A%20name%0D%09%5EStUndeclaredVariableNode%20new%20name%3A%20name"));
smalltalk.bind(smalltalk.StEncoder, unescape("bindUndeclaredTemp%3A"), "bindUndeclaredTemp_", function StEncoder__bindUndeclaredTemp_(name){
const self = this; return self['@scopeTable'].at_put_(name,(self.newUndeclaredTemp_(name)));
}
, "private", unescape("bindUndeclaredTemp%3A%20name%0D%09%5EscopeTable%20at%3A%20name%20put%3A%20%28self%20newUndeclaredTemp%3A%20name%29"));
smalltalk.bind(smalltalk.StEncoder, unescape("classEncoding"), "classEncoding", function StEncoder__classEncoding(){
const self = this; return self['@cue'].getClass();
}
, "private", unescape("classEncoding%0D%09%22This%20is%20a%20hack%20so%20that%20the%20parser%20may%20findout%20what%20class%20it%20was%20parsing%20for%20when%20it%20wants%20to%20create%20a%20syntax%20error%20view.%22%0D%09%5E%20cue%20getClass"));
smalltalk.bind(smalltalk.StEncoder, unescape("classVariable%3Aname%3A"), "classVariable_name_", function StEncoder__classVariable_name_(ref,name){
const self = this; return (smalltalk.StClassVariableNode.$$new()).name_key_(name,ref);
}
, "private", unescape("classVariable%3A%20ref%20name%3A%20name%0D%09%5EStClassVariableNode%20new%0D%09%09name%3A%20name%0D%09%09key%3A%20ref"));
smalltalk.bind(smalltalk.StEncoder, unescape("global%3Aname%3A"), "global_name_", function StEncoder__global_name_(ref,name){
const self = this; return (smalltalk.StLiteralVariableNode.$$new()).name_key_(name,ref);
}
, "private", unescape("global%3A%20ref%20name%3A%20name%0D%09%5EStLiteralVariableNode%20new%0D%09%09name%3A%20name%0D%09%09key%3A%20ref"));
smalltalk.bind(smalltalk.StEncoder, unescape("lookupInPools%3A"), "lookupInPools_", function StEncoder__lookupInPools_(varName){
var binding = nil;
const self = this; binding=self['@cue'].bindingOf_((varName.asSymbol()));
return (function(){var $1$; $1$ = binding; if (!nil.isNil_($1$)) { return binding.asVariableIn_(self) } else { return $1$; }})();
}
, "private", unescape("lookupInPools%3A%20varName%0D%09%7C%20binding%20%7C%0D%09%22we%20don%27t%20really%20have%20Symbol%20in%20JS%2C%0D%09but%20let%27s%20go%20through%20the%20motions%20when%20running%20in%20ST%22%0D%09binding%20%3A%3D%20cue%20bindingOf%3A%20varName%20asSymbol.%0D%09%5Ebinding%0D%09%09ifNotNil%3A%20%5Bbinding%20asVariableIn%3A%20self%5D"));
smalltalk.bind(smalltalk.StEncoder, unescape("lookupInPools%3AifFound%3A"), "lookupInPools_ifFound_", function StEncoder__lookupInPools_ifFound_(varName,assocBlock){
const self = this; return (nil.isNil_(self['@cue'].bindingOf_(varName)) ? false : assocBlock.value_(assoc));
}
, "private", unescape("lookupInPools%3A%20varName%20ifFound%3A%20assocBlock%0D%0D%09%5E%28cue%20bindingOf%3A%20varName%29%0D%09%09ifNil%3A%20%5Bfalse%5D%0D%09%09ifNotNil%3A%20%5B%3Aassoc%7C%20assocBlock%20value%3A%20assoc%5D"));
smalltalk.bind(smalltalk.StEncoder, unescape("possibleNamesFor%3A"), "possibleNamesFor_", function StEncoder__possibleNamesFor_(proposedName){
var results = nil;
const self = this; results=(self['@cue'].getClass()).possibleVariablesFor_continuedFrom_(proposedName,nil);
return proposedName.correctAgainst_continuedFrom_(nil,results);
}
, "private", unescape("possibleNamesFor%3A%20proposedName%0D%09%7C%20results%20%7C%0D%09results%20%3A%3D%20cue%20getClass%20%0D%09%09possibleVariablesFor%3A%20proposedName%20%0D%09%09continuedFrom%3A%20nil.%0D%09%5E%20proposedName%20correctAgainst%3A%20nil%20continuedFrom%3A%20results.%0D"));
smalltalk.bind(smalltalk.StEncoder, unescape("reallyBind%3A"), "reallyBind_", function StEncoder__reallyBind_(name){
var node = nil;
const self = this; node=self.newTemp_(name);
self['@scopeTable'].at_put_(name,node);
return node;
}
, "private", unescape("reallyBind%3A%20name%0D%0D%09%7C%20node%20%7C%0D%09node%20%3A%3D%20self%20newTemp%3A%20name.%0D%09scopeTable%20at%3A%20name%20put%3A%20node.%0D%09%5Enode"));
smalltalk.bind(smalltalk.StEncoder, unescape("setCue%3A"), "setCue_", function StEncoder__setCue_(aCue){
const self = this; self['@cue']=aCue;
return self;
}
, "private", unescape("setCue%3A%20aCue%0D%09cue%20%3A%3D%20aCue"));
smalltalk.bind(smalltalk.StEncoder, unescape("warnAboutShadowed%3A"), "warnAboutShadowed_", function StEncoder__warnAboutShadowed_(name){
const self = this; (function(){var $1$; $1$ = self['@selector']; if (!nil.isNil_($1$)) { return (function StEncoder__(){
return (function StEncoder__($2$){
$2$.cr();
return $2$.show_((((((((self['@cue'].getClass()).name())._comma(unescape("%3E%3E")))._comma(self['@selector']))._comma(unescape("%28")))._comma(name))._comma(unescape("%20is%20shadowed%29"))))}
)(smalltalk.Transcript);
}
)() } else { return $1$; }})();
return self;
}
, "private", unescape("warnAboutShadowed%3A%20name%0D%22%09requestor%20addWarning%3A%20name%2C%27%20is%20shadowed%27.%22%0D%09selector%20ifNotNil%3A%0D%09%09%5BTranscript%20cr%3B%20show%3A%20cue%20getClass%20name%2C%27%3E%3E%27%2C%20selector%2C%20%27%28%27%2C%20name%2C%27%20is%20shadowed%29%27%5D"));
smalltalk.bind(smalltalk.StEncoder, unescape("maxIndexableLiterals"), "maxIndexableLiterals", function StEncoder__maxIndexableLiterals(){
const self = this; return (63);
}
, "accessing", unescape("maxIndexableLiterals%0D%09%22Answer%20the%20maximum%20number%20of%20literals%20supported%20by%20the%20receiver%27s%0D%09%20bytecode%20set.%20This%20is%20a%20nominal%20value%20based%20on%20the%20Blue%20Book%20bytecode%0D%09%20set%3B%20subclasses%20answer%20a%20more%20accurate%20value.%22%0D%09%5E63"));
smalltalk.bind(smalltalk.StEncoder, unescape("maxNumLiterals"), "maxNumLiterals", function StEncoder__maxNumLiterals(){
const self = this; return (smalltalk.CompiledMethod.maxNumLiterals()).min_((self.maxIndexableLiterals()));
}
, "accessing", unescape("maxNumLiterals%0D%09%5ECompiledMethod%20maxNumLiterals%20min%3A%20self%20maxIndexableLiterals"));
smalltalk.bind(smalltalk.StEncoder, unescape("methodNodeClass"), "methodNodeClass", function StEncoder__methodNodeClass(){
const self = this; return smalltalk.StMethodNode;
}
, "accessing", unescape("methodNodeClass%0D%09%5EStMethodNode"));
smalltalk.bind(smalltalk.StEncoder, unescape("selector"), "selector", function StEncoder__selector(){
const self = this; return self['@selector'];
}
, "accessing", unescape("selector%0D%09%5Eselector"));
smalltalk.bind(smalltalk.StEncoder, unescape("selector%3A"), "selector_", function StEncoder__selector_(aSymbol){
const self = this; self['@selector']=aSymbol;
return self;
}
, "accessing", unescape("selector%3A%20aSymbol%0D%09selector%20%3A%3D%20aSymbol"));
smalltalk.addClass("StLeafNode", smalltalk.StParseNode, ['key'], 'Compiler-JS');
smalltalk.StLeafNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StLeafNode, unescape("key"), "key", function StLeafNode__key(){
const self = this; return self['@key'];
}
, "accessing", unescape("key%0D%0D%09%5Ekey"));
smalltalk.bind(smalltalk.StLeafNode, unescape("key%3A"), "key_", function StLeafNode__key_(object){
const self = this; self['@key']=object;
return self;
}
, "initialize-release", unescape("key%3A%20object%0D%0D%09key%20%3A%3D%20object"));
smalltalk.bind(smalltalk.StLeafNode, unescape("printOn%3A"), "printOn_", function StLeafNode__printOn_(stream){
const self = this; smalltalk.superImplementor(smalltalk.StLeafNode,'printOn_').apply(self, [stream]);
(function StLeafNode__($1$){
$1$.nextPut_(unescape("%28"));
$1$.nextPutAll_((self['@key'].asString()));
return $1$.nextPut_(unescape("%29"))}
)(stream);
return self;
}
, "printing", unescape("printOn%3A%20stream%0D%09super%20printOn%3A%20stream.%0D%09stream%0D%09%09nextPut%3A%20%24%28%3B%0D%09%09nextPutAll%3A%20key%20asString%3B%0D%09%09nextPut%3A%20%24%29"));
smalltalk.bind(smalltalk.StLeafNode, unescape("isExpression"), "isExpression", function StLeafNode__isExpression(){
const self = this; return true;
}
, "private", unescape("isExpression%0D%09%5Etrue"));
smalltalk.addClass("StLiteralNode", smalltalk.StLeafNode, [], 'Compiler-JS');
smalltalk.StLiteralNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StLiteralNode, unescape("isConstantNumber"), "isConstantNumber", function StLiteralNode__isConstantNumber(){
const self = this; return self['@key'].isNumber();
}
, "testing", unescape("isConstantNumber%0D%09%5E%20key%20isNumber"));
smalltalk.bind(smalltalk.StLiteralNode, unescape("isLiteralNode"), "isLiteralNode", function StLiteralNode__isLiteralNode(){
const self = this; return true;
}
, "testing", unescape("isLiteralNode%0D%0D%09%5E%20true"));
smalltalk.bind(smalltalk.StLiteralNode, unescape("literalValue"), "literalValue", function StLiteralNode__literalValue(){
const self = this; return self['@key'];
}
, "testing", unescape("literalValue%0D%0D%09%5Ekey"));
smalltalk.bind(smalltalk.StLiteralNode, unescape("generateOn%3A"), "generateOn_", function StLiteralNode__generateOn_(generator){
const self = this; self['@key'].generateOn_(generator);
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09key%20generateOn%3A%20generator"));
smalltalk.bind(smalltalk.StLiteralNode, unescape("name%3Akey%3A"), "name_key_", function StLiteralNode__name_key_(literal,object){
const self = this; return self.key_(object);
}
, "initialize-release", unescape("name%3A%20literal%20key%3A%20object%0D%09%22For%20compatibility%20with%20Encoder%3E%3Ename%3Akey%3Aclass%3Atype%3Aset%3A%22%0D%09%5Eself%20key%3A%20object"));
smalltalk.addClass("StMessageNode", smalltalk.StParseNode, ['receiver', 'selector', 'precedence', 'args'], 'Compiler-JS');
smalltalk.StMessageNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StMessageNode, unescape("receiver%3Aselector%3Aarguments%3Aprecedence%3Afrom%3A"), "receiver_selector_arguments_precedence_from_", function StMessageNode__receiver_selector_arguments_precedence_from_(rcvr,aSelector,argList,p,encoder){
const self = this; self['@receiver']=rcvr;
self['@args']=argList;
self['@precedence']=p;
self['@selector']=encoder.encodeSelector_(aSelector);
return self;
}
, "initialize-release", unescape("receiver%3A%20rcvr%20selector%3A%20aSelector%20arguments%3A%20argList%20precedence%3A%20p%20from%3A%20encoder%20%0D%09receiver%20%3A%3D%20rcvr.%0D%09args%20%3A%3D%20argList.%0D%09precedence%20%3A%3D%20p.%0D%09selector%20%3A%3D%20encoder%20encodeSelector%3A%20aSelector"));
smalltalk.bind(smalltalk.StMessageNode, unescape("asReturnNode"), "asReturnNode", function StMessageNode__asReturnNode(){
const self = this; return (smalltalk.StReturnNode.$$new()).expr_(self);
}
, "converting", unescape("asReturnNode%0D%09%5EStReturnNode%20new%20expr%3A%20self"));
smalltalk.bind(smalltalk.StMessageNode, unescape("arguments"), "arguments", function StMessageNode__arguments(){
const self = this; return self['@args'];
}
, "accessing", unescape("arguments%0D%09%5Eargs"));
smalltalk.bind(smalltalk.StMessageNode, unescape("firstArgument"), "firstArgument", function StMessageNode__firstArgument(){
const self = this; return self['@args'].first();
}
, "accessing", unescape("firstArgument%0D%09%5Eargs%20first"));
smalltalk.bind(smalltalk.StMessageNode, unescape("receiver"), "receiver", function StMessageNode__receiver(){
const self = this; return self['@receiver'];
}
, "accessing", unescape("receiver%0D%09%5Ereceiver"));
smalltalk.bind(smalltalk.StMessageNode, unescape("receiver%3A"), "receiver_", function StMessageNode__receiver_(aNode){
const self = this; self['@receiver']=aNode;
return self;
}
, "accessing", unescape("receiver%3A%20aNode%0D%09receiver%20%3A%3D%20aNode"));
smalltalk.bind(smalltalk.StMessageNode, unescape("secondArgument"), "secondArgument", function StMessageNode__secondArgument(){
const self = this; return self['@args'].second();
}
, "accessing", unescape("secondArgument%0D%09%5Eargs%20second"));
smalltalk.bind(smalltalk.StMessageNode, unescape("selector"), "selector", function StMessageNode__selector(){
const self = this; return self['@selector'];
}
, "accessing", unescape("selector%0D%09%5Eselector"));
smalltalk.bind(smalltalk.StMessageNode, unescape("canBeRewritten%3A"), "canBeRewritten_", function StMessageNode__canBeRewritten_(generator){
const self = this; if ((["whileTrue", "whileTrue:", "whileFalse", "whileFalse"].includes_((self['@selector'].key()))).valueOf()) {return self['@receiver'].isBlockNode()} else {return generator.canBeRewritten_((self['@selector'].key()))};
}
, "testing", unescape("canBeRewritten%3A%20generator%0D%09%28%23%28%20%23whileTrue%20%23whileTrue%3A%20%23whileFalse%20%23whileFalse%29%20includes%3A%20selector%20key%29%0D%09%09ifTrue%3A%20%5B%5Ereceiver%20isBlockNode%5D%0D%09%09ifFalse%3A%20%5B%5Egenerator%20canBeRewritten%3A%20selector%20key%5D%0D%09"));
smalltalk.bind(smalltalk.StMessageNode, unescape("canBeValueRewritten%3A"), "canBeValueRewritten_", function StMessageNode__canBeValueRewritten_(generator){
const self = this; return generator.canBeValueRewritten_((self['@selector'].key()));
}
, "testing", unescape("canBeValueRewritten%3A%20generator%0D%09%5Egenerator%20canBeValueRewritten%3A%20selector%20key%0D%09"));
smalltalk.bind(smalltalk.StMessageNode, unescape("canCascade"), "canCascade", function StMessageNode__canCascade(){
const self = this; return self['@receiver']._no_no(smalltalk.StMessageNode.classVariableAt_("NodeSuper"));
}
, "testing", unescape("canCascade%0D%09%5Ereceiver%20%7E%7E%20NodeSuper"));
smalltalk.bind(smalltalk.StMessageNode, unescape("hasInlinedFunction%3A"), "hasInlinedFunction_", function StMessageNode__hasInlinedFunction_(generator){
const self = this; if ((["whileTrue", "whileTrue:", "whileFalse", "whileFalse"].includes_((self['@selector'].key()))).valueOf()) {return (self['@receiver'].canBeInlinedBlockValue()).not()} else {return generator.hasInlinedFunction_((self['@selector'].key()))};
}
, "testing", unescape("hasInlinedFunction%3A%20generator%0D%09%22we%20need%20to%20treat%20whileTrue/False%28%3A%29%20differently%20here%20depending%20on%20%0D%09whether%20we%20know%20the%20receiver%20is%20a%20block%20which%20can%20be%20inlined.%0D%09The%20message%20might%20otherwise%20be%20overriden%20by%20the%20receiver%20class%20and%20can%27t%20be%20inlined%20here%22%0D%0D%09%28%23%28%20%23whileTrue%20%23whileTrue%3A%20%23whileFalse%20%23whileFalse%29%20includes%3A%20selector%20key%29%0D%09%09ifTrue%3A%20%5B%5Ereceiver%20canBeInlinedBlockValue%20not%5D%0D%09%09ifFalse%3A%20%5B%5Egenerator%20hasInlinedFunction%3A%20selector%20key%5D%0D%09"));
smalltalk.bind(smalltalk.StMessageNode, unescape("hasNonLocalBlockReturn%3A"), "hasNonLocalBlockReturn_", function StMessageNode__hasNonLocalBlockReturn_(generator){
var optimized = nil;
var hasNonLocal = nil;
const self = this; if ((self.canBeRewritten_(generator)).valueOf()) {optimized=(self.hasInlinedFunction_(generator)).not();
if ((self['@receiver'].hasNonLocalBlockReturn_optimized_(generator,optimized)).valueOf()) {return true};
hasNonLocal=false;
self['@args'].do_((function StMessageNode__(each){
return hasNonLocal=(each.hasNonLocalBlockReturn_optimized_(generator,optimized)).or_((function StMessageNode__(){
return hasNonLocal;
}
));
}
));
return hasNonLocal} else {if ((self['@receiver'].hasNonLocalBlockReturn_(generator)).valueOf()) {return true};
hasNonLocal=false;
self['@args'].do_((function StMessageNode__(each){
return hasNonLocal=(each.hasNonLocalBlockReturn_(generator)).or_((function StMessageNode__(){
return hasNonLocal;
}
));
}
));
return hasNonLocal};
}
, "testing", unescape("hasNonLocalBlockReturn%3A%20generator%0D%09%22we%20are%20in%20a%20generic%20context%2C%20optimization%20has%20neither%20been%20confirmed%2C%20nor%20denied%22%0D%09%7C%20optimized%20hasNonLocal%20%7C%0D%09%28self%20canBeRewritten%3A%20generator%29%0D%09%09ifTrue%3A%20%5B%0D%09%09%09%22now%20we%20need%20to%20confirm%20or%20deny%20optimization%22%0D%09%09%09optimized%20%3A%3D%20%28self%20hasInlinedFunction%3A%20generator%29%20not.%0D%09%09%09%28receiver%20hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20optimized%29%0D%09%09%09%09ifTrue%3A%20%5B%5Etrue%5D.%0D%09%09%09hasNonLocal%20%3A%3D%20false.%0D%09%09%09args%20do%3A%20%5B%3Aeach%20%7C%20%0D%09%09%09%09hasNonLocal%20%3A%3D%20%28each%20hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20optimized%29%0D%09%09%09%09%09or%3A%20%5BhasNonLocal%5D%5D.%0D%09%09%09%5EhasNonLocal%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09%22We%20continue%20to%20be%20in%20blissful%20ingnorance%22%0D%09%09%09%28receiver%20hasNonLocalBlockReturn%3A%20generator%29%0D%09%09%09%09ifTrue%3A%20%5B%5Etrue%5D.%0D%09%09%09hasNonLocal%20%3A%3D%20false.%0D%09%09%09args%20do%3A%20%5B%3Aeach%20%7C%20%0D%09%09%09%09hasNonLocal%20%3A%3D%20%28each%20hasNonLocalBlockReturn%3A%20generator%29%0D%09%09%09%09%09or%3A%20%5BhasNonLocal%5D%5D.%0D%09%09%09%5EhasNonLocal%5D%0D"));
smalltalk.bind(smalltalk.StMessageNode, unescape("hasNonLocalBlockReturn%3Aoptimized%3A"), "hasNonLocalBlockReturn_optimized_", function StMessageNode__hasNonLocalBlockReturn_optimized_(generator,parentOptimized){
var optimized = nil;
var hasNonLocal = nil;
const self = this; optimized=parentOptimized.and_((function StMessageNode__(){
return (self.canBeRewritten_(generator)).and_((function StMessageNode__(){
return (self.hasInlinedFunction_(generator)).not();
}
));
}
));
if ((self['@receiver'].hasNonLocalBlockReturn_optimized_(generator,optimized)).valueOf()) {return true};
hasNonLocal=false;
self['@args'].do_((function StMessageNode__(each){
return hasNonLocal=(each.hasNonLocalBlockReturn_optimized_(generator,optimized)).or_((function StMessageNode__(){
return hasNonLocal;
}
));
}
));
return hasNonLocal;
}
, "testing", unescape("hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20parentOptimized%0D%09%7C%20optimized%20hasNonLocal%20%7C%0D%09optimized%20%3A%3D%20parentOptimized%0D%09%09and%3A%20%5B%28self%20canBeRewritten%3A%20generator%29%20and%3A%20%5B%28self%20hasInlinedFunction%3A%20generator%29%20not%5D%5D.%0D%09%28receiver%20hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20optimized%29%0D%09%09ifTrue%3A%20%5B%5Etrue%5D.%0D%09hasNonLocal%20%3A%3D%20false.%0D%09args%20do%3A%20%5B%3Aeach%20%7C%20%0D%09%09%09hasNonLocal%20%3A%3D%20%28each%20hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20optimized%29%0D%09%09%09%09or%3A%20%5BhasNonLocal%5D%5D.%0D%09%5EhasNonLocal"));
smalltalk.bind(smalltalk.StMessageNode, unescape("isExpression"), "isExpression", function StMessageNode__isExpression(){
const self = this; return true;
}
, "testing", unescape("isExpression%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StMessageNode, unescape("isIf"), "isIf", function StMessageNode__isIf(){
const self = this; return ["ifTrue:", "ifFalse:", "ifTrue:ifFalse:", "ifFalse:ifTrue:"].includes_((self['@selector'].key()));
}
, "testing", unescape("isIf%0D%09%22todo%3A%20needs%20to%20be%20a%20set%22%0D%09%5E%23%28%20%0D%09%09ifTrue%3A%20ifFalse%3A%20ifTrue%3AifFalse%3A%20ifFalse%3AifTrue%3A%20%0D%09%09%22ifNil%3A%20ifNotNil%3A%20ifNil%3AifNotNil%3A%20ifNotNil%3AifNil%3A%22%29%20includes%3A%20selector%20key"));
smalltalk.bind(smalltalk.StMessageNode, unescape("isMessageNode"), "isMessageNode", function StMessageNode__isMessageNode(){
const self = this; return true;
}
, "testing", unescape("isMessageNode%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StMessageNode, unescape("isNilIf"), "isNilIf", function StMessageNode__isNilIf(){
const self = this; return ["ifNil:", "ifNotNil:", "ifNil:ifNotNil:", "ifNotNil:ifNil:"].includes_((self['@selector'].key()));
}
, "testing", unescape("isNilIf%0D%09%5E%23%28ifNil%3A%20ifNotNil%3A%20ifNil%3AifNotNil%3A%20ifNotNil%3AifNil%3A%29%20includes%3A%20selector%20key"));
smalltalk.bind(smalltalk.StMessageNode, unescape("isReturningIf"), "isReturningIf", function StMessageNode__isReturningIf(){
const self = this; return (self.isIf()).and_((function StMessageNode__(){
return ((self['@args'].first()).returns()).and_((function StMessageNode__(){
return ((self['@args'].size())._gt((1))).and_((function StMessageNode__(){
return (self['@args'].last()).returns();
}
));
}
));
}
));
}
, "testing", unescape("isReturningIf%0D%09%5Eself%20isIf%0D%09%09and%3A%20%5Bargs%20first%20returns%0D%09%09%09and%3A%20%5Bargs%20size%20%3E%201%0D%09%09%09%09and%3A%20%5Bargs%20last%20returns%5D%5D%5D"));
smalltalk.bind(smalltalk.StMessageNode, unescape("markNonLocalReturns"), "markNonLocalReturns", function StMessageNode__markNonLocalReturns(){
const self = this; self['@receiver'].markNonLocalReturns();
self['@args'].do_((function StMessageNode__(each){
return each.markNonLocalReturns();
}
));
return self;
}
, "testing", unescape("markNonLocalReturns%0D%09receiver%20markNonLocalReturns.%0D%09args%20do%3A%20%5B%3Aeach%20%7C%20each%20markNonLocalReturns%5D"));
smalltalk.bind(smalltalk.StMessageNode, unescape("toDoIncrement%3A"), "toDoIncrement_", function StMessageNode__toDoIncrement_(variable){
const self = this; if (((self['@receiver']._eq(variable)).and_((function StMessageNode__(){
return (self['@selector'].key())._eq(unescape("+"));
}
))).not()) {return nil};
if (((self['@args'].first()).isConstantNumber()).valueOf()) {return self['@args'].first()} else {return nil};
}
, "testing", unescape("toDoIncrement%3A%20variable%0D%09%28receiver%20%3D%20variable%20and%3A%20%5Bselector%20key%20%3D%20%23+%5D%29%20%0D%09%09ifFalse%3A%20%5B%5E%20nil%5D.%0D%09args%20first%20isConstantNumber%0D%09%09ifTrue%3A%20%5B%5E%20args%20first%5D%0D%09%09ifFalse%3A%20%5B%5E%20nil%5D"));
smalltalk.bind(smalltalk.StMessageNode, unescape("toDoLimit%3A"), "toDoLimit_", function StMessageNode__toDoLimit_(variable){
const self = this; if (((self['@receiver']._eq(variable)).and_((function StMessageNode__(){
return ((self['@selector'].key())._eq(unescape("%3C%3D"))).or_((function StMessageNode__(){
return (self['@selector'].key())._eq(unescape("%3E%3D"));
}
));
}
))).valueOf()) {return self['@args'].first()} else {return nil};
}
, "testing", unescape("toDoLimit%3A%20variable%0D%09%28receiver%20%3D%20variable%20and%3A%20%5Bselector%20key%20%3D%20%23%3C%3D%20or%3A%20%5Bselector%20key%20%3D%20%23%3E%3D%5D%5D%29%20%0D%09%09ifTrue%3A%20%5B%5E%20args%20first%5D%0D%09%09ifFalse%3A%20%5B%5E%20nil%5D"));
smalltalk.bind(smalltalk.StMessageNode, unescape("checkBlock%3Aas%3Afrom%3AmaxArgs%3A"), "checkBlock_as_from_maxArgs_", function StMessageNode__checkBlock_as_from_maxArgs_(node,nodeName,encoder,maxArgs){
const self = this; if ((node.isBlockNode()).not()) {return false};
if (((node.numberOfArguments())._lt_eq(maxArgs)).valueOf()) {return true};
return encoder.notify_(((((unescape("%3C-%20")._comma(nodeName))._comma(" of "))._comma((self['@selector'].key())))._comma(" has too many arguments")));
}
, "private", unescape("checkBlock%3A%20node%20as%3A%20nodeName%20from%3A%20encoder%20maxArgs%3A%20maxArgs%0D%09%22Answer%20true%20if%20node%20is%20a%20StBlockNode%20with%20at%20most%20maxArgs%20arguments.%0D%09This%20check%20is%20required%20in%20order%20to%20inline%20some%20special%20messages.%0D%09Notify%20some%20undue%20usage%20of%20these%20special%20messages.%22%0D%0D%09node%20isBlockNode%20ifFalse%3A%20%5B%20%5Efalse%20%5D.%0D%09node%20numberOfArguments%20%3C%3D%20maxArgs%20ifTrue%3A%20%5B%20%5Etrue%20%5D.%0D%09%5Eencoder%20notify%3A%20%27%3C-%20%27%2C%20nodeName%20%2C%20%27%20of%20%27%20%2C%20selector%20key%20%2C%20%27%20has%20too%20many%20arguments%27"));
smalltalk.bind(smalltalk.StMessageNode, unescape("ifNilReceiver"), "ifNilReceiver", function StMessageNode__ifNilReceiver(){
const self = this; return self['@receiver'];
}
, "private", unescape("ifNilReceiver%0D%0D%09%5Ereceiver"));
smalltalk.bind(smalltalk.StMessageNode, unescape("inlineReturns"), "inlineReturns", function StMessageNode__inlineReturns(){
const self = this; self['@args'].at_put_((1),((self['@args'].first()).returnLast()));
if (((self['@args'].size())._lt((2))).valueOf()) {self['@args'].add_((smalltalk.StBlockNode.returnNil()))} else {self['@args'].at_put_((2),((self['@args'].second()).returnLast()))};
return self;
}
, "private", unescape("inlineReturns%0D%09%22block%20arguments%20might%20be%20variables%20holding%20a%20block%22%0D%09args%20at%3A%201%20put%3A%20args%20first%20returnLast.%0D%09args%20size%20%3C%202%0D%09%09ifTrue%3A%20%5Bargs%20add%3A%20%28StBlockNode%20returnNil%29%5D%0D%09%09ifFalse%3A%20%5Bargs%20at%3A%202%20put%3A%20args%20second%20returnLast%5D"));
smalltalk.bind(smalltalk.StMessageNode, unescape("precedence"), "precedence", function StMessageNode__precedence(){
const self = this; return self['@precedence'];
}
, "private", unescape("precedence%0D%0D%09%5Eprecedence"));
smalltalk.bind(smalltalk.StMessageNode, unescape("argumentsInEvaluationOrder"), "argumentsInEvaluationOrder", function StMessageNode__argumentsInEvaluationOrder(){
const self = this; return self['@args'];
}
, "generate", unescape("argumentsInEvaluationOrder%0D%09%5Eargs"));
smalltalk.bind(smalltalk.StMessageNode, unescape("generateAsReceiverOn%3A"), "generateAsReceiverOn_", function StMessageNode__generateAsReceiverOn_(generator){
const self = this; generator.asReceiverWith_((function StMessageNode__(){
return self.generateInlinedValueOn_(generator);
}
));
return self;
}
, "generate", unescape("generateAsReceiverOn%3A%20generator%0D%09generator%20asReceiverWith%3A%20%5B%0D%09%09self%20generateInlinedValueOn%3A%20generator%5D%0D"));
smalltalk.bind(smalltalk.StMessageNode, unescape("generateInlinedOn%3A"), "generateInlinedOn_", function StMessageNode__generateInlinedOn_(generator){
const self = this; if ((self.canBeRewritten_(generator)).valueOf()) {generator.rewrite_(self)} else {self.generateOn_(generator)};
return self;
}
, "generate", unescape("generateInlinedOn%3A%20generator%0D%09%28self%20canBeRewritten%3A%20generator%29%0D%09%09ifTrue%3A%20%5B%09generator%20rewrite%3A%20self%5D%0D%09%09ifFalse%3A%20%5Bself%20generateOn%3A%20generator%5D"));
smalltalk.bind(smalltalk.StMessageNode, unescape("generateInlinedValueOn%3A"), "generateInlinedValueOn_", function StMessageNode__generateInlinedValueOn_(generator){
const self = this; if ((self.canBeValueRewritten_(generator)).valueOf()) {return generator.rewriteValue_(self)};
if ((self['@receiver'].isSuperPseudoVariable()).valueOf()) {self.generateSuperSendOn_(generator)} else {self['@receiver'].generateAsReceiverOn_(generator);
generator.methodCall();
generator.selector_((self['@selector'].key()));
generator.argumentList_((self.argumentsInEvaluationOrder()))};
return self;
}
, "generate", unescape("generateInlinedValueOn%3A%20generator%0D%09%28self%20canBeValueRewritten%3A%20generator%29%0D%09%09ifTrue%3A%20%5B%0D%09%09%09%5Egenerator%20rewriteValue%3A%20self%5D.%0D%09%22we%20can%27t%20inline%20optimize%20in%20this%20case%22%0D%09receiver%20isSuperPseudoVariable%0D%09%09ifTrue%3A%20%5Bself%20generateSuperSendOn%3A%20generator%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09receiver%20generateAsReceiverOn%3A%20generator.%0D%09%09%09generator%20methodCall.%0D%09%09%09generator%20selector%3A%20selector%20key.%0D%09%09%09generator%20argumentList%3A%20self%20argumentsInEvaluationOrder%5D"));
smalltalk.bind(smalltalk.StMessageNode, unescape("generateOn%3A"), "generateOn_", function StMessageNode__generateOn_(generator){
const self = this; if ((self['@receiver'].isSuperPseudoVariable()).valueOf()) {self.generateSuperSendOn_(generator)} else {if ((self.canBeRewritten_(generator)).valueOf()) {generator.rewrite_(self)} else {self['@receiver'].generateAsReceiverOn_(generator);
generator.methodCall();
generator.selector_((self['@selector'].key()));
generator.argumentList_((self.argumentsInEvaluationOrder()))}};
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09%22receiver%20is%20nil%20cascades%22%0D%09receiver%20isSuperPseudoVariable%0D%09%09ifTrue%3A%20%5Bself%20generateSuperSendOn%3A%20generator%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09%28self%20canBeRewritten%3A%20generator%29%0D%09%09%09%09ifTrue%3A%20%5B%09generator%20rewrite%3A%20self%5D%0D%09%09%09%09ifFalse%3A%20%5B%0D%09%09%09%09%09receiver%20generateAsReceiverOn%3A%20generator.%0D%09%09%09%09%09generator%20methodCall.%0D%09%09%09%09%09generator%20selector%3A%20selector%20key.%0D%09%09%09%09%09generator%20argumentList%3A%20self%20argumentsInEvaluationOrder%5D%5D"));
smalltalk.bind(smalltalk.StMessageNode, unescape("generateSuperSendOn%3A"), "generateSuperSendOn_", function StMessageNode__generateSuperSendOn_(generator){
const self = this; generator.superImplementor_argumentList_((self['@selector'].key()),(self.argumentsInEvaluationOrder()));
return self;
}
, "generate", unescape("generateSuperSendOn%3A%20generator%0D%09%22smalltalk.superImplementor%28smalltalk.StCompilerTestClass.%24klass%2C%27%24%24new%27%29.apply%28self%2C%20%5B%5D%29%22%0D%09generator%20superImplementor%3A%20selector%20key%20argumentList%3A%20self%20argumentsInEvaluationOrder"));
smalltalk.StMessageNode.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StMessageNode.$klass, unescape("defaultOptimizationMap"), "defaultOptimizationMap", function StMessageNode_class__defaultOptimizationMap(){
const self = this; return [[(0), [["class", unescape("%25receiver%25.%24klass")], ["isNil", unescape("%28nil.isNil_%28%25receiver%25%29%29")], ["notNil", unescape("%28nil.isNil_%28%25receiver%25%29%3D%3D%3Dfalse%29")], ["whileTrue", "receiverIsBlockNoArguments:", unescape("%28function%28%29%7Bwhile%28%25receiver%25%28%29%29%7B%7D%3Breturn%20nil%7D%29%28%29")], ["whileFalse", "receiverIsBlockNoArguments:", unescape("%28function%28%29%7Bwhile%28%21%21%25receiver%25%28%29%29%7B%7D%3Breturn%20nil%7D%29%28%29")], ["basicValueOrNil", unescape("%28function%28%29%7Bvar%20%241%24%3Breturn%20%28nil.isNil_%28%241%24%20%3D%20%25receiver%25%29%29%20%3F%20nil%20%3A%20%241%24%3B%7D%29%28%29")]]], [(1), [["whileTrue:", "allBlockNoArguments:", unescape("%28function%28%29%7Bwhile%28%25receiver%25%28%29%29%7B%25arg1%25%28%29%7D%3Breturn%20nil%7D%29%28%29")], ["whileFalse:", "allBlockNoArguments:", unescape("%28function%28%29%7Bwhile%28%21%21%25receiver%25%28%29%29%7B%25arg1%25%28%29%7D%3Breturn%20nil%7D%29%28%29")], ["ifNil:", "hasBlockArguments:", unescape("%28function%28%29%7Bvar%20%241%24%3Breturn%20%28nil.isNil_%28%241%24%20%3D%20%25receiver%25%29%29%20%3F%20%25arg1%25%28%29%20%3A%20%241%24%3B%7D%29%28%29")], ["ifNotNil:", "hasBlockArguments:", unescape("%28function%28%29%7Bvar%20%241%24%3Breturn%20%28nil.isNil_%28%241%24%20%3D%20%25receiver%25%29%3D%3D%3Dfalse%29%20%3F%20%25arg1%25%28%29%20%3A%20%241%24%3B%7D%29%28%29")], [unescape("%3D%3D"), unescape("%28nil.is_eqeq_%28%25receiver%25%2C%25arg1%25%29%29")], [unescape("%3D%3D%3D"), unescape("%28%25receiver%25%20%3D%3D%3D%20%25arg1%25%29")], [unescape("%7C"), unescape("%7C"), unescape("%28%25receiver%25%20%7C%7C%20%25arg1%25%29")], ["basicAt:", unescape("%28%28function%28%29%7Bvar%20%241%24%3D%25receiver%25%5B%25arg1%25%5D%3Bif%28nil.isNil_%28%241%24%29%29return%20nil%3Breturn%20%241%24%3B%7D%29%28%29%29")], ["ifUndefined:", "hasBlockNoArguments:", unescape("%28function%28%29%7Bvar%20%241%24%20%3D%20%25receiver%25%3Bif%20%28typeof%20%28%241%24%29%20%3D%3D%20%22undefined%22%29%20return%20%25arg1%25%28%29%3B%20return%20%241%24%3B%7D%29%28%29")], ["timesRepeat:", "hasBlockNoArguments:", unescape("%28function%28%29%7Bfor%28var%20%241%24%3D%25receiver%25%3B%241%24%3E0%3B%241%24--%29%7B%25arg1%25%28%29%7D%3Breturn%20nil%7D%29%28%29")], ["isKindOf:", unescape("smalltalk.is_kindOf_%28%25receiver%25%2C%28%25arg1%25%29%29")], ["respondsTo:", unescape("smalltalk.responds_to_%28%25receiver%25%2C%28%25arg1%25%29%29")]]], [(2), [["ifNil:ifNotNil:", "hasBlockNoArguments:", unescape("%28nil.isNil_%28%25receiver%25%29%29%20%3F%20%25arg1%25%28%29%20%3A%20%25arg2%25%28%29")], ["ifNotNil:ifNil:", "hasBlockNoArguments:", unescape("%28nil.isNil_%28%25receiver%25%29%3D%3D%3Dfalse%29%20%3F%20%25arg1%25%28%29%20%3A%20%25arg2%25%28%29")], ["basicAt:ifAbsent:", unescape("%28%28function%28%29%7Bvar%20%241%24%3D%25receiver%25%5B%25arg1%25%5D%3Bif%28nil.isNil_%28%241%24%29%29return%20%28%25arg2%25.value%28%29%29%3Breturn%20%241%24%3B%7D%29%28%29%29")], ["basicAt:put:", unescape("%28%25receiver%25%5B%25arg1%25%5D%3D%28%25arg2%25%29%29")]]]];
}
, "class initialization", unescape("defaultOptimizationMap%0D%09%22compiler%20optimization%20map%22%0D%0D%09%5E%23%28%0D%09%09%23%28%200%20%23%28%20%22selectors%20without%20arguments%22%0D%09%09%09%23%28%20%23class%09%27%25receiver%25.%24klass%27%20%29%0D%09%09%09%23%28%20%23isNil%09%27%28nil.isNil_%28%25receiver%25%29%29%27%20%29%0D%09%09%09%23%28%20%23notNil%09%27%28nil.isNil_%28%25receiver%25%29%3D%3D%3Dfalse%29%27%20%29%0D%09%09%09%23%28%20%23whileTrue%20%23receiverIsBlockNoArguments%3A%20%27%28function%28%29%7Bwhile%28%25receiver%25%28%29%29%7B%7D%3Breturn%20nil%7D%29%28%29%27%20%29%0D%09%09%09%23%28%20%23whileFalse%20%23receiverIsBlockNoArguments%3A%20%27%28function%28%29%7Bwhile%28%21%21%25receiver%25%28%29%29%7B%7D%3Breturn%20nil%7D%29%28%29%27%20%29%0D%09%09%09%23%28%20%23basicValueOrNil%20%27%28function%28%29%7Bvar%20%241%24%3Breturn%20%28nil.isNil_%28%241%24%20%3D%20%25receiver%25%29%29%20%3F%20nil%20%3A%20%241%24%3B%7D%29%28%29%27%20%29%0D%09%09%29%20%29%0D%09%09%23%28%201%20%23%28%20%22one%20argument%20selectors%20and%20operations%22%0D%09%09%09%23%28%20%23whileTrue%3A%20%23allBlockNoArguments%3A%20%27%28function%28%29%7Bwhile%28%25receiver%25%28%29%29%7B%25arg1%25%28%29%7D%3Breturn%20nil%7D%29%28%29%27%20%29%0D%09%09%09%23%28%20%23whileFalse%3A%20%23allBlockNoArguments%3A%20%27%28function%28%29%7Bwhile%28%21%21%25receiver%25%28%29%29%7B%25arg1%25%28%29%7D%3Breturn%20nil%7D%29%28%29%27%20%29%0D%09%09%09%23%28%20%23ifNil%3A%20%23hasBlockArguments%3A%20%27%28function%28%29%7Bvar%20%241%24%3Breturn%20%28nil.isNil_%28%241%24%20%3D%20%25receiver%25%29%29%20%3F%20%25arg1%25%28%29%20%3A%20%241%24%3B%7D%29%28%29%27%20%29%0D%09%09%09%23%28%20%23ifNotNil%3A%20%23hasBlockArguments%3A%20%27%28function%28%29%7Bvar%20%241%24%3Breturn%20%28nil.isNil_%28%241%24%20%3D%20%25receiver%25%29%3D%3D%3Dfalse%29%20%3F%20%25arg1%25%28%29%20%3A%20%241%24%3B%7D%29%28%29%27%20%29%0D%09%09%09%23%28%20%23%3D%3D%09%27%28nil.is_eqeq_%28%25receiver%25%2C%25arg1%25%29%29%27%20%29%0D%09%09%09%23%28%20%23%3D%3D%3D%09%27%28%25receiver%25%20%3D%3D%3D%20%25arg1%25%29%27%20%29%0D%09%09%09%23%28%20%23%7C%7C%09%27%28%25receiver%25%20%7C%7C%20%25arg1%25%29%27%20%29%0D%09%09%09%23%28%20%23basicAt%3A%09%27%28%28function%28%29%7Bvar%20%241%24%3D%25receiver%25%5B%25arg1%25%5D%3Bif%28nil.isNil_%28%241%24%29%29return%20nil%3Breturn%20%241%24%3B%7D%29%28%29%29%27%20%29%0D%09%09%09%23%28%20%23ifUndefined%3A%20%23hasBlockNoArguments%3A%20%27%28function%28%29%7Bvar%20%241%24%20%3D%20%25receiver%25%3Bif%20%28typeof%20%28%241%24%29%20%3D%3D%20%22undefined%22%29%20return%20%25arg1%25%28%29%3B%20return%20%241%24%3B%7D%29%28%29%27%20%29%0D%09%09%09%23%28%20%23timesRepeat%3A%20%23hasBlockNoArguments%3A%20%27%28function%28%29%7Bfor%28var%20%241%24%3D%25receiver%25%3B%241%24%3E0%3B%241%24--%29%7B%25arg1%25%28%29%7D%3Breturn%20nil%7D%29%28%29%27%20%29%0D%09%09%09%23%28%20%23isKindOf%3A%20%27smalltalk.is_kindOf_%28%25receiver%25%2C%28%25arg1%25%29%29%27%20%29%0D%09%09%09%23%28%20%23respondsTo%3A%20%27smalltalk.responds_to_%28%25receiver%25%2C%28%25arg1%25%29%29%27%20%29%0D%09%09%29%20%29%0D%09%09%23%28%202%20%23%28%20%22two%20argument%20messages%20and%20operations%22%0D%09%09%09%23%28%20%23ifNil%3AifNotNil%3A%20%23hasBlockNoArguments%3A%20%27%28nil.isNil_%28%25receiver%25%29%29%20%3F%20%25arg1%25%28%29%20%3A%20%25arg2%25%28%29%27%20%29%0D%09%09%09%23%28%20%23ifNotNil%3AifNil%3A%20%23hasBlockNoArguments%3A%20%27%28nil.isNil_%28%25receiver%25%29%3D%3D%3Dfalse%29%20%3F%20%25arg1%25%28%29%20%3A%20%25arg2%25%28%29%27%20%29%0D%09%09%09%23%28%20%23basicAt%3AifAbsent%3A%20%27%28%28function%28%29%7Bvar%20%241%24%3D%25receiver%25%5B%25arg1%25%5D%3Bif%28nil.isNil_%28%241%24%29%29return%20%28%25arg2%25.value%28%29%29%3Breturn%20%241%24%3B%7D%29%28%29%29%27%20%29%0D%09%09%09%23%28%20%23basicAt%3Aput%3A%20%27%28%25receiver%25%5B%25arg1%25%5D%3D%28%25arg2%25%29%29%27%20%29%0D%09%09%29%20%29%0D%29"));
smalltalk.bind(smalltalk.StMessageNode.$klass, unescape("initialize"), "initialize", function StMessageNode_class__initialize(){
const self = this; self;
return self;
}
, "class initialization", unescape("initialize%0D%09%22StMessageNode%20initialize%22%0D"));
smalltalk.addClass("StMethodNode", smalltalk.StParseNode, ['selectorOrFalse', 'precedence', 'args', 'block', 'primitive', 'encoder', 'temporaries', 'sourceText', 'locationCounter', 'localsPool'], 'Compiler-JS');
smalltalk.StMethodNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StMethodNode, unescape("block"), "block", function StMethodNode__block(){
const self = this; return self['@block'];
}
, "initialize-release", unescape("block%0D%09%5E%20block"));
smalltalk.bind(smalltalk.StMethodNode, unescape("selector%3Aarguments%3Aprecedence%3Atemporaries%3Ablock%3Aencoder%3Aprimitive%3A"), "selector_arguments_precedence_temporaries_block_encoder_primitive_", function StMethodNode__selector_arguments_precedence_temporaries_block_encoder_primitive_(selOrFalse,argList,p,temps,blk,anEncoder,prim){
const self = this; self['@encoder']=anEncoder;
self['@selectorOrFalse']=selOrFalse;
self['@precedence']=p;
self['@args']=argList;
self['@temporaries']=temps;
self['@block']=blk;
self['@primitive']=prim;
return self;
}
, "initialize-release", unescape("selector%3A%20selOrFalse%20arguments%3A%20argList%20precedence%3A%20p%20temporaries%3A%20temps%20block%3A%20blk%20encoder%3A%20anEncoder%20primitive%3A%20prim%0D%09%22Initialize%20the%20receiver%20with%20respect%20to%20the%20arguments%20given.%22%0D%0D%09encoder%20%3A%3D%20anEncoder.%0D%09selectorOrFalse%20%3A%3D%20selOrFalse.%0D%09precedence%20%3A%3D%20p.%0D%09args%20%3A%3D%20argList.%0D%09temporaries%20%3A%3D%20temps.%0D%09block%20%3A%3D%20blk.%0D%09primitive%20%3A%3D%20prim"));
smalltalk.bind(smalltalk.StMethodNode, unescape("sourceText%3A"), "sourceText_", function StMethodNode__sourceText_(stringOrText){
const self = this; self['@sourceText']=stringOrText;
return self;
}
, "initialize-release", unescape("sourceText%3A%20stringOrText%0D%0D%09sourceText%20%3A%3D%20stringOrText"));
smalltalk.bind(smalltalk.StMethodNode, unescape("arguments"), "arguments", function StMethodNode__arguments(){
const self = this; return self['@args'];
}
, "accessing", unescape("arguments%0D%09%22For%20transformations%20etc%2C%20not%20used%20in%20compilation%22%0D%09%5Eargs"));
smalltalk.bind(smalltalk.StMethodNode, unescape("arguments%3A"), "arguments_", function StMethodNode__arguments_(aSequence){
const self = this; self['@args']=aSequence;
return self;
}
, "accessing", unescape("arguments%3A%20aSequence%0D%09%22For%20transformations%20etc%2C%20not%20used%20in%20compilation%22%0D%09args%20%3A%3D%20aSequence"));
smalltalk.bind(smalltalk.StMethodNode, unescape("body"), "body", function StMethodNode__body(){
const self = this; return self['@block'];
}
, "accessing", unescape("body%0D%09%5Eblock"));
smalltalk.bind(smalltalk.StMethodNode, unescape("doitStatement"), "doitStatement", function StMethodNode__doitStatement(){
var statements = nil;
var returnNode = nil;
const self = this; var $early={name:"stReturn"};
try {
if (((nil.is_eqeq_(self.selector(),"doIt"))).not()) {return nil};
(function(){var $1$; $1$ = self['@block']; if (nil.isNil_($1$)) { return (function StMethodNode__(){
$early.result=nil; throw ($early);
}
)() } else { return $1$; }})();
statements=self['@block'].statements();
if (((nil.is_eqeq_(statements.size(),(1)))).not()) {return nil};
returnNode=statements.first();
return returnNode.expr();
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "accessing", unescape("doitStatement%0D%09%22Assume%20this%20is%20a%20doit%2C%20find%20the%20the%20first%20statement%20and%20return%20the%20message%20node%22%0D%09%7C%20statements%20returnNode%20%7C%0D%09self%20selector%20%3D%3D%20%23doIt%20ifFalse%3A%20%5B%5Enil%5D.%0D%09block%20ifNil%3A%20%5B%5Enil%5D.%0D%09statements%20%3A%3D%20block%20statements.%0D%09statements%20size%20%3D%3D%201%20ifFalse%3A%20%5B%5Enil%5D.%0D%09returnNode%20%3A%3D%20statements%20first.%0D%09%5EreturnNode%20expr"));
smalltalk.bind(smalltalk.StMethodNode, unescape("methodClass"), "methodClass", function StMethodNode__methodClass(){
const self = this; return self['@encoder'].classEncoding();
}
, "accessing", unescape("methodClass%0D%0D%09%5E%20encoder%20classEncoding"));
smalltalk.bind(smalltalk.StMethodNode, unescape("selector"), "selector", function StMethodNode__selector(){
const self = this; if ((self['@selectorOrFalse'].isSymbol()).valueOf()) {return self['@selectorOrFalse']};
return self['@selectorOrFalse'].key();
}
, "accessing", unescape("selector%20%0D%09%22Answer%20the%20message%20selector%20for%20the%20method%20represented%20by%20the%20receiver.%22%0D%0D%09%28selectorOrFalse%20isSymbol%29%0D%09%09ifTrue%3A%20%5B%5EselectorOrFalse%5D.%0D%09%5EselectorOrFalse%20key"));
smalltalk.bind(smalltalk.StMethodNode, unescape("selector%3A"), "selector_", function StMethodNode__selector_(symbol){
const self = this; self['@selectorOrFalse']=symbol;
return self;
}
, "accessing", unescape("selector%3A%20symbol%0D%0D%09selectorOrFalse%20%3A%3D%20symbol"));
smalltalk.bind(smalltalk.StMethodNode, unescape("selectorNode"), "selectorNode", function StMethodNode__selectorNode(){
const self = this; if (((smalltalk.is_kindOf_(self['@selectorOrFalse'],smalltalk.StSelectorNode))).valueOf()) {return self['@selectorOrFalse']} else {return (smalltalk.StSelectorNode.$$new()).key_(self['@selectorOrFalse'])};
}
, "accessing", unescape("selectorNode%0D%09%22Answer%20a%20SelectorNode%20for%20the%20message%20selector%20of%20the%20method%20represented%20by%20the%20receiver.%22%0D%0D%09%5E%28selectorOrFalse%20isKindOf%3A%20StSelectorNode%29%0D%09%09ifTrue%3A%20%5BselectorOrFalse%5D%0D%09%09ifFalse%3A%20%5BStSelectorNode%20new%20key%3A%20selectorOrFalse%5D"));
smalltalk.bind(smalltalk.StMethodNode, unescape("sourceText"), "sourceText", function StMethodNode__sourceText(){
const self = this; return (function(){var $1$; $1$ = self['@sourceText']; if (nil.isNil_($1$)) { return self.printString() } else { return $1$; }})();
}
, "accessing", unescape("sourceText%0D%0D%09%5E%20sourceText%20ifNil%3A%20%5Bself%20printString%5D"));
smalltalk.bind(smalltalk.StMethodNode, unescape("temporaries"), "temporaries", function StMethodNode__temporaries(){
const self = this; return self['@temporaries'];
}
, "accessing", unescape("temporaries%0D%09%22For%20transformations%20etc%2C%20not%20used%20in%20compilation%22%0D%09%5Etemporaries"));
smalltalk.bind(smalltalk.StMethodNode, unescape("temporaries%3A"), "temporaries_", function StMethodNode__temporaries_(aSequence){
const self = this; self['@temporaries']=aSequence;
return self;
}
, "accessing", unescape("temporaries%3A%20aSequence%0D%09%22For%20transformations%20etc%2C%20not%20used%20in%20compilation%22%0D%09temporaries%20%3A%3D%20aSequence"));
smalltalk.bind(smalltalk.StMethodNode, unescape("decompileString"), "decompileString", function StMethodNode__decompileString(){
const self = this; return self.fullPrintString();
}
, "converting", unescape("decompileString%20%0D%09%22Answer%20a%20string%20description%20of%20the%20parse%20tree%20whose%20root%20is%20the%20receiver.%22%0D%0D%09%5Eself%20fullPrintString%0D"));
smalltalk.bind(smalltalk.StMethodNode, unescape("decompileText"), "decompileText", function StMethodNode__decompileText(){
const self = this; return self.asColorizedSmalltalk80Text();
}
, "converting", unescape("decompileText%20%0D%09%22Answer%20a%20string%20description%20of%20the%20parse%20tree%20whose%20root%20is%20the%20receiver.%22%0D%0D%09%5Eself%20asColorizedSmalltalk80Text"));
smalltalk.bind(smalltalk.StMethodNode, unescape("ensureNotQuick"), "ensureNotQuick", function StMethodNode__ensureNotQuick(){
const self = this; return self['@block'].ensureNotQuick_(self['@encoder']);
}
, "converting", unescape("ensureNotQuick%0D%09%22If%20the%20receiver%20is%20quick%20%28can%20be%20generated%20as%20a%20Quick%20method%2C%20%5Eself%2C%5Einst%20var%20or%20%5E%20special%20constant%29%0D%09%20make%20it%20not%20so.%20%20This%20is%20used%20to%20create%20break-pointable%20versions%20of%20quick%20methods.%20%20%20Answer%20if%20the%0D%09%20receiver%20was%20quick.%22%0D%09%5Eblock%20ensureNotQuick%3A%20encoder"));
smalltalk.bind(smalltalk.StMethodNode, unescape("rawSourceRanges"), "rawSourceRanges", function StMethodNode__rawSourceRanges(){
const self = this; return self.rawSourceRangesAndMethodDo_((function StMethodNode__(rawSourceRanges,method){
return rawSourceRanges;
}
));
}
, "source mapping", unescape("rawSourceRanges%0D%0D%09%5Eself%20rawSourceRangesAndMethodDo%3A%20%5B%3ArawSourceRanges%20%3Amethod%7C%20rawSourceRanges%5D"));
smalltalk.bind(smalltalk.StMethodNode, unescape("rawSourceRangesAndMethodDo%3A"), "rawSourceRangesAndMethodDo_", function StMethodNode__rawSourceRangesAndMethodDo_(aBinaryBlock){
var methNode = nil;
var method = nil;
const self = this; methNode=(function StMethodNode__($1$){
$1$.encoderClass_((self['@encoder'].$klass));
return $1$.parse_class_(((nil.isNil_(self['@sourceText']) ? self.decompileString() : self['@sourceText'])),(self.methodClass()))}
)((self['@encoder'].classEncoding()).newParser());
method=methNode.generate();
return aBinaryBlock.value_value_(((methNode.encoder()).rawSourceRanges()),method);
}
, "source mapping", unescape("rawSourceRangesAndMethodDo%3A%20aBinaryBlock%0D%09%22Evaluate%20aBinaryBlock%20with%20the%20rawSourceRanges%20and%20method%20generated%20from%20the%20receiver.%22%0D%0D%09%7C%20methNode%20method%20%7C%0D%09methNode%20%3A%3D%20encoder%20classEncoding%20newParser%0D%09%09%09%09%09encoderClass%3A%20encoder%20class%3B%0D%09%09%09%09%09parse%3A%20%28sourceText%20%22If%20no%20source%2C%20use%20decompile%20string%20as%20source%20to%20map%20from%22%0D%09%09%09%09%09%09%09ifNil%3A%20%5Bself%20decompileString%5D%0D%09%09%09%09%09%09%09ifNotNil%3A%20%5BsourceText%5D%29%0D%09%09%09%09%09class%3A%20self%20methodClass.%0D%09method%20%3A%3D%20methNode%20generate.%20%20%22set%20bytecodes%20to%20map%20to%22%0D%09%5EaBinaryBlock%0D%09%09value%3A%20methNode%20encoder%20rawSourceRanges%0D%09%09value%3A%20method"));
smalltalk.bind(smalltalk.StMethodNode, unescape("generateOn%3A"), "generateOn_", function StMethodNode__generateOn_(generator){
const self = this; (function StMethodNode__(){
generator.methodClass_selector_((self.methodClass()),(self.selector()));
generator.argumentList_((self.arguments()));
generator.startBlock();
generator.generateTemporaries_(self['@temporaries']);
(function(){var $1$; $1$ = self['@primitive']; if (!nil.isNil_($1$)) { return self['@primitive'].generateOn_(generator) } else { return $1$; }})();
generator.defineSelf();
self['@block'].generateMethodBody_(generator);
return generator.endBlock();
}
).on_do_(smalltalk.StCompileException,(function StMethodNode__(ex){
return smalltalk.StCompileException.signal_((ex.messageText()));
}
));
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09%5B%0D%09generator%20methodClass%3A%20self%20methodClass%20selector%3A%20self%20selector.%0D%09generator%20argumentList%3A%20self%20arguments.%0D%0D%09generator%20startBlock.%0D%09generator%20generateTemporaries%3A%20temporaries.%0D%09primitive%20ifNotNil%3A%20%5Bprimitive%20generateOn%3A%20generator%5D.%0D%09generator%20defineSelf.%0D%09block%20generateMethodBody%3A%20generator.%0D%09generator%20endBlock%5D%0D%09%09on%3A%20StCompileException%0D%09%09do%3A%20%5B%3Aex%20%7C%20StCompileException%20signal%3A%20ex%20messageText%5D"));
smalltalk.addClass("StPragma", smalltalk.Object, ['method', 'keyword', 'args'], 'Compiler-JS');
smalltalk.StPragma.$classVariableNames=("");
smalltalk.bind(smalltalk.StPragma, unescape("method"), "method", function StPragma__method(){
const self = this; return self['@method'];
}
, "accessing-method", unescape("method%0D%09%22Answer%20the%20compiled-method%20containing%20the%20pragma.%22%0D%09%0D%09%5E%20method"));
smalltalk.bind(smalltalk.StPragma, unescape("methodClass"), "methodClass", function StPragma__methodClass(){
const self = this; return self['@method'].methodClass();
}
, "accessing-method", unescape("methodClass%0D%09%22Answer%20the%20class%20of%20the%20method%20containing%20the%20pragma.%22%0D%09%0D%09%5E%20method%20methodClass"));
smalltalk.bind(smalltalk.StPragma, unescape("selector"), "selector", function StPragma__selector(){
const self = this; return self['@method'].selector();
}
, "accessing-method", unescape("selector%0D%09%22Answer%20the%20selector%20of%20the%20method%20containing%20the%20pragma.%0D%09%20Do%20not%20confuse%20this%20with%20the%20selector%20of%20the%20pragma%27s%20message%20pattern.%22%0D%09%0D%09%5Emethod%20selector"));
smalltalk.bind(smalltalk.StPragma, unescape("setArguments%3A"), "setArguments_", function StPragma__setArguments_(anArray){
const self = this; self['@args']=anArray;
return self;
}
, "initialization", unescape("setArguments%3A%20anArray%0D%09args%20%3A%3D%20anArray"));
smalltalk.bind(smalltalk.StPragma, unescape("setKeyword%3A"), "setKeyword_", function StPragma__setKeyword_(aSymbol){
const self = this; self['@keyword']=aSymbol;
return self;
}
, "initialization", unescape("setKeyword%3A%20aSymbol%0D%09keyword%20%3A%3D%20aSymbol"));
smalltalk.bind(smalltalk.StPragma, unescape("setMethod%3A"), "setMethod_", function StPragma__setMethod_(aCompiledMethod){
const self = this; self['@method']=aCompiledMethod;
return self;
}
, "initialization", unescape("setMethod%3A%20aCompiledMethod%0D%09method%20%3A%3D%20aCompiledMethod"));
smalltalk.bind(smalltalk.StPragma, unescape("hasLiteral%3A"), "hasLiteral_", function StPragma__hasLiteral_(aLiteral){
const self = this; return ((nil.is_eqeq_(self['@keyword'],aLiteral))).or_((function StPragma__(){
return (self['@args'].hasLiteral_(aLiteral)).or_((function StPragma__(){
return ((nil.is_eqeq_(self['@keyword'],"hasLiteralTest:"))).and_((function StPragma__(){
return ((self.methodClass()).theNonMetaClass()).perform_with_((self['@args'].first()),aLiteral);
}
));
}
));
}
));
}
, "testing", unescape("hasLiteral%3A%20aLiteral%0D%09%5Ekeyword%20%3D%3D%20aLiteral%20%0D%09%20%20%20or%3A%20%5B%28args%20hasLiteral%3A%20aLiteral%29%0D%09%09or%3A%20%5Bkeyword%20%3D%3D%20%23hasLiteralTest%3A%20and%3A%20%5B%0D%09%09%09self%20methodClass%20theNonMetaClass%20perform%3A%20args%20first%20with%3A%20aLiteral%5D%5D%5D"));
smalltalk.bind(smalltalk.StPragma, unescape("hasLiteralSuchThat%3A"), "hasLiteralSuchThat_", function StPragma__hasLiteralSuchThat_(aBlock){
const self = this; return (aBlock.value_(self['@keyword'])).or_((function StPragma__(){
return self['@args'].hasLiteralSuchThat_(aBlock);
}
));
}
, "testing", unescape("hasLiteralSuchThat%3A%20aBlock%0D%09%22Answer%20true%20if%20litBlock%20returns%20true%20for%20any%20literal%20in%20the%20receiver%2C%20even%20if%20embedded%20in%20further%20array%20structure.%0D%09%20This%20method%20is%20only%20intended%20for%20private%20use%20by%20CompiledMethod%20hasLiteralSuchThat%3A%22%0D%09%5E%28aBlock%20value%3A%20keyword%29%0D%09%20%20%20or%3A%20%5Bargs%20hasLiteralSuchThat%3A%20aBlock%5D"));
smalltalk.bind(smalltalk.StPragma, unescape("%3D"), "_eq", function StPragma___eq(anObject){
const self = this; return ((nil.is_eqeq_(self.$klass,anObject.$klass))).and_((function StPragma__(){
return ((nil.is_eqeq_(self['@keyword'],anObject.keyword()))).and_((function StPragma__(){
return self['@args']._eq((anObject.arguments()));
}
));
}
));
}
, "comparing", unescape("%3D%20anObject%20%0D%09%5Eself%20class%20%3D%3D%20anObject%20class%0D%09%20%20and%3A%20%5Bkeyword%20%3D%3D%20anObject%20keyword%0D%09%20%20and%3A%20%5Bargs%20%3D%20anObject%20arguments%5D%5D"));
smalltalk.bind(smalltalk.StPragma, unescape("analogousCodeTo%3A"), "analogousCodeTo_", function StPragma__analogousCodeTo_(anObject){
const self = this; return ((nil.is_eqeq_(self.$klass,anObject.$klass))).and_((function StPragma__(){
return ((nil.is_eqeq_(self['@keyword'],anObject.keyword()))).and_((function StPragma__(){
return self['@args']._eq((anObject.arguments()));
}
));
}
));
}
, "comparing", unescape("analogousCodeTo%3A%20anObject%20%0D%09%5Eself%20class%20%3D%3D%20anObject%20class%0D%09%20%20and%3A%20%5Bkeyword%20%3D%3D%20anObject%20keyword%0D%09%20%20and%3A%20%5Bargs%20%3D%20anObject%20arguments%5D%5D"));
smalltalk.bind(smalltalk.StPragma, unescape("hash"), "hash", function StPragma__hash(){
const self = this; return (self['@keyword'].hash())._plus((self['@args'].hash()));
}
, "comparing", unescape("hash%0D%09%5Ekeyword%20hash%20+%20args%20hash"));
smalltalk.bind(smalltalk.StPragma, unescape("argumentAt%3A"), "argumentAt_", function StPragma__argumentAt_(anInteger){
const self = this; return (self.arguments()).at_(anInteger);
}
, "accessing-pragma", unescape("argumentAt%3A%20anInteger%0D%09%22Answer%20one%20of%20the%20arguments%20of%20the%20pragma.%22%0D%09%0D%09%5E%20self%20arguments%20at%3A%20anInteger."));
smalltalk.bind(smalltalk.StPragma, unescape("arguments"), "arguments", function StPragma__arguments(){
const self = this; return self['@args'];
}
, "accessing-pragma", unescape("arguments%0D%09%22Answer%20the%20arguments%20of%20the%20receiving%20pragma.%20For%20a%20pragma%20defined%20as%20%3Ckey1%3A%20val1%20key2%3A%20val2%3E%20this%20will%20answer%20%23%28val1%20val2%29.%22%0D%09%0D%09%5E%20args"));
smalltalk.bind(smalltalk.StPragma, unescape("key"), "key", function StPragma__key(){
const self = this; return self['@keyword'];
}
, "accessing-pragma", unescape("key%0D%09%22Answer%20the%20keyword%20of%20the%20pragma%20%28the%20selector%20of%20its%20message%20pattern%29.%0D%09%20This%20accessor%20provides%20polymorphism%20with%20Associations%20used%20for%20properties.%22%0D%09%5Ekeyword"));
smalltalk.bind(smalltalk.StPragma, unescape("keyword"), "keyword", function StPragma__keyword(){
const self = this; return self['@keyword'];
}
, "accessing-pragma", unescape("keyword%0D%09%22Answer%20the%20keyword%20of%20the%20pragma%20%28the%20selector%20of%20its%20message%20pattern%29.%0D%09%20For%20a%20pragma%20defined%20as%20%3Ckey1%3A%20val1%20key2%3A%20val2%3E%20this%20will%20answer%20%23key1%3Akey2%3A.%22%0D%09%0D%09%5E%20keyword"));
smalltalk.bind(smalltalk.StPragma, unescape("message"), "message", function StPragma__message(){
const self = this; return smalltalk.Message.selector_arguments_((self.keyword()),(self.arguments()));
}
, "accessing-pragma", unescape("message%0D%09%22Answer%20the%20message%20of%20the%20receiving%20pragma.%22%0D%09%0D%09%5E%20Message%20selector%3A%20self%20keyword%20arguments%3A%20self%20arguments.%20"));
smalltalk.bind(smalltalk.StPragma, unescape("numArgs"), "numArgs", function StPragma__numArgs(){
const self = this; return (self.arguments()).size();
}
, "accessing-pragma", unescape("numArgs%0D%09%22Answer%20the%20number%20of%20arguments%20in%20the%20pragma.%22%0D%0D%09%5E%20self%20arguments%20size."));
smalltalk.StPragma.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StPragma.$klass, unescape("keyword%3Aarguments%3A"), "keyword_arguments_", function StPragma_class__keyword_arguments_(aSymbol,anArray){
const self = this; return (function StPragma_class__($1$){
$1$.setKeyword_(aSymbol);
$1$.setArguments_(anArray);
return $1$.yourself()}
)(self.$$new());
}
, "private", unescape("keyword%3A%20aSymbol%20arguments%3A%20anArray%0D%09%5E%20self%20new%0D%09%09setKeyword%3A%20aSymbol%3B%0D%09%09setArguments%3A%20anArray%3B%0D%09%09yourself."));
smalltalk.bind(smalltalk.StPragma.$klass, unescape("withPragmasIn%3Ado%3A"), "withPragmasIn_do_", function StPragma_class__withPragmasIn_do_(aClass,aBlock){
const self = this; aClass.selectorsAndMethodsDo_((function StPragma_class__(selector,method){
return (method.pragmas()).do_(aBlock);
}
));
return self;
}
, "private", unescape("withPragmasIn%3A%20aClass%20do%3A%20aBlock%0D%09aClass%20selectorsAndMethodsDo%3A%20%5B%20%3Aselector%20%3Amethod%20%7C%20method%20pragmas%20do%3A%20aBlock%20%5D."));
smalltalk.bind(smalltalk.StPragma.$klass, unescape("withStPragmasIn%3Ado%3A"), "withStPragmasIn_do_", function StPragma_class__withStPragmasIn_do_(aClass,aBlock){
const self = this; aClass.selectorsAndMethodsDo_((function StPragma_class__(selector,method){
return (method.pragmas()).do_(aBlock);
}
));
return self;
}
, "private", unescape("withStPragmasIn%3A%20aClass%20do%3A%20aBlock%0D%09aClass%20selectorsAndMethodsDo%3A%20%5B%20%3Aselector%20%3Amethod%20%7C%20method%20pragmas%20do%3A%20aBlock%20%5D."));
smalltalk.bind(smalltalk.StPragma.$klass, unescape("for%3Aselector%3Aarguments%3A"), "for_selector_arguments_", function StPragma_class__for_selector_arguments_(aMethod,aSelector,anArray){
const self = this; return (function StPragma_class__($1$){
$1$.setMethod_(aMethod);
$1$.setKeyword_(aSelector);
$1$.setArguments_(anArray);
return $1$.yourself()}
)(self.$$new());
}
, "instance creation", unescape("for%3A%20aMethod%20selector%3A%20aSelector%20arguments%3A%20anArray%0D%09%5Eself%20new%0D%09%09setMethod%3A%20aMethod%3B%0D%09%09setKeyword%3A%20aSelector%3B%0D%09%09setArguments%3A%20anArray%3B%0D%09%09yourself"));
smalltalk.addClass("StPrimitiveNode", smalltalk.StParseNode, ['module', 'primitive'], 'Compiler-JS');
smalltalk.StPrimitiveNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StPrimitiveNode, unescape("generateOn%3A"), "generateOn_", function StPrimitiveNode__generateOn_(generator){
const self = this; generator.generatePrimitiveDirect_module_(self['@primitive'],self['@module']);
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09generator%20generatePrimitiveDirect%3A%20primitive%20module%3A%20module"));
smalltalk.bind(smalltalk.StPrimitiveNode, unescape("module%3Aprimitive%3A"), "module_primitive_", function StPrimitiveNode__module_primitive_(moduleName,primitiveName){
const self = this; self['@module']=moduleName;
self['@primitive']=primitiveName;
return self;
}
, "initialize-release", unescape("module%3A%20moduleName%20primitive%3A%20primitiveName%0D%09module%20%3A%3D%20moduleName.%0D%09primitive%20%3A%3D%20primitiveName"));
smalltalk.addClass("StReturnNode", smalltalk.StParseNode, ['expr', 'nonLocal'], 'Compiler-JS');
smalltalk.StReturnNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StReturnNode, unescape("asReturnNode"), "asReturnNode", function StReturnNode__asReturnNode(){
const self = this; self;
return self;
}
, "converting", "asReturnNode");
smalltalk.bind(smalltalk.StReturnNode, unescape("expr%3A"), "expr_", function StReturnNode__expr_(e){
const self = this; self['@nonLocal']=false;
self['@expr']=e;
return self;
}
, "initialize-release", unescape("expr%3A%20e%0D%09nonLocal%20%3A%3D%20false.%0D%09expr%20%3A%3D%20e"));
smalltalk.bind(smalltalk.StReturnNode, unescape("generateBlockBodyOn%3A"), "generateBlockBodyOn_", function StReturnNode__generateBlockBodyOn_(generator){
const self = this; if ((self['@nonLocal']).valueOf()) {generator.nonLocalReturnWith_((function StReturnNode__(){
return self['@expr'].generateBlockBodyOn_(generator);
}
))} else {generator.$$return();
self['@expr'].generateBlockBodyOn_(generator)};
return self;
}
, "generate", unescape("generateBlockBodyOn%3A%20generator%0D%09nonLocal%0D%09%09ifTrue%3A%20%5Bgenerator%20nonLocalReturnWith%3A%20%5Bexpr%20generateBlockBodyOn%3A%20generator%5D%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09generator%20return.%0D%09%09%09expr%20generateBlockBodyOn%3A%20generator%5D"));
smalltalk.bind(smalltalk.StReturnNode, unescape("generateInlinedBlockValueOn%3A"), "generateInlinedBlockValueOn_", function StReturnNode__generateInlinedBlockValueOn_(generator){
const self = this; if ((self['@nonLocal']).valueOf()) {generator.nonLocalReturnWith_((function StReturnNode__(){
return self['@expr'].generateInlinedBlockValueOn_(generator);
}
))} else {generator.$$return();
self['@expr'].generateInlinedBlockValueOn_(generator)};
return self;
}
, "generate", unescape("generateInlinedBlockValueOn%3A%20generator%0D%09nonLocal%0D%09%09ifTrue%3A%20%5Bgenerator%20nonLocalReturnWith%3A%20%5Bexpr%20generateInlinedBlockValueOn%3A%20generator%5D%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09generator%20return.%0D%09%09%09expr%20generateInlinedBlockValueOn%3A%20generator%5D"));
smalltalk.bind(smalltalk.StReturnNode, unescape("generateOn%3A"), "generateOn_", function StReturnNode__generateOn_(generator){
const self = this; if ((self['@nonLocal']).valueOf()) {generator.nonLocalReturnWith_((function StReturnNode__(){
return self['@expr'].generateInlinedValueOn_(generator);
}
))} else {if ((self['@expr'].isIf()).valueOf()) {self['@expr'].inlineReturns();
self['@expr'].generateOn_(generator)} else {generator.$$return();
self['@expr'].generateInlinedValueOn_(generator)}};
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09nonLocal%0D%09%09ifTrue%3A%20%5Bgenerator%20nonLocalReturnWith%3A%20%5Bexpr%20generateInlinedValueOn%3A%20generator%5D%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09expr%20isIf%0D%09%09%09%09ifTrue%3A%20%5B%0D%09%09%09%09%09expr%20inlineReturns.%0D%09%09%09%09%09expr%20generateOn%3A%20generator%5D%0D%09%09%09%09ifFalse%3A%20%5B%0D%09%09%09%09%09generator%20return.%0D%09%09%09%09%09expr%20generateInlinedValueOn%3A%20generator%5D%5D"));
smalltalk.bind(smalltalk.StReturnNode, unescape("expr"), "expr", function StReturnNode__expr(){
const self = this; return self['@expr'];
}
, "private", unescape("expr%0D%0D%09%5E%20expr.%0D"));
smalltalk.bind(smalltalk.StReturnNode, unescape("hasNonLocalBlockReturn%3A"), "hasNonLocalBlockReturn_", function StReturnNode__hasNonLocalBlockReturn_(generator){
const self = this; return self['@expr'].hasNonLocalBlockReturn_(generator);
}
, "testing", unescape("hasNonLocalBlockReturn%3A%20generator%0D%09%5Eexpr%20hasNonLocalBlockReturn%3A%20generator"));
smalltalk.bind(smalltalk.StReturnNode, unescape("hasNonLocalBlockReturn%3Aoptimized%3A"), "hasNonLocalBlockReturn_optimized_", function StReturnNode__hasNonLocalBlockReturn_optimized_(generator,parentOptimized){
const self = this; return self['@expr'].hasNonLocalBlockReturn_optimized_(generator,parentOptimized);
}
, "testing", unescape("hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20parentOptimized%0D%09%5Eexpr%20hasNonLocalBlockReturn%3A%20generator%20optimized%3A%20parentOptimized"));
smalltalk.bind(smalltalk.StReturnNode, unescape("isExpression"), "isExpression", function StReturnNode__isExpression(){
const self = this; return self['@nonLocal'].not();
}
, "testing", unescape("isExpression%0D%09%5EnonLocal%20not"));
smalltalk.bind(smalltalk.StReturnNode, unescape("isReturnSelf"), "isReturnSelf", function StReturnNode__isReturnSelf(){
const self = this; return (nil.is_eqeq_(self['@expr'],smalltalk.StReturnNode.classVariableAt_("NodeSelf")));
}
, "testing", unescape("isReturnSelf%0D%0D%09%5Eexpr%20%3D%3D%20NodeSelf"));
smalltalk.bind(smalltalk.StReturnNode, unescape("markNonLocalReturns"), "markNonLocalReturns", function StReturnNode__markNonLocalReturns(){
const self = this; self['@nonLocal']=true;
self['@expr'].markNonLocalReturns();
return self;
}
, "testing", unescape("markNonLocalReturns%0D%09nonLocal%20%3A%3D%20true.%0D%09expr%20markNonLocalReturns"));
smalltalk.addClass("StScanner", smalltalk.Object, ['source', 'mark', 'hereChar', 'aheadChar', 'token', 'tokenType', 'currentComment', 'buffer', 'typeTable'], 'Compiler-JS');
smalltalk.StScanner.$classVariableNames=("AllowBlockArgumentAssignment AllowUnderscoreAssignments AllowUnderscoreSelectors AllowUnicharSymbol DoItCharacter TypeTable");
smalltalk.bind(smalltalk.StScanner, unescape("ambiguousSelector%3AinRange%3A"), "ambiguousSelector_inRange_", function StScanner__ambiguousSelector_inRange_(aString,anInterval){
const self = this; self['@token']=self['@token'].asSymbol();
return self;
}
, "error handling", unescape("ambiguousSelector%3A%20aString%20inRange%3A%20anInterval%0D%09%22Compile%20with%20backward%20compatibility%3A%20%24-%20is%20part%20of%20literal%20argument..%22%0D%09%0D%09token%20%3A%3D%20token%20asSymbol.%0D%09%5Eself"));
smalltalk.bind(smalltalk.StScanner, unescape("notify%3A"), "notify_", function StScanner__notify_(string){
const self = this; self.error_(string);
return self;
}
, "error handling", unescape("notify%3A%20string%20%0D%09%22Refer%20to%20the%20comment%20in%20Object%7Cnotify%3A.%22%20%0D%09self%20error%3A%20string"));
smalltalk.bind(smalltalk.StScanner, unescape("notify%3Aat%3A"), "notify_at_", function StScanner__notify_at_(string,posiiton){
const self = this; return self.notify_(string);
}
, "error handling", unescape("notify%3A%20string%20at%3A%20posiiton%0D%09%22Parser%20compatible%20message%22%0D%09%20%0D%09%5Eself%20notify%3A%20string%20"));
smalltalk.bind(smalltalk.StScanner, unescape("offEnd%3A"), "offEnd_", function StScanner__offEnd_(aString){
const self = this; return self.notify_(aString);
}
, "error handling", unescape("offEnd%3A%20aString%20%0D%09%22Parser%20overrides%20this%22%0D%0D%09%5Eself%20notify%3A%20aString"));
smalltalk.bind(smalltalk.StScanner, unescape("advance"), "advance", function StScanner__advance(){
var prevToken = nil;
const self = this; prevToken=self['@token'];
self.scanToken();
return prevToken;
}
, "expression types", unescape("advance%0D%0D%09%7C%20prevToken%20%7C%0D%09prevToken%20%3A%3D%20token.%0D%09self%20scanToken.%0D%09%5EprevToken"));
smalltalk.bind(smalltalk.StScanner, unescape("scanAllTokenPositionsInto%3A"), "scanAllTokenPositionsInto_", function StScanner__scanAllTokenPositionsInto_(aBlock){
var lastMark = nil;
const self = this; var $early={name:"stReturn"};
try {
lastMark=(1);
(function StScanner__(){
(function(){var $1$; $1$ = self['@currentComment']; if (!nil.isNil_($1$)) { return (function StScanner__(){
self['@currentComment'].do_((function StScanner__(cmnt){
var idx = nil;
idx=(self['@source'].originalContents()).indexOfSubCollection_startingAt_(cmnt,lastMark);
if (((idx._gt((0))).and_((function StScanner__(){
return idx._lt(self['@mark']);
}
))).valueOf()) {return aBlock.value_value_((idx._minus((1))),(lastMark=idx._plus((cmnt.size()))))} else {return nil};
}
));
return self['@currentComment']=nil;
}
)() } else { return $1$; }})();
(function(){var $2$; $2$ = self['@mark']; if (!nil.isNil_($2$)) { return (function StScanner__(){
if ((((nil.is_eqeq_(self['@token'],unescape("-")))).and_((function StScanner__(){
return (nil.is_eqeq_(self.typeTableAt_(self['@hereChar']),"xDigit"));
}
))).valueOf()) {var savedMark = nil;
savedMark=self['@mark'];
self.scanToken();
self['@token']=self['@token'].negated();
self['@mark']=savedMark};
return aBlock.value_value_(self['@mark'],((self['@source'].position())._minus((((nil.is_eqeq_(self['@aheadChar'],smalltalk.StScanner.classVariableAt_("DoItCharacter")))).ifTrue_ifFalse_((function StScanner__(){
if (((nil.is_eqeq_(self['@hereChar'],smalltalk.StScanner.classVariableAt_("DoItCharacter")))).valueOf()) {return (0)} else {return (1)};
}
),(function StScanner__(){
return (2);
}
))))));
}
)() } else { return $2$; }})();
if ((((nil.is_eqeq_(self['@tokenType'],"rightParenthesis"))).or_((function StScanner__(){
return (nil.is_eqeq_(self['@tokenType'],"doIt"));
}
))).valueOf()) {$early.result=self; throw ($early)};
if (((nil.is_eqeq_(self['@tokenType'],"leftParenthesis"))).valueOf()) {(function StScanner__($3$){
$3$.scanToken();
return $3$.scanAllTokenPositionsInto_(aBlock)}
)(self)} else {if ((((nil.is_eqeq_(self['@tokenType'],"word"))).or_((function StScanner__(){
return ((nil.is_eqeq_(self['@tokenType'],"keyword"))).or_((function StScanner__(){
return (nil.is_eqeq_(self['@tokenType'],"colon"));
}
));
}
))).valueOf()) {self.scanLitWord();
if (((nil.is_eqeq_(self['@token'],"true"))).valueOf()) {self['@token']=true};
if (((nil.is_eqeq_(self['@token'],"false"))).valueOf()) {self['@token']=false};
if (((nil.is_eqeq_(self['@token'],"nil"))).valueOf()) {self['@token']=nil}} else {if ((((nil.is_eqeq_(self['@token'],unescape("-")))).and_((function StScanner__(){
return (nil.is_eqeq_(self.typeTableAt_(self['@hereChar']),"xDigit"));
}
))).valueOf()) {self.scanToken();
self['@token']=self['@token'].negated()}}};
return self.scanToken();
}
).repeat();
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "expression types", unescape("scanAllTokenPositionsInto%3A%20aBlock%0D%09%22Evaluate%20aBlock%20with%20the%20start%20and%20end%20positions%20of%20all%20separate%20non-white-space%20tokens%2C%20including%20comments.%22%0D%0D%09%7C%20lastMark%20%7C%0D%09lastMark%20%3A%3D%201.%0D%09%5BcurrentComment%20ifNotNil%3A%0D%09%09%5BcurrentComment%20do%3A%0D%09%09%09%5B%3Acmnt%7C%20%7C%20idx%20%7C%0D%09%09%09%20idx%20%3A%3D%20source%20originalContents%20indexOfSubCollection%3A%20cmnt%20startingAt%3A%20lastMark.%0D%09%09%09%20%28idx%20%3E%200%20and%3A%20%5Bidx%20%3C%20mark%5D%29%20ifTrue%3A%0D%09%09%09%09%5BaBlock%20value%3A%20idx%20-%201%20value%3A%20%28lastMark%20%3A%3D%20idx%20+%20cmnt%20size%29%5D%5D.%0D%09%09%20currentComment%20%3A%3D%20nil%5D.%0D%09mark%20ifNotNil%3A%0D%09%09%5B%28token%20%3D%3D%20%23-%20%0D%09%09%20%20and%3A%20%5B%28self%20typeTableAt%3A%20hereChar%29%20%3D%3D%20%23xDigit%5D%29%20ifTrue%3A%0D%09%09%09%5B%7C%20savedMark%20%7C%0D%09%09%09%20savedMark%20%3A%3D%20mark.%0D%09%09%09%20self%20scanToken.%0D%09%09%09%20token%20%3A%3D%20token%20negated.%0D%09%09%09%20mark%20%3A%3D%20savedMark%5D.%0D%09%09%22Compensate%20for%20the%20fact%20that%20the%20parser%20uses%20two%20character%20lookahead.%20%20Normally%20we%20must%0D%09%09%20%20remove%20the%20extra%20two%20characters.%20%20But%20this%20mustn%27t%20happen%20for%20the%20last%20token%20at%20the%20end%20of%20stream.%22%0D%09%09%20aBlock%0D%09%09%09value%3A%20mark%0D%09%09%09value%3A%20source%20position%20-%20%28aheadChar%20%3D%3D%20DoItCharacter%0D%09%09%09%09ifTrue%3A%20%5BhereChar%20%3D%3D%20DoItCharacter%0D%09%09%09%09%09ifTrue%3A%20%5B0%5D%0D%09%09%09%09%09ifFalse%3A%20%5B1%5D%5D%0D%09%09%09%09ifFalse%3A%20%5B2%5D%29%5D.%0D%09%20%28tokenType%20%3D%3D%20%23rightParenthesis%0D%09%20%20or%3A%20%5BtokenType%20%3D%3D%20%23doIt%5D%29%20ifTrue%3A%0D%09%09%5B%5Eself%5D.%0D%09tokenType%20%3D%3D%20%23leftParenthesis%0D%09%09ifTrue%3A%20%0D%09%09%09%5Bself%20scanToken%3B%20scanAllTokenPositionsInto%3A%20aBlock%5D%0D%09%09ifFalse%3A%20%0D%09%09%09%5B%28tokenType%20%3D%3D%20%23word%20or%3A%20%5BtokenType%20%3D%3D%20%23keyword%20or%3A%20%5BtokenType%20%3D%3D%20%23colon%5D%5D%29%0D%09%09%09%09ifTrue%3A%20%0D%09%09%09%09%09%5Bself%20scanLitWord.%0D%09%09%09%09%09%20token%20%3D%3D%20%23true%20ifTrue%3A%20%5Btoken%20%3A%3D%20true%5D.%0D%09%09%09%09%09%20token%20%3D%3D%20%23false%20ifTrue%3A%20%5Btoken%20%3A%3D%20false%5D.%0D%09%09%09%09%09%20token%20%3D%3D%20%23nil%20ifTrue%3A%20%5Btoken%20%3A%3D%20nil%5D%5D%0D%09%09%09%09ifFalse%3A%0D%09%09%09%09%09%5B%28token%20%3D%3D%20%23-%20%0D%09%09%09%09%09%20%20and%3A%20%5B%28self%20typeTableAt%3A%20hereChar%29%20%3D%3D%20%23xDigit%5D%29%0D%09%09%09%09%09%09ifTrue%3A%20%0D%09%09%09%09%09%09%09%5Bself%20scanToken.%0D%09%09%09%09%09%09%09%20token%20%3A%3D%20token%20negated%5D%5D%5D.%0D%09%09self%20scanToken%20%5D%20repeat"));
smalltalk.bind(smalltalk.StScanner, unescape("scanLitByteVec"), "scanLitByteVec", function StScanner__scanLitByteVec(){
var stream = nil;
const self = this; var $early={name:"stReturn"};
try {
stream=(smalltalk.ByteArray.new_((16))).writeStream();
while((((nil.is_eqeq_(self['@tokenType'],"rightBracket"))).or_((function StScanner__(){
return (nil.is_eqeq_(self['@tokenType'],"doIt"));
}
))).not()){if (((nil.is_eqeq_(self['@tokenType'],"word"))).valueOf()) {self.scanLitWord()};
if (((self['@token'].isInteger()).and_((function StScanner__(){
return self['@token'].between_and_((0),(255));
}
))).not()) {$early.result=self.offEnd_(unescape("8-bit%20integer%20or%20right%20bracket%20expected")); throw ($early)};
stream.nextPut_(self['@token']);
self.scanToken()};;
self['@token']=stream.contents();
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "expression types", unescape("scanLitByteVec%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20%28ByteArray%20new%3A%2016%29%20writeStream.%0D%09%5B%20tokenType%20%3D%3D%20%23rightBracket%20or%3A%20%5B%20tokenType%20%3D%3D%20%23doIt%20%5D%20%5D%20whileFalse%3A%20%5B%0D%09%09tokenType%20%3D%3D%20%23word%0D%09%09%09ifTrue%3A%20%5B%20self%20scanLitWord%20%5D.%0D%09%09%28token%20isInteger%20and%3A%20%5B%20token%20between%3A%200%20and%3A%20255%20%5D%29%0D%09%09%09ifFalse%3A%20%5B%20%5E%20self%20offEnd%3A%20%278-bit%20integer%20or%20right%20bracket%20expected%27%20%5D.%0D%09%09stream%20nextPut%3A%20token.%0D%09%09self%20scanToken%20%5D.%0D%09token%20%3A%3D%20stream%20contents"));
smalltalk.bind(smalltalk.StScanner, unescape("scanLitVec"), "scanLitVec", function StScanner__scanLitVec(){
var s = nil;
const self = this; s=(smalltalk.Array.new_((16))).writeStream();
while((((nil.is_eqeq_(self['@tokenType'],"rightParenthesis"))).or_((function StScanner__(){
return (nil.is_eqeq_(self['@tokenType'],"doIt"));
}
))).not()){if (((nil.is_eqeq_(self['@tokenType'],"leftParenthesis"))).valueOf()) {(function StScanner__($1$){
$1$.scanToken();
return $1$.scanLitVec()}
)(self)} else {if ((((nil.is_eqeq_(self['@tokenType'],"word"))).or_((function StScanner__(){
return ((nil.is_eqeq_(self['@tokenType'],"keyword"))).or_((function StScanner__(){
return (nil.is_eqeq_(self['@tokenType'],"colon"));
}
));
}
))).valueOf()) {self.scanLitWord();
if (((nil.is_eqeq_(self['@token'],"true"))).valueOf()) {self['@token']=true};
if (((nil.is_eqeq_(self['@token'],"false"))).valueOf()) {self['@token']=false};
if (((nil.is_eqeq_(self['@token'],"nil"))).valueOf()) {self['@token']=nil}} else {if (((self['@token']._eq(unescape("-"))).and_((function StScanner__(){
return (nil.is_eqeq_(self.typeTableAt_(self['@hereChar']),"xDigit"));
}
))).valueOf()) {self.scanToken();
self['@token']=self['@token'].negated()} else {if (((self['@token'].isCharacter()).and_((function StScanner__(){
return self['@tokenType']._no_no("character");
}
))).valueOf()) {self['@token']=self['@token'].asSymbol()} else {nil}}}};
s.nextPut_(self['@token']);
self.scanToken()};;
self['@token']=s.contents();
return self;
}
, "expression types", unescape("scanLitVec%0D%09%7C%20s%20%7C%0D%09s%20%3A%3D%20%28Array%20new%3A%2016%29%20writeStream.%0D%09%5BtokenType%20%3D%3D%20%23rightParenthesis%20or%3A%20%5BtokenType%20%3D%3D%20%23doIt%5D%5D%20whileFalse%3A%0D%09%09%5BtokenType%20%3D%3D%20%23leftParenthesis%0D%09%09%09ifTrue%3A%20%0D%09%09%09%09%5Bself%20scanToken%3B%20scanLitVec%5D%0D%09%09%09ifFalse%3A%20%0D%09%09%09%09%5B%28tokenType%20%3D%3D%20%23word%20or%3A%20%5BtokenType%20%3D%3D%20%23keyword%20or%3A%20%5BtokenType%20%3D%3D%20%23colon%5D%5D%29%0D%09%09%09%09%09ifTrue%3A%20%0D%09%09%09%09%09%09%5Bself%20scanLitWord.%0D%09%09%09%09%09%09token%20%3D%3D%20%23true%20ifTrue%3A%20%5Btoken%20%3A%3D%20true%5D.%0D%09%09%09%09%09%09token%20%3D%3D%20%23false%20ifTrue%3A%20%5Btoken%20%3A%3D%20false%5D.%0D%09%09%09%09%09%09token%20%3D%3D%20%23nil%20ifTrue%3A%20%5Btoken%20%3A%3D%20nil%5D%5D%0D%09%09%09%09%09ifFalse%3A%20%5B%0D%09%09%09%09%09%09%28token%20%3D%20%23-%20%0D%09%09%09%09%09%09and%3A%20%5B%28self%20typeTableAt%3A%20hereChar%29%20%3D%3D%20%23xDigit%5D%29%0D%09%09%09%09%09%09ifTrue%3A%20%5B%0D%09%09%09%09%09%09%09self%20scanToken.%0D%09%09%09%09%09%09%09%20token%20%3A%3D%20token%20negated%5D%0D%09%09%09%09%09%09ifFalse%3A%20%5B%28token%20isCharacter%20and%3A%20%5BtokenType%20%7E%7E%20%23character%5D%29%0D%09%09%09%09%09%09%09ifTrue%3A%20%5Btoken%20%3A%3D%20token%20asSymbol%5D%0D%09%09%09%09%09%09%09ifFalse%3A%20%5B%5D%5D%5D%5D.%0D%09%09s%20nextPut%3A%20token.%0D%09%09self%20scanToken%5D.%0D%09token%20%3A%3D%20s%20contents"));
smalltalk.bind(smalltalk.StScanner, unescape("scanLitWord"), "scanLitWord", function StScanner__scanLitWord(){
const self = this; self['@token']=(smalltalk.String.streamContents_((function StScanner__(stream){
stream.nextPutAll_(self['@token']);
return (function(){while((nil.is_eqeq_(self.typeTableAt_(self['@hereChar']),"xLetter"))){self.xLetter();
stream.nextPutAll_(self['@token'])};return nil})();
}
))).asSymbol();
return self;
}
, "expression types", unescape("scanLitWord%0D%09%22Accumulate%20keywords%20and%20asSymbol%20the%20result.%22%0D%0D%09token%20%3A%3D%20%28String%20streamContents%3A%20%5B%20%3Astream%20%7C%0D%09%09stream%20nextPutAll%3A%20token.%0D%09%09%5B%20%28self%20typeTableAt%3A%20hereChar%29%20%3D%3D%20%23xLetter%20%5D%20whileTrue%3A%20%5B%0D%09%09%09self%20xLetter.%0D%09%09%09stream%20nextPutAll%3A%20token%20%5D%20%5D%29%20asSymbol"));
smalltalk.bind(smalltalk.StScanner, unescape("scanStringStruct"), "scanStringStruct", function StScanner__scanStringStruct(){
var s = nil;
const self = this; var $early={name:"stReturn"};
try {
s=(smalltalk.Array.new_((16))).writeStream();
while((((nil.is_eqeq_(self['@tokenType'],"rightParenthesis"))).or_((function StScanner__(){
return (nil.is_eqeq_(self['@tokenType'],"doIt"));
}
))).not()){if (((nil.is_eqeq_(self['@tokenType'],"leftParenthesis"))).valueOf()) {(function StScanner__($1$){
$1$.scanToken();
return $1$.scanStringStruct()}
)(self)} else {if (((nil.is_eqeq_(self['@tokenType'],"word"))).not()) {$early.result=self.error_("only words and parens allowed"); throw ($early)}};
s.nextPut_(self['@token']);
self.scanToken()};;
self['@token']=s.contents();
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "expression types", unescape("scanStringStruct%0D%0D%09%7C%20s%20%7C%0D%09s%20%3A%3D%20%28Array%20new%3A%2016%29%20writeStream.%0D%09%5BtokenType%20%3D%3D%20%23rightParenthesis%20or%3A%20%5BtokenType%20%3D%3D%20%23doIt%5D%5D%0D%09%09whileFalse%3A%20%0D%09%09%09%5BtokenType%20%3D%3D%20%23leftParenthesis%0D%09%09%09%09ifTrue%3A%20%0D%09%09%09%09%09%5Bself%20scanToken%3B%20scanStringStruct%5D%0D%09%09%09%09ifFalse%3A%20%0D%09%09%09%09%09%5BtokenType%20%3D%3D%20%23word%20ifFalse%3A%0D%09%09%09%09%09%09%5B%5Eself%20error%3A%20%27only%20words%20and%20parens%20allowed%27%5D%5D.%0D%09%09%09s%20nextPut%3A%20token.%0D%09%09%09self%20scanToken%5D.%0D%09token%20%3A%3D%20s%20contents"));
smalltalk.bind(smalltalk.StScanner, unescape("scanToken"), "scanToken", function StScanner__scanToken(){
const self = this; while(((nil.is_eqeq_(self['@tokenType']=self.typeTableAt_(self['@hereChar']),"xDelimiter"))).valueOf()){self.step()};;
self['@mark']=((nil.is_eqeq_(self['@aheadChar'],smalltalk.StScanner.classVariableAt_("DoItCharacter")))).ifTrue_ifFalse_((function StScanner__(){
if (((nil.is_eqeq_(self['@hereChar'],smalltalk.StScanner.classVariableAt_("DoItCharacter")))).valueOf()) {return (self['@source'].position())._plus((1))} else {return self['@source'].position()};
}
),(function StScanner__(){
return (self['@source'].position())._minus((1));
}
));
if (((nil.is_eqeq_(self['@tokenType'].at_((1)),"x"))).valueOf()) {self.perform_(self['@tokenType'])} else {self['@token']=self.step()};
return self['@token'];
}
, "expression types", unescape("scanToken%0D%0D%09%5B%28tokenType%20%3A%3D%20self%20typeTableAt%3A%20hereChar%29%20%3D%3D%20%23xDelimiter%5D%0D%09%09whileTrue%3A%20%5Bself%20step%5D.%20%20%22Skip%20delimiters%20fast%2C%20there%20almost%20always%20is%20one.%22%0D%09mark%20%3A%3D%20aheadChar%20%3D%3D%20DoItCharacter%0D%09%09ifTrue%3A%20%5BhereChar%20%3D%3D%20DoItCharacter%0D%09%09%09ifTrue%3A%20%5Bsource%20position%20+%201%5D%0D%09%09%09ifFalse%3A%20%5Bsource%20position%5D%5D%0D%09%09ifFalse%3A%20%5Bsource%20position%20-%201%5D.%0D%09%28tokenType%20at%3A%201%29%20%3D%3D%20%24x%20%22x%20as%20first%20letter%22%0D%09%09ifTrue%3A%20%5Bself%20perform%3A%20tokenType%20%22means%20perform%20to%20compute%20token%20%26%20type%22%5D%0D%09%09ifFalse%3A%20%5Btoken%20%3A%3D%20self%20step%20%22else%20just%20unique%20the%20first%20char%22%5D.%0D%09%5Etoken"));
smalltalk.bind(smalltalk.StScanner, unescape("step"), "step", function StScanner__step(){
var c = nil;
const self = this; c=self['@hereChar'];
self['@hereChar']=self['@aheadChar'];
if ((self['@source'].atEnd()).valueOf()) {self['@aheadChar']=smalltalk.StScanner.classVariableAt_("DoItCharacter")} else {self['@aheadChar']=self['@source'].next()};
return c;
}
, "expression types", unescape("step%0D%0D%09%7C%20c%20%7C%0D%09c%20%3A%3D%20hereChar.%0D%09hereChar%20%3A%3D%20aheadChar.%0D%09source%20atEnd%0D%09%09ifTrue%3A%20%5BaheadChar%20%3A%3D%20DoItCharacter%5D%0D%09%09ifFalse%3A%20%5BaheadChar%20%3A%3D%20source%20next%5D.%0D%09%5Ec"));
smalltalk.bind(smalltalk.StScanner, unescape("initStScannerForTokenization"), "initStScannerForTokenization", function StScanner__initStScannerForTokenization(){
var underscoreIndex = nil;
const self = this; var $early={name:"stReturn"};
try {
underscoreIndex=self['@typeTable'].identityIndexOf_ifAbsent_("xUnderscore",(function StScanner__(){
$early.result=self; throw ($early);
}
));
self['@typeTable']=self['@typeTable'].copy();
self['@typeTable'].at_put_(underscoreIndex,"xUnderscoreForTokenization");
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "initialize-release", unescape("initStScannerForTokenization%0D%09%22Use%20a%20version%20of%20typeTable%20that%20doesn%27t%20raise%20xIllegal%20when%20enocuntering%20an%20_%22%0D%09%7C%20underscoreIndex%20%7C%0D%09underscoreIndex%20%3A%3D%20typeTable%20identityIndexOf%3A%20%23xUnderscore%20ifAbsent%3A%20%5B%5Eself%5D.%0D%09typeTable%20%3A%3D%20typeTable%20copy.%0D%09typeTable%20at%3A%20underscoreIndex%20put%3A%20%23xUnderscoreForTokenization"));
smalltalk.bind(smalltalk.StScanner, unescape("initialize"), "initialize", function StScanner__initialize(){
const self = this; smalltalk.superImplementor(smalltalk.StScanner,'initialize').apply(self, []);
self['@buffer']="".writeStream();
self['@typeTable']=smalltalk.StScanner.classVariableAt_("TypeTable");
return self;
}
, "initialize-release", unescape("initialize%0D%0D%09super%20initialize.%0D%09buffer%20%3A%3D%20%27%27%20writeStream.%0D%09typeTable%20%3A%3D%20TypeTable"));
smalltalk.bind(smalltalk.StScanner, unescape("scan%3A"), "scan_", function StScanner__scan_(inputStream){
const self = this; self['@source']=inputStream;
self.step();
self.step();
self.scanToken();
return self;
}
, "initialize-release", unescape("scan%3A%20inputStream%20%0D%09%22Bind%20the%20input%20stream%2C%20fill%20the%20character%20buffers%20and%20first%20token%20buffer.%22%0D%0D%09source%20%3A%3D%20inputStream.%0D%09self%20step.%0D%09self%20step.%0D%09self%20scanToken"));
smalltalk.bind(smalltalk.StScanner, unescape("typeTableAt%3A"), "typeTableAt_", function StScanner__typeTableAt_(aCharacter){
const self = this; return self['@typeTable'].at_ifAbsent_((aCharacter.charCode()),(function StScanner__(){
if (((nil.is_eqeq_(aCharacter,smalltalk.StScanner.classVariableAt_("DoItCharacter")))).valueOf()) {return "doIt"} else {return "xLetter"};
}
));
}
, "multi-character scans", unescape("typeTableAt%3A%20aCharacter%0D%09%5EtypeTable%0D%09%09at%3A%20aCharacter%20charCode%0D%09%09ifAbsent%3A%0D%09%09%09%5BaCharacter%20%3D%3D%20DoItCharacter%0D%09%09%09%09ifTrue%3A%20%5B%23doIt%5D%0D%09%09%09%09ifFalse%3A%20%5B%23xLetter%5D%5D"));
smalltalk.bind(smalltalk.StScanner, unescape("xBinary"), "xBinary", function StScanner__xBinary(){
var startOfToken = nil;
const self = this; self['@tokenType']="binary";
startOfToken=self['@mark'];
self['@token']=smalltalk.String.with_((self.step()));
while((((nil.is_eqeq_(self.typeTableAt_(self['@hereChar']),"xBinary"))).or_((function StScanner__(){
return (nil.is_eqeq_(self.typeTableAt_(self['@hereChar']),"verticalBar"));
}
))).valueOf()){if ((((nil.is_eqeq_(self['@hereChar'],unescape("-")))).and_((function StScanner__(){
return (nil.is_eqeq_(self.typeTableAt_(self['@aheadChar']),"xDigit"));
}
))).valueOf()) {return self.ambiguousSelector_inRange_((self['@token']._comma(unescape("-"))),(startOfToken.to_(((self['@source'].position())._minus((1))))))};
self['@token']=self['@token']._comma((smalltalk.String.with_((self.step()))))};;
if ((self['@token']._eq((unescape("%255C%255C%255C%255C").unescaped()))).valueOf()) {self['@token']=unescape("%255C%255C").unescaped()};
self['@token']=self['@token'].asSymbol();
return self;
}
, "multi-character scans", unescape("xBinary%0D%0D%09%7C%20startOfToken%20%7C%0D%09tokenType%20%3A%3D%20%23binary.%0D%09startOfToken%20%3A%3D%20mark.%0D%09token%20%3A%3D%20String%20with%3A%20self%20step.%0D%09%5B%28self%20typeTableAt%3A%20hereChar%29%20%3D%3D%20%23xBinary%20or%3A%20%5B%28self%20typeTableAt%3A%20hereChar%29%20%3D%3D%20%23verticalBar%5D%5D%20whileTrue%3A%0D%09%09%5B%28hereChar%20%3D%3D%20%24-%20and%3A%20%5B%28self%20typeTableAt%3A%20aheadChar%29%20%3D%3D%20%23xDigit%5D%29%0D%09%09%09ifTrue%3A%20%5B%5Eself%20ambiguousSelector%3A%20%28token%20%2C%20%27-%27%29%0D%09%09%09%09%09inRange%3A%20%28startOfToken%20to%3A%20source%20position%20-%201%29.%5D.%0D%09%09token%20%3A%3D%20token%2C%20%28String%20with%3A%20self%20step%29%5D.%0D%09%22ugly%20hack%20to%20make%20%5C%5C%5C%5C%20selector%20parsing%20work%20in%20JS%22%0D%09token%20%3D%20%27%255C%255C%255C%255C%27%20unescaped%0D%09%09ifTrue%3A%20%5Btoken%20%3A%3D%20%27%255C%255C%27%20unescaped%5D.%0D%09token%20%3A%3D%20token%20asSymbol"));
smalltalk.bind(smalltalk.StScanner, unescape("xColon"), "xColon", function StScanner__xColon(){
const self = this; if (((nil.is_eqeq_(self['@aheadChar'],unescape("%3D")))).valueOf()) {self.step();
self['@tokenType']="leftArrow";
self.step();
return self['@token']=unescape("%3A%3D")};
self['@tokenType']="colon";
return self['@token']=(self.step()).asSymbol();
}
, "multi-character scans", unescape("xColon%0D%09%22Allow%20%3A%3D%20for%20assignment%22%0D%09%0D%09aheadChar%20%3D%3D%20%24%3D%20ifTrue%3A%0D%09%09%5Bself%20step.%0D%09%09tokenType%20%3A%3D%20%23leftArrow.%0D%09%09self%20step.%0D%09%09%5E%20token%20%3A%3D%20%23%27%3A%3D%27%5D.%0D%09%22Otherwise%2C%20just%20do%20what%20normal%20scan%20of%20colon%20would%20do%22%0D%09tokenType%20%3A%3D%20%23colon.%0D%09%5E%20token%20%3A%3D%20self%20step%20asSymbol"));
smalltalk.bind(smalltalk.StScanner, unescape("xDelimiter"), "xDelimiter", function StScanner__xDelimiter(){
const self = this; self.scanToken();
return self;
}
, "multi-character scans", unescape("xDelimiter%0D%09%22Ignore%20blanks%2C%20etc.%22%0D%0D%09self%20scanToken"));
smalltalk.bind(smalltalk.StScanner, unescape("xDigit"), "xDigit", function StScanner__xDigit(){
var numberString = nil;
const self = this; self['@tokenType']="number";
if (((nil.is_eqeq_(self['@aheadChar'],smalltalk.StScanner.classVariableAt_("DoItCharacter")))).valueOf()) {self['@source'].skip_((-1))} else {self['@source'].skip_((-2))};
numberString=self.scanNumberString_(self['@source']);
self['@token']=numberString.asNumber();
(function StScanner__($1$){
$1$.step();
return $1$.step()}
)(self);
return self;
}
, "multi-character scans", unescape("xDigit%0D%09%22Form%20a%20number.%22%0D%09%7C%20numberString%20%7C%0D%09tokenType%20%3A%3D%20%23number.%0D%09aheadChar%20%3D%3D%20DoItCharacter%0D%09%09ifTrue%3A%20%5Bsource%20skip%3A%20-1%20%22Read%20off%20the%20end%20last%20time%22%5D%0D%09%09ifFalse%3A%20%5Bsource%20skip%3A%20-2%5D.%0D%09numberString%20%3A%3D%20self%20scanNumberString%3A%20source.%0D%09token%20%3A%3D%20numberString%20asNumber.%0D%22%09%5Btoken%20%3A%3D%20Number%20readFrom%3A%20source%5D%20on%3A%20Error%20do%3A%20%5B%20%3Aex%20%7C%20self%20notify%3A%20ex%20description%5D.%0D%22%0D%22%09token%20%3A%3D%20%28SqNumberParser%20on%3A%20source%29%0D%09%09failBlock%3A%20%5B%3AerrorString%20%3Aposition%20%7C%20self%20notify%3A%20errorString%20at%3Aposition%5D%3B%0D%09%09nextNumber.%0D%22%0D%09self%20step%3B%20step"));
smalltalk.bind(smalltalk.StScanner, unescape("xDollar"), "xDollar", function StScanner__xDollar(){
const self = this; if (((nil.is_eqeq_(self['@aheadChar'],smalltalk.StScanner.classVariableAt_("DoItCharacter")))).valueOf()) {self['@mark']=self['@mark']._plus((1));
return self.offEnd_("A Character was expected")};
self.step();
self['@token']=self.step();
self['@tokenType']="character";
return self;
}
, "multi-character scans", unescape("xDollar%0D%09%22Form%20a%20Character%20literal.%22%0D%0D%09aheadChar%20%3D%3D%20DoItCharacter%0D%09%09ifTrue%3A%0D%09%09%09%5Bmark%20%3A%3D%20mark%20+%201.%20%22Let%20the%20notification%20lie%20behind%20the%20dollar%22%0D%09%09%09%5Eself%20offEnd%3A%20%27A%20Character%20was%20expected%27%5D.%0D%09self%20step.%20%22pass%20over%20%24%22%0D%09token%20%3A%3D%20self%20step.%0D%09tokenType%20%3A%3D%20%23character"));
smalltalk.bind(smalltalk.StScanner, unescape("xDoubleQuote"), "xDoubleQuote", function StScanner__xDoubleQuote(){
const self = this; var $early={name:"stReturn"};
try {
self['@buffer'].resetToStart();
self.step();
while(((nil.is_eqeq_(self['@hereChar'],unescape("%22")))).not()){if (((nil.is_eqeq_(self['@hereChar'],smalltalk.StScanner.classVariableAt_("DoItCharacter")))).valueOf()) {$early.result=self.offEnd_("Unmatched comment quote"); throw ($early)};
self['@buffer'].nextPut_((self.step()))};;
self.step();
((function(){var $1$; $1$ = self['@currentComment']; if (nil.isNil_($1$)) { return self['@currentComment']=smalltalk.OrderedCollection.$$new() } else { return $1$; }})()).add_((self['@buffer'].contents()));
self.scanToken();
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "multi-character scans", unescape("xDoubleQuote%0D%20%20%20%20%22Collect%20a%20comment.%22%0D%0D%09buffer%20resetToStart.%0D%09self%20step.%0D%09%5B%20hereChar%20%3D%3D%20%24%22%20%5D%20whileFalse%3A%20%5B%0D%09%09hereChar%20%3D%3D%20DoItCharacter%20ifTrue%3A%20%5B%0D%09%09%09%5Eself%20offEnd%3A%20%27Unmatched%20comment%20quote%27%20%5D.%0D%09%09buffer%20nextPut%3A%20self%20step%20%5D.%0D%09self%20step.%0D%09%28currentComment%20ifNil%3A%20%5B%20%0D%09%09currentComment%20%3A%3D%20OrderedCollection%20new%20%5D%29%0D%09%09%09add%3A%20buffer%20contents.%0D%09self%20scanToken"));
smalltalk.bind(smalltalk.StScanner, unescape("xIllegal"), "xIllegal", function StScanner__xIllegal(){
const self = this; self.notify_at_(((((unescape("Illegal%20character%20%28char%20code%20")._comma((self['@hereChar'].charCode())))._comma(" "))._comma(((self['@hereChar'].charCode()).storeStringHex())))._comma(unescape("%29"))),self['@mark']);
return self;
}
, "multi-character scans", unescape("xIllegal%0D%09%22An%20illegal%20character%20was%20encountered%22%0D%09self%20notify%3A%20%27Illegal%20character%20%28char%20code%20%27%20%2C%20hereChar%20charCode%20%2C%20%27%20%27%20%2C%20hereChar%20charCode%20storeStringHex%20%2C%20%27%29%27%20at%3A%20mark"));
smalltalk.bind(smalltalk.StScanner, unescape("xLetter"), "xLetter", function StScanner__xLetter(){
var type = nil;
const self = this; self['@buffer'].resetToStart();
while((((nil.is_eqeq_(type=self.typeTableAt_(self['@hereChar']),"xLetter"))).or_((function StScanner__(){
return ((nil.is_eqeq_(type,"xDigit"))).or_((function StScanner__(){
return ((nil.is_eqeq_(type,"xUnderscore"))).and_((function StScanner__(){
return self.allowUnderscoreSelectors();
}
));
}
));
}
))).valueOf()){self['@buffer'].nextPut_(self['@hereChar']);
self['@hereChar']=self['@aheadChar'];
self['@aheadChar']=(self['@source'].atEnd()).ifTrue_ifFalse_((function StScanner__(){
return smalltalk.StScanner.classVariableAt_("DoItCharacter");
}
),(function StScanner__(){
return self['@source'].next();
}
))};;
self['@tokenType']=(((nil.is_eqeq_(type,"xColon"))).and_((function StScanner__(){
return self['@aheadChar']._no_no(unescape("%3D"));
}
))).ifTrue_ifFalse_((function StScanner__(){
self['@buffer'].nextPut_((self.step()));
while(((nil.is_eqeq_(self.typeTableAt_(self['@hereChar']),"xColon"))).valueOf()){self['@buffer'].nextPut_((self.step()))};;
return "keyword";
}
),(function StScanner__(){
return "word";
}
));
self['@token']=self['@buffer'].contents();
return self;
}
, "multi-character scans", unescape("xLetter%0D%09%22Form%20a%20word%20or%20keyword.%22%0D%0D%09%7C%20type%20%7C%0D%09buffer%20resetToStart.%0D%09%5B%28type%20%3A%3D%20self%20typeTableAt%3A%20hereChar%29%20%3D%3D%20%23xLetter%0D%09%09or%3A%20%5Btype%20%3D%3D%20%23xDigit%0D%09%09or%3A%20%5Btype%20%3D%3D%20%23xUnderscore%20and%3A%5Bself%20allowUnderscoreSelectors%5D%5D%5D%5D%20whileTrue%3A%0D%09%09%09%5B%22open%20code%20step%20for%20speed%22%0D%09%09%09buffer%20nextPut%3A%20hereChar.%0D%09%09%09hereChar%20%3A%3D%20aheadChar.%0D%09%09%09aheadChar%20%3A%3D%20source%20atEnd%0D%09%09%09%09%09%09%09ifTrue%3A%20%5BDoItCharacter%5D%0D%09%09%09%09%09%09%09ifFalse%3A%20%5Bsource%20next%5D%5D.%0D%09tokenType%20%3A%3D%20%28type%20%3D%3D%20%23xColon%20and%3A%20%5BaheadChar%20%7E%7E%20%24%3D%5D%29%0D%09%09%09%09%09ifTrue%3A%20%0D%09%09%09%09%09%09%5Bbuffer%20nextPut%3A%20self%20step.%0D%09%09%09%09%09%09%22Allow%20any%20number%20of%20embedded%20colons%20in%20literal%20symbols%22%0D%09%09%09%09%09%09%5B%28self%20typeTableAt%3A%20hereChar%29%20%3D%3D%20%23xColon%5D%20whileTrue%3A%0D%09%09%09%09%09%09%09%5Bbuffer%20nextPut%3A%20self%20step%5D.%0D%09%09%09%09%09%09%23keyword%5D%0D%09%09%09%09%09ifFalse%3A%20%0D%09%09%09%09%09%09%5B%23word%5D.%0D%09token%20%3A%3D%20buffer%20contents"));
smalltalk.bind(smalltalk.StScanner, unescape("xLitQuote"), "xLitQuote", function StScanner__xLitQuote(){
var start = nil;
const self = this; start=self['@mark'];
self.step();
self.scanToken();
if (((nil.is_eqeq_(self['@tokenType'],"leftParenthesis"))).valueOf()) {(function StScanner__($1$){
$1$.scanToken();
return $1$.scanLitVec()}
)(self);
self['@mark']=start._plus((1));
if (((nil.is_eqeq_(self['@tokenType'],"doIt"))).valueOf()) {self.offEnd_("Unmatched parenthesis")}} else {if (((nil.is_eqeq_(self['@tokenType'],"leftBracket"))).valueOf()) {(function StScanner__($2$){
$2$.scanToken();
return $2$.scanLitByteVec()}
)(self);
self['@mark']=start._plus((1));
if (((nil.is_eqeq_(self['@tokenType'],"doIt"))).valueOf()) {self.offEnd_("Unmatched bracket")}} else {if ((((nil.is_eqeq_(self['@tokenType'],"word"))).or_((function StScanner__(){
return ((nil.is_eqeq_(self['@tokenType'],"keyword"))).or_((function StScanner__(){
return (nil.is_eqeq_(self['@tokenType'],"colon"));
}
));
}
))).valueOf()) {self.scanLitWord()} else {if ((((nil.is_eqeq_(self['@tokenType'],"string"))).or_((function StScanner__(){
return (nil.is_eqeq_(self['@tokenType'],"verticalBar"));
}
))).valueOf()) {self['@token']=self['@token'].asSymbol()} else {if (((nil.is_eqeq_(self['@tokenType'],"binary"))).not()) {if (((self['@token'].isCharacter()).and_((function StScanner__(){
return (self['@tokenType']._no_no("character")).and_((function StScanner__(){
return (self.$klass).prefAllowUnicharSymbol();
}
));
}
))).valueOf()) {self['@token']=self['@token'].asSymbol()} else {self.notify_at_("Invalid literal character",(start._plus((1))))}}}}}};
self['@mark']=start;
self['@tokenType']="literal";
return self;
}
, "multi-character scans", unescape("xLitQuote%0D%09%22Symbols%20and%20vectors%3A%20%23%281%20%284%205%29%202%203%29%20%23ifTrue%3AifFalse%3A%20%23%27abc%27.%22%0D%09%7C%20start%20%7C%0D%09start%20%3A%3D%20mark.%0D%09self%20step.%20%22litQuote%22%0D%09self%20scanToken.%0D%09tokenType%20%3D%3D%20%23leftParenthesis%0D%09%09ifTrue%3A%20%5Bself%20scanToken%3B%20scanLitVec.%0D%09%09%09mark%20%3A%3D%20start%20+%201.%0D%09%09%09tokenType%20%3D%3D%20%23doIt%0D%09%09%09%09ifTrue%3A%20%5Bself%20offEnd%3A%20%27Unmatched%20parenthesis%27%5D%5D%0D%09%09ifFalse%3A%20%5BtokenType%20%3D%3D%20%23leftBracket%0D%09%09%09%09ifTrue%3A%20%5Bself%20scanToken%3B%20scanLitByteVec.%0D%09%09%09%09%09mark%20%3A%3D%20start%20+%201.%0D%09%09%09%09%09tokenType%20%3D%3D%20%23doIt%0D%09%09%09%09%09%09ifTrue%3A%20%5Bself%20offEnd%3A%20%27Unmatched%20bracket%27%5D%5D%0D%09%09%09%09ifFalse%3A%20%5B%28tokenType%20%3D%3D%20%23word%20or%3A%20%5BtokenType%20%3D%3D%20%23keyword%20or%3A%20%5BtokenType%20%3D%3D%20%23colon%5D%5D%29%0D%09%09%09%09%09%09ifTrue%3A%20%5Bself%20scanLitWord%5D%0D%09%09%09%09%09%09ifFalse%3A%20%5B%28tokenType%20%3D%3D%20%23string%20or%3A%20%5B%20tokenType%20%3D%3D%20%23verticalBar%20%5D%29%0D%09%09%09%09%09%09%09ifTrue%3A%20%5Btoken%20%3A%3D%20token%20asSymbol%5D%0D%09%09%09%09%09%09%09ifFalse%3A%20%5BtokenType%20%3D%3D%20%23binary%20%0D%09%09%09%09%09%09%09%09ifFalse%3A%20%5B%28token%20isCharacter%20and%3A%20%5BtokenType%20%7E%7E%20%23character%20and%3A%20%5Bself%20class%20prefAllowUnicharSymbol%5D%5D%29%0D%09%09%09%09%09%09%09%09%09ifTrue%3A%20%5Btoken%20%3A%3D%20token%20asSymbol%5D%0D%09%09%09%09%09%09%09%09%09ifFalse%3A%20%5Bself%20notify%3A%20%27Invalid%20literal%20character%27%20at%3A%20start%20+%201%5D%5D%5D%5D%5D%5D.%0D%09mark%20%3A%3D%20start.%0D%09tokenType%20%3A%3D%20%23literal%0D%0D%09%22%23%28Pen%29%0D%09%23Pen%0D%09%23%27Pen%27%0D%09%22"));
smalltalk.bind(smalltalk.StScanner, unescape("xSingleQuote"), "xSingleQuote", function StScanner__xSingleQuote(){
const self = this; var $early={name:"stReturn"};
try {
self.step();
self['@buffer'].resetToStart();
while((((nil.is_eqeq_(self['@hereChar'],unescape("%27")))).and_((function StScanner__(){
if (((nil.is_eqeq_(self['@aheadChar'],unescape("%27")))).valueOf()) {self.step();
return false} else {return true};
}
))).not()){if (((nil.is_eqeq_(self['@hereChar'],smalltalk.StScanner.classVariableAt_("DoItCharacter")))).valueOf()) {$early.result=self.offEnd_("Unmatched string quote"); throw ($early)};
self['@buffer'].nextPut_((self.step()))};;
self.step();
self['@token']=self['@buffer'].contents();
self['@tokenType']="string";
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "multi-character scans", unescape("xSingleQuote%0D%09%22String.%22%0D%0D%09self%20step.%0D%09buffer%20resetToStart.%0D%09%5BhereChar%20%3D%3D%20%24%27%20%0D%09%09and%3A%20%5BaheadChar%20%3D%3D%20%24%27%20%0D%09%09%09%09ifTrue%3A%20%5Bself%20step.%20false%5D%0D%09%09%09%09ifFalse%3A%20%5Btrue%5D%5D%5D%0D%09%09whileFalse%3A%20%0D%09%09%09%5BhereChar%20%3D%3D%20DoItCharacter%0D%09%09%09%09ifTrue%3A%20%5B%5Eself%20offEnd%3A%20%27Unmatched%20string%20quote%27%5D.%0D%09%09%09buffer%20nextPut%3A%20self%20step%5D.%0D%09self%20step.%0D%09token%20%3A%3D%20buffer%20contents.%0D%09tokenType%20%3A%3D%20%23string"));
smalltalk.bind(smalltalk.StScanner, unescape("xUnderscore"), "xUnderscore", function StScanner__xUnderscore(){
const self = this; if ((self.allowUnderscoreAssignments()).valueOf()) {var type = nil;
if (((((nil.is_eqeq_(type=self.typeTableAt_(self['@aheadChar']),"xLetter"))).or_((function StScanner__(){
return ((nil.is_eqeq_(type,"xDigit"))).or_((function StScanner__(){
return (nil.is_eqeq_(type,"xUnderscore"));
}
));
}
))).and_((function StScanner__(){
return self.allowUnderscoreSelectors();
}
))).not()) {self.step();
self['@tokenType']="leftArrow";
return self['@token']="_"}};
if ((self.allowUnderscoreSelectors()).valueOf()) {return self.xLetter()};
return self.xIllegal();
}
, "multi-character scans", unescape("xUnderscore%0D%09self%20allowUnderscoreAssignments%20ifTrue%3A%5B%20%7C%20type%20%7C%0D%09%09%22Figure%20out%20if%20x%20_foo%20%28no%20space%20between%20_%20and%20foo%29%20%0D%09%09should%20be%20a%20selector%20or%20assignment%22%0D%09%09%28%28%28type%20%3A%3D%20self%20typeTableAt%3A%20aheadChar%29%20%3D%3D%20%23xLetter%0D%09%09%09or%3A%5Btype%20%3D%3D%20%23xDigit%20or%3A%5Btype%20%3D%3D%20%23xUnderscore%5D%5D%29%20%0D%09%09%09and%3A%5Bself%20allowUnderscoreSelectors%5D%29%20ifFalse%3A%5B%0D%09%09%09%09self%20step.%0D%09%09%09%09tokenType%20%3A%3D%20%23leftArrow.%0D%09%09%09%09%5Etoken%20%3A%3D%20%23%27_%27%0D%09%09%5D.%0D%09%5D.%0D%09self%20allowUnderscoreSelectors%20ifTrue%3A%5B%5Eself%20xLetter%5D.%0D%09%5Eself%20xIllegal"));
smalltalk.bind(smalltalk.StScanner, unescape("xUnderscoreForTokenization"), "xUnderscoreForTokenization", function StScanner__xUnderscoreForTokenization(){
const self = this; self.step();
self['@tokenType']="leftArrow";
return self['@token']="_";
}
, "multi-character scans", unescape("xUnderscoreForTokenization%0D%09self%20step.%0D%09tokenType%20%3A%3D%20%23leftArrow.%0D%09%5Etoken%20%3A%3D%20%23%27_%27"));
smalltalk.bind(smalltalk.StScanner, unescape("scanFieldNames%3A"), "scanFieldNames_", function StScanner__scanFieldNames_(stringOrArray){
var strm = nil;
const self = this; if ((stringOrArray.isArray()).valueOf()) {return stringOrArray};
self.scan_(((stringOrArray.asString()).readStream()));
strm=(smalltalk.Array.new_((10))).writeStream();
while(((nil.is_eqeq_(self['@tokenType'],"doIt"))).not()){if (((nil.is_eqeq_(self['@tokenType'],"word"))).valueOf()) {strm.nextPut_(self['@token'])};
self.scanToken()};;
return strm.contents();
}
, "public access", unescape("scanFieldNames%3A%20stringOrArray%0D%09%22Answer%20an%20Array%20of%20Strings%20that%20are%20the%20identifiers%20in%20the%20input%20string%2C%20%0D%09stringOrArray.%20If%20passed%20an%20Array%2C%20just%20answer%20with%20that%20Array%2C%20i.e.%2C%20%0D%09assume%20it%20has%20already%20been%20scanned.%22%0D%0D%09%7C%20strm%20%7C%0D%09stringOrArray%20isArray%0D%09%09ifTrue%3A%20%5B%5EstringOrArray%5D.%0D%09self%20scan%3A%20%28stringOrArray%20asString%20readStream%29.%0D%09strm%20%3A%3D%20%28Array%20new%3A%2010%29%20writeStream.%0D%09%5BtokenType%20%3D%3D%20%23doIt%5D%0D%09%09whileFalse%3A%20%0D%09%09%09%5BtokenType%20%3D%3D%20%23word%20ifTrue%3A%20%5Bstrm%20nextPut%3A%20token%5D.%0D%09%09%09self%20scanToken%5D.%0D%09%5Estrm%20contents%0D%0D%09%22StScanner%20new%20scanFieldNames%3A%20%27abc%20%20def%20ghi%27%20%28%27abc%27%20%27def%27%20%27ghi%27%20%29%22"));
smalltalk.bind(smalltalk.StScanner, unescape("scanStringStruct%3A"), "scanStringStruct_", function StScanner__scanStringStruct_(textOrString){
const self = this; self.scan_(((textOrString.asString()).readStream()));
self.scanStringStruct();
return self['@token'];
}
, "public access", unescape("scanStringStruct%3A%20textOrString%20%0D%09%22The%20input%20is%20a%20string%20whose%20elements%20are%20identifiers%20and%20parenthesized%0D%09%20groups%20of%20identifiers.%20%20Answer%20an%20array%20reflecting%20that%20structure%2C%20representing%0D%09%20each%20identifier%20by%20an%20uninterned%20string.%22%0D%0D%09self%20scan%3A%20textOrString%20asString%20readStream.%0D%09self%20scanStringStruct.%0D%09%5Etoken%0D%0D%09%22StScanner%20new%20scanStringStruct%3A%20%27a%20b%20%28c%20d%29%20%28e%20f%20g%29%27%22"));
smalltalk.bind(smalltalk.StScanner, unescape("scanTokenPositionsIn%3Ainto%3A"), "scanTokenPositionsIn_into_", function StScanner__scanTokenPositionsIn_into_(textOrString,aBlock){
const self = this; self.initStScannerForTokenization();
self['@source']=(textOrString.asString()).readStream();
self.step();
self.step();
self.scanAllTokenPositionsInto_(aBlock);
return self;
}
, "public access", unescape("scanTokenPositionsIn%3A%20textOrString%20into%3A%20aBlock%0D%09%22Evaluate%20aBlock%20with%20the%20start%20and%20end%20positions%20of%20all%20separate%20non-white-space%20tokens%2C%20including%20comments%2C%20in%20textOrString.%22%0D%0D%09self%20initStScannerForTokenization.%0D%09source%20%3A%3D%20textOrString%20asString%20readStream.%0D%09self%20step.%0D%09self%20step.%0D%09self%20scanAllTokenPositionsInto%3A%20aBlock%0D%0D%09%22%7C%20code%20%7C%0D%09code%20%3A%3D%20%27%20%20%20%20%20%20%20%23%28%201%202%20%23%28%203%204%20%29%29%20%2016r123%20123%20123.0%20%20%27%2C%20%28StScanner%20sourceCodeAt%3A%20%23scanTokenPositionsIn%3Ainto%3A%29.%0D%09StScanner%20new%20scanTokenPositionsIn%3A%20code%20into%3A%20%5B%3Astart%20%3Aend%7C%20Transcript%20cr%3B%20nextPut%3A%20%24_%3B%20nextPutAll%3A%20%28code%20copyFrom%3A%20start%20to%3A%20end%29%3B%20nextPut%3A%20%24_%3B%20endEntry%5D%22%0D%0D%09%22CodeDiffBuilder%20buildDisplayPatchFrom%3A%20%20%28StScanner%20sourceCodeAt%3A%20%23scanTokenPositionsIn%3Ainto%3A%29%20to%3A%20%20%28%28StScanner%20sourceCodeAt%3A%20%23scanTokenPositionsIn%3Ainto%3A%29%20copyReplaceAll%3A%20%28String%20with%3A%20Character%20cr%29%20with%3A%20%27%27%29%22%0D%0D%09%22CodeDiffBuilder%20buildDisplayPatchFrom%3A%20%20%27colorTable%20%5EcolorTable%20ifNil%3A%20%5BcolorTable%20_%20ST80ColorTable%5D%27%20to%3A%27colorTable%20%5EcolorTable%20ifNil%3A%20%5BcolorTable%20_%20ST80ColorTable%5D%27%22"));
smalltalk.bind(smalltalk.StScanner, unescape("scanTokens%3A"), "scanTokens_", function StScanner__scanTokens_(textOrString){
const self = this; self.scan_(((textOrString.asString()).readStream()));
self.scanLitVec();
return self['@token'];
}
, "public access", unescape("scanTokens%3A%20textOrString%20%0D%09%22Answer%20an%20Array%20that%20has%20been%20tokenized%20as%20though%20the%20input%20text%2C%20%0D%09textOrString%2C%20had%20appeared%20between%20the%20array%20delimitors%20%23%28%20and%20%29%20in%20a%20%0D%09Smalltalk%20literal%20expression.%22%0D%0D%09self%20scan%3A%20textOrString%20asString%20readStream.%0D%09self%20scanLitVec.%0D%09%5Etoken%0D%0D%09%22StScanner%20new%20scanTokens%3A%20%27identifier%20keyword%3A%208r31%20%27%27string%27%27%20.%27%22"));
smalltalk.bind(smalltalk.StScanner, unescape("typedScan%3Ado%3A"), "typedScan_do_", function StScanner__typedScan_do_(textOrString,aBinaryBlock){
var theTokensType = nil;
var atNumber = nil;
var theToken = nil;
const self = this; self.initStScannerForTokenization();
self.scan_(((textOrString.asString()).readStream()));
atNumber=((nil.isNil_(self['@hereChar'])===false)).and_((function StScanner__(){
return self['@hereChar'].isDigit();
}
));
theTokensType=self['@tokenType'];
theToken=self.advance();
if ((((nil.is_eqeq_(theToken,unescape("-")))).and_((function StScanner__(){
return atNumber.and_((function StScanner__(){
return self['@token'].isNumber();
}
));
}
))).valueOf()) {theToken=(self.advance()).negated()};
if ((theToken.isNumber()).valueOf()) {theTokensType="number"};
return aBinaryBlock.value_value_(theToken,((["number", "string", "literal"].includes_(theTokensType)).ifTrue_ifFalse_((function StScanner__(){
return "literal";
}
),(function StScanner__(){
return "word";
}
))));
}
, "public access", unescape("typedScan%3A%20textOrString%20do%3A%20aBinaryBlock%0D%09%22Evaluate%20aBinaryBlock%20with%20the%20token%20and%20its%20type%20for%20the%20first%20token%20in%20input%2C%0D%09%20mapping%20literals%20to%20type%20%23literal%20and%20anything%20else%20to%20type%20%23word.%22%0D%09%7C%20theTokensType%20atNumber%20theToken%20%7C%0D%09self%20initStScannerForTokenization.%0D%09self%20scan%3A%20textOrString%20asString%20readStream.%0D%09atNumber%20%3A%3D%20hereChar%20notNil%20and%3A%20%5BhereChar%20isDigit%5D.%0D%09theTokensType%20%3A%3D%20tokenType.%0D%09theToken%20%3A%3D%20self%20advance.%0D%09%28theToken%20%3D%3D%20%23-%20and%3A%20%5BatNumber%20and%3A%20%5Btoken%20isNumber%5D%5D%29%20ifTrue%3A%0D%09%09%5BtheToken%20%3A%3D%20self%20advance%20negated%5D.%0D%09theToken%20isNumber%20ifTrue%3A%20%5BtheTokensType%20%3A%3D%20%23number%5D.%0D%09%5EaBinaryBlock%0D%09%09value%3A%20theToken%0D%09%09value%3A%20%28%28%23%28number%20string%20literal%29%20includes%3A%20theTokensType%29%0D%09%09%09%09ifTrue%3A%20%5B%23literal%5D%0D%09%09%09%09ifFalse%3A%20%5B%23word%5D%29"));
smalltalk.bind(smalltalk.StScanner, unescape("typedScanTokens%3A"), "typedScanTokens_", function StScanner__typedScanTokens_(textOrString){
var s = nil;
const self = this; self.initStScannerForTokenization();
self.scan_(((textOrString.asString()).readStream()));
s=(smalltalk.Array.new_((16))).writeStream();
while(((nil.is_eqeq_(self['@tokenType'],"doIt"))).not()){if ((((nil.is_eqeq_(self['@token'],unescape("-")))).and_((function StScanner__(){
return (nil.is_eqeq_(self.typeTableAt_(self['@hereChar']),"xDigit"));
}
))).valueOf()) {self.scanToken();
self['@token']=self['@token'].negated()};
s.nextPut_(self['@token']);
self.scanToken()};;
return s.contents();
}
, "public access", unescape("typedScanTokens%3A%20textOrString%20%0D%09%22Answer%20an%20Array%20that%20has%20been%20tokenized%20with%20literals%20mapped%20to%20literals%2C%0D%09%20special%20characters%20mapped%20to%20symbols%20and%20variable%20names%20and%20keywords%0D%09%20to%20strings.%20This%20methiod%20accepts%20_%20%28underscore%29%20as%20an%20assignment%20token%0D%09%20irrespective%20of%20whether%20the%20system%20prefers%20%3A%3D%20as%20the%20assignment%20token.%22%0D%09%7C%20s%20%7C%0D%09self%20initStScannerForTokenization.%0D%09self%20scan%3A%20textOrString%20asString%20readStream.%0D%09s%20%3A%3D%20%28Array%20new%3A%2016%29%20writeStream.%0D%09%5BtokenType%20%3D%3D%20%23doIt%5D%20whileFalse%3A%0D%09%09%5B%28token%20%3D%3D%20%23-%20%0D%09%09%20%20and%3A%20%5B%28self%20typeTableAt%3A%20hereChar%29%20%3D%3D%20%23xDigit%5D%29%20ifTrue%3A%20%0D%09%09%09%5Bself%20scanToken.%0D%09%09%09%20token%20%3A%3D%20token%20negated%5D.%0D%09%09s%20nextPut%3A%20token.%0D%09%09self%20scanToken%5D.%0D%09%5Es%20contents%0D%0D%09%22StScanner%20new%20typedScanTokens%3A%20%28StScanner%20sourceCodeAt%3A%20%23typedScanTokens%3A%29%22"));
smalltalk.bind(smalltalk.StScanner, unescape("allowUnderscoreAssignments"), "allowUnderscoreAssignments", function StScanner__allowUnderscoreAssignments(){
const self = this; return (self.$klass).allowUnderscoreAsAssignment();
}
, "private", unescape("allowUnderscoreAssignments%0D%09%22Query%20preference%22%0D%09%5Eself%20class%20allowUnderscoreAsAssignment"));
smalltalk.bind(smalltalk.StScanner, unescape("allowUnderscoreSelectors"), "allowUnderscoreSelectors", function StScanner__allowUnderscoreSelectors(){
const self = this; return true;
}
, "private", unescape("allowUnderscoreSelectors%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StScanner, unescape("scanDigitString%3A"), "scanDigitString_", function StScanner__scanDigitString_(stream){
var numberString = nil;
var $$char = nil;
var seenPeriod = nil;
var seenRadix = nil;
const self = this; seenPeriod=false;
seenRadix=false;
numberString="".writeStream();
while(((function StScanner__(){
$$char=stream.peek();
return (nil.isNil_($$char) ? false : ($$char.isDigit()).or_((function StScanner__(){
return $$char.isUppercase();
}
)));
}
)()).valueOf()){numberString.nextPut_((stream.next()))};;
return numberString.contents();
}
, "private", unescape("scanDigitString%3A%20stream%0D%09%22we%20need%20to%20do%20this%20roundabout%20way%20to%20cope%20with%20broken%20number%20parsing%20on%20the%20JS%20side%22%0D%09%7C%20numberString%20char%20seenPeriod%20seenRadix%20%7C%0D%09seenPeriod%20%3A%3D%20false.%0D%09seenRadix%20%3A%3D%20false.%0D%09numberString%20%3A%3D%20%27%27%20writeStream.%0D%09%5Bchar%20%3A%3D%20stream%20peek.%0D%09char%20%0D%09%09ifNil%3A%20%5Bfalse%5D%0D%09%09ifNotNil%3A%20%5B%28char%20isDigit%20or%3A%20%5Bchar%20isUppercase%5D%29%5D%0D%09%5D%20whileTrue%3A%20%5BnumberString%20nextPut%3A%20stream%20next%5D.%0D%09%5EnumberString%20contents"));
smalltalk.bind(smalltalk.StScanner, unescape("scanNumberString%3A"), "scanNumberString_", function StScanner__scanNumberString_(stream){
var digitString = nil;
var numberString = nil;
var $$char = nil;
var seenPeriod = nil;
var seenRadix = nil;
const self = this; var $early={name:"stReturn"};
try {
seenPeriod=false;
seenRadix=false;
digitString=self.scanDigitString_(stream);
if ((digitString.isEmpty()).valueOf()) {return ""};
numberString="".writeStream();
$$char=stream.peek();
(function(){var $1$; $1$ = $$char; if (nil.isNil_($1$)) { return (function StScanner__(){
$early.result=digitString; throw ($early);
}
)() } else { return $1$; }})();
if (($$char._eq(".")).valueOf()) {numberString.nextPutAll_(digitString);
stream.next();
digitString=self.scanDigitString_(stream);
if ((digitString.isEmpty()).valueOf()) {stream.skip_((-1))} else {numberString.nextPut_(".");
numberString.nextPutAll_(digitString)};
return numberString.contents()};
if (($$char._eq("r")).valueOf()) {numberString.nextPutAll_(digitString);
stream.next();
digitString=self.scanDigitString_(stream);
if ((digitString.isEmpty()).valueOf()) {stream.skip_((-1))} else {numberString.nextPut_("r");
numberString.nextPutAll_(digitString)};
return numberString.contents()} else {return digitString};
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "private", unescape("scanNumberString%3A%20stream%0D%09%22we%20need%20to%20do%20this%20roundabout%20way%20to%20cope%20with%20broken%20number%20parsing%20on%20the%20JS%20side%22%0D%09%7C%20digitString%20numberString%20char%20seenPeriod%20seenRadix%20%7C%0D%09seenPeriod%20%3A%3D%20false.%0D%09seenRadix%20%3A%3D%20false.%0D%09digitString%20%3A%3D%20self%20scanDigitString%3A%20stream.%0D%09digitString%20isEmpty%20ifTrue%3A%20%5B%5E%27%27%5D.%0D%0D%09numberString%20%3A%3D%20%27%27%20writeStream.%0D%09char%20%3A%3D%20stream%20peek.%0D%09char%20ifNil%3A%20%5B%5EdigitString%5D.%0D%09%09%0D%09char%20%3D%20%24.%20%0D%09%09ifTrue%3A%20%5B%0D%09%09%09numberString%20nextPutAll%3A%20digitString.%0D%09%09%09stream%20next.%0D%09%09%09digitString%20%3A%3D%20self%20scanDigitString%3A%20stream.%0D%09%09%09digitString%20isEmpty%0D%09%09%09%09ifTrue%3A%20%5B%0D%09%09%09%09%09stream%20skip%3A%20-1.%20%22put%20the%20.%20back%22%5D%0D%09%09%09%09ifFalse%3A%20%5B%0D%09%09%09%09%09numberString%20nextPut%3A%20%24.%20.%0D%09%09%09%09%09numberString%20nextPutAll%3A%20digitString%5D.%0D%09%09%09%5EnumberString%20contents%5D.%0D%09%5Echar%20%3D%20%24r%0D%09%09ifTrue%3A%20%5B%0D%09%09%09numberString%20nextPutAll%3A%20digitString.%0D%09%09%09stream%20next.%0D%09%09%09digitString%20%3A%3D%20self%20scanDigitString%3A%20stream.%0D%09%09%09digitString%20isEmpty%0D%09%09%09%09ifTrue%3A%20%5B%0D%09%09%09%09%09stream%20skip%3A%20-1.%20%22put%20the%20r%20back%22%5D%0D%09%09%09%09ifFalse%3A%20%5B%0D%09%09%09%09%09numberString%20nextPut%3A%20%24r%20.%0D%09%09%09%09%09numberString%20nextPutAll%3A%20digitString%5D.%0D%09%09%09numberString%20contents%5D%0D%09%09ifFalse%3A%20%5BdigitString%5D%0D"));
smalltalk.StScanner.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StScanner.$klass, unescape("inviolateInstanceVariableNames"), "inviolateInstanceVariableNames", function StScanner_class__inviolateInstanceVariableNames(){
const self = this; return ["thisContext", "self"];
}
, "testing", unescape("inviolateInstanceVariableNames%0D%09%22Answer%20a%20list%20of%20instance%20variable%20names%20not%20to%20be%20used.%20%20%28Place%20holder%20for%20real%20list%29%22%0D%09%5E%20%23%28%27thisContext%27%20%27self%27%29"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("isLegalInstVarName%3A"), "isLegalInstVarName_", function StScanner_class__isLegalInstVarName_(aString){
const self = this; return ((self.isLiteralSymbol_(aString)).and_((function StScanner_class__(){
return (aString.includes_(":")).not();
}
))).and_((function StScanner_class__(){
return ((self.inviolateInstanceVariableNames()).includes_(aString)).not();
}
));
}
, "testing", unescape("isLegalInstVarName%3A%20aString%0D%09%22Answer%20whether%20aString%20is%20a%20legal%20instance%20variable%20name.%22%0D%0D%09%5E%20%28%28self%20isLiteralSymbol%3A%20aString%29%20and%3A%20%5B%28aString%20includes%3A%20%24%3A%29%20not%5D%29%20and%3A%0D%09%09%5B%28self%20inviolateInstanceVariableNames%20includes%3A%20%20aString%29%20not%5D"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("isLiteralSymbol%3A"), "isLiteralSymbol_", function StScanner_class__isLiteralSymbol_(aSymbol){
var i = nil;
var ascii = nil;
var type = nil;
var next = nil;
var last = nil;
const self = this; var $early={name:"stReturn"};
try {
i=aSymbol.size();
if ((i._eq((0))).valueOf()) {return false};
ascii=(aSymbol.at_((1))).asciiValue();
type=smalltalk.StScanner.classVariableAt_("TypeTable").at_ifAbsent_(ascii,(function StScanner_class__(){
$early.result=false; throw ($early);
}
));
if (((nil.is_eqeq_(type,"xLetter"))).valueOf()) {next=last=nil;
while((i._gt((1))).valueOf()){ascii=(aSymbol.at_(i)).asciiValue();
type=smalltalk.StScanner.classVariableAt_("TypeTable").at_ifAbsent_(ascii,(function StScanner_class__(){
$early.result=false; throw ($early);
}
));
if ((((nil.is_eqeq_(type,"xLetter"))).or_((function StScanner_class__(){
return ((nil.is_eqeq_(type,"xDigit"))).or_((function StScanner_class__(){
return ((nil.is_eqeq_(type,"xColon"))).and_((function StScanner_class__(){
if (((nil.is_eqeq_(next,nil))).valueOf()) {last="xColon";
return true} else {return ((nil.is_eqeq_(last,"xColon"))).and_((function StScanner_class__(){
return (next._no_no("xDigit")).and_((function StScanner_class__(){
return next._no_no("xColon");
}
));
}
))};
}
));
}
));
}
))).not()) {$early.result=false; throw ($early)};
next=type;
i=i._minus((1))};;
$early.result=true; throw ($early)};
if (((nil.is_eqeq_(type,"xBinary"))).valueOf()) {return ((2).to_(i)).allSatisfy_((function StScanner_class__(j){
ascii=(aSymbol.at_(j)).asciiValue();
return (nil.is_eqeq_(smalltalk.StScanner.classVariableAt_("TypeTable").at_ifAbsent_(ascii,(function StScanner_class__(){
return nil;
}
)),"xBinary"));
}
))};
if (((nil.is_eqeq_(type,"verticalBar"))).valueOf()) {return i._eq((1))};
return false;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "testing", unescape("isLiteralSymbol%3A%20aSymbol%20%0D%09%22Test%20whether%20a%20symbol%20can%20be%20stored%20as%20%23%20followed%20by%20its%20characters.%20%20%0D%09Symbols%20created%20internally%20with%20asSymbol%20may%20not%20have%20this%20property%2C%20%0D%09e.g.%20%273%27%20asSymbol.%22%0D%0D%09%7C%20i%20ascii%20type%20next%20last%20%7C%0D%09i%20%3A%3D%20aSymbol%20size.%0D%09i%20%3D%200%20ifTrue%3A%20%5B%5E%20false%5D.%0D%0D%09%22TypeTable%20should%20have%20been%20origined%20at%200%20rather%20than%201%20...%22%0D%09ascii%20%3A%3D%20%28aSymbol%20at%3A%201%29%20asciiValue.%0D%09type%20%3A%3D%20TypeTable%20at%3A%20ascii%20ifAbsent%3A%20%5B%5Efalse%5D.%0D%09type%20%3D%3D%20%23xLetter%20ifTrue%3A%20%5B%0D%09%09next%20%3A%3D%20last%20%3A%3D%20nil.%0D%09%09%5Bi%20%3E%201%5D%0D%09%09%09%09whileTrue%3A%20%0D%09%09%09%09%09%5Bascii%20%3A%3D%20%28aSymbol%20at%3A%20i%29%20asciiValue.%0D%09%09%09%09%09type%20%3A%3D%20TypeTable%20at%3A%20ascii%20ifAbsent%3A%20%5B%5Efalse%5D.%0D%09%09%09%09%09%28type%20%3D%3D%20%23xLetter%20or%3A%20%5Btype%20%3D%3D%20%23xDigit%20or%3A%20%5Btype%20%3D%3D%20%23xColon%0D%09%09%09%09%09%09%09and%3A%20%5B%0D%09%09%09%09%09%09%09%09next%20%3D%3D%20nil%0D%09%09%09%09%09%09%09%09%09ifTrue%3A%20%5Blast%20%3A%3D%20%23xColon.%20true%5D%20%0D%09%09%09%09%09%09%09%09%09ifFalse%3A%20%5Blast%20%3D%3D%20%23xColon%20and%3A%20%5Bnext%20%7E%7E%20%23xDigit%20and%3A%20%5Bnext%20%7E%7E%20%23xColon%5D%5D%5D%5D%5D%5D%29%0D%09%09%09%09%09%09ifFalse%3A%20%5B%5E%20false%5D.%0D%09%09%09%09%09next%20%3A%3D%20type.%0D%09%09%09%09%09i%20%3A%3D%20i%20-%201%5D.%0D%09%09%09%5E%20true%5D.%0D%09type%20%3D%3D%20%23xBinary%20ifTrue%3A%0D%09%09%5B%5E%282%20to%3A%20i%29%20allSatisfy%3A%20%5B%3Aj%20%7C%0D%09%09%09ascii%20%3A%3D%20%28aSymbol%20at%3A%20j%29%20asciiValue.%0D%09%09%09%28TypeTable%20at%3A%20ascii%20ifAbsent%3A%20%5B%5D%29%20%3D%3D%20%23xBinary%5D%5D.%0D%09type%20%3D%3D%20%23verticalBar%20ifTrue%3A%20%5B%5Ei%20%3D%201%5D.%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("wellFormedInstanceVariableNameFrom%3A"), "wellFormedInstanceVariableNameFrom_", function StScanner_class__wellFormedInstanceVariableNameFrom_(aString){
var cleansedString = nil;
const self = this; cleansedString=aString.select_((function StScanner_class__(ch){
return (ch.isDigit()).or_((function StScanner_class__(){
return ch.isLetter();
}
));
}
));
if (((cleansedString.isEmpty()).or_((function StScanner_class__(){
return (cleansedString.first()).isDigit();
}
))).valueOf()) {cleansedString="a"._comma(cleansedString)} else {cleansedString=cleansedString.withFirstCharacterDownshifted()};
while((self.isLegalInstVarName_(cleansedString)).not()){cleansedString=cleansedString._comma("x")};;
return cleansedString;
}
, "testing", unescape("wellFormedInstanceVariableNameFrom%3A%20aString%0D%09%22Answer%20a%20legal%20instance%20variable%20name%2C%20derived%20from%20aString%22%0D%0D%09%7C%20cleansedString%20%7C%0D%09cleansedString%20%3A%3D%20aString%20select%3A%20%5B%3Ach%20%7C%20ch%20isDigit%20or%3A%20%5Bch%20isLetter%5D%5D.%0D%09%28cleansedString%20isEmpty%20or%3A%20%5BcleansedString%20first%20isDigit%5D%29%0D%09%09ifTrue%3A%20%5BcleansedString%20%3A%3D%20%27a%27%2C%20cleansedString%5D%0D%09%09ifFalse%3A%09%5BcleansedString%20%3A%3D%20cleansedString%20withFirstCharacterDownshifted%5D.%0D%0D%09%5Bself%20isLegalInstVarName%3A%20cleansedString%5D%20whileFalse%3A%0D%09%09%5BcleansedString%20%3A%3D%20cleansedString%2C%20%27x%27%5D.%0D%09%5E%20cleansedString%0D%0D%22StScanner%20wellFormedInstanceVariableNameFrom%3A%20%20%27234%20xx%5C%20Uml%20/ler42342380-4%27%22"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("initialize"), "initialize", function StScanner_class__initialize(){
const self = this; self.initializeTypeTable();
smalltalk.StScanner.classVariableAt_put_("DoItCharacter",(1114111).asCharacter());
return self;
}
, "initialization", unescape("initialize%0D%09%22StScanner%20initialize%22%0D%09self%20initializeTypeTable.%0D%09%22The%20unicode%20ending%20with%20FFFE%20or%20FFFF%20are%20non%20characters%20and%20can%20be%20used%20by%20applications%20if%20they%20wish.%0D%09We%20use%20last%20legal%20unicode%2016r10FFFF%20to%20encode%20the%20end%20of%20source%20stream%22%0D%09DoItCharacter%20%3A%3D%2016r10FFFF%20asCharacter"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("initializeTypeTable"), "initializeTypeTable", function StScanner_class__initializeTypeTable(){
var newTable = nil;
const self = this; newTable=(smalltalk.Array.new_((256))).atAllPut_("xBinary");
newTable.atAll_put_([(9), (10), (12), (13), (32)],"xDelimiter");
newTable.atAll_put_((("0".asciiValue()).to_(("9".asciiValue()))),"xDigit");
(1).to_do_((255),(function StScanner_class__(index){
if (((index.asCharacter()).isLetter()).valueOf()) {return newTable.at_put_(index,"xLetter")} else {return nil};
}
));
newTable.at_put_((unescape("%22").asciiValue()),"xDoubleQuote");
newTable.at_put_((unescape("%23").asciiValue()),"xLitQuote");
newTable.at_put_(("$".asciiValue()),"xDollar");
newTable.at_put_((unescape("%27").asciiValue()),"xSingleQuote");
newTable.at_put_((":".asciiValue()),"xColon");
newTable.at_put_((unescape("%28").asciiValue()),"leftParenthesis");
newTable.at_put_((unescape("%29").asciiValue()),"rightParenthesis");
newTable.at_put_((".".asciiValue()),"period");
newTable.at_put_((unescape("%3B").asciiValue()),"semicolon");
newTable.at_put_((unescape("%5B").asciiValue()),"leftBracket");
newTable.at_put_((unescape("%5D").asciiValue()),"rightBracket");
newTable.at_put_((unescape("%7B").asciiValue()),"leftBrace");
newTable.at_put_((unescape("%7D").asciiValue()),"rightBrace");
newTable.at_put_((unescape("%5E").asciiValue()),"upArrow");
newTable.at_put_(("_".asciiValue()),"xUnderscore");
newTable.at_put_((unescape("%7C").asciiValue()),"verticalBar");
smalltalk.StScanner.classVariableAt_put_("TypeTable",newTable);
return self;
}
, "initialization", unescape("initializeTypeTable%0D%09%22self%20initializeTypeTable%22%0D%0D%09%7C%20newTable%20%7C%0D%09newTable%20%3A%3D%20%28Array%20new%3A%20256%29%20atAllPut%3A%20%23xBinary.%20%22default%22%0D%09newTable%20atAll%3A%20%23%289%2010%2012%2013%2032%20%29%20put%3A%20%23xDelimiter.%20%22tab%20lf%20ff%20cr%20space%22%0D%09newTable%20atAll%3A%20%28%240%20asciiValue%20to%3A%20%249%20asciiValue%29%20put%3A%20%23xDigit.%0D%0D%091%20to%3A%20255%0D%09%09do%3A%20%5B%3Aindex%20%7C%0D%09%09%09index%20asCharacter%20isLetter%0D%09%09%09%09ifTrue%3A%20%5BnewTable%20at%3A%20index%20put%3A%20%23xLetter%5D%5D.%0D%0D%09newTable%20at%3A%20%24%22%20asciiValue%20put%3A%20%23xDoubleQuote.%0D%09newTable%20at%3A%20%24%23%20asciiValue%20put%3A%20%23xLitQuote.%0D%09newTable%20at%3A%20%24%24%20asciiValue%20put%3A%20%23xDollar.%0D%09newTable%20at%3A%20%24%27%20asciiValue%20put%3A%20%23xSingleQuote.%0D%09newTable%20at%3A%20%24%3A%20asciiValue%20put%3A%20%23xColon.%0D%09newTable%20at%3A%20%24%28%20asciiValue%20put%3A%20%23leftParenthesis.%0D%09newTable%20at%3A%20%24%29%20asciiValue%20put%3A%20%23rightParenthesis.%0D%09newTable%20at%3A%20%24.%20asciiValue%20put%3A%20%23period.%0D%09newTable%20at%3A%20%24%3B%20asciiValue%20put%3A%20%23semicolon.%0D%09newTable%20at%3A%20%24%5B%20asciiValue%20put%3A%20%23leftBracket.%0D%09newTable%20at%3A%20%24%5D%20asciiValue%20put%3A%20%23rightBracket.%0D%09newTable%20at%3A%20%24%7B%20asciiValue%20put%3A%20%23leftBrace.%0D%09newTable%20at%3A%20%24%7D%20asciiValue%20put%3A%20%23rightBrace.%0D%09newTable%20at%3A%20%24%5E%20asciiValue%20put%3A%20%23upArrow.%0D%09newTable%20at%3A%20%24_%20asciiValue%20put%3A%20%23xUnderscore.%0D%09newTable%20at%3A%20%24%7C%20asciiValue%20put%3A%20%23verticalBar.%0D%09TypeTable%20%3A%3D%20newTable%20%22bon%20voyage%21%22"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("allowBlockArgumentAssignment"), "allowBlockArgumentAssignment", function StScanner_class__allowBlockArgumentAssignment(){
const self = this; return (function(){var $1$; $1$ = smalltalk.StScanner.classVariableAt_("AllowBlockArgumentAssignment"); if (nil.isNil_($1$)) { return false } else { return $1$; }})();
}
, "preferences", unescape("allowBlockArgumentAssignment%0D%09%22Accessor%20for%20the%20system-wide%20preference%22%0D%09%0D%09%22%3Cpreference%3A%20%27Allow%20block%20argument%20assignment.%27%0D%09%09category%3A%20%27Compiler%27%0D%09%09description%3A%20%27If%20enabled%2C%20the%20compiler%20will%20allow%20assignment%20into%20block%20arguments.%0DThis%20provides%20backward%20compatibility%20with%20the%20pre-closure%20compiler.%27%0D%09%09type%3A%20%23Boolean%3E%22%0D%09%5EAllowBlockArgumentAssignment%20ifNil%3A%20%5B%20false%20%5D"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("allowBlockArgumentAssignment%3A"), "allowBlockArgumentAssignment_", function StScanner_class__allowBlockArgumentAssignment_(aBoolean){
const self = this; smalltalk.StScanner.classVariableAt_put_("AllowBlockArgumentAssignment",aBoolean);
return self;
}
, "preferences", unescape("allowBlockArgumentAssignment%3A%20aBoolean%0D%09%22Accessor%20for%20the%20system-wide%20preference%22%0D%09%0D%09AllowBlockArgumentAssignment%20%3A%3D%20aBoolean"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("allowUnderscoreAsAssignment"), "allowUnderscoreAsAssignment", function StScanner_class__allowUnderscoreAsAssignment(){
const self = this; return (function(){var $1$; $1$ = smalltalk.StScanner.classVariableAt_("AllowUnderscoreAssignments"); if (nil.isNil_($1$)) { return true } else { return $1$; }})();
}
, "preferences", unescape("allowUnderscoreAsAssignment%0D%09%22Accessor%20for%20the%20system-wide%20preference%22%0D%09%22%3Cpreference%3A%20%27Allow%20underscore%20assignments%27%0D%09%09category%3A%20%27Compiler%27%0D%09%09description%3A%20%27When%20true%2C%20underscore%20can%20be%20used%20as%20assignment%20operator%27%0D%09%09type%3A%20%23Boolean%3E%22%0D%09%5EAllowUnderscoreAssignments%20ifNil%3A%5Btrue%5D"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("allowUnderscoreAsAssignment%3A"), "allowUnderscoreAsAssignment_", function StScanner_class__allowUnderscoreAsAssignment_(aBool){
const self = this; smalltalk.StScanner.classVariableAt_put_("AllowUnderscoreAssignments",aBool);
return self;
}
, "preferences", unescape("allowUnderscoreAsAssignment%3A%20aBool%0D%09%22Accessor%20for%20the%20system-wide%20preference%22%0D%09AllowUnderscoreAssignments%20%3A%3D%20aBool"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("prefAllowUnderscoreAssignments"), "prefAllowUnderscoreAssignments", function StScanner_class__prefAllowUnderscoreAssignments(){
const self = this; self.deprecated_(unescape("Use%20%23allowUnderscoreAsAssignment"));
return self.allowUnderscoreAsAssignment();
}
, "preferences", unescape("prefAllowUnderscoreAssignments%0D%09%22Accessor%20for%20the%20system-wide%20preference%22%0D%09%0D%09self%20deprecated%3A%20%27Use%20%23allowUnderscoreAsAssignment%27.%0D%09%5Eself%20allowUnderscoreAsAssignment"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("prefAllowUnderscoreAssignments%3A"), "prefAllowUnderscoreAssignments_", function StScanner_class__prefAllowUnderscoreAssignments_(aBool){
const self = this; self.deprecated_(unescape("Use%20%23allowUnderscoreAsAssignment%3A"));
self.allowUnderscoreAsAssignment_(aBool);
return self;
}
, "preferences", unescape("prefAllowUnderscoreAssignments%3A%20aBool%0D%09%22Accessor%20for%20the%20system-wide%20preference%22%0D%09%0D%09self%20deprecated%3A%20%27Use%20%23allowUnderscoreAsAssignment%3A%27.%0D%09self%20allowUnderscoreAsAssignment%3A%20aBool"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("prefAllowUnderscoreSelectors"), "prefAllowUnderscoreSelectors", function StScanner_class__prefAllowUnderscoreSelectors(){
const self = this; return (function(){var $1$; $1$ = smalltalk.StScanner.classVariableAt_("AllowUnderscoreSelectors"); if (nil.isNil_($1$)) { return false } else { return $1$; }})();
}
, "preferences", unescape("prefAllowUnderscoreSelectors%0D%09%22Accessor%20for%20the%20system-wide%20preference%22%0D%09%22%3Cpreference%3A%20%27Allow%20underscore%20selectors%27%0D%09%09category%3A%20%27Compiler%27%0D%09%09description%3A%20%27When%20true%2C%20underscore%20can%20be%20used%20in%20selectors%20and%20varibable%20names%27%0D%09%09type%3A%20%23Boolean%3E%22%0D%09%5EAllowUnderscoreSelectors%20ifNil%3A%5Bfalse%5D"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("prefAllowUnderscoreSelectors%3A"), "prefAllowUnderscoreSelectors_", function StScanner_class__prefAllowUnderscoreSelectors_(aBool){
const self = this; smalltalk.StScanner.classVariableAt_put_("AllowUnderscoreSelectors",aBool);
smalltalk.String.initialize();
return self;
}
, "preferences", unescape("prefAllowUnderscoreSelectors%3A%20aBool%0D%09%22Accessor%20for%20the%20system-wide%20preference%22%0D%09AllowUnderscoreSelectors%20%3A%3D%20aBool.%0D%09%0D%09%22Reinitialize%20String%27s%20tokenish%20character%20map%22%0D%09String%20initialize"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("prefAllowUnicharSymbol"), "prefAllowUnicharSymbol", function StScanner_class__prefAllowUnicharSymbol(){
const self = this; return (function(){var $1$; $1$ = smalltalk.StScanner.classVariableAt_("AllowUnicharSymbol"); if (nil.isNil_($1$)) { return true } else { return $1$; }})();
}
, "preferences", unescape("prefAllowUnicharSymbol%0D%09%22Accessor%20for%20the%20system-wide%20preference%22%0D%09%22%3Cpreference%3A%20%27Allow%20symbols%20with%20unique%20character%20like%20%23%2C%27%0D%09%09category%3A%20%27Compiler%27%0D%09%09description%3A%20%27When%20true%2C%20the%20historical%20syntax%20%23%2C%20%23%3B%20or%20%23.%20is%20allowed.%27%0D%09%09type%3A%20%23Boolean%3E%22%0D%09%5EAllowUnicharSymbol%20ifNil%3A%20%5Btrue%5D"));
smalltalk.bind(smalltalk.StScanner.$klass, unescape("prefAllowUnicharSymbol%3A"), "prefAllowUnicharSymbol_", function StScanner_class__prefAllowUnicharSymbol_(aBoolean){
const self = this; smalltalk.StScanner.classVariableAt_put_("AllowUnicharSymbol",aBoolean);
return self;
}
, "preferences", unescape("prefAllowUnicharSymbol%3A%20aBoolean%0D%09%22Accessor%20for%20the%20system-wide%20preference%22%0D%09AllowUnicharSymbol%20%3A%3D%20aBoolean"));
smalltalk.addClass("StParser", smalltalk.StScanner, ['here', 'hereType', 'hereMark', 'hereEnd', 'prevMark', 'prevEnd', 'encoder', 'parseNode', 'failBlock', 'requestorOffset', 'tempsMark', 'doitFlag', 'queriedUnusedTemporaries', 'cue', 'pragmas'], 'Compiler-JS');
smalltalk.StParser.$classVariableNames=("");
smalltalk.bind(smalltalk.StParser, unescape("ambiguousSelector%3AinRange%3A"), "ambiguousSelector_inRange_", function StParser__ambiguousSelector_inRange_(aString,anInterval){
const self = this; (function StParser__($1$){
$1$.cr();
$1$.store_((self['@encoder'].classEncoding()));
$1$.nextPutAll_(unescape("%3E%3E"));
$1$.store_((self['@encoder'].selector()));
return $1$.show_(((" would send "._comma(self['@token']))._comma(unescape("-"))))}
)(smalltalk.Transcript);
return smalltalk.superImplementor(smalltalk.StParser,'ambiguousSelector_inRange_').apply(self, [aString,anInterval]);
}
, "error correction", unescape("ambiguousSelector%3A%20aString%20inRange%3A%20anInterval%0D%09%0D%09%22In%20non%20interactive%20mode%2C%20compile%20with%20backward%20comapatibility%3A%20%24-%20is%20part%20of%20literal%20argument%22%0D%09Transcript%20cr%3B%20store%3A%20encoder%20classEncoding%3B%20nextPutAll%3A%23%27%3E%3E%27%3Bstore%3A%20encoder%20selector%3B%20show%3A%20%27%20would%20send%20%27%20%2C%20token%20%2C%20%27-%27.%0D%09%5Esuper%20ambiguousSelector%3A%20aString%20inRange%3A%20anInterval.%0D"));
smalltalk.bind(smalltalk.StParser, unescape("canDeclareClassVariable"), "canDeclareClassVariable", function StParser__canDeclareClassVariable(){
const self = this; return (self['@encoder'].classEncoding())._no_no(smalltalk.UndefinedObject);
}
, "error correction", unescape("canDeclareClassVariable%0D%09%5Eencoder%20classEncoding%20%7E%7E%20UndefinedObject"));
smalltalk.bind(smalltalk.StParser, unescape("canDeclareInstanceVariable"), "canDeclareInstanceVariable", function StParser__canDeclareInstanceVariable(){
const self = this; return (self['@encoder'].classEncoding())._no_no(smalltalk.UndefinedObject);
}
, "error correction", unescape("canDeclareInstanceVariable%0D%09%5Eencoder%20classEncoding%20%7E%7E%20UndefinedObject"));
smalltalk.bind(smalltalk.StParser, unescape("correctSelector%3AwordIntervals%3AexprInterval%3AifAbort%3A"), "correctSelector_wordIntervals_exprInterval_ifAbort_", function StParser__correctSelector_wordIntervals_exprInterval_ifAbort_(proposedKeyword,spots,expInt,abortAction){
const self = this; return proposedKeyword.asSymbol();
}
, "error correction", unescape("correctSelector%3A%20proposedKeyword%20wordIntervals%3A%20spots%20exprInterval%3A%20expInt%20ifAbort%3A%20abortAction%0D%09%22Correct%20the%20proposedKeyword%20to%20some%20selector%20symbol%2C%20correcting%20the%20original%20text%20if%20such%20action%20is%20indicated.%20%20abortAction%20is%20invoked%20if%20the%20proposedKeyword%20couldn%27t%20be%20converted%20into%20a%20valid%20selector.%20%20Spots%20is%20an%20ordered%20collection%20of%20intervals%20within%20the%20test%20stream%20of%20the%20for%20each%20of%20the%20keyword%20parts.%22%0D%0D%09%5EproposedKeyword%20asSymbol"));
smalltalk.bind(smalltalk.StParser, unescape("declareTemp%3Aat%3A"), "declareTemp_at_", function StParser__declareTemp_at_(name,levelTag){
const self = this; return (function StParser__($1$){
$1$.tag_(levelTag);
return $1$.yourself()}
)(self['@encoder'].bindUndeclaredTemp_(name));
}
, "error correction", unescape("declareTemp%3A%20name%20at%3A%20levelTag%0D%09%22Defer%20declaring%20the%20temp%20until%20the%20parse%20has%20completed.%20%20This%20allows%0D%09%20the%20StParser%20to%20declare%20the%20temp%20in%20the%20minimum%20enclosing%20block%20instead%0D%09%20of%20always%20at%20method%20level.%20%20See%20StParser%3E%3EdeclareUndeclaredTemps%3A%22%0D%09%5E%28encoder%20bindUndeclaredTemp%3A%20name%29%0D%09%09tag%3A%20levelTag%3B%0D%09%09yourself"));
smalltalk.bind(smalltalk.StParser, unescape("declareTempAndPaste%3A"), "declareTempAndPaste_", function StParser__declareTempAndPaste_(name){
const self = this; return self['@encoder'].bindUndeclaredTemp_(name);
}
, "error correction", unescape("declareTempAndPaste%3A%20name%0D%09%22Defer%20declaring%20the%20temp%20until%20the%20parse%20has%20completed.%20%20This%20allows%0D%09%20the%20StParser%20to%20declare%20the%20temp%20in%20the%20minimum%20enclosing%20block%20instead%0D%09%20of%20always%20at%20method%20level.%20%20See%20StParser%3E%3EdeclareUndeclaredTemps%3A%22%0D%09%5Eencoder%20bindUndeclaredTemp%3A%20name"));
smalltalk.bind(smalltalk.StParser, unescape("substituteSelector%3AwordIntervals%3A"), "substituteSelector_wordIntervals_", function StParser__substituteSelector_wordIntervals_(selectorParts,spots){
var offset = nil;
const self = this; offset=(0);
selectorParts.with_do_(spots,(function StParser__(word,interval){
return offset=self.substituteWord_wordInterval_offset_(word,interval,offset);
}
));
return self;
}
, "error correction", unescape("substituteSelector%3A%20selectorParts%20wordIntervals%3A%20spots%0D%09%22Substitute%20the%20correctSelector%20into%20the%20%28presuamed%20interactive%29%20receiver.%22%0D%09%7C%20offset%20%7C%0D%09offset%20%3A%3D%200.%0D%09selectorParts%20with%3A%20spots%20do%3A%0D%09%09%5B%20%3Aword%20%3Ainterval%20%7C%0D%09%09offset%20%3A%3D%20self%20substituteWord%3A%20word%20wordInterval%3A%20interval%20offset%3A%20offset%20%5D%0D"));
smalltalk.bind(smalltalk.StParser, unescape("substituteVariable%3AatInterval%3A"), "substituteVariable_atInterval_", function StParser__substituteVariable_atInterval_(each,anInterval){
const self = this; self.substituteWord_wordInterval_offset_(each,anInterval,(0));
return self['@encoder'].encodeVariable_(each);
}
, "error correction", unescape("substituteVariable%3A%20each%20atInterval%3A%20anInterval%20%0D%09self%20%0D%09%09substituteWord%3A%20each%0D%09%09wordInterval%3A%20anInterval%0D%09%09offset%3A%200.%0D%09%5Eencoder%20encodeVariable%3A%20each"));
smalltalk.bind(smalltalk.StParser, unescape("addWarning%3A"), "addWarning_", function StParser__addWarning_(aString){
const self = this; self;
return self;
}
, "error handling", unescape("addWarning%3A%20aString%0D%09%22ignored%20by%20the%20default%20compiler.%22"));
smalltalk.bind(smalltalk.StParser, unescape("expected%3A"), "expected_", function StParser__expected_(aString){
const self = this; return self.notify_at_((aString._comma(" expected")),(self['@hereMark']._plus(self['@requestorOffset'])));
}
, "error handling", unescape("expected%3A%20aString%20%0D%09%22Notify%20a%20problem%20at%20token%20%27here%27.%22%0D%0D%09%5E%20self%20notify%3A%20aString%20%2C%20%27%20expected%27%20at%3A%20hereMark%20+%20requestorOffset"));
smalltalk.bind(smalltalk.StParser, unescape("fail"), "fail", function StParser__fail(){
var exitBlock = nil;
const self = this; if ((((nil.is_eqeq_(self['@encoder'],nil))).or_((function StParser__(){
return (nil.is_eqeq_(self['@encoder'],self));
}
))).not()) {self['@encoder'].release();
self['@encoder']=nil};
exitBlock=self['@failBlock'];
self['@failBlock']=nil;
return exitBlock.value();
}
, "error handling", unescape("fail%0D%0D%09%7C%20exitBlock%20%7C%0D%09%28encoder%20%3D%3D%20nil%20or%3A%20%5Bencoder%20%3D%3D%20self%5D%29%0D%09%09ifFalse%3A%20%5Bencoder%20release.%20encoder%20%3A%3D%20nil%5D.%20%22break%20cycle%22%0D%09exitBlock%20%3A%3D%20failBlock.%0D%09failBlock%20%3A%3D%20nil.%0D%09%5EexitBlock%20value"));
smalltalk.bind(smalltalk.StParser, unescape("interactive"), "interactive", function StParser__interactive(){
const self = this; return ((nil.isNil_(self['@cue'].requestor())===false)).and_((function StParser__(){
return (((smalltalk.responds_to_(self['@cue'].requestor(),"wantsInteractiveErrorCorrection"))).not()).or_((function StParser__(){
return (self['@cue'].requestor()).perform_("wantsInteractiveErrorCorrection");
}
));
}
));
}
, "error handling", unescape("interactive%0D%09%22The%20compilation%20is%20interactive%20if%20there%20is%20a%20requestor%20and%20that%20requestor%20does%20either%20not%20care%20or%20explicitly%20allow%20interactive%20error%20correction.%22%0D%0D%09%5E%20cue%20requestor%20notNil%0D%09%09and%3A%20%5B%28cue%20requestor%20respondsTo%3A%20%23wantsInteractiveErrorCorrection%29%20not%0D%09%09%09or%3A%20%5Bcue%20requestor%20perform%3A%20%23wantsInteractiveErrorCorrection%5D%5D"));
smalltalk.bind(smalltalk.StParser, unescape("notify%3A"), "notify_", function StParser__notify_(aString){
const self = this; return self.notify_at_(aString,(self['@prevMark']._plus(self['@requestorOffset'])));
}
, "error handling", unescape("notify%3A%20aString%20%0D%09%22Notify%20problem%20at%20token%20before%20%27here%27.%22%0D%0D%09%5Eself%20notify%3A%20aString%20at%3A%20prevMark%20+%20requestorOffset"));
smalltalk.bind(smalltalk.StParser, unescape("notify%3Aat%3A"), "notify_at_", function StParser__notify_at_(string,location){
var errorString = nil;
const self = this; errorString=(self['@source'].contents()).copyReplaceFrom_to_with_(location,(location._minus((1))),((((smalltalk.Character.lf()).asString())._comma(string))._comma(unescape("%20-%3E"))));
smalltalk.StCompileException.signal_(errorString);
return self;
}
, "error handling", unescape("notify%3A%20string%20at%3A%20location%0D%09%7C%20errorString%20%7C%0D%09errorString%20%3A%3D%20source%20contents%0D%09%09copyReplaceFrom%3A%20location%0D%09%09to%3A%20location%20-%201%0D%09%09with%3A%20%28Character%20lf%20asString%20%2C%20string%20%2C%20%27%20-%3E%27%29.%0D%09StCompileException%20signal%3A%20errorString%0D"));
smalltalk.bind(smalltalk.StParser, unescape("offEnd%3A"), "offEnd_", function StParser__offEnd_(aString){
const self = this; if (((nil.is_eqeq_(self['@requestorOffset'],nil))).valueOf()) {return self.notify_at_(aString,self['@mark'])} else {return self.notify_at_(aString,(self['@mark']._plus(self['@requestorOffset'])))};
}
, "error handling", unescape("offEnd%3A%20aString%20%0D%09%22Notify%20a%20problem%20beyond%20%27here%27%20%28in%20lookAhead%20token%29.%20Don%27t%20be%20offEnded%21%22%0D%0D%09requestorOffset%20%3D%3D%20nil%0D%09%09ifTrue%3A%20%5B%5E%20self%20notify%3A%20aString%20at%3A%20mark%5D%0D%09%09ifFalse%3A%20%5B%5E%20self%20notify%3A%20aString%20at%3A%20mark%20+%20requestorOffset%5D%0D"));
smalltalk.bind(smalltalk.StParser, unescape("argumentName"), "argumentName", function StParser__argumentName(){
const self = this; if (((nil.is_eqeq_(self['@hereType'],"word"))).not()) {return self.expected_("Argument name")};
return self.advance();
}
, "expression types", unescape("argumentName%0D%0D%09hereType%20%3D%3D%20%23word%0D%09%09ifFalse%3A%20%5B%5Eself%20expected%3A%20%27Argument%20name%27%5D.%0D%09%5Eself%20advance"));
smalltalk.bind(smalltalk.StParser, unescape("assignment%3A"), "assignment_", function StParser__assignment_(varNode){
var loc = nil;
var start = nil;
const self = this; if (((loc=varNode.assignmentCheck_at_(self['@encoder'],(self['@prevMark']._plus(self['@requestorOffset']))))._gt_eq((0))).valueOf()) {return self.notify_at_((((unescape("Cannot%20store%20into%20%22")._comma(((varNode.$klass).name())))._comma((varNode.asString())))._comma(unescape("%22"))),loc)};
start=self.startOfNextToken();
self.advance();
if ((self.expression()).not()) {return self.expected_("Expression")};
self['@parseNode']=(smalltalk.StAssignmentNode.$$new()).variable_value_(varNode,self['@parseNode']);
varNode.nowHasDef();
return true;
}
, "expression types", unescape("assignment%3A%20varNode%0D%09%22%20var%20%27%3A%3D%27%20expression%20%3D%3E%20AssignmentNode.%22%0D%09%7C%20loc%20start%20%7C%0D%09%28loc%20%3A%3D%20varNode%20assignmentCheck%3A%20encoder%20at%3A%20prevMark%20+%20requestorOffset%29%20%3E%3D%200%0D%09%09ifTrue%3A%20%5B%5Eself%20notify%3A%20%27Cannot%20store%20into%20%22%27%20%2C%20varNode%20class%20name%20%2C%20varNode%20asString%20%2C%20%27%22%27%20at%3A%20loc%5D.%0D%09start%20%3A%3D%20self%20startOfNextToken.%0D%09self%20advance.%0D%09self%20expression%20ifFalse%3A%20%5B%5Eself%20expected%3A%20%27Expression%27%5D.%0D%09parseNode%20%3A%3D%20StAssignmentNode%20new%0D%09%09%09%09variable%3A%20varNode%0D%09%09%09%09value%3A%20parseNode.%0D%09varNode%20nowHasDef.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StParser, unescape("blockExpression"), "blockExpression", function StParser__blockExpression(){
var blockNode = nil;
var variableNodes = nil;
var temporaryBlockVariables = nil;
var start = nil;
const self = this; blockNode=smalltalk.StBlockNode.$$new();
variableNodes=smalltalk.OrderedCollection.$$new();
start=self['@prevMark']._plus(self['@requestorOffset']);
while((self.match_("colon")).valueOf()){variableNodes.addLast_((self['@encoder'].bindBlockArg_within_((self.argumentName()),blockNode)))};;
if (((((variableNodes.size())._gt((0)))._amp((self['@hereType']._no_no("rightBracket")))).and_((function StParser__(){
return (self.match_("verticalBar")).not();
}
))).valueOf()) {return self.expected_("Vertical bar")};
temporaryBlockVariables=self.temporaryBlockVariablesFor_(blockNode);
self.statements_innerBlock_blockNode_(variableNodes,true,blockNode);
blockNode.temporaries_(temporaryBlockVariables);
if ((self.match_("rightBracket")).not()) {return self.expected_("Period or right bracket")};
temporaryBlockVariables.do_((function StParser__(variable){
return variable.scope_((-1));
}
));
variableNodes.do_((function StParser__(variable){
return variable.scope_((-1));
}
));
return self;
}
, "expression types", unescape("blockExpression%0D%09%22%5B%20%28%7B%3Avar%7D%20%7C%29%20%28%7C%20%7Btemps%7D%20%7C%29%20%28statements%29%20%5D%20%3D%3E%20BlockNode.%22%0D%0D%09%7C%20blockNode%20variableNodes%20temporaryBlockVariables%20start%20%7C%0D%09blockNode%20%3A%3D%20StBlockNode%20new.%0D%09variableNodes%20%3A%3D%20OrderedCollection%20new.%0D%09start%20%3A%3D%20prevMark%20+%20requestorOffset.%0D%09%22Gather%20parameters.%22%0D%09%5Bself%20match%3A%20%23colon%5D%20whileTrue%3A%0D%09%09%5BvariableNodes%20addLast%3A%20%28encoder%20bindBlockArg%3A%20self%20argumentName%20within%3A%20blockNode%29%5D.%0D%09%28variableNodes%20size%20%3E%200%20%26%20%28hereType%20%7E%7E%20%23rightBracket%29%20and%3A%20%5B%28self%20match%3A%20%23verticalBar%29%20not%5D%29%20ifTrue%3A%0D%09%09%5B%5Eself%20expected%3A%20%27Vertical%20bar%27%5D.%0D%0D%09temporaryBlockVariables%20%3A%3D%20self%20temporaryBlockVariablesFor%3A%20blockNode.%0D%09self%20statements%3A%20variableNodes%20innerBlock%3A%20true%20blockNode%3A%20blockNode.%0D%09blockNode%20temporaries%3A%20temporaryBlockVariables.%0D%0D%09%28self%20match%3A%20%23rightBracket%29%20ifFalse%3A%20%5B%5Eself%20expected%3A%20%27Period%20or%20right%20bracket%27%5D.%0D%0D%09%22The%20scope%20of%20the%20parameters%20and%20temporary%20block%20variables%20is%20no%20longer%20active.%22%0D%09temporaryBlockVariables%20do%3A%20%5B%3Avariable%20%7C%20variable%20scope%3A%20-1%5D.%0D%09variableNodes%20do%3A%20%5B%3Avariable%20%7C%20variable%20scope%3A%20-1%5D"));
smalltalk.bind(smalltalk.StParser, unescape("braceExpression"), "braceExpression", function StParser__braceExpression(){
const self = this; self.notify_("Brace expressions not supported");
return self;
}
, "expression types", unescape("braceExpression%0D%09self%20notify%3A%20%27Brace%20expressions%20not%20supported%27"));
smalltalk.bind(smalltalk.StParser, unescape("cascade"), "cascade", function StParser__cascade(){
var rcvr = nil;
var msgs = nil;
const self = this; if ((self['@parseNode'].canCascade()).not()) {return self.expected_("Cascading not")};
rcvr=self['@parseNode'].receiver();
msgs=smalltalk.OrderedCollection.with_(self['@parseNode']);
while((self.match_("semicolon")).valueOf()){self['@parseNode']=rcvr;
if ((self.messagePart_repeat_((3),false)).not()) {return self.expected_("Cascade")};
if ((self['@parseNode'].canCascade()).not()) {return self.expected_(unescape("%3C-%20No%20special%20messages"))};
self['@parseNode'].ensureCanCascade_(self['@encoder']);
msgs.addLast_(self['@parseNode'])};;
self['@parseNode']=(smalltalk.StCascadeNode.$$new()).receiver_messages_(rcvr,msgs);
return self;
}
, "expression types", unescape("cascade%0D%09%22%20%7B%3B%20message%7D%20%3D%3E%20CascadeNode.%22%0D%0D%09%7C%20rcvr%20msgs%20%7C%0D%09parseNode%20canCascade%20ifFalse%3A%0D%09%09%5B%5Eself%20expected%3A%20%27Cascading%20not%27%5D.%0D%09rcvr%20%3A%3D%20parseNode%20receiver.%0D%09msgs%20%3A%3D%20OrderedCollection%20with%3A%20parseNode.%0D%09%5Bself%20match%3A%20%23semicolon%5D%0D%09%09whileTrue%3A%20%0D%09%09%09%5BparseNode%20%3A%3D%20rcvr.%0D%09%09%09%28self%20messagePart%3A%203%20repeat%3A%20false%29%0D%09%09%09%09ifFalse%3A%20%5B%5Eself%20expected%3A%20%27Cascade%27%5D.%0D%09%09%09parseNode%20canCascade%20ifFalse%3A%0D%09%09%09%09%5B%5Eself%20expected%3A%20%27%3C-%20No%20special%20messages%27%5D.%0D%09%09%09parseNode%20ensureCanCascade%3A%20encoder.%0D%09%09%09msgs%20addLast%3A%20parseNode%5D.%0D%09parseNode%20%3A%3D%20StCascadeNode%20new%20receiver%3A%20rcvr%20messages%3A%20msgs"));
smalltalk.bind(smalltalk.StParser, unescape("doIt%3Aarguments%3Aprecedence%3A"), "doIt_arguments_precedence_", function StParser__doIt_arguments_precedence_(selector,args,precedence){
var blk = nil;
var prim = nil;
var temps = nil;
var messageComment = nil;
var methodNode = nil;
const self = this; self['@encoder'].selector_(selector);
args.do_((function StParser__(argNode){
return argNode.beMethodArg();
}
));
temps=self.temporaries();
messageComment=self['@currentComment'];
self['@currentComment']=nil;
prim=self.pragmaPrimitives();
self.statements_innerBlock_([],true);
blk=self['@parseNode'];
blk.returnLast();
if (((nil.is_eqeq_(self['@hereType'],"doIt"))).not()) {return self.expected_("Nothing more")};
methodNode=(self.newMethodNode()).comment_(messageComment);
methodNode.selector_arguments_precedence_temporaries_block_encoder_primitive_(selector,args,precedence,temps,blk,self['@encoder'],prim);
return methodNode;
}
, "expression types", unescape("doIt%3A%20selector%20arguments%3A%20args%20precedence%3A%20precedence%0D%09%22%20pattern%20%5B%20%7C%20temporaries%20%5D%20block%20%3D%3E%20MethodNode.%22%0D%0D%09%7C%20blk%20prim%20temps%20messageComment%20methodNode%20%7C%0D%09encoder%20selector%3A%20selector.%0D%09args%20do%3A%20%5B%3AargNode%20%7C%20argNode%20beMethodArg%5D.%0D%09temps%20%3A%3D%20self%20temporaries.%0D%09messageComment%20%3A%3D%20currentComment.%0D%09currentComment%20%3A%3D%20nil.%0D%09prim%20%3A%3D%20self%20pragmaPrimitives.%0D%09self%20statements%3A%20%23%28%29%20innerBlock%3A%20true.%0D%09blk%20%3A%3D%20parseNode.%0D%09blk%20returnLast.%0D%09hereType%20%3D%3D%20%23doIt%20ifFalse%3A%20%5B%5Eself%20expected%3A%20%27Nothing%20more%27%5D.%0D%09methodNode%20%3A%3D%20self%20newMethodNode%20comment%3A%20messageComment.%0D%09methodNode%0D%09%09selector%3A%20selector%0D%09%09arguments%3A%20args%0D%09%09precedence%3A%20precedence%0D%09%09temporaries%3A%20temps%0D%09%09block%3A%20blk%0D%09%09encoder%3A%20encoder%0D%09%09primitive%3A%20prim.%0D%09%5EmethodNode"));
smalltalk.bind(smalltalk.StParser, unescape("expression"), "expression", function StParser__expression(){
const self = this; if ((((nil.is_eqeq_(self['@hereType'],"word"))).and_((function StParser__(){
return (nil.is_eqeq_(self['@tokenType'],"leftArrow"));
}
))).valueOf()) {return self.assignment_((self.variable()))};
if ((self.primaryExpression()).not()) {return false};
if (((self.messagePart_repeat_((3),true)).and_((function StParser__(){
return (nil.is_eqeq_(self['@hereType'],"semicolon"));
}
))).valueOf()) {self.cascade()};
return true;
}
, "expression types", unescape("expression%0D%09%28hereType%20%3D%3D%20%23word%0D%09%20and%3A%20%5BtokenType%20%3D%3D%20%23leftArrow%5D%29%20ifTrue%3A%0D%09%09%5B%5Eself%20assignment%3A%20self%20variable%5D.%0D%09self%20primaryExpression%20ifFalse%3A%0D%09%09%5B%5Efalse%5D.%0D%09%28%28self%20messagePart%3A%203%20repeat%3A%20true%29%0D%09%20and%3A%20%5BhereType%20%3D%3D%20%23semicolon%5D%29%20ifTrue%3A%0D%09%09%5Bself%20cascade%5D.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StParser, unescape("messagePart%3Arepeat%3A"), "messagePart_repeat_", function StParser__messagePart_repeat_(level,repeat){
var start = nil;
var receiver = nil;
var selector = nil;
var args = nil;
var precedence = nil;
var words = nil;
var keywordStart = nil;
const self = this; var $early={name:"stReturn"};
try {
while(((function StParser__(){
receiver=self['@parseNode'];
if ((((nil.is_eqeq_(self['@hereType'],"keyword"))).and_((function StParser__(){
return level._gt_eq((3));
}
))).valueOf()) {start=self.startOfNextToken();
selector="".writeStream();
args=smalltalk.OrderedCollection.$$new();
words=smalltalk.OrderedCollection.$$new();
while(((nil.is_eqeq_(self['@hereType'],"keyword"))).valueOf()){keywordStart=(self.startOfNextToken())._plus(self['@requestorOffset']);
selector.nextPutAll_((self.advance()));
words.addLast_((keywordStart.to_(((self.endOfLastToken())._plus(self['@requestorOffset'])))));
if ((self.primaryExpression()).not()) {$early.result=self.expected_("Argument"); throw ($early)};
self.messagePart_repeat_((2),true);
args.addLast_(self['@parseNode'])};;
selector=(selector.contents()).asSymbol();
precedence=(3)} else {if (((level._gt_eq((2))).and_((function StParser__(){
return (nil.is_eqeq_(self['@hereType'],"verticalBar"));
}
))).valueOf()) {self.transformAVerticalBarIntoABinarySelector()};
if ((((nil.is_eqeq_(self['@hereType'],"binary"))).and_((function StParser__(){
return level._gt_eq((2));
}
))).valueOf()) {start=self.startOfNextToken();
selector=(self.advance()).asSymbol();
if ((self.primaryExpression()).not()) {$early.result=self.expected_("Argument"); throw ($early)};
self.messagePart_repeat_((1),true);
args=smalltalk.Array.with_(self['@parseNode']);
precedence=(2)} else {if (((nil.is_eqeq_(self['@hereType'],"word"))).valueOf()) {start=self.startOfNextToken();
selector=(self.advance()).asSymbol();
args=[];
words=smalltalk.OrderedCollection.with_(((start._plus(self['@requestorOffset'])).to_(((self.endOfLastToken())._plus(self['@requestorOffset'])))));
precedence=(1)} else {$early.result=(nil.isNil_(args)===false); throw ($early)}}};
self['@parseNode']=(smalltalk.StMessageNode.$$new()).receiver_selector_arguments_precedence_from_(receiver,selector,args,precedence,self['@encoder']);
return repeat;
}
)()).valueOf()){nil};;
return true;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "expression types", unescape("messagePart%3A%20level%20repeat%3A%20repeat%0D%0D%09%7C%20start%20receiver%20selector%20args%20precedence%20words%20keywordStart%20%7C%0D%09%5Breceiver%20%3A%3D%20parseNode.%0D%09%28hereType%20%3D%3D%20%23keyword%20and%3A%20%5Blevel%20%3E%3D%203%5D%29%0D%09%09ifTrue%3A%20%0D%09%09%09%5Bstart%20%3A%3D%20self%20startOfNextToken.%0D%09%09%09selector%20%3A%3D%20%27%27%20writeStream.%0D%09%09%09args%20%3A%3D%20OrderedCollection%20new.%0D%09%09%09words%20%3A%3D%20OrderedCollection%20new.%0D%09%09%09%5BhereType%20%3D%3D%20%23keyword%5D%0D%09%09%09%09whileTrue%3A%20%0D%09%09%09%09%09%5BkeywordStart%20%3A%3D%20self%20startOfNextToken%20+%20requestorOffset.%0D%09%09%09%09%09selector%20nextPutAll%3A%20self%20advance.%0D%09%09%09%09%09words%20addLast%3A%20%28keywordStart%20to%3A%20self%20endOfLastToken%20+%20requestorOffset%29.%0D%09%09%09%09%09self%20primaryExpression%20ifFalse%3A%20%5B%5Eself%20expected%3A%20%27Argument%27%5D.%0D%09%09%09%09%09self%20messagePart%3A%202%20repeat%3A%20true.%0D%09%09%09%09%09args%20addLast%3A%20parseNode%5D.%0D%09%09%09selector%20%3A%3D%20selector%20contents%20asSymbol.%0D%09%09%09precedence%20%3A%3D%203%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09%28level%20%3E%3D%202%20and%3A%20%5BhereType%20%3D%3D%20%23verticalBar%5D%29%20ifTrue%3A%20%5Bself%20transformAVerticalBarIntoABinarySelector%5D.%0D%09%09%09%28hereType%20%3D%3D%20%23binary%20and%3A%20%5Blevel%20%3E%3D%202%5D%29%0D%09%09%09%09ifTrue%3A%20%0D%09%09%09%09%09%5Bstart%20%3A%3D%20self%20startOfNextToken.%0D%09%09%09%09%09selector%20%3A%3D%20self%20advance%20asSymbol.%0D%09%09%09%09%09self%20primaryExpression%20ifFalse%3A%20%5B%5Eself%20expected%3A%20%27Argument%27%5D.%0D%09%09%09%09%09self%20messagePart%3A%201%20repeat%3A%20true.%0D%09%09%09%09%09args%20%3A%3D%20Array%20with%3A%20parseNode.%0D%09%09%09%09%09precedence%20%3A%3D%202%5D%0D%09%09%09%09ifFalse%3A%20%5BhereType%20%3D%3D%20%23word%0D%09%09%09%09%09%09ifTrue%3A%20%0D%09%09%09%09%09%09%09%5Bstart%20%3A%3D%20self%20startOfNextToken.%0D%09%09%09%09%09%09%09selector%20%3A%3D%20self%20advance%20asSymbol.%0D%09%09%09%09%09%09%09args%20%3A%3D%20%23%28%29.%0D%09%09%09%09%09%09%09words%20%3A%3D%20OrderedCollection%20with%3A%20%28start%20%20+%20requestorOffset%20to%3A%20self%20endOfLastToken%20+%20requestorOffset%29.%0D%09%09%09%09%09%09%09precedence%20%3A%3D%201%5D%0D%09%09%09%09%09%09ifFalse%3A%20%5B%5Eargs%20notNil%5D%5D%5D.%0D%09parseNode%20%3A%3D%20StMessageNode%20new%0D%09%09%09%09receiver%3A%20receiver%0D%09%09%09%09selector%3A%20selector%0D%09%09%09%09arguments%3A%20args%0D%09%09%09%09precedence%3A%20precedence%0D%09%09%09%09from%3A%20encoder.%0D%09repeat%5D%0D%09%09whileTrue%3A%20%5B%5D.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StParser, unescape("method%3Acontext%3A"), "method_context_", function StParser__method_context_(doit,ctxt){
var sap = nil;
var blk = nil;
var prim = nil;
var temps = nil;
var messageComment = nil;
var methodNode = nil;
const self = this; sap=self.pattern_inContext_(doit,ctxt);
self['@encoder'].selector_((sap.at_((1))));
(sap.at_((2))).do_((function StParser__(argNode){
return argNode.beMethodArg();
}
));
if ((doit).not()) {self.pragmaSequence()};
temps=self.temporaries();
messageComment=self['@currentComment'];
self['@currentComment']=nil;
if ((doit).not()) {self.pragmaSequence()};
prim=self.pragmaPrimitives();
self.statements_innerBlock_([],doit);
blk=self['@parseNode'];
if ((doit).valueOf()) {blk.returnLast()} else {blk.returnSelfIfNoOther_(self['@encoder'])};
if (((nil.is_eqeq_(self['@hereType'],"doIt"))).not()) {return self.expected_("Nothing more")};
methodNode=(self.newMethodNode()).comment_(messageComment);
methodNode.selector_arguments_precedence_temporaries_block_encoder_primitive_((sap.at_((1))),(sap.at_((2))),(sap.at_((3))),temps,blk,self['@encoder'],prim);
return methodNode;
}
, "expression types", unescape("method%3A%20doit%20context%3A%20ctxt%20%0D%09%22%20pattern%20%5B%20%7C%20temporaries%20%5D%20block%20%3D%3E%20MethodNode.%22%0D%0D%09%7C%20sap%20blk%20prim%20temps%20messageComment%20methodNode%20%7C%0D%09sap%20%3A%3D%20self%20pattern%3A%20doit%20inContext%3A%20ctxt.%0D%09%22sap%3D%7Bselector%2C%20arguments%2C%20precedence%7D%22%0D%09encoder%20selector%3A%20%28sap%20at%3A%201%29.%0D%09%28sap%20at%3A%202%29%20do%3A%20%5B%3AargNode%20%7C%20argNode%20beMethodArg%5D.%0D%09doit%20ifFalse%3A%20%5Bself%20pragmaSequence%5D.%0D%09temps%20%3A%3D%20self%20temporaries.%0D%09messageComment%20%3A%3D%20currentComment.%0D%09currentComment%20%3A%3D%20nil.%0D%09doit%20ifFalse%3A%20%5Bself%20pragmaSequence%5D.%0D%09prim%20%3A%3D%20self%20pragmaPrimitives.%0D%09self%20statements%3A%20%23%28%29%20innerBlock%3A%20doit.%0D%09blk%20%3A%3D%20parseNode.%0D%09doit%20ifTrue%3A%20%5Bblk%20returnLast%5D%0D%09%09ifFalse%3A%20%5Bblk%20returnSelfIfNoOther%3A%20encoder%5D.%0D%09hereType%20%3D%3D%20%23doIt%20ifFalse%3A%20%5B%5Eself%20expected%3A%20%27Nothing%20more%27%5D.%0D%09methodNode%20%3A%3D%20self%20newMethodNode%20comment%3A%20messageComment.%0D%09methodNode%0D%09%09selector%3A%20%28sap%20at%3A%201%29%0D%09%09arguments%3A%20%28sap%20at%3A%202%29%0D%09%09precedence%3A%20%28sap%20at%3A%203%29%0D%09%09temporaries%3A%20temps%0D%09%09block%3A%20blk%0D%09%09encoder%3A%20encoder%0D%09%09primitive%3A%20prim.%0D%09%5EmethodNode"));
smalltalk.bind(smalltalk.StParser, unescape("newMethodNode"), "newMethodNode", function StParser__newMethodNode(){
const self = this; return ((self.encoder()).methodNodeClass()).$$new();
}
, "expression types", unescape("newMethodNode%0D%09%5Eself%20encoder%20methodNodeClass%20new"));
smalltalk.bind(smalltalk.StParser, unescape("pattern%3AinContext%3A"), "pattern_inContext_", function StParser__pattern_inContext_(fromDoit,ctxt){
var args = nil;
var selector = nil;
const self = this; self['@doitFlag']=fromDoit;
if ((fromDoit).valueOf()) {if (((nil.is_eqeq_(ctxt,nil))).valueOf()) {return smalltalk.Array.with_with_with_("DoIt",(smalltalk.Array.$$new()),(1))} else {return smalltalk.Array.with_with_with_("DoItIn:",(smalltalk.Array.with_((self['@encoder'].encodeVariable_((self['@encoder'].doItInContextName()))))),(3))}};
if (((nil.is_eqeq_(self['@hereType'],"word"))).valueOf()) {return smalltalk.Array.with_with_with_(((self.advance()).asSymbol()),(smalltalk.Array.$$new()),(1))};
if ((((nil.is_eqeq_(self['@hereType'],"binary"))).or_((function StParser__(){
return (nil.is_eqeq_(self['@hereType'],"verticalBar"));
}
))).valueOf()) {selector=(self.advance()).asSymbol();
args=smalltalk.Array.with_((self['@encoder'].bindArg_((self.argumentName()))));
return smalltalk.Array.with_with_with_(selector,args,(2))};
if (((nil.is_eqeq_(self['@hereType'],"keyword"))).valueOf()) {selector="".writeStream();
args=smalltalk.OrderedCollection.$$new();
while(((nil.is_eqeq_(self['@hereType'],"keyword"))).valueOf()){selector.nextPutAll_((self.advance()));
args.addLast_((self['@encoder'].bindArg_((self.argumentName()))))};;
return smalltalk.Array.with_with_with_(((selector.contents()).asSymbol()),args,(3))};
return self.expected_("Message pattern");
}
, "expression types", unescape("pattern%3A%20fromDoit%20inContext%3A%20ctxt%0D%09%22%20unarySelector%20%7C%20binarySelector%20arg%20%7C%20keyword%20arg%20%7Bkeyword%20arg%7D%20%3D%3E%0D%09%7Bselector%2C%20arguments%2C%20precedence%7D.%22%0D%09%7C%20args%20selector%20%7C%0D%09doitFlag%20%3A%3D%20fromDoit.%0D%09fromDoit%20ifTrue%3A%0D%09%09%5B%5Ectxt%20%3D%3D%20nil%0D%09%09%09ifTrue%3A%20%5BArray%20with%3A%20%23DoIt%20with%3A%20Array%20new%20with%3A%201%5D%0D%09%09%09ifFalse%3A%20%5BArray%20with%3A%20%23DoItIn%3A%20with%3A%20%28Array%20with%3A%20%28encoder%20encodeVariable%3A%20encoder%20doItInContextName%29%29%20with%3A%203%5D%5D.%0D%0D%09hereType%20%3D%3D%20%23word%20ifTrue%3A%20%5B%5E%20Array%20with%3A%20self%20advance%20asSymbol%20with%3A%20Array%20new%20with%3A%201%5D.%0D%0D%09%28hereType%20%3D%3D%20%23binary%20or%3A%20%5BhereType%20%3D%3D%20%23verticalBar%5D%29%20ifTrue%3A%20%0D%09%09%5Bselector%20%3A%3D%20self%20advance%20asSymbol.%0D%09%09args%20%3A%3D%20Array%20with%3A%20%28encoder%20bindArg%3A%20self%20argumentName%29.%0D%09%09%5E%20Array%20with%3A%20selector%20with%3A%20args%20with%3A%202%5D.%0D%0D%09hereType%20%3D%3D%20%23keyword%20ifTrue%3A%20%0D%09%09%5Bselector%20%3A%3D%20%27%27%20writeStream.%0D%09%09args%20%3A%3D%20OrderedCollection%20new.%0D%09%09%5BhereType%20%3D%3D%20%23keyword%5D%20whileTrue%3A%5B%0D%09%09%09selector%20nextPutAll%3A%20self%20advance.%0D%09%09%09args%20addLast%3A%20%28encoder%20bindArg%3A%20self%20argumentName%29.%0D%09%09%5D.%0D%09%09%5E%20Array%20with%3A%20selector%20contents%20asSymbol%20with%3A%20args%20with%3A%203%5D.%0D%09%5Eself%20expected%3A%20%27Message%20pattern%27"));
smalltalk.bind(smalltalk.StParser, unescape("primaryExpression"), "primaryExpression", function StParser__primaryExpression(){
const self = this; if (((nil.is_eqeq_(self['@hereType'],"word"))).valueOf()) {self['@parseNode']=self.variable();
self['@parseNode'].nowHasRef();
return true};
if (((nil.is_eqeq_(self['@hereType'],"leftBracket"))).valueOf()) {self.advance();
self.blockExpression();
return true};
if (((nil.is_eqeq_(self['@hereType'],"leftBrace"))).valueOf()) {self.braceExpression();
return true};
if (((nil.is_eqeq_(self['@hereType'],"leftParenthesis"))).valueOf()) {self.advance();
if ((self.expression()).not()) {return self.expected_("expression")};
if ((self.match_("rightParenthesis")).not()) {return self.expected_("right parenthesis")};
return true};
if ((((nil.is_eqeq_(self['@hereType'],"string"))).or_((function StParser__(){
return ((nil.is_eqeq_(self['@hereType'],"number"))).or_((function StParser__(){
return ((nil.is_eqeq_(self['@hereType'],"literal"))).or_((function StParser__(){
return (nil.is_eqeq_(self['@hereType'],"character"));
}
));
}
));
}
))).valueOf()) {self['@parseNode']=self['@encoder'].encodeLiteral_((self.advance()));
return true};
if ((((nil.is_eqeq_(self['@here'],unescape("-")))).and_((function StParser__(){
return ((nil.is_eqeq_(self['@tokenType'],"number"))).and_((function StParser__(){
return ((1)._plus(self['@hereEnd']))._eq(self['@mark']);
}
));
}
))).valueOf()) {self.advance();
self['@parseNode']=self['@encoder'].encodeLiteral_(((self.advance()).negated()));
return true};
return false;
}
, "expression types", unescape("primaryExpression%20%0D%09hereType%20%3D%3D%20%23word%20%0D%09%09ifTrue%3A%20%0D%09%09%09%5BparseNode%20%3A%3D%20self%20variable.%0D%09%09%09parseNode%20nowHasRef.%0D%09%09%09%5E%20true%5D.%0D%09hereType%20%3D%3D%20%23leftBracket%0D%09%09ifTrue%3A%20%0D%09%09%09%5Bself%20advance.%0D%09%09%09self%20blockExpression.%0D%09%09%09%5Etrue%5D.%0D%09hereType%20%3D%3D%20%23leftBrace%0D%09%09ifTrue%3A%20%5B%0D%09%09%09self%20braceExpression.%0D%09%09%09%5Etrue%5D.%0D%09hereType%20%3D%3D%20%23leftParenthesis%0D%09%09ifTrue%3A%20%0D%09%09%09%5Bself%20advance.%0D%09%09%09self%20expression%20ifFalse%3A%20%5B%5Eself%20expected%3A%20%27expression%27%5D.%0D%09%09%09%28self%20match%3A%20%23rightParenthesis%29%0D%09%09%09%09ifFalse%3A%20%5B%5Eself%20expected%3A%20%27right%20parenthesis%27%5D.%0D%09%09%09%5Etrue%5D.%0D%09%28hereType%20%3D%3D%20%23string%20or%3A%20%5BhereType%20%3D%3D%20%23number%20or%3A%20%5BhereType%20%3D%3D%20%23literal%20or%3A%20%5BhereType%20%3D%3D%20%23character%5D%5D%5D%29%0D%09%09ifTrue%3A%20%0D%09%09%09%5BparseNode%20%3A%3D%20encoder%20encodeLiteral%3A%20self%20advance.%0D%09%09%09%5Etrue%5D.%0D%09%28here%20%3D%3D%20%23-%20and%3A%20%5BtokenType%20%3D%3D%20%23number%20and%3A%20%5B1%20+%20hereEnd%20%3D%20mark%5D%5D%29%0D%09%09ifTrue%3A%20%0D%09%09%09%5Bself%20advance.%0D%09%09%09parseNode%20%3A%3D%20encoder%20encodeLiteral%3A%20self%20advance%20negated.%0D%09%09%09%5Etrue%5D.%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParser, unescape("selector%3Aarguments%3Aprecedence%3A"), "selector_arguments_precedence_", function StParser__selector_arguments_precedence_(selector,args,precedence){
var blk = nil;
var prim = nil;
var temps = nil;
var messageComment = nil;
var methodNode = nil;
const self = this; self['@encoder'].selector_(selector);
args.do_((function StParser__(argNode){
return argNode.beMethodArg();
}
));
self.pragmaSequence();
temps=self.temporaries();
messageComment=self['@currentComment'];
self['@currentComment']=nil;
self.pragmaSequence();
prim=self.pragmaPrimitives();
self.statements_innerBlock_([],false);
blk=self['@parseNode'];
blk.returnSelfIfNoOther_(self['@encoder']);
if (((nil.is_eqeq_(self['@hereType'],"doIt"))).not()) {return self.expected_("Nothing more")};
methodNode=(self.newMethodNode()).comment_(messageComment);
methodNode.selector_arguments_precedence_temporaries_block_encoder_primitive_(selector,args,precedence,temps,blk,self['@encoder'],prim);
return methodNode;
}
, "expression types", unescape("selector%3A%20selector%20arguments%3A%20args%20precedence%3A%20precedence%0D%09%22%20pattern%20%5B%20%7C%20temporaries%20%5D%20block%20%3D%3E%20MethodNode.%22%0D%0D%09%7C%20blk%20prim%20temps%20messageComment%20methodNode%20%7C%0D%09encoder%20selector%3A%20selector.%0D%09args%20do%3A%20%5B%3AargNode%20%7C%20argNode%20beMethodArg%5D.%0D%09self%20pragmaSequence.%0D%09temps%20%3A%3D%20self%20temporaries.%0D%09messageComment%20%3A%3D%20currentComment.%0D%09currentComment%20%3A%3D%20nil.%0D%09self%20pragmaSequence.%0D%09prim%20%3A%3D%20self%20pragmaPrimitives.%0D%09self%20statements%3A%20%23%28%29%20innerBlock%3A%20false.%0D%09blk%20%3A%3D%20parseNode.%0D%09blk%20returnSelfIfNoOther%3A%20encoder.%0D%09hereType%20%3D%3D%20%23doIt%20ifFalse%3A%20%5B%5Eself%20expected%3A%20%27Nothing%20more%27%5D.%0D%09methodNode%20%3A%3D%20self%20newMethodNode%20comment%3A%20messageComment.%0D%09methodNode%0D%09%09selector%3A%20selector%0D%09%09arguments%3A%20args%0D%09%09precedence%3A%20precedence%0D%09%09temporaries%3A%20temps%0D%09%09block%3A%20blk%0D%09%09encoder%3A%20encoder%0D%09%09primitive%3A%20prim.%0D%09%5EmethodNode"));
smalltalk.bind(smalltalk.StParser, unescape("statements%3AinnerBlock%3A"), "statements_innerBlock_", function StParser__statements_innerBlock_(argNodes,inner){
const self = this; return self.statements_innerBlock_blockNode_(argNodes,inner,(smalltalk.StBlockNode.$$new()));
}
, "expression types", unescape("statements%3A%20argNodes%20innerBlock%3A%20inner%0D%0D%09%5Eself%20statements%3A%20argNodes%20innerBlock%3A%20inner%20blockNode%3A%20StBlockNode%20new"));
smalltalk.bind(smalltalk.StParser, unescape("statements%3AinnerBlock%3AblockNode%3A"), "statements_innerBlock_blockNode_", function StParser__statements_innerBlock_blockNode_(argNodes,inner,theBlockNode){
var stmts = nil;
var returns = nil;
var start = nil;
const self = this; var $early={name:"stReturn"};
try {
theBlockNode.comment_(self['@currentComment']);
self['@currentComment']=nil;
stmts=smalltalk.OrderedCollection.$$new();
returns=false;
if ((self['@hereType']._no_no("rightBracket")).valueOf()) {while(((function StParser__(){
start=self.startOfNextToken();
if ((returns=self.matchReturn()).valueOf()) {if ((self.expression()).not()) {$early.result=self.expected_("Expression to return"); throw ($early)};
self.addComment();
stmts.addLast_(((self['@parseNode'].isReturningIf()).ifTrue_ifFalse_((function StParser__(){
return self['@parseNode'];
}
),(function StParser__(){
return (smalltalk.StReturnNode.$$new()).expr_(self['@parseNode']);
}
))))} else {if ((self.expression()).valueOf()) {self.addComment();
stmts.addLast_(self['@parseNode'])} else {self.addComment();
if (((stmts.size())._eq((0))).valueOf()) {stmts.addLast_((self['@encoder'].encodeVariable_((inner.ifTrue_ifFalse_((function StParser__(){
return "nil";
}
),(function StParser__(){
return "self";
}
))))))}}};
if ((returns).valueOf()) {self.match_("period");
if ((((nil.is_eqeq_(self['@hereType'],"rightBracket"))).or_((function StParser__(){
return (nil.is_eqeq_(self['@hereType'],"doIt"));
}
))).not()) {$early.result=self.expected_("End of block"); throw ($early)}};
return (returns.not()).and_((function StParser__(){
return self.match_("period");
}
));
}
)()).valueOf()){};};
theBlockNode.arguments_statements_returns_from_(argNodes,stmts,returns,self['@encoder']);
self['@parseNode']=theBlockNode;
return true;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "expression types", unescape("statements%3A%20argNodes%20innerBlock%3A%20inner%20blockNode%3A%20theBlockNode%0D%0D%09%7C%20stmts%20returns%20start%20%7C%0D%09%22give%20initial%20comment%20to%20block%2C%20since%20others%20trail%20statements%22%0D%09theBlockNode%20comment%3A%20currentComment.%0D%09currentComment%20%3A%3D%20nil.%0D%09stmts%20%3A%3D%20OrderedCollection%20new.%0D%09returns%20%3A%3D%20false.%0D%09hereType%20%7E%7E%20%23rightBracket%20ifTrue%3A%0D%09%09%5B%5Bstart%20%3A%3D%20self%20startOfNextToken.%0D%09%09%20%20%28returns%20%3A%3D%20self%20matchReturn%29%0D%09%09%09ifTrue%3A%20%0D%09%09%09%09%5Bself%20expression%20ifFalse%3A%0D%09%09%09%09%09%5B%5Eself%20expected%3A%20%27Expression%20to%20return%27%5D.%0D%09%09%09%09%20self%20addComment.%0D%09%09%09%09%20stmts%20addLast%3A%20%28parseNode%20isReturningIf%0D%09%09%09%09%09%09%09%09ifTrue%3A%20%5BparseNode%5D%0D%09%09%09%09%09%09%09%09ifFalse%3A%20%5BStReturnNode%20new%20expr%3A%20parseNode%0D%09%09%09%09%09%09%09%09%09%22parseNode%20isIf%0D%09%09%09%09%09%09%09%09%09%09ifTrue%3A%20%5B%0D%09%09%09%09%09%09%09%09%09%09%09returns%20%3A%3D%20false.%0D%09%09%09%09%09%09%09%09%09%09%09parseNode%20inlineReturns%5D%0D%09%09%09%09%09%09%09%09%09%09ifFalse%3A%20%5BStReturnNode%20new%20expr%3A%20parseNode%5D%22%5D%29%5D%0D%09%09%09ifFalse%3A%20%0D%09%09%09%09%5Bself%20expression%0D%09%09%09%09%09ifTrue%3A%20%0D%09%09%09%09%09%09%5Bself%20addComment.%0D%09%09%09%09%09%09%20stmts%20addLast%3A%20parseNode%5D%0D%09%09%09%09%09ifFalse%3A%20%0D%09%09%09%09%09%09%5Bself%20addComment.%0D%09%09%09%09%09%09%20stmts%20size%20%3D%200%20ifTrue%3A%20%0D%09%09%09%09%09%09%09%5Bstmts%20addLast%3A%20%0D%09%09%09%09%09%09%09%09%28encoder%20encodeVariable%3A%0D%09%09%09%09%09%09%09%09%09%28inner%20ifTrue%3A%20%5B%27nil%27%5D%20ifFalse%3A%20%5B%27self%27%5D%29%29%5D%5D%5D.%0D%09%09%20%20returns%20ifTrue%3A%20%0D%09%09%09%5Bself%20match%3A%20%23period.%0D%09%09%09%20%28hereType%20%3D%3D%20%23rightBracket%20or%3A%20%5BhereType%20%3D%3D%20%23doIt%5D%29%20ifFalse%3A%0D%09%09%09%09%5B%5Eself%20expected%3A%20%27End%20of%20block%27%5D%5D.%0D%09%09%20%20returns%20not%20and%3A%20%5Bself%20match%3A%20%23period%5D%5D%20whileTrue%5D.%0D%09theBlockNode%0D%09%09arguments%3A%20argNodes%0D%09%09statements%3A%20stmts%0D%09%09returns%3A%20returns%0D%09%09from%3A%20encoder.%0D%09parseNode%20%3A%3D%20theBlockNode.%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StParser, unescape("temporaries"), "temporaries", function StParser__temporaries(){
var vars = nil;
var theActualText = nil;
const self = this; if ((self.match_("verticalBar")).not()) {if ((self['@doitFlag']).valueOf()) {self['@tempsMark']=(1);
return []};
self['@tempsMark']=self['@hereMark'];
if ((self['@tempsMark']._gt((0))).valueOf()) {theActualText=self['@source'].contents();
while(((self['@tempsMark']._lt((theActualText.size()))).and_((function StParser__(){
return (theActualText.at_(self['@tempsMark'])).isSeparator();
}
))).valueOf()){self['@tempsMark']=self['@tempsMark']._plus((1))};};
return []};
vars=smalltalk.OrderedCollection.$$new();
while(((nil.is_eqeq_(self['@hereType'],"word"))).valueOf()){vars.addLast_((self['@encoder'].bindTemp_((self.advance()))))};;
if ((self.match_("verticalBar")).valueOf()) {self['@tempsMark']=self['@prevMark'];
return vars};
return self.expected_("Vertical bar");
}
, "expression types", unescape("temporaries%0D%09%22%20%5B%20%27%7C%27%20%28variable%29*%20%27%7C%27%20%5D%22%0D%09%7C%20vars%20theActualText%20%7C%0D%09%28self%20match%3A%20%23verticalBar%29%20ifFalse%3A%20%0D%09%09%5B%22no%20temps%22%0D%09%09doitFlag%20ifTrue%3A%0D%09%09%09%5BtempsMark%20%3A%3D%201.%0D%09%09%09%5E%20%23%28%29%5D.%0D%09%09tempsMark%20%3A%3D%20hereMark%09%22formerly%20--%3E%20prevMark%20+%20prevToken%22.%0D%09%09tempsMark%20%3E%200%20ifTrue%3A%0D%09%09%09%5BtheActualText%20%3A%3D%20source%20contents.%0D%09%09%09%5BtempsMark%20%3C%20theActualText%20size%20and%3A%20%5B%28theActualText%20at%3A%20tempsMark%29%20isSeparator%5D%5D%0D%09%09%09%09whileTrue%3A%20%5BtempsMark%20%3A%3D%20tempsMark%20+%201%5D%5D.%0D%09%09%09%5E%20%23%28%29%5D.%0D%09vars%20%3A%3D%20OrderedCollection%20new.%0D%09%5BhereType%20%3D%3D%20%23word%5D%0D%09%09whileTrue%3A%20%5Bvars%20addLast%3A%20%28encoder%20bindTemp%3A%20self%20advance%29%5D.%0D%09%28self%20match%3A%20%23verticalBar%29%20ifTrue%3A%20%0D%09%09%5BtempsMark%20%3A%3D%20prevMark.%0D%09%09%5E%20vars%5D.%0D%09%5E%20self%20expected%3A%20%27Vertical%20bar%27%0D"));
smalltalk.bind(smalltalk.StParser, unescape("temporariesIn%3A"), "temporariesIn_", function StParser__temporariesIn_(methodSelector){
var vars = nil;
var theActualText = nil;
const self = this; if ((self.match_("verticalBar")).not()) {if ((self['@doitFlag']).valueOf()) {self['@tempsMark']=(1);
return []};
self['@tempsMark']=self['@hereMark'];
if ((self['@tempsMark']._gt((0))).valueOf()) {theActualText=self['@source'].contents();
while(((self['@tempsMark']._lt((theActualText.size()))).and_((function StParser__(){
return (theActualText.at_(self['@tempsMark'])).isSeparator();
}
))).valueOf()){self['@tempsMark']=self['@tempsMark']._plus((1))};};
return []};
vars=smalltalk.OrderedCollection.$$new();
while(((nil.is_eqeq_(self['@hereType'],"word"))).valueOf()){vars.addLast_((self['@encoder'].bindTemp_in_((self.advance()),methodSelector)))};;
if ((self.match_("verticalBar")).valueOf()) {self['@tempsMark']=self['@prevMark'];
return vars};
return self.expected_("Vertical bar");
}
, "expression types", unescape("temporariesIn%3A%20methodSelector%0D%09%22%20%5B%20%27%7C%27%20%28variable%29*%20%27%7C%27%20%5D%22%0D%09%7C%20vars%20theActualText%20%7C%0D%09%28self%20match%3A%20%23verticalBar%29%20ifFalse%3A%20%0D%09%09%5B%22no%20temps%22%0D%09%09doitFlag%20ifTrue%3A%0D%09%09%09%5BtempsMark%20%3A%3D%201.%0D%09%09%09%5E%20%23%28%29%5D.%0D%09%09tempsMark%20%3A%3D%20hereMark%09%22formerly%20--%3E%20prevMark%20+%20prevToken%22.%0D%09%09tempsMark%20%3E%200%20ifTrue%3A%0D%09%09%09%5BtheActualText%20%3A%3D%20source%20contents.%0D%09%09%09%5BtempsMark%20%3C%20theActualText%20size%20and%3A%20%5B%28theActualText%20at%3A%20tempsMark%29%20isSeparator%5D%5D%0D%09%09%09%09whileTrue%3A%20%5BtempsMark%20%3A%3D%20tempsMark%20+%201%5D%5D.%0D%09%09%09%5E%20%23%28%29%5D.%0D%09vars%20%3A%3D%20OrderedCollection%20new.%0D%09%5BhereType%20%3D%3D%20%23word%5D%0D%09%09whileTrue%3A%20%5Bvars%20addLast%3A%20%28encoder%20bindTemp%3A%20self%20advance%20in%3A%20methodSelector%29%5D.%0D%09%28self%20match%3A%20%23verticalBar%29%20ifTrue%3A%20%0D%09%09%5BtempsMark%20%3A%3D%20prevMark.%0D%09%09%5E%20vars%5D.%0D%09%5E%20self%20expected%3A%20%27Vertical%20bar%27"));
smalltalk.bind(smalltalk.StParser, unescape("temporaryBlockVariablesFor%3A"), "temporaryBlockVariablesFor_", function StParser__temporaryBlockVariablesFor_(aBlockNode){
var variables = nil;
const self = this; if ((self.match_("verticalBar")).not()) {return []};
variables=smalltalk.OrderedCollection.$$new();
while(((nil.is_eqeq_(self['@hereType'],"word"))).valueOf()){variables.addLast_((self['@encoder'].bindBlockTemp_within_((self.advance()),aBlockNode)))};;
if ((self.match_("verticalBar")).not()) {return self.expected_("Vertical bar")};
return variables;
}
, "expression types", unescape("temporaryBlockVariablesFor%3A%20aBlockNode%0D%09%22Scan%20and%20answer%20temporary%20block%20variables.%22%0D%0D%09%7C%20variables%20%7C%0D%09%28self%20match%3A%20%23verticalBar%29%20ifFalse%3A%0D%09%09%22There%20are%27t%20any%20temporary%20variables.%22%0D%09%09%5B%5E%23%28%29%5D.%0D%0D%09variables%20%3A%3D%20OrderedCollection%20new.%0D%09%5BhereType%20%3D%3D%20%23word%5D%20whileTrue%3A%0D%09%09%5Bvariables%20addLast%3A%20%28encoder%20bindBlockTemp%3A%20self%20advance%20within%3A%20aBlockNode%29%5D.%0D%09%28self%20match%3A%20%23verticalBar%29%20ifFalse%3A%0D%09%09%5B%5Eself%20expected%3A%20%27Vertical%20bar%27%5D.%0D%09%5Evariables"));
smalltalk.bind(smalltalk.StParser, unescape("variable"), "variable", function StParser__variable(){
var varName = nil;
var varStart = nil;
var varEnd = nil;
const self = this; varStart=(self.startOfNextToken())._plus(self['@requestorOffset']);
varName=self.advance();
varEnd=(self.endOfLastToken())._plus(self['@requestorOffset']);
return (function StParser__(){
return self['@encoder'].encodeVariable_sourceRange_ifUnknown_(varName,(varStart.to_(varEnd)),(function StParser__(){
return self['@encoder'].undeclared_(varName);
}
));
}
).on_do_(smalltalk.StCompileException,(function StParser__(exception){
return self.notify_((exception.messageText()));
}
));
}
, "expression types", unescape("variable%0D%0D%09%7C%20varName%20varStart%20varEnd%20%7C%0D%09varStart%20%3A%3D%20self%20startOfNextToken%20+%20requestorOffset.%0D%09varName%20%3A%3D%20self%20advance.%0D%09varEnd%20%3A%3D%20self%20endOfLastToken%20+%20requestorOffset.%0D%09%5E%5Bencoder%20encodeVariable%3A%20varName%0D%09%09sourceRange%3A%20%28varStart%20to%3A%20varEnd%29%0D%09%09ifUnknown%3A%20%5Bencoder%20undeclared%3A%20varName%5D%5D%0D%09%09on%3A%20StCompileException%0D%09%09%09%09do%3A%20%5B%3Aexception%20%7C%20%0D%09%09%09%09%09self%20notify%3A%20exception%20messageText%5D."));
smalltalk.bind(smalltalk.StParser, unescape("addPragma%3A"), "addPragma_", function StParser__addPragma_(aPragma){
const self = this; (self.pragmas()).add_(aPragma);
return self;
}
, "pragmas", unescape("addPragma%3A%20aPragma%0D%09self%20pragmas%20add%3A%20aPragma"));
smalltalk.bind(smalltalk.StParser, unescape("pragmaLiteral%3A"), "pragmaLiteral_", function StParser__pragmaLiteral_(selectorSoFar){
const self = this; if ((((nil.is_eqeq_(self['@hereType'],"string"))).or_((function StParser__(){
return ((nil.is_eqeq_(self['@hereType'],"literal"))).or_((function StParser__(){
return ((nil.is_eqeq_(self['@hereType'],"number"))).or_((function StParser__(){
return (nil.is_eqeq_(self['@hereType'],"character"));
}
));
}
));
}
))).valueOf()) {return self.advance()};
if ((((nil.is_eqeq_(self['@here'],unescape("%23")))).and_((function StParser__(){
return (nil.is_eqeq_(self['@tokenType'],"word"));
}
))).valueOf()) {return self.advance()};
if ((((nil.is_eqeq_(self['@here'],unescape("-")))).and_((function StParser__(){
return (nil.is_eqeq_(self['@tokenType'],"number"));
}
))).valueOf()) {return (function StParser__($1$){
$1$.advance();
return $1$.advance()}
)(self).negated()};
if (((self['@here']._eq("true")).or_((function StParser__(){
return (self['@here']._eq("false")).or_((function StParser__(){
return self['@here']._eq("nil");
}
));
}
))).valueOf()) {return ((smalltalk.StScanner.$$new()).scanTokens_((self.advance()))).first()};
return self.expected_("Literal constant");
}
, "pragmas", unescape("pragmaLiteral%3A%20selectorSoFar%0D%09%22Read%20a%20pragma%20literal.%20%20As%20a%20nicety%20we%20allow%20a%20variable%20name%20%28rather%0D%09%20than%20a%20literal%20string%29%20as%20the%20second%20argument%20to%20primitive%3Aerror%3A%22%0D%0D%09%28hereType%20%3D%3D%20%23string%20or%3A%20%5B%20hereType%20%3D%3D%20%23literal%20or%3A%20%5B%20hereType%20%3D%3D%20%23number%20or%3A%20%5B%20hereType%20%3D%3D%20%23character%20%5D%20%5D%20%5D%29%0D%09%09ifTrue%3A%20%5B%20%5E%20self%20advance%20%5D.%0D%09%28here%20%3D%3D%20%24%23%20and%3A%20%5B%20tokenType%20%3D%3D%20%23word%20%5D%29%0D%09%09ifTrue%3A%20%5B%20%5E%20self%20advance%20%5D.%0D%09%28here%20%3D%3D%20%23-%20and%3A%20%5B%20tokenType%20%3D%3D%20%23number%20%5D%29%0D%09%09ifTrue%3A%20%5B%20%5E%20%28self%20advance%3B%20advance%29%20negated%20%5D.%0D%09%28here%20%3D%20%27true%27%20or%3A%20%5B%20here%20%3D%20%27false%27%20or%3A%20%5B%20here%20%3D%20%27nil%27%20%5D%20%5D%29%0D%09%09ifTrue%3A%20%5B%20%5E%20%28StScanner%20new%20scanTokens%3A%20self%20advance%29%20first%20%5D.%0D%09%5Eself%20expected%3A%20%27Literal%20constant%27"));
smalltalk.bind(smalltalk.StParser, unescape("pragmaPrimitives"), "pragmaPrimitives", function StParser__pragmaPrimitives(){
var primitives = nil;
const self = this; if (((self.pragmas()).isEmpty()).valueOf()) {return nil};
primitives=self['@pragmas'].select_((function StParser__(pragma){
return ((self.$klass).primitivePragmaSelectors()).includes_((pragma.keyword()));
}
));
if ((primitives.isEmpty()).valueOf()) {return nil};
if (((primitives.size())._gt((1))).valueOf()) {return self.notify_("Ambigous primitives")};
return self.perform_withArguments_(((primitives.first()).keyword()),((primitives.first()).arguments()));
}
, "pragmas", unescape("pragmaPrimitives%0D%09%7C%20primitives%20%7C%0D%09self%20pragmas%20isEmpty%20ifTrue%3A%0D%09%09%5B%5Enil%5D.%0D%09primitives%20%3A%3D%20pragmas%20select%3A%0D%09%09%09%09%09%5B%3Apragma%7C%0D%09%09%09%09%09self%20class%20primitivePragmaSelectors%20includes%3A%20pragma%20keyword%5D.%0D%09primitives%20isEmpty%20ifTrue%3A%0D%09%09%5B%5Enil%5D.%0D%09primitives%20size%20%3E%201%20ifTrue%3A%0D%09%09%5B%5Eself%20notify%3A%20%27Ambigous%20primitives%27%5D.%0D%09%5Eself%20perform%3A%20primitives%20first%20keyword%20withArguments%3A%20primitives%20first%20arguments"));
smalltalk.bind(smalltalk.StParser, unescape("pragmaSequence"), "pragmaSequence", function StParser__pragmaSequence(){
const self = this; var $early={name:"stReturn"};
try {
while(((function StParser__(){
if ((self.matchToken_(unescape("%3C"))).not()) {$early.result=self; throw ($early)};
self.pragmaStatement();
if ((self.matchToken_(unescape("%3E"))).not()) {$early.result=self.expected_(unescape("%3E")); throw ($early)};
return true;
}
)()).valueOf()){};;
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "pragmas", unescape("pragmaSequence%0D%09%22Parse%20a%20sequence%20of%20method%20pragmas.%22%0D%09%0D%09%5B%0D%09%09%28self%20matchToken%3A%20%23%3C%29%0D%09%09%09ifFalse%3A%20%5B%20%5E%20self%20%5D.%0D%09%09self%20pragmaStatement.%0D%09%09%28self%20matchToken%3A%20%23%3E%29%0D%09%09%09ifFalse%3A%20%5B%20%5E%20self%20expected%3A%20%27%3E%27%20%5D.%0D%09%09true%5D%20whileTrue"));
smalltalk.bind(smalltalk.StParser, unescape("pragmaStatement"), "pragmaStatement", function StParser__pragmaStatement(){
var selector = nil;
var args = nil;
var words = nil;
var index = nil;
var keyword = nil;
const self = this; if (((self['@hereType']._eq("keyword")).or_((function StParser__(){
return (self['@hereType']._eq("word")).or_((function StParser__(){
return self['@hereType']._eq("binary");
}
));
}
))).not()) {return self.expected_("pragma declaration")};
selector="";
args=smalltalk.OrderedCollection.$$new();
words=smalltalk.OrderedCollection.$$new();
while(((self['@hereType']._eq("keyword")).or_((function StParser__(){
return ((self['@hereType']._eq("word")).or_((function StParser__(){
return self['@hereType']._eq("binary");
}
))).and_((function StParser__(){
return selector.isEmpty();
}
));
}
))).valueOf()){index=(self.startOfNextToken())._plus(self['@requestorOffset']);
selector=selector._comma((self.advance()));
words.add_((index.to_(((self.endOfLastToken())._plus(self['@requestorOffset'])))));
if ((((selector.last())._eq(":")).or_((function StParser__(){
return ((selector.first()).isLetter()).not();
}
))).valueOf()) {args.add_((self.pragmaLiteral_(selector)))}};;
keyword=selector.asSymbol();
self.addPragma_((smalltalk.StPragma.keyword_arguments_(keyword,(args.asArray()))));
return true;
}
, "pragmas", unescape("pragmaStatement%0D%09%22Read%20a%20single%20pragma%20statement.%20Parse%20all%20generic%20pragmas%20in%20the%20form%20of%3A%20%3Ckey1%3A%20val1%20key2%3A%20val2%20...%3E%20and%20remember%20them%2C%20including%20primitives.%22%0D%09%0D%09%7C%20selector%20args%20words%20index%20keyword%20%7C%0D%09%28hereType%20%3D%20%23keyword%20or%3A%20%5B%20hereType%20%3D%20%23word%20or%3A%20%5B%20hereType%20%3D%20%23binary%20%5D%20%5D%29%0D%09%09ifFalse%3A%20%5B%20%20%5E%20self%20expected%3A%20%27pragma%20declaration%27%20%5D.%0D%0D%09selector%20%3A%3D%20%27%27.%0D%09args%20%3A%3D%20OrderedCollection%20new.%0D%09words%20%3A%3D%20OrderedCollection%20new.%0D%09%5B%20hereType%20%3D%20%23keyword%20or%3A%20%5B%20%28hereType%20%3D%20%23word%20or%3A%20%5B%20hereType%20%3D%20%23binary%20%5D%29%20and%3A%20%5B%20selector%20isEmpty%20%5D%20%5D%20%5D%20whileTrue%3A%20%5B%0D%09%09index%20%3A%3D%20self%20startOfNextToken%20+%20requestorOffset.%0D%09%09selector%20%3A%3D%20selector%20%2C%20self%20advance.%0D%09%09words%20add%3A%20%28index%20to%3A%20self%20endOfLastToken%20+%20requestorOffset%29.%0D%09%09%28selector%20last%20%3D%20%24%3A%20or%3A%20%5B%20selector%20first%20isLetter%20not%20%5D%29%0D%09%09%09ifTrue%3A%20%5B%20args%20add%3A%20%28self%20pragmaLiteral%3A%20selector%29%20%5D%20%5D.%0D%22%09selector%20numArgs%20%7E%3D%20args%20size%0D%09%09ifTrue%3A%20%5B%20%5E%20self%20expected%3A%20%27pragma%20argument%27%20%5D.%22%0D%09keyword%20%3A%3D%20selector%20asSymbol.%0D%09self%20addPragma%3A%20%28StPragma%20keyword%3A%20keyword%20arguments%3A%20args%20asArray%29.%0D%09%5E%20true"));
smalltalk.bind(smalltalk.StParser, unescape("pragmas"), "pragmas", function StParser__pragmas(){
const self = this; return (function(){var $1$; $1$ = self['@pragmas']; if (nil.isNil_($1$)) { return self['@pragmas']=smalltalk.OrderedCollection.$$new() } else { return $1$; }})();
}
, "pragmas", unescape("pragmas%0D%09%5Epragmas%20ifNil%3A%20%5Bpragmas%20%3A%3D%20OrderedCollection%20new%5D"));
smalltalk.bind(smalltalk.StParser, unescape("primitive%3Amodule%3A"), "primitive_module_", function StParser__primitive_module_(primitiveName,moduleName){
const self = this; return (smalltalk.StPrimitiveNode.$$new()).module_primitive_(moduleName,primitiveName);
}
, "primitives", unescape("primitive%3A%20primitiveName%20module%3A%20moduleName%0D%09%22Create%20named%20primitive.%22%0D%09%22%09%3Cprimitive%3A%20%27primScan%27%20module%3A%20%27NKBarcodeScanner%27%3E%22%0D%09%5EStPrimitiveNode%20new%20module%3A%20moduleName%20primitive%3A%20primitiveName"));
smalltalk.bind(smalltalk.StParser, unescape("encoder"), "encoder", function StParser__encoder(){
const self = this; return (function(){var $1$; $1$ = self['@encoder']; if (nil.isNil_($1$)) { return self['@encoder']=smalltalk.StEncoder.$$new() } else { return $1$; }})();
}
, "public access", unescape("encoder%0D%09%5Eencoder%20ifNil%3A%0D%09%09%5Bencoder%20%3A%3D%20StEncoder%20new%5D"));
smalltalk.bind(smalltalk.StParser, unescape("encoderClass%3A"), "encoderClass_", function StParser__encoderClass_(anEncoderClass){
const self = this; (function(){var $1$; $1$ = self['@encoder']; if (!nil.isNil_($1$)) { return self.error_("encoder already set") } else { return $1$; }})();
self['@encoder']=anEncoderClass.$$new();
return self;
}
, "public access", unescape("encoderClass%3A%20anEncoderClass%0D%09encoder%20ifNotNil%3A%20%5B%0D%09%09self%20error%3A%20%27encoder%20already%20set%27%5D.%0D%09encoder%20%3A%3D%20anEncoderClass%20new"));
smalltalk.bind(smalltalk.StParser, unescape("parse%3Aclass%3A"), "parse_class_", function StParser__parse_class_(sourceStreamOrString,behavior){
const self = this; var $early={name:"stReturn"};
try {
return self.parse_class_noPattern_notifying_ifFail_((sourceStreamOrString.readStream()),behavior,false,nil,(function StParser__(){
$early.result=nil; throw ($early);
}
));
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "public access", unescape("parse%3A%20sourceStreamOrString%20class%3A%20behavior%0D%0D%09%5E%20self%20parse%3A%20sourceStreamOrString%20readStream%20class%3A%20behavior%0D%09%09noPattern%3A%20false%20notifying%3A%20nil%20ifFail%3A%20%5B%5Enil%5D"));
smalltalk.bind(smalltalk.StParser, unescape("parse%3Aclass%3AnoPattern%3Anotifying%3AifFail%3A"), "parse_class_noPattern_notifying_ifFail_", function StParser__parse_class_noPattern_notifying_ifFail_(sourceStream,$$class,noPattern,req,aBlock){
var c = nil;
const self = this; c=smalltalk.StCompilationCue.source_class_(sourceStream,$$class);
return self.parseCue_noPattern_ifFail_(c,noPattern,aBlock);
}
, "public access", unescape("parse%3A%20sourceStream%20class%3A%20class%20noPattern%3A%20noPattern%20notifying%3A%20req%20ifFail%3A%20aBlock%20%0D%09%7C%20c%20%7C%0D%09c%20%3A%3D%20StCompilationCue%0D%09%09%09source%3A%20sourceStream%0D%09%09%09class%3A%20class.%0D%09%5E%20self%20%0D%09%09parseCue%3A%20c%20%0D%09%09noPattern%3A%20noPattern%20%0D%09%09ifFail%3A%20aBlock"));
smalltalk.bind(smalltalk.StParser, unescape("parseArgsAndTemps%3A"), "parseArgsAndTemps_", function StParser__parseArgsAndTemps_(aString){
const self = this; if (((nil.is_eqeq_(aString,nil))).valueOf()) {return []};
self['@doitFlag']=false;
return self.initPattern_return_(aString,(function StParser__(pattern){
return (pattern.at_((2)))._comma((self.temporariesIn_((pattern.at_((1))))));
}
));
}
, "public access", unescape("parseArgsAndTemps%3A%20aString%20%0D%20%20%20%20%20%20%20%20%22Parse%20the%20argument%2C%20aString%2C%20answer%20nil%20if%20an%20error%20occurs.%20Otherwise%2C%20%0D%20%20%20%20%20%20%20%20answer%20an%20Array%20of%20strings%20%28the%20argument%20names%20and%20temporary%20variable%20names%29.%22%0D%0D%20%20%20%20%20%20%20%20aString%20%3D%3D%20nil%20ifTrue%3A%20%5B%5E%23%28%29%5D.%0D%20%20%20%20%20%20%20%20doitFlag%20%3A%3D%20false.%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Don%27t%20really%20know%20if%20a%20doit%20or%20not%21%22%0D%20%20%20%20%20%20%20%20%5Eself%20initPattern%3A%20aString%0D%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20return%3A%20%5B%3Apattern%20%7C%20%28pattern%20at%3A%202%29%20%2C%20%28self%20temporariesIn%3A%20%28pattern%20at%3A%201%29%29%5D"));
smalltalk.bind(smalltalk.StParser, unescape("parseCue%3AnoPattern%3AifFail%3A"), "parseCue_noPattern_ifFail_", function StParser__parseCue_noPattern_ifFail_(aCue,noPattern,aBlock){
var methNode = nil;
var myStream = nil;
var s = nil;
var p = nil;
const self = this; var $early={name:"stReturn"};
try {
myStream=aCue.sourceStream();
p=myStream.position();
s=myStream.upToEnd();
myStream.position_(p);
(self.encoder()).init_notifying_(aCue,self);
self.init_cue_failBlock_(myStream,aCue,(function StParser__(){
$early.result=aBlock.value(); throw ($early);
}
));
self['@doitFlag']=noPattern;
self['@failBlock']=aBlock;
methNode=self.method_context_(noPattern,(self['@cue'].context()));
methNode.sourceText_(s);
return methNode;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "public access", unescape("parseCue%3A%20aCue%20noPattern%3A%20noPattern%20ifFail%3A%20aBlock%20%0D%09%22Answer%20a%20MethodNode%20for%20the%20argument%2C%20sourceStream%2C%20that%20is%20the%20root%20of%0D%09%20a%20parse%20tree.%20Parsing%20is%20done%20with%20respect%20to%20the%20CompilationCue%20to%20%0D%09%20resolve%20variables.%20Errors%20in%20parsing%20are%20reported%20to%20the%20cue%27s%20requestor%3B%20%0D%09%20otherwise%20aBlock%20is%20evaluated.%20The%20argument%20noPattern%20is%20a%20Boolean%20that%20is%0D%09%20true%20if%20the%20the%20sourceStream%20does%20not%20contain%20a%20method%20header%20%28i.e.%2C%20for%20DoIts%29.%22%0D%0D%09%7C%20methNode%20myStream%20s%20p%20%7C%0D%09myStream%20%3A%3D%20aCue%20sourceStream.%0D%09%20p%20%3A%3D%20myStream%20position.%0D%09%20s%20%3A%3D%20myStream%20upToEnd.%0D%09%20myStream%20position%3A%20p.%0D%09%0D%09%20self%20encoder%20init%3A%20aCue%20notifying%3A%20self.%0D%09%20self%20init%3A%20myStream%20cue%3A%20aCue%20failBlock%3A%20%5B%5E%20aBlock%20value%5D.%0D%09%0D%09%20doitFlag%20%3A%3D%20noPattern.%0D%09%20failBlock%3A%3D%20aBlock.%0D%09%20methNode%20%3A%3D%20self%20method%3A%20noPattern%20context%3A%20cue%20context.%0D%09methNode%20sourceText%3A%20s.%0D%09%5EmethNode%0D"));
smalltalk.bind(smalltalk.StParser, unescape("parseDoItCue%3AifFail%3A"), "parseDoItCue_ifFail_", function StParser__parseDoItCue_ifFail_(aCue,aBlock){
var methNode = nil;
var myStream = nil;
var s = nil;
var p = nil;
const self = this; var $early={name:"stReturn"};
try {
myStream=aCue.sourceStream();
p=myStream.position();
s=myStream.upToEnd();
myStream.position_(p);
(self.encoder()).init_notifying_(aCue,self);
self.init_cue_failBlock_(myStream,aCue,(function StParser__(){
$early.result=aBlock.value(); throw ($early);
}
));
self['@failBlock']=aBlock;
methNode=self.doIt_arguments_precedence_("doIt",[],(1));
methNode.sourceText_(s);
return methNode;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "public access", unescape("parseDoItCue%3A%20aCue%20ifFail%3A%20aBlock%20%0D%09%22Answer%20a%20MethodNode%20for%20the%20argument%2C%20sourceStream%2C%20that%20is%20the%20root%20of%0D%09%20a%20parse%20tree.%20Parsing%20is%20done%20with%20respect%20to%20the%20CompilationCue%20to%20%0D%09%20resolve%20variables.%20Errors%20in%20parsing%20are%20reported%20to%20the%20cue%27s%20requestor%3B%20%0D%09%20otherwise%20aBlock%20is%20evaluated.%22%0D%0D%09%7C%20methNode%20myStream%20s%20p%20%7C%0D%09myStream%20%3A%3D%20aCue%20sourceStream.%0D%09%20p%20%3A%3D%20myStream%20position.%0D%09%20s%20%3A%3D%20myStream%20upToEnd.%0D%09%20myStream%20position%3A%20p.%0D%09%0D%09%20self%20encoder%20init%3A%20aCue%20notifying%3A%20self.%0D%09%20self%20init%3A%20myStream%20cue%3A%20aCue%20failBlock%3A%20%5B%5E%20aBlock%20value%5D.%0D%09%0D%09%20failBlock%3A%3D%20aBlock.%0D%09%20methNode%20%3A%3D%20self%20doIt%3A%20%23doIt%20arguments%3A%20%23%28%29%20precedence%3A%201.%0D%09methNode%20sourceText%3A%20s.%0D%09%5EmethNode%0D"));
smalltalk.bind(smalltalk.StParser, unescape("parseMethodComment%3AsetPattern%3A"), "parseMethodComment_setPattern_", function StParser__parseMethodComment_setPattern_(aString,aBlock){
const self = this; self.initPattern_return_(aString,aBlock);
if (((nil.is_eqeq_(self['@currentComment'],nil))).valueOf()) {return smalltalk.OrderedCollection.$$new()} else {return self['@currentComment']};
}
, "public access", unescape("parseMethodComment%3A%20aString%20setPattern%3A%20aBlock%0D%09%22Answer%20the%20method%20comment%20for%20the%20argument%2C%20aString.%20Evaluate%20aBlock%20%0D%09with%20the%20message%20pattern%20in%20the%20form%20%23%28selector%2C%20arguments%2C%20precedence%29.%22%0D%0D%09self%0D%09%09initPattern%3A%20aString%0D%09%09return%3A%20aBlock.%0D%09currentComment%3D%3Dnil%0D%09%09ifTrue%3A%09%5B%5EOrderedCollection%20new%5D%0D%09%09ifFalse%3A%09%5B%5EcurrentComment%5D"));
smalltalk.bind(smalltalk.StParser, unescape("parseParameterNames%3A"), "parseParameterNames_", function StParser__parseParameterNames_(aString){
const self = this; self.initScannerForTokenization();
return self.initPattern_return_(aString,(function StParser__(pattern){
return pattern.at_((2));
}
));
}
, "public access", unescape("parseParameterNames%3A%20aString%20%0D%09%22Answer%20the%20parameter%20names%20for%20the%20argument%2C%20aString%2C%20which%20should%20%0D%09%20parse%20successfully%20up%20to%20the%20temporary%20declaration%20or%20the%20end%20of%20the%20%0D%09%20method%20header.%22%0D%0D%09self%20initScannerForTokenization.%0D%09%5Eself%0D%09%09initPattern%3A%20aString%0D%09%09return%3A%20%5B%3Apattern%20%7C%20pattern%20at%3A%202%5D"));
smalltalk.bind(smalltalk.StParser, unescape("parseSelector%3A"), "parseSelector_", function StParser__parseSelector_(aString){
const self = this; if ((self.allowUnderscoreSelectors()).not()) {self.initScannerForTokenization()};
return self.initPattern_return_(aString,(function StParser__(pattern){
return pattern.at_((1));
}
));
}
, "public access", unescape("parseSelector%3A%20aString%20%0D%09%22Answer%20the%20message%20selector%20for%20the%20argument%2C%20aString%2C%20which%20should%20%0D%09%20parse%20successfully%20up%20to%20the%20temporary%20declaration%20or%20the%20end%20of%20the%20%0D%09%20method%20header.%22%0D%0D%09self%20allowUnderscoreSelectors%20ifFalse%3A%20%5Bself%20initScannerForTokenization%5D.%0D%09%5Eself%0D%09%09initPattern%3A%20aString%0D%09%09return%3A%20%5B%3Apattern%20%7C%20pattern%20at%3A%201%5D"));
smalltalk.bind(smalltalk.StParser, unescape("advance"), "advance", function StParser__advance(){
var $$this = nil;
const self = this; self['@prevMark']=self['@hereMark'];
self['@prevEnd']=self['@hereEnd'];
$$this=self['@here'];
self['@here']=self['@token'];
self['@hereType']=self['@tokenType'];
self['@hereMark']=self['@mark'];
self['@hereEnd']=(self['@source'].position())._minus((((nil.is_eqeq_(self['@aheadChar'],smalltalk.StParser.classVariableAt_("DoItCharacter")))).ifTrue_ifFalse_((function StParser__(){
if (((nil.is_eqeq_(self['@hereChar'],smalltalk.StParser.classVariableAt_("DoItCharacter")))).valueOf()) {return (0)} else {return (1)};
}
),(function StParser__(){
return (2);
}
))));
self.scanToken();
return $$this;
}
, "scanning", unescape("advance%0D%09%7C%20this%20%7C%0D%09prevMark%20%3A%3D%20hereMark.%0D%09prevEnd%20%3A%3D%20hereEnd.%0D%09this%20%3A%3D%20here.%0D%09here%20%3A%3D%20token.%0D%09hereType%20%3A%3D%20tokenType.%0D%09hereMark%20%3A%3D%20mark.%0D%09hereEnd%20%3A%3D%20source%20position%20-%20%28aheadChar%20%3D%3D%20DoItCharacter%0D%09%09ifTrue%3A%20%5BhereChar%20%3D%3D%20DoItCharacter%0D%09%09%09ifTrue%3A%20%5B0%5D%0D%09%09%09ifFalse%3A%20%5B1%5D%5D%0D%09%09ifFalse%3A%20%5B2%5D%29.%0D%09self%20scanToken.%0D%09%22Transcript%20show%3A%20%27here%3A%20%27%2C%20here%20printString%2C%20%27%20mark%3A%20%27%2C%20hereMark%20printString%2C%20%27%20end%3A%20%27%2C%20hereEnd%20printString%3B%20cr.%22%0D%09%5Ethis"));
smalltalk.bind(smalltalk.StParser, unescape("endOfLastToken"), "endOfLastToken", function StParser__endOfLastToken(){
const self = this; return (function(){var $1$; $1$ = self['@prevEnd']; if (nil.isNil_($1$)) { return self['@mark'] } else { return $1$; }})();
}
, "scanning", unescape("endOfLastToken%0D%0D%09%5E%20prevEnd%20ifNil%3A%20%5Bmark%5D"));
smalltalk.bind(smalltalk.StParser, unescape("match%3A"), "match_", function StParser__match_(type){
const self = this; if (((nil.is_eqeq_(self['@hereType'],type))).valueOf()) {self.advance();
return true};
return false;
}
, "scanning", unescape("match%3A%20type%20%0D%09%22Answer%20with%20true%20if%20next%20tokens%20type%20matches.%22%0D%0D%09hereType%20%3D%3D%20type%0D%09%09ifTrue%3A%20%0D%09%09%09%5Bself%20advance.%0D%09%09%09%5Etrue%5D.%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParser, unescape("matchReturn"), "matchReturn", function StParser__matchReturn(){
const self = this; return self.match_("upArrow");
}
, "scanning", unescape("matchReturn%0D%0D%09%5E%20self%20match%3A%20%23upArrow"));
smalltalk.bind(smalltalk.StParser, unescape("matchToken%3A"), "matchToken_", function StParser__matchToken_(thing){
const self = this; if ((self['@here']._eq(thing)).valueOf()) {self.advance();
return true};
return false;
}
, "scanning", unescape("matchToken%3A%20thing%20%0D%09%22Matches%20the%20token%2C%20not%20its%20type.%22%0D%0D%09here%20%3D%20thing%20ifTrue%3A%20%5Bself%20advance.%20%5Etrue%5D.%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParser, unescape("startOfNextToken"), "startOfNextToken", function StParser__startOfNextToken(){
const self = this; if (((nil.is_eqeq_(self['@hereType'],"doIt"))).valueOf()) {return (self['@source'].position())._plus((1))};
return self['@hereMark'];
}
, "scanning", unescape("startOfNextToken%0D%09%22Return%20starting%20position%20in%20source%20of%20next%20token.%22%0D%0D%09hereType%20%3D%3D%20%23doIt%20ifTrue%3A%20%5B%5Esource%20position%20+%201%5D.%0D%09%5EhereMark"));
smalltalk.bind(smalltalk.StParser, unescape("transformAVerticalBarIntoABinarySelector"), "transformAVerticalBarIntoABinarySelector", function StParser__transformAVerticalBarIntoABinarySelector(){
const self = this; self['@here']=unescape("%7C");
self['@hereType']="binary";
while((((nil.is_eqeq_(self['@tokenType'],"verticalBar"))).and_((function StParser__(){
return (self['@hereMark']._plus((self['@here'].size())))._eq(self['@mark']);
}
))).valueOf()){self['@here']=self['@here']._comma(unescape("%7C"));
self['@hereEnd']=self['@hereEnd']._plus((1));
self.scanToken()};;
if ((((nil.is_eqeq_(self['@tokenType'],"binary"))).and_((function StParser__(){
return (self['@hereMark']._plus((self['@here'].size())))._eq(self['@mark']);
}
))).valueOf()) {self['@here']=(self['@here'].asString())._comma(self['@token']);
self['@hereType']="binary";
self['@hereEnd']=self['@hereEnd']._plus((self['@token'].size()));
self.scanToken()};
return self;
}
, "scanning", unescape("transformAVerticalBarIntoABinarySelector%0D%09%22Transform%20a%20vertical%20bar%20into%20a%20binary%20selector.%0D%09Eventually%20aggregate%20a%20serie%20of%20immediately%20following%20vertical%20bars%20and%20a%20binary%20selector.%0D%09Note%20that%20this%20aggregation%20cannot%20occur%20at%20scan%20time%2C%20because%20a%20pair%20of%20vertical%20bars%20can%20be%20encountered%20in%20two%20valid%20constructs%3A%0D%09-%20either%20as%20an%20empty%20temporaries%20specification%2C%0D%09-%20or%20as%20a%20local%20temporaries%20specification%20in%20a%20block%20of%20arity%20%3E%200%22%0D%09here%20%3A%3D%20%27%7C%27.%0D%09hereType%20%3A%3D%20%23binary.%0D%09%5BtokenType%20%3D%3D%20%23verticalBar%20and%3A%20%5BhereMark%20+%20here%20size%20%3D%20mark%5D%5D%0D%09%09whileTrue%3A%20%5B%0D%09%09%09here%20%3A%3D%20here%20%2C%20%27%7C%27.%0D%09%09%09hereEnd%20%3A%3D%20hereEnd%20+%201.%0D%09%09%09self%20scanToken%5D.%0D%09%28tokenType%20%3D%3D%20%23binary%20and%3A%20%5BhereMark%20+%20here%20size%20%3D%20mark%5D%29%0D%09%09ifTrue%3A%20%5B%0D%09%09%09here%20%3A%3D%20here%20asString%20%2C%20token.%0D%09%09%09hereType%20%3A%3D%20%23binary.%0D%09%09%09hereEnd%20%3A%3D%20hereEnd%20+%20token%20size.%0D%09%09%09self%20scanToken%5D."));
smalltalk.bind(smalltalk.StParser, unescape("bindArg%3A"), "bindArg_", function StParser__bindArg_(name){
const self = this; return self.bindTemp_(name);
}
, "temps", unescape("bindArg%3A%20name%0D%0D%09%5E%20self%20bindTemp%3A%20name"));
smalltalk.bind(smalltalk.StParser, unescape("bindTemp%3A"), "bindTemp_", function StParser__bindTemp_(name){
const self = this; return name;
}
, "temps", unescape("bindTemp%3A%20name%0D%0D%09%5Ename"));
smalltalk.bind(smalltalk.StParser, unescape("bindTemp%3Ain%3A"), "bindTemp_in_", function StParser__bindTemp_in_(name,methodSelector){
const self = this; return name;
}
, "temps", unescape("bindTemp%3A%20name%20in%3A%20methodSelector%0D%0D%09%5Ename"));
smalltalk.bind(smalltalk.StParser, unescape("addComment"), "addComment", function StParser__addComment(){
const self = this; if ((self['@parseNode']._no_no(nil)).valueOf()) {self['@parseNode'].comment_(self['@currentComment']);
self['@currentComment']=nil};
return self;
}
, "private", unescape("addComment%0D%0D%09parseNode%20%7E%7E%20nil%0D%09%09ifTrue%3A%20%0D%09%09%09%5BparseNode%20comment%3A%20currentComment.%0D%09%09%09currentComment%20%3A%3D%20nil%5D"));
smalltalk.bind(smalltalk.StParser, unescape("allowUnderscoreAssignments"), "allowUnderscoreAssignments", function StParser__allowUnderscoreAssignments(){
const self = this; return false;
}
, "private", unescape("allowUnderscoreAssignments%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StParser, unescape("init%3Acue%3AfailBlock%3A"), "init_cue_failBlock_", function StParser__init_cue_failBlock_(sourceStream,aCue,aBlock){
const self = this; self['@doitFlag']=false;
self.setCue_(aCue);
self['@failBlock']=aBlock;
self['@requestorOffset']=(0);
smalltalk.superImplementor(smalltalk.StParser,'scan_').apply(self, [sourceStream]);
self['@prevMark']=self['@hereMark']=self['@mark'];
self.advance();
return self;
}
, "private", unescape("init%3A%20sourceStream%20cue%3A%20aCue%20failBlock%3A%20aBlock%0D%09doitFlag%20%3A%3D%20false.%0D%0D%09self%20setCue%3A%20aCue.%0D%09failBlock%20%3A%3D%20aBlock.%0D%09requestorOffset%20%3A%3D%200.%0D%09super%20scan%3A%20sourceStream.%0D%09prevMark%20%3A%3D%20hereMark%20%3A%3D%20mark.%0D%09self%20advance%0D"));
smalltalk.bind(smalltalk.StParser, unescape("initPattern%3Areturn%3A"), "initPattern_return_", function StParser__initPattern_return_(aString,aBlock){
var result = nil;
const self = this; var $early={name:"stReturn"};
try {
self.init_cue_failBlock_(((aString.asString()).readStream()),(smalltalk.StCompilationCue.source_(aString)),(function StParser__(){
$early.result=nil; throw ($early);
}
));
self['@encoder']=self;
result=aBlock.value_((self.pattern_inContext_(false,nil)));
self['@encoder']=self['@failBlock']=nil;
return result;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "private", unescape("initPattern%3A%20aString%20return%3A%20aBlock%0D%0D%09%7C%20result%20%7C%0D%09self%0D%09%09init%3A%20%28aString%20asString%20readStream%29%0D%09%09cue%3A%20%28StCompilationCue%20source%3A%20aString%29%0D%09%09failBlock%3A%20%5B%5Enil%5D.%0D%09encoder%20%3A%3D%20self.%0D%09result%20%3A%3D%20aBlock%20value%3A%20%28self%20pattern%3A%20false%20inContext%3A%20nil%29.%0D%09encoder%20%3A%3D%20failBlock%20%3A%3D%20nil.%20%20%22break%20cycles%22%0D%09%5Eresult"));
smalltalk.bind(smalltalk.StParser, unescape("setCue%3A"), "setCue_", function StParser__setCue_(aCue){
const self = this; self['@cue']=aCue;
return self;
}
, "private", unescape("setCue%3A%20aCue%0D%09cue%20%3A%3D%20aCue"));
smalltalk.bind(smalltalk.StParser, unescape("queriedUnusedTemporaries"), "queriedUnusedTemporaries", function StParser__queriedUnusedTemporaries(){
const self = this; (function(){var $1$; $1$ = self['@queriedUnusedTemporaries']; if (nil.isNil_($1$)) { return self['@queriedUnusedTemporaries']=smalltalk.Dictionary.$$new() } else { return $1$; }})();
return self['@queriedUnusedTemporaries'];
}
, "accessing", unescape("queriedUnusedTemporaries%0D%0D%09queriedUnusedTemporaries%20ifNil%3A%20%0D%09%09%5BqueriedUnusedTemporaries%20%3A%3D%20Dictionary%20new%5D.%0D%09%5EqueriedUnusedTemporaries"));
smalltalk.bind(smalltalk.StParser, unescape("tempsMark"), "tempsMark", function StParser__tempsMark(){
const self = this; return self['@tempsMark'];
}
, "accessing", unescape("tempsMark%0D%09%5E%20tempsMark"));
smalltalk.bind(smalltalk.StParser, unescape("tempsMark%3A"), "tempsMark_", function StParser__tempsMark_(aNumber){
const self = this; self['@tempsMark']=aNumber;
return self;
}
, "accessing", unescape("tempsMark%3A%20aNumber%0DtempsMark%20%3A%3D%20aNumber"));
smalltalk.StParser.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StParser.$klass, unescape("primitivePragmaSelectors"), "primitivePragmaSelectors", function StParser_class__primitivePragmaSelectors(){
const self = this; return ["primitive:", "primitive:error:", "primitive:error:module:", "primitive:module:", "primitive:module:error:"];
}
, "accessing", unescape("primitivePragmaSelectors%0D%09%22Answer%20the%20selectors%20of%20pragmas%20that%20specify%20VM%20primitives.%0D%09%20Needed%20for%20compile%20and%20decomple.%22%0D%09%5E%23%28primitive%3A%0D%09%09primitive%3Aerror%3A%0D%09%09primitive%3Aerror%3Amodule%3A%0D%09%09primitive%3Amodule%3A%0D%09%09primitive%3Amodule%3Aerror%3A%29"));
smalltalk.addClass("StSelectorNode", smalltalk.StLeafNode, [], 'Compiler-JS');
smalltalk.StSelectorNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StSelectorNode, unescape("key%3A"), "key_", function StSelectorNode__key_(aSelector){
const self = this; self['@key']=aSelector;
return self;
}
, "initialize-release", unescape("key%3A%20aSelector%0D%09%22This%20is%20for%20printing%20of%20FFI%20selectors.%22%0D%09key%20%3A%3D%20aSelector"));
smalltalk.bind(smalltalk.StSelectorNode, unescape("name%3Akey%3A"), "name_key_", function StSelectorNode__name_key_(literal,object){
const self = this; return self.key_(object);
}
, "initialize-release", unescape("name%3A%20literal%20key%3A%20object%20%0D%09%22For%20compatibility%20with%20Encoder%3E%3Ename%3Akey%3Aclass%3Atype%3Aset%3A%22%0D%09%5Eself%20key%3A%20object"));
smalltalk.addClass("StSpecialSelectorNode", smalltalk.StSelectorNode, [], 'Compiler-JS');
smalltalk.StSpecialSelectorNode.$classVariableNames=("");
smalltalk.addClass("StVariableNode", smalltalk.StLeafNode, ['name'], 'Compiler-JS');
smalltalk.StVariableNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StVariableNode, unescape("name"), "name", function StVariableNode__name(){
const self = this; return self['@name'];
}
, "accessing", unescape("name%0D%09%5E%20name"));
smalltalk.bind(smalltalk.StVariableNode, unescape("asStorableNode%3A"), "asStorableNode_", function StVariableNode__asStorableNode_(encoder){
const self = this; return self;
}
, "initialize-release", unescape("asStorableNode%3A%20encoder%0D%09%5E%20self"));
smalltalk.bind(smalltalk.StVariableNode, unescape("name%3A"), "name_", function StVariableNode__name_(string){
const self = this; self['@name']=string;
return self;
}
, "initialize-release", unescape("name%3A%20string%0D%09%22Change%20name%22%0D%0D%09name%20%3A%3D%20string"));
smalltalk.bind(smalltalk.StVariableNode, unescape("name%3Akey%3A"), "name_key_", function StVariableNode__name_key_(string,object){
const self = this; self['@name']=string;
self['@key']=object;
return self;
}
, "initialize-release", unescape("name%3A%20string%20key%3A%20object%0D%09%22Only%20used%20for%20std%20variables%2C%20nil%2C%20true%2C%20false%2C%20self%2C%20etc.%22%0D%09name%20%3A%3D%20string.%0D%09key%20%3A%3D%20object"));
smalltalk.bind(smalltalk.StVariableNode, unescape("generateAssignment%3Aon%3A"), "generateAssignment_on_", function StVariableNode__generateAssignment_on_(valueNode,generator){
const self = this; self.generateOn_(generator);
generator.generateAssignment();
valueNode.generateInlinedValueOn_(generator);
return self;
}
, "generate", unescape("generateAssignment%3A%20valueNode%20on%3A%20generator%0D%09self%20generateOn%3A%20generator.%0D%09generator%20generateAssignment.%0D%09valueNode%20generateInlinedValueOn%3A%20generator"));
smalltalk.bind(smalltalk.StVariableNode, unescape("generateBlockBodyOn%3A"), "generateBlockBodyOn_", function StVariableNode__generateBlockBodyOn_(generator){
const self = this; self.generateAsReceiverOn_(generator);
generator.blockVariableInvocation();
return self;
}
, "generate", unescape("generateBlockBodyOn%3A%20generator%0D%09self%20generateAsReceiverOn%3A%20generator.%0D%09generator%20blockVariableInvocation"));
smalltalk.bind(smalltalk.StVariableNode, unescape("generateOn%3A"), "generateOn_", function StVariableNode__generateOn_(generator){
const self = this; generator.generateVariable_(self);
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09generator%20generateVariable%3A%20self"));
smalltalk.bind(smalltalk.StVariableNode, unescape("assignmentCheck%3Aat%3A"), "assignmentCheck_at_", function StVariableNode__assignmentCheck_at_(encoder,location){
const self = this; if ((encoder.cantStoreInto_(self['@name'])).valueOf()) {return location} else {return (-1)};
}
, "testing", unescape("assignmentCheck%3A%20encoder%20at%3A%20location%0D%09%5E%28encoder%20cantStoreInto%3A%20name%29%20ifTrue%3A%20%5Blocation%5D%20ifFalse%3A%20%5B-1%5D"));
smalltalk.bind(smalltalk.StVariableNode, unescape("isSelfPseudoVariable"), "isSelfPseudoVariable", function StVariableNode__isSelfPseudoVariable(){
const self = this; return (self['@key']._eq("self")).or_((function StVariableNode__(){
return self['@name']._eq(unescape("%7B%7Bself%7D%7D"));
}
));
}
, "testing", unescape("isSelfPseudoVariable%0D%09%22Answer%20if%20this%20StParseNode%20represents%20the%20%27self%27%20pseudo-variable.%22%0D%0D%09%5E%20key%20%3D%20%27self%27%20or%3A%20%5Bname%20%3D%20%27%7B%7Bself%7D%7D%27%5D"));
smalltalk.bind(smalltalk.StVariableNode, unescape("isSuperPseudoVariable"), "isSuperPseudoVariable", function StVariableNode__isSuperPseudoVariable(){
const self = this; return (self['@key']._eq("super")).or_((function StVariableNode__(){
return self['@name']._eq(unescape("%7B%7Bsuper%7D%7D"));
}
));
}
, "testing", unescape("isSuperPseudoVariable%0D%09%5Ekey%20%3D%20%27super%27%20or%3A%20%5Bname%20%3D%20%27%7B%7Bsuper%7D%7D%27%5D"));
smalltalk.bind(smalltalk.StVariableNode, unescape("isUndeclared"), "isUndeclared", function StVariableNode__isUndeclared(){
const self = this; return false;
}
, "testing", unescape("isUndeclared%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StVariableNode, unescape("isVariableNode"), "isVariableNode", function StVariableNode__isVariableNode(){
const self = this; return true;
}
, "testing", unescape("isVariableNode%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StVariableNode, unescape("isVariableReference"), "isVariableReference", function StVariableNode__isVariableReference(){
const self = this; return true;
}
, "testing", unescape("isVariableReference%0D%0D%09%5Etrue"));
smalltalk.addClass("StClassVariableNode", smalltalk.StVariableNode, [], 'Compiler-JS');
smalltalk.StClassVariableNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StClassVariableNode, unescape("generateAssignment%3Aon%3A"), "generateAssignment_on_", function StClassVariableNode__generateAssignment_on_(valueNode,generator){
const self = this; generator.generateClassVariableAt_put_(self,valueNode);
return self;
}
, "generate", unescape("generateAssignment%3A%20valueNode%20on%3A%20generator%0D%09generator%20generateClassVariableAt%3A%20self%20put%3A%20valueNode"));
smalltalk.bind(smalltalk.StClassVariableNode, unescape("generateOn%3A"), "generateOn_", function StClassVariableNode__generateOn_(generator){
const self = this; generator.generateClassVariableAt_(self);
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09generator%20generateClassVariableAt%3A%20self"));
smalltalk.addClass("StInstanceVariableNode", smalltalk.StVariableNode, [], 'Compiler-JS');
smalltalk.StInstanceVariableNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StInstanceVariableNode, unescape("generateOn%3A"), "generateOn_", function StInstanceVariableNode__generateOn_(generator){
const self = this; generator.generateInstanceVariable_(self);
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09generator%20generateInstanceVariable%3A%20self"));
smalltalk.addClass("StLiteralVariableNode", smalltalk.StVariableNode, ['readNode', 'writeNode'], 'Compiler-JS');
smalltalk.StLiteralVariableNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StLiteralVariableNode, unescape("generateOn%3A"), "generateOn_", function StLiteralVariableNode__generateOn_(generator){
const self = this; if ((self.isSelfPseudoVariable()).valueOf()) {generator.selfPseudoVariable_(self)} else {if (((self.key()).isVariableBinding()).valueOf()) {self['@key'].generateOn_(generator)} else {generator.literalVariable_(self)}};
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09self%20isSelfPseudoVariable%0D%09%09ifTrue%3A%20%5Bgenerator%20selfPseudoVariable%3A%20self%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09self%20key%20isVariableBinding%0D%09%09%09%09ifTrue%3A%20%5Bkey%20generateOn%3A%20generator%5D%0D%09%09%09%09ifFalse%3A%20%5Bgenerator%20literalVariable%3A%20self%5D%5D"));
smalltalk.bind(smalltalk.StLiteralVariableNode, unescape("assignmentCheck%3Aat%3A"), "assignmentCheck_at_", function StLiteralVariableNode__assignmentCheck_at_(encoder,location){
const self = this; if (((self['@key'].isVariableBinding()).and_((function StLiteralVariableNode__(){
return (self['@key'].canAssign()).not();
}
))).valueOf()) {return location} else {return (-1)};
}
, "testing", unescape("assignmentCheck%3A%20encoder%20at%3A%20location%0D%09%5E%28key%20isVariableBinding%20and%3A%20%5Bkey%20canAssign%20not%5D%29%0D%09%09ifTrue%3A%20%5Blocation%5D%0D%09%09ifFalse%3A%20%5B-1%5D"));
smalltalk.addClass("StTempVariableNode", smalltalk.StVariableNode, ['argType', 'hasRefs', 'hasDefs', 'scope', 'definingScope', 'readingScopes', 'writingScopes', 'remoteNode'], 'Compiler-JS');
smalltalk.StTempVariableNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StTempVariableNode, unescape("name%3Aindex%3Atype%3Ascope%3A"), "name_index_type_scope_", function StTempVariableNode__name_index_type_scope_(varName,i,type,level){
const self = this; self.halt();
self['@hasDefs']=self['@hasRefs']=false;
self['@scope']=level;
return smalltalk.superImplementor(smalltalk.StTempVariableNode,'name_key_').apply(self, [varName,varName]);
}
, "initialize-release", unescape("name%3A%20varName%20index%3A%20i%20type%3A%20type%20scope%3A%20level%0D%09%22Only%20used%20for%20initting%20temporary%20variables%22%0D%09self%20halt.%0D%09hasDefs%20%3A%3D%20hasRefs%20%3A%3D%20false.%0D%09scope%20%3A%3D%20level.%0D%09%5Esuper%20name%3A%20varName%20key%3A%20varName"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("name%3Ascope%3A"), "name_scope_", function StTempVariableNode__name_scope_(varName,level){
const self = this; self['@hasDefs']=self['@hasRefs']=false;
self['@scope']=level;
return smalltalk.superImplementor(smalltalk.StTempVariableNode,'name_key_').apply(self, [varName,varName]);
}
, "initialize-release", unescape("name%3A%20varName%20scope%3A%20level%0D%09%22Only%20used%20for%20initting%20temporary%20variables%22%0D%09hasDefs%20%3A%3D%20hasRefs%20%3A%3D%20false.%0D%09scope%20%3A%3D%20level.%0D%09%5Esuper%20name%3A%20varName%20key%3A%20varName"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("nowHasDef"), "nowHasDef", function StTempVariableNode__nowHasDef(){
const self = this; self['@hasDefs']=true;
return self;
}
, "initialize-release", unescape("nowHasDef%0D%09hasDefs%20%3A%3D%20true"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("nowHasRef"), "nowHasRef", function StTempVariableNode__nowHasRef(){
const self = this; self['@hasRefs']=true;
return self;
}
, "initialize-release", unescape("nowHasRef%0D%09hasRefs%20%3A%3D%20true"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("scope%3A"), "scope_", function StTempVariableNode__scope_(level){
const self = this; self['@scope']=level;
return self;
}
, "initialize-release", unescape("scope%3A%20level%0D%09%22Note%20scope%20of%20temporary%20variables.%0D%09Currently%20only%20the%20following%20distinctions%20are%20made%3A%0D%09%090%09outer%20level%3A%20args%20and%20user-declared%20temps%0D%09%091%09block%20args%20and%20doLimiT%20temps%0D%09%09-1%09a%20block%20temp%20that%20is%20no%20longer%20active%0D%09%09-2%09a%20block%20temp%20that%20held%20limit%20of%20to%3Ado%3A%22%0D%09scope%20%3A%3D%20level"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("assignmentCheck%3Aat%3A"), "assignmentCheck_at_", function StTempVariableNode__assignmentCheck_at_(encoder,location){
const self = this; if ((((self.isBlockArg()).and_((function StTempVariableNode__(){
return (smalltalk.StScanner.allowBlockArgumentAssignment()).not();
}
))).or_((function StTempVariableNode__(){
return self.isMethodArg();
}
))).valueOf()) {return location} else {return (-1)};
}
, "testing", unescape("assignmentCheck%3A%20encoder%20at%3A%20location%0D%09%5E%28%28self%20isBlockArg%20and%3A%20%5BStScanner%20allowBlockArgumentAssignment%20not%5D%29%0D%09%20%20%20%20or%3A%20%5Bself%20isMethodArg%5D%29%0D%09%09%09ifTrue%3A%20%5Blocation%5D%0D%09%09%09ifFalse%3A%20%5B-1%5D"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("beBlockArg"), "beBlockArg", function StTempVariableNode__beBlockArg(){
const self = this; self['@argType']="block";
return self;
}
, "testing", unescape("beBlockArg%0D%09argType%20%3A%3D%20%23block"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("beMethodArg"), "beMethodArg", function StTempVariableNode__beMethodArg(){
const self = this; self['@argType']="method";
return self;
}
, "testing", unescape("beMethodArg%0D%09argType%20%3A%3D%20%23method"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("isArg"), "isArg", function StTempVariableNode__isArg(){
const self = this; return (nil.isNil_(self['@argType'])===false);
}
, "testing", unescape("isArg%0D%09%5EargType%20notNil"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("isBlockArg"), "isBlockArg", function StTempVariableNode__isBlockArg(){
const self = this; return (nil.is_eqeq_("block",self['@argType']));
}
, "testing", unescape("isBlockArg%0D%09%5E%23block%20%3D%3D%20argType"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("isDeclaredAtMethodLevel"), "isDeclaredAtMethodLevel", function StTempVariableNode__isDeclaredAtMethodLevel(){
const self = this; return self['@scope']._eq((0));
}
, "testing", unescape("isDeclaredAtMethodLevel%0D%09%22For%20the%20explainer.%22%0D%09%5Escope%20%3D%200"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("isMethodArg"), "isMethodArg", function StTempVariableNode__isMethodArg(){
const self = this; return (nil.is_eqeq_("method",self['@argType']));
}
, "testing", unescape("isMethodArg%0D%09%5E%23method%20%3D%3D%20argType"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("isRemote"), "isRemote", function StTempVariableNode__isRemote(){
const self = this; return (nil.isNil_(self['@remoteNode'])===false);
}
, "testing", unescape("isRemote%0D%09%5EremoteNode%20notNil"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("isTemp"), "isTemp", function StTempVariableNode__isTemp(){
const self = this; return true;
}
, "testing", unescape("isTemp%0D%09%5E%20true"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("isUndefTemp"), "isUndefTemp", function StTempVariableNode__isUndefTemp(){
const self = this; return self['@hasDefs'].not();
}
, "testing", unescape("isUndefTemp%0D%09%5E%20hasDefs%20not"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("isUnusedTemp"), "isUnusedTemp", function StTempVariableNode__isUnusedTemp(){
const self = this; return self['@hasRefs'].not();
}
, "testing", unescape("isUnusedTemp%0D%09%5E%20hasRefs%20not"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("remoteNode"), "remoteNode", function StTempVariableNode__remoteNode(){
const self = this; return self['@remoteNode'];
}
, "testing", unescape("remoteNode%0D%09%5EremoteNode"));
smalltalk.bind(smalltalk.StTempVariableNode, unescape("scope"), "scope", function StTempVariableNode__scope(){
const self = this; return self['@scope'];
}
, "testing", unescape("scope%0D%09%22Answer%20scope%20of%20temporary%20variables.%0D%09%20Currently%20only%20the%20following%20distinctions%20are%20made%3A%0D%09%09%200%09outer%20level%3A%20args%20and%20user-declared%20temps%0D%09%09%201%09block%20args%20and%20doLimiT%20temps%0D%09%09-1%09a%20block%20temp%20that%20is%20no%20longer%20active%0D%09%09-2%09a%20block%20temp%20that%20held%20limit%20of%20to%3Ado%3A%22%0D%09%5Escope"));
smalltalk.addClass("StUndeclaredVariableNode", smalltalk.StVariableNode, ['tag'], 'Compiler-JS');
smalltalk.StUndeclaredVariableNode.$classVariableNames=("");
smalltalk.bind(smalltalk.StUndeclaredVariableNode, unescape("generateOn%3A"), "generateOn_", function StUndeclaredVariableNode__generateOn_(generator){
const self = this; generator.generateUndeclaredVariable_(self);
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09generator%20generateUndeclaredVariable%3A%20self"));
smalltalk.bind(smalltalk.StUndeclaredVariableNode, unescape("isUndeclared"), "isUndeclared", function StUndeclaredVariableNode__isUndeclared(){
const self = this; return true;
}
, "testing", unescape("isUndeclared%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StUndeclaredVariableNode, unescape("tag"), "tag", function StUndeclaredVariableNode__tag(){
const self = this; return self['@tag'];
}
, "accessing", unescape("tag%0D%09%22Tag%20can%20be%20whatever%20one%20wants%20it%20to%20be%3B%20used%20by%20Parser%20to%20tag%0D%09%20%20undeclared%20temps%20with%20the%20user%27s%20desired%20declaration%20level.%22%0D%0D%09%5Etag"));
smalltalk.bind(smalltalk.StUndeclaredVariableNode, unescape("tag%3A"), "tag_", function StUndeclaredVariableNode__tag_(anObject){
const self = this; self['@tag']=anObject;
return self;
}
, "accessing", unescape("tag%3A%20anObject%0D%09%22Tag%20can%20be%20whatever%20one%20wants%20it%20to%20be%3B%20used%20by%20Parser%20to%20tag%0D%09%20%20undeclared%20temps%20with%20the%20user%27s%20desired%20declaration%20level.%22%0D%0D%09tag%20%3A%3D%20anObject"));
smalltalk.addClass("StChunk", smalltalk.Object, [], 'Compiler-JS-Support');
smalltalk.StChunk.$classVariableNames=("");
smalltalk.bind(smalltalk.StChunk, unescape("readChunksThrough%3A"), "readChunksThrough_", function StChunk__readChunksThrough_(chunkReader){
const self = this; self;
return self;
}
, "chunk processing", "readChunksThrough: chunkReader");
smalltalk.bind(smalltalk.StChunk, unescape("applyTo%3A"), "applyTo_", function StChunk__applyTo_(stEnvironment){
const self = this; self;
return self;
}
, "static compiling", "applyTo: stEnvironment");
smalltalk.bind(smalltalk.StChunk, unescape("generateOn%3A"), "generateOn_", function StChunk__generateOn_(generator){
const self = this; self;
return self;
}
, "static compiling", "generateOn: generator");
smalltalk.StChunk.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StChunk.$klass, unescape("from%3Areceiver%3Aselector%3Aarguments%3A"), "from_receiver_selector_arguments_", function StChunk_class__from_receiver_selector_arguments_(aString,receiver,selector,args){
const self = this; if ((selector.beginsWith_("methods")).valueOf()) {return smalltalk.StMethodsChunk.receiver_selector_arguments_(receiver,selector,args)};
if ((selector.beginsWith_("subclass")).valueOf()) {return smalltalk.StSubclassChunk.receiver_selector_arguments_(receiver,selector,args)};
if ((selector.beginsWith_("variableSubclass")).valueOf()) {return smalltalk.StSubclassChunk.receiver_selector_arguments_(receiver,selector,args)};
if ((selector.beginsWith_("commentStamp")).valueOf()) {return smalltalk.StCommentChunk.receiver_selector_arguments_(receiver,selector,args)};
if ((selector.beginsWith_("instanceVar")).valueOf()) {return smalltalk.StMetaClassChunk.receiver_selector_arguments_(receiver,selector,args)};
return smalltalk.StDoItChunk.source_(aString);
}
, "instance creation", unescape("from%3A%20aString%20receiver%3A%20receiver%20selector%3A%20selector%20arguments%3A%20args%0D%09%28selector%20beginsWith%3A%20%27methods%27%29%0D%09%09ifTrue%3A%20%5B%5EStMethodsChunk%20receiver%3A%20receiver%20selector%3A%20selector%20arguments%3A%20args%5D.%0D%09%28selector%20beginsWith%3A%20%27subclass%27%29%0D%09%09ifTrue%3A%20%5B%5EStSubclassChunk%20receiver%3A%20receiver%20selector%3A%20selector%20arguments%3A%20args%5D.%0D%09%28selector%20beginsWith%3A%20%27variableSubclass%27%29%0D%09%09ifTrue%3A%20%5B%5EStSubclassChunk%20receiver%3A%20receiver%20selector%3A%20selector%20arguments%3A%20args%5D.%0D%09%28selector%20beginsWith%3A%20%27commentStamp%27%29%0D%09%09ifTrue%3A%20%5B%5EStCommentChunk%20receiver%3A%20receiver%20selector%3A%20selector%20arguments%3A%20args%5D.%0D%09%28selector%20beginsWith%3A%20%27instanceVar%27%29%0D%09%09ifTrue%3A%20%5B%5EStMetaClassChunk%20receiver%3A%20receiver%20selector%3A%20selector%20arguments%3A%20args%5D.%0D%09%5EStDoItChunk%20source%3A%20aString"));
smalltalk.bind(smalltalk.StChunk.$klass, unescape("receiver%3Aselector%3Aarguments%3A"), "receiver_selector_arguments_", function StChunk_class__receiver_selector_arguments_(receiver,selector,args){
const self = this; return (self.$$new()).receiver_selector_arguments_(receiver,selector,args);
}
, "instance creation", unescape("receiver%3A%20receiver%20selector%3A%20selector%20arguments%3A%20args%0D%09%5Eself%20new%20receiver%3A%20receiver%20selector%3A%20selector%20arguments%3A%20args"));
smalltalk.addClass("StChunkReader", smalltalk.Object, ['readStream', 'line'], 'Compiler-JS-Support');
smalltalk.StChunkReader.$classVariableNames=("");
smalltalk.bind(smalltalk.StChunkReader, unescape("handleNextChunk"), "handleNextChunk", function StChunkReader__handleNextChunk(){
var chunk = nil;
const self = this; chunk=self.nextChunk();
if ((chunk.isEmpty()).not()) {self.handleChunk_(chunk)};
return self;
}
, "private reading", unescape("handleNextChunk%0D%09%22%28Compiler%20evaluate%3A%20self%20nextChunk%20for%3A%20client%20logged%3A%20false%29%20scanFrom%3A%20self%22%0D%09%7C%20chunk%20%7C%0D%09chunk%20%3A%3D%20self%20nextChunk.%0D%09chunk%20isEmpty%20ifFalse%3A%20%5Bself%20handleChunk%3A%20chunk%5D"));
smalltalk.bind(smalltalk.StChunkReader, unescape("nextChunk"), "nextChunk", function StChunkReader__nextChunk(){
var terminator = nil;
var out = nil;
var ch = nil;
const self = this; var $early={name:"stReturn"};
try {
terminator=unescape("%21");
out="".writeStream();
self.skipSeparators();
while(((self['@readStream'].atEnd()).or_((function StChunkReader__(){
return (nil.is_eqeq_(ch=self['@readStream'].next(),nil));
}
))).not()){self.updateFilePosition_(ch);
if (((nil.is_eqeq_(ch,terminator))).valueOf()) {if (((nil.is_eqeq_(self['@readStream'].peek(),terminator))).valueOf()) {self['@readStream'].next()} else {$early.result=out.contents(); throw ($early)}};
out.nextPut_(ch)};;
return out.contents();
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "private reading", unescape("nextChunk%0D%09%22Answer%20the%20contents%20of%20the%20receiver%2C%20up%20to%20the%20next%20terminator%20character.%0D%09Doubled%20terminators%20indicate%20an%20embedded%20terminator%20character.%22%0D%09%7C%20terminator%20out%20ch%20%7C%0D%09terminator%20%3A%3D%20%24%21.%0D%09out%20%3A%3D%20%27%27%20writeStream.%0D%09self%20skipSeparators.%0D%09%5BreadStream%20atEnd%20or%3A%20%5B%28ch%20%3A%3D%20readStream%20next%29%20%3D%3D%20nil%5D%5D%20whileFalse%3A%20%5B%0D%09%09self%20updateFilePosition%3A%20ch.%0D%09%09%28ch%20%3D%3D%20terminator%29%20ifTrue%3A%20%5B%0D%09%09%09readStream%20peek%20%3D%3D%20terminator%20ifTrue%3A%20%5B%0D%09%09%09%09readStream%20next.%20%20%22skip%20doubled%20terminator%22%0D%09%09%09%5D%20ifFalse%3A%20%5B%0D%09%09%09%09%5Eout%20contents%20%20%22terminator%20is%20not%20doubled%3B%20we%27re%20done%21%22%0D%09%09%09%5D.%0D%09%09%5D.%0D%09%09out%20nextPut%3A%20ch.%0D%09%5D.%0D%09%5Eout%20contents"));
smalltalk.bind(smalltalk.StChunkReader, unescape("processNextChunk"), "processNextChunk", function StChunkReader__processNextChunk(){
const self = this; self.processChunk_((self.nextChunk()));
return self;
}
, "private reading", unescape("processNextChunk%0D%09self%20processChunk%3A%20self%20nextChunk"));
smalltalk.bind(smalltalk.StChunkReader, unescape("skipSeparators"), "skipSeparators", function StChunkReader__skipSeparators(){
const self = this; var $early={name:"stReturn"};
try {
while((self['@readStream'].atEnd()).not()){var c = nil;
c=self['@readStream'].next();
if ((c.isSeparator()).valueOf()) {self.updateFilePosition_(c)} else {$early.result=self['@readStream'].position_(((self['@readStream'].position())._minus((1)))); throw ($early)}};;
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "private reading", unescape("skipSeparators%0D%09%5BreadStream%20atEnd%5D%0D%09%09whileFalse%3A%20%5B%0D%09%09%09%7C%20c%20%7C%0D%09%09%09c%20%3A%3D%20readStream%20next.%0D%09%09%09c%20isSeparator%0D%09%09%09%09ifTrue%3A%20%5Bself%20updateFilePosition%3A%20c%5D%0D%09%09%09%09ifFalse%3A%20%5B%5EreadStream%20position%3A%20readStream%20position-1%5D%5D"));
smalltalk.bind(smalltalk.StChunkReader, unescape("skipStyleChunk"), "skipStyleChunk", function StChunkReader__skipStyleChunk(){
const self = this; self;
return self;
}
, "private reading", "skipStyleChunk");
smalltalk.bind(smalltalk.StChunkReader, unescape("updateFilePosition%3A"), "updateFilePosition_", function StChunkReader__updateFilePosition_(c){
const self = this; if ((c._eq((smalltalk.Character.cr()))).valueOf()) {self['@line']=self['@line']._plus((1));
if (((self['@readStream'].peek())._eq((smalltalk.Character.lf()))).valueOf()) {self['@readStream'].next()}} else {if ((c._eq((smalltalk.Character.lf()))).valueOf()) {self['@line']=self['@line']._plus((1))}};
return self;
}
, "private reading", unescape("updateFilePosition%3A%20c%0D%09c%20%3D%20Character%20cr%0D%09%09ifTrue%3A%20%5B%0D%09%09%09line%20%3A%3D%20line%20+%201.%0D%09%09%09readStream%20peek%20%3D%20Character%20lf%20ifTrue%3A%20%5BreadStream%20next%5D%5D%0D%09%09ifFalse%3A%20%5Bc%20%3D%20Character%20lf%20ifTrue%3A%20%5Bline%20%3A%3D%20line%20+%201%5D%5D"));
smalltalk.bind(smalltalk.StChunkReader, unescape("handleChunk%3A"), "handleChunk_", function StChunkReader__handleChunk_(chunk){
const self = this; self;
return self;
}
, "chunk processing", "handleChunk: chunk");
smalltalk.bind(smalltalk.StChunkReader, unescape("processChunk%3A"), "processChunk_", function StChunkReader__processChunk_(chunk){
const self = this; self.halt();
return self;
}
, "chunk processing", unescape("processChunk%3A%20chunk%0D%09self%20halt"));
smalltalk.bind(smalltalk.StChunkReader, unescape("processMethodChunk%3Aclass%3Aprotocol%3A"), "processMethodChunk_class_protocol_", function StChunkReader__processMethodChunk_class_protocol_(methodText,methodClass,methodProtocol){
const self = this; self;
return self;
}
, "chunk processing", unescape("processMethodChunk%3A%20methodText%20class%3A%20methodClass%20protocol%3A%20methodProtocol%0D"));
smalltalk.bind(smalltalk.StChunkReader, unescape("processMethodChunks%3Aprotocol%3A"), "processMethodChunks_protocol_", function StChunkReader__processMethodChunks_protocol_(methodClass,methodProtocol){
var methodText = nil;
const self = this; while(((function StChunkReader__(){
methodText=self.nextChunk();
return (methodText.size())._gt((0));
}
)()).valueOf()){self.processMethodChunk_class_protocol_(methodText,methodClass,methodProtocol)};;
return self;
}
, "chunk processing", unescape("processMethodChunks%3A%20methodClass%20protocol%3A%20methodProtocol%0D%09%22Process%20methods%20chunks%20for%20current%20category%20in%20readStream%22%0D%09%7C%20methodText%20%7C%0D%09%5BmethodText%20%3A%3D%20self%20nextChunk.%0D%09%20methodText%20size%20%3E%200%5D%0D%09%09whileTrue%3A%20%5Bself%20processMethodChunk%3A%20methodText%20class%3A%20methodClass%20protocol%3A%20methodProtocol%5D"));
smalltalk.bind(smalltalk.StChunkReader, unescape("readAllChunks"), "readAllChunks", function StChunkReader__readAllChunks(){
const self = this; (function StChunkReader__(){
return (function(){while(!self['@readStream'].atEnd()){self.skipSeparators();
(function StChunkReader__(){
if ((self['@readStream'].peekFor_(unescape("%21"))).valueOf()) {return self.handleNextChunk()} else {return self.processNextChunk()};
}
).on_do_(smalltalk.StCompileException,(function StChunkReader__(exception){
exception.line_((self.line()));
return exception.signal();
}
));
if ((self['@readStream'].atEnd()).not()) {self.skipStyleChunk()}};return nil})();
}
).ensure_((function StChunkReader__(){
return self['@readStream'].close();
}
));
return self;
}
, "reading", unescape("readAllChunks%0D%09%5B%5BreadStream%20atEnd%5D%0D%09%09whileFalse%3A%20%5B%0D%09%09%09self%20skipSeparators.%0D%09%09%09%5B%28readStream%20peekFor%3A%20%24%21%29%0D%09%09%09%09ifTrue%3A%20%5Bself%20handleNextChunk%5D%0D%09%09%09%09ifFalse%3A%20%5Bself%20processNextChunk%5D%5D%0D%09%09%09%09on%3A%20StCompileException%0D%09%09%09%09do%3A%20%5B%3Aexception%20%7C%20%0D%09%09%09%09%09exception%20line%3A%20self%20line.%0D%09%09%09%09%09exception%20signal%5D.%0D%09%09%09readStream%20atEnd%0D%09%09%09%09ifFalse%3A%20%5B%20self%20skipStyleChunk%20%5D%5D%5D%0D%09%09ensure%3A%20%5BreadStream%20close%5D"));
smalltalk.bind(smalltalk.StChunkReader, unescape("readStream%3A"), "readStream_", function StChunkReader__readStream_(aStream){
const self = this; self['@readStream']=aStream;
self['@line']=(1);
return self;
}
, "initialize-release", unescape("readStream%3A%20aStream%0D%09readStream%20%3A%3D%20aStream.%0D%09line%20%3A%3D%201"));
smalltalk.bind(smalltalk.StChunkReader, unescape("line"), "line", function StChunkReader__line(){
const self = this; return self['@line'];
}
, "accessing", unescape("line%0D%09%5Eline"));
smalltalk.StChunkReader.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StChunkReader.$klass, unescape("new"), "$$new", function StChunkReader_class__$$new(){
const self = this; return (smalltalk.superImplementor(smalltalk.StChunkReader.$klass,'$$new').apply(self, [])).initialize();
}
, "instance creation", unescape("new%0D%09%5Esuper%20new%20initialize"));
smalltalk.bind(smalltalk.StChunkReader.$klass, unescape("on%3A"), "on_", function StChunkReader_class__on_(stream){
const self = this; return (self.$$new()).readStream_(stream);
}
, "instance creation", unescape("on%3A%20stream%0D%09%5Eself%20new%20readStream%3A%20stream"));
smalltalk.bind(smalltalk.StChunkReader.$klass, unescape("onFileNamed%3A"), "onFileNamed_", function StChunkReader_class__onFileNamed_(fileName){
var file = nil;
const self = this; file=smalltalk.StandardFileStream.oldFileNamed_(fileName);
return self.on_(file);
}
, "instance creation", unescape("onFileNamed%3A%20fileName%0D%09%7C%20file%20%7C%0D%09file%20%3A%3D%20StandardFileStream%20oldFileNamed%3A%20fileName.%0D%09%5Eself%20on%3A%20file"));
smalltalk.addClass("StClassDefinition", smalltalk.Object, ['name', 'superclass', 'metaClass', 'variables', 'allVariables', 'classVariables', 'pools', 'category', 'comment'], 'Compiler-JS-Support');
smalltalk.StClassDefinition.$classVariableNames=("");
smalltalk.bind(smalltalk.StClassDefinition, unescape("allInstVarNames"), "allInstVarNames", function StClassDefinition__allInstVarNames(){
const self = this; return self['@variables'];
}
, "accessing", unescape("allInstVarNames%0D%09%5Evariables"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("className"), "className", function StClassDefinition__className(){
const self = this; return self['@name'];
}
, "accessing", unescape("className%0D%09%5Ename"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("key"), "key", function StClassDefinition__key(){
const self = this; return self['@name'];
}
, "accessing", unescape("key%0D%09%5Ename"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("metaClass"), "metaClass", function StClassDefinition__metaClass(){
const self = this; return self['@metaClass'];
}
, "accessing", unescape("metaClass%0D%09%5EmetaClass"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("metaClassName"), "metaClassName", function StClassDefinition__metaClassName(){
const self = this; return (self.className())._comma(" class");
}
, "accessing", unescape("metaClassName%0D%09%5Eself%20className%20%2C%20%27%20class%27"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("name"), "name", function StClassDefinition__name(){
const self = this; return self['@name'];
}
, "accessing", unescape("name%0D%09%5Ename"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("sharedPools"), "sharedPools", function StClassDefinition__sharedPools(){
const self = this; return self['@pools'];
}
, "accessing", unescape("sharedPools%0D%09%5Epools"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("superMeta"), "superMeta", function StClassDefinition__superMeta(){
const self = this; return (function(){var $1$; $1$ = self['@superclass']; if (!nil.isNil_($1$)) { return self['@superclass'].metaClass() } else { return $1$; }})();
}
, "accessing", unescape("superMeta%0D%09%5Esuperclass%0D%09%09ifNotNil%3A%20%5Bsuperclass%20metaClass%5D"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("decompilerClass"), "decompilerClass", function StClassDefinition__decompilerClass(){
const self = this; return "Decompiler".asClass();
}
, "decompiler", unescape("decompilerClass%0D%09%5E%23Decompiler%20asClass"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("newParser"), "newParser", function StClassDefinition__newParser(){
const self = this; return "Parser".$$new();
}
, "decompiler", unescape("newParser%0D%09%5E%23Parser%20new"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("shoutParserClass"), "shoutParserClass", function StClassDefinition__shoutParserClass(){
const self = this; return "Parser";
}
, "decompiler", unescape("shoutParserClass%0D%09%5E%23Parser"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("theNonMetaClass"), "theNonMetaClass", function StClassDefinition__theNonMetaClass(){
const self = this; return self;
}
, "decompiler", unescape("theNonMetaClass%0D%09%5Eself"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("generateOn%3A"), "generateOn_", function StClassDefinition__generateOn_(generator){
const self = this; generator.smalltalkClassBinding_(self);
return self;
}
, "generate", unescape("generateOn%3A%20generator%0D%09generator%20smalltalkClassBinding%3A%20self"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("canAssign"), "canAssign", function StClassDefinition__canAssign(){
const self = this; return true;
}
, "testing", unescape("canAssign%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("isMeta"), "isMeta", function StClassDefinition__isMeta(){
const self = this; return false;
}
, "testing", unescape("isMeta%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("isVariableBinding"), "isVariableBinding", function StClassDefinition__isVariableBinding(){
const self = this; return true;
}
, "testing", unescape("isVariableBinding%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("printOn%3A"), "printOn_", function StClassDefinition__printOn_(stream){
const self = this; (function StClassDefinition__($1$){
$1$.nextPutAll_(unescape("StClassDefinition%28"));
$1$.nextPutAll_(self['@name']);
return $1$.nextPut_(unescape("%29"))}
)(stream);
return self;
}
, "printing", unescape("printOn%3A%20stream%0D%09stream%0D%09%09nextPutAll%3A%20%27StClassDefinition%28%27%3B%0D%09%09nextPutAll%3A%20name%3B%0D%09%09nextPut%3A%20%24%29"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("metaClass%3A"), "metaClass_", function StClassDefinition__metaClass_(metaClassDefinition){
const self = this; self['@metaClass']=metaClassDefinition;
return self;
}
, "initialize-release", unescape("metaClass%3A%20metaClassDefinition%0D%09metaClass%20%3A%3D%20metaClassDefinition"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("name%3Asuperclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3Acategory%3A"), "name_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_", function StClassDefinition__name_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(className,aSuperclass,instVarNames,classVarNames,poolVarNames,aCategory){
const self = this; self['@name']=className.asSymbol();
self['@superclass']=aSuperclass;
self['@variables']=instVarNames.subStrings();
self['@classVariables']=classVarNames.subStrings();
self['@pools']=poolVarNames.subStrings();
self['@category']=aCategory;
return self;
}
, "initialize-release", unescape("name%3A%20className%20superclass%3A%20aSuperclass%20instanceVariableNames%3A%20instVarNames%20classVariableNames%3A%20classVarNames%20poolDictionaries%3A%20poolVarNames%20category%3A%20aCategory%0D%09name%20%3A%3D%20className%20asSymbol.%0D%09superclass%20%3A%3D%20aSuperclass.%0D%09variables%20%3A%3D%20instVarNames%20subStrings.%0D%09classVariables%20%3A%3D%20classVarNames%20subStrings.%0D%09pools%20%3A%3D%20poolVarNames%20subStrings.%0D%09category%20%3A%3D%20aCategory"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("subclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3Acategory%3A"), "subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_", function StClassDefinition__subclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(subclassName,instVarNames,classVarNames,poolVarNames,aCategory){
var classDef = nil;
const self = this; self.halt();
classDef=smalltalk.StClassDefinition.$$new();
classDef.name_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(subclassName,(self.name()),instVarNames,classVarNames,poolVarNames,aCategory);
return classDef;
}
, "fileIn", unescape("subclass%3A%20subclassName%20instanceVariableNames%3A%20instVarNames%20classVariableNames%3A%20classVarNames%20poolDictionaries%3A%20poolVarNames%20category%3A%20aCategory%0D%09%7C%20classDef%20%7C%0D%09self%20halt.%0D%09classDef%20%3A%3D%20StClassDefinition%20new.%0D%09classDef%20name%3A%20subclassName%20superclass%3A%20self%20name%20instanceVariableNames%3A%20instVarNames%20classVariableNames%3A%20classVarNames%20poolDictionaries%3A%20poolVarNames%20category%3A%20aCategory.%0D%09%5EclassDef"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("asVariableIn%3A"), "asVariableIn_", function StClassDefinition__asVariableIn_(encoder){
const self = this; return encoder.global_name_(self,self['@name']);
}
, "compiling", unescape("asVariableIn%3A%20encoder%0D%09%5Eencoder%20global%3A%20self%20name%3A%20name"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("bindingOf%3Aenvironment%3A"), "bindingOf_environment_", function StClassDefinition__bindingOf_environment_(varName,environment){
var aSymbol = nil;
var binding = nil;
const self = this; var $early={name:"stReturn"};
try {
aSymbol=varName.asSymbol();
(function(){var $1$; $1$ = self.classThatDefinesClassVariable_in_(aSymbol,environment); if (!nil.isNil_($1$)) { return (function StClassDefinition__(x){
$early.result=smalltalk.StClassVarDefinition.class_name_(self,(aSymbol.asString())); throw ($early);
}
)() } else { return $1$; }})();
binding=environment.bindingOf_ifAbsent_(aSymbol,(function StClassDefinition__(){
return nil;
}
));
(function(){var $2$; $2$ = binding; if (!nil.isNil_($2$)) { return (function StClassDefinition__(){
$early.result=binding; throw ($early);
}
)() } else { return $2$; }})();
return (nil.isNil_(self['@superclass']) ? nil : self['@superclass'].bindingOf_environment_(aSymbol,environment));
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "compiling", unescape("bindingOf%3A%20varName%20environment%3A%20environment%0D%09%22Answer%20the%20binding%20of%20some%20variable%20resolved%20in%20the%20scope%20of%20the%20receiver%22%0D%09%7C%20aSymbol%20binding%20%7C%0D%09aSymbol%20%3A%3D%20varName%20asSymbol.%0D%0D%09%22First%20look%20in%20classVar%20dictionary.%22%0D%09%28self%20classThatDefinesClassVariable%3A%20aSymbol%20in%3A%20environment%29%20ifNotNil%3A%0D%09%09%5B%3Ax%20%7C%20%5EStClassVarDefinition%20class%3A%20self%20name%3A%20aSymbol%20asString%5D.%0D%0D%09%22Next%20look%20in%20shared%20pools.%22%0D%09%22TODO%20support%20pools%22%0D%22%20sharedPools%20do%3A%5B%3Apool%20%7C%20%0D%09%09binding%20%3A%3D%20pool%20bindingOf%3A%20aSymbol.%0D%09%09binding%20ifNotNil%3A%5B%5Ebinding%5D.%0D%09%5D.%0D%22%0D%09%22Next%20look%20in%20declared%20environment.%22%0D%09binding%20%3A%3D%20environment%20bindingOf%3A%20aSymbol%20ifAbsent%3A%20%5Bnil%5D.%0D%09binding%20ifNotNil%3A%5B%5Ebinding%5D.%0D%0D%09%22Finally%20look%20higher%20up%20the%20superclass%20chain%20and%20fail%20at%20the%20end.%22%0D%09%5Esuperclass%0D%09%09ifNil%3A%20%5Bnil%5D%0D%09%09ifNotNil%3A%20%5Bsuperclass%20bindingOf%3A%20aSymbol%20environment%3A%20environment%5D%0D"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("classBindingOf%3Aenvironment%3A"), "classBindingOf_environment_", function StClassDefinition__classBindingOf_environment_(varName,environment){
const self = this; return self.bindingOf_environment_(varName,environment);
}
, "compiling", unescape("classBindingOf%3A%20varName%20environment%3A%20environment%0D%09%5Eself%20bindingOf%3A%20varName%20environment%3A%20environment"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("classThatDefinesClassVariable%3Ain%3A"), "classThatDefinesClassVariable_in_", function StClassDefinition__classThatDefinesClassVariable_in_(classVarName,environment){
const self = this; if ((self['@classVariables'].includes_(classVarName)).valueOf()) {return self};
return (function(){var $1$; $1$ = self['@superclass']; if (!nil.isNil_($1$)) { return self['@superclass'].classThatDefinesClassVariable_in_(classVarName,environment) } else { return $1$; }})();
}
, "compiling", unescape("classThatDefinesClassVariable%3A%20classVarName%20in%3A%20environment%0D%09%28classVariables%20includes%3A%20classVarName%29%0D%09%09ifTrue%3A%20%5B%5Eself%5D.%20%0D%09%5Esuperclass%20ifNotNil%3A%20%5B%0D%09%09superclass%20classThatDefinesClassVariable%3A%20classVarName%20in%3A%20environment%5D"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("gatherVariables"), "gatherVariables", function StClassDefinition__gatherVariables(){
const self = this; self['@allVariables']=smalltalk.OrderedCollection.$$new();
(function(){var $1$; $1$ = self['@superclass']; if (!nil.isNil_($1$)) { return self['@superclass'].variablesDo_((function StClassDefinition__(varName){
return self['@allVariables'].add_(varName);
}
)) } else { return $1$; }})();
self['@variables'].do_((function StClassDefinition__(varName){
return self['@allVariables'].add_(varName);
}
));
return self;
}
, "compiling", unescape("gatherVariables%0D%09allVariables%20%3A%3D%20OrderedCollection%20new.%0D%09superclass%20ifNotNil%3A%20%5B%0D%09%09superclass%20variablesDo%3A%20%5B%3AvarName%20%7C%20allVariables%20add%3A%20varName%5D%5D.%0D%09variables%20do%3A%20%5B%3AvarName%20%7C%20allVariables%20add%3A%20varName%5D"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("literalScannedAs%3Aenvironment%3Anotifying%3A"), "literalScannedAs_environment_notifying_", function StClassDefinition__literalScannedAs_environment_notifying_(anObject,environment,anEncoder){
const self = this; self.halt();
return anObject;
}
, "compiling", unescape("literalScannedAs%3A%20anObject%20environment%3A%20environment%20notifying%3A%20anEncoder%0Dself%20halt.%0D%09%5EanObject"));
smalltalk.bind(smalltalk.StClassDefinition, unescape("variablesDo%3A"), "variablesDo_", function StClassDefinition__variablesDo_(aBlock){
const self = this; (function(){var $1$; $1$ = self['@allVariables']; if (nil.isNil_($1$)) { return self.gatherVariables() } else { return $1$; }})();
self['@allVariables'].do_(aBlock);
return self;
}
, "compiling", unescape("variablesDo%3A%20aBlock%0D%09allVariables%20ifNil%3A%20%5Bself%20gatherVariables%5D.%0D%09allVariables%20do%3A%20aBlock"));
smalltalk.StClassDefinition.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StClassDefinition.$klass, unescape("object"), "object", function StClassDefinition_class__object(){
const self = this; return self.name_superclass_category_("Object",nil,unescape("Kernel-Objects"));
}
, "bootstrap", unescape("object%0D%09%5Eself%20name%3A%20%27Object%27%20superclass%3A%20nil%20category%3A%20%27Kernel-Objects%27"));
smalltalk.bind(smalltalk.StClassDefinition.$klass, unescape("undeclared%3A"), "undeclared_", function StClassDefinition_class__undeclared_(aString){
const self = this; return self.name_superclass_category_(aString,nil,nil);
}
, "bootstrap", unescape("undeclared%3A%20aString%0D%09%5Eself%20name%3A%20aString%20superclass%3A%20nil%20category%3A%20nil"));
smalltalk.bind(smalltalk.StClassDefinition.$klass, unescape("undefined"), "undefined", function StClassDefinition_class__undefined(){
const self = this; return self.name_superclassName_category_("UndefinedObject","Object",unescape("Kernel-Objects"));
}
, "bootstrap", unescape("undefined%0D%09%5Eself%20name%3A%20%27UndefinedObject%27%20superclassName%3A%20%27Object%27%20category%3A%20%27Kernel-Objects%27"));
smalltalk.bind(smalltalk.StClassDefinition.$klass, unescape("name%3Asuperclass%3Acategory%3A"), "name_superclass_category_", function StClassDefinition_class__name_superclass_category_(className,aSuperclass,aCategory){
const self = this; return self.name_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(className,aSuperclass,"","","",aCategory);
}
, "instance creation", unescape("name%3A%20className%20superclass%3A%20aSuperclass%20category%3A%20aCategory%0D%09%5Eself%0D%09%09name%3A%20className%0D%09%09superclass%3A%20aSuperclass%0D%09%09instanceVariableNames%3A%20%27%27%0D%09%09classVariableNames%3A%20%27%27%0D%09%09poolDictionaries%3A%20%27%27%0D%09%09category%3A%20aCategory"));
smalltalk.bind(smalltalk.StClassDefinition.$klass, unescape("name%3Asuperclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3Acategory%3A"), "name_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_", function StClassDefinition_class__name_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(className,aSuperclass,instVarNames,classVarNames,poolVarNames,aCategory){
const self = this; return (self.$$new()).name_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(className,aSuperclass,instVarNames,classVarNames,poolVarNames,aCategory);
}
, "instance creation", unescape("name%3A%20className%20superclass%3A%20aSuperclass%20instanceVariableNames%3A%20instVarNames%20classVariableNames%3A%20classVarNames%20poolDictionaries%3A%20poolVarNames%20category%3A%20aCategory%0D%09%5Eself%20new%0D%09%09name%3A%20className%0D%09%09superclass%3A%20aSuperclass%0D%09%09instanceVariableNames%3A%20instVarNames%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20poolVarNames%0D%09%09category%3A%20aCategory"));
smalltalk.addClass("StClassVarDefinition", smalltalk.Object, ['nonMetaClass', 'name'], 'Compiler-JS-Support');
smalltalk.StClassVarDefinition.$classVariableNames=("");
smalltalk.bind(smalltalk.StClassVarDefinition, unescape("name"), "name", function StClassVarDefinition__name(){
const self = this; return self['@name'];
}
, "accessing", unescape("name%0D%09%5Ename"));
smalltalk.bind(smalltalk.StClassVarDefinition, unescape("nonMetaClass"), "nonMetaClass", function StClassVarDefinition__nonMetaClass(){
const self = this; return self['@nonMetaClass'];
}
, "accessing", unescape("nonMetaClass%0D%09%5EnonMetaClass"));
smalltalk.bind(smalltalk.StClassVarDefinition, unescape("asVariableIn%3A"), "asVariableIn_", function StClassVarDefinition__asVariableIn_(encoder){
const self = this; return encoder.classVariable_name_(self,self['@name']);
}
, "testing", unescape("asVariableIn%3A%20encoder%0D%09%5Eencoder%20classVariable%3A%20self%20name%3A%20name"));
smalltalk.bind(smalltalk.StClassVarDefinition, unescape("canAssign"), "canAssign", function StClassVarDefinition__canAssign(){
const self = this; return true;
}
, "testing", unescape("canAssign%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StClassVarDefinition, unescape("isVariableBinding"), "isVariableBinding", function StClassVarDefinition__isVariableBinding(){
const self = this; return true;
}
, "testing", unescape("isVariableBinding%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StClassVarDefinition, unescape("class%3Aname%3A"), "class_name_", function StClassVarDefinition__class_name_(aNonMetaClass,classVarName){
const self = this; self['@nonMetaClass']=aNonMetaClass;
self['@name']=classVarName;
return self;
}
, "initialize-release", unescape("class%3A%20aNonMetaClass%20name%3A%20classVarName%0D%09nonMetaClass%20%3A%3D%20aNonMetaClass.%0D%09name%20%3A%3D%20classVarName"));
smalltalk.StClassVarDefinition.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StClassVarDefinition.$klass, unescape("class%3Aname%3A"), "class_name_", function StClassVarDefinition_class__class_name_(nonMetaClass,classVarName){
const self = this; return (self.$$new()).class_name_(nonMetaClass,classVarName);
}
, "instance creation", unescape("class%3A%20nonMetaClass%20name%3A%20classVarName%0D%09%5Eself%20new%20class%3A%20nonMetaClass%20name%3A%20classVarName"));
smalltalk.addClass("StCommentChunk", smalltalk.StChunk, ['comment', 'commentStamp', 'prior'], 'Compiler-JS-Support');
smalltalk.StCommentChunk.$classVariableNames=("");
smalltalk.bind(smalltalk.StCommentChunk, unescape("receiver%3Aselector%3Aarguments%3A"), "receiver_selector_arguments_", function StCommentChunk__receiver_selector_arguments_(receiver,selector,args){
const self = this; if (((nil.is_eqeq_(selector,"commentStamp:"))).valueOf()) {self['@commentStamp']=args.at_((1));
self['@prior']=(0)};
if (((nil.is_eqeq_(selector,"commentStamp:prior:"))).valueOf()) {self['@commentStamp']=args.at_((1));
self['@prior']=args.at_((2))};
return self;
}
, "initialize-release", unescape("receiver%3A%20receiver%20selector%3A%20selector%20arguments%3A%20args%0D%09selector%20%3D%3D%20%23commentStamp%3A%0D%09%09ifTrue%3A%20%5B%0D%09%09%09commentStamp%20%3A%3D%20args%20at%3A%201.%0D%09%09%09prior%20%3A%3D%200%5D.%0D%09selector%20%3D%3D%20%23commentStamp%3Aprior%3A%0D%09%09ifTrue%3A%20%5B%0D%09%09%09commentStamp%20%3A%3D%20args%20at%3A%201.%0D%09%09%09prior%20%3A%3D%20args%20at%3A%202%5D.%0D%0D%09%0D"));
smalltalk.bind(smalltalk.StCommentChunk, unescape("readChunksThrough%3A"), "readChunksThrough_", function StCommentChunk__readChunksThrough_(chunkReader){
const self = this; self['@comment']=chunkReader.nextChunk();
return self;
}
, "chunk processing", unescape("readChunksThrough%3A%20chunkReader%0D%09comment%20%3A%3D%20chunkReader%20nextChunk"));
smalltalk.addClass("StCompileException", smalltalk.Error, ['line', 'linePosition'], 'Compiler-JS-Support');
smalltalk.StCompileException.$classVariableNames=("");
smalltalk.bind(smalltalk.StCompileException, unescape("defaultAction"), "defaultAction", function StCompileException__defaultAction(){
const self = this; (function StCompileException__($1$){
$1$.show_((self.messageText()));
return $1$.cr()}
)(smalltalk.Transcript);
smalltalk.superImplementor(smalltalk.StCompileException,'defaultAction').apply(self, []);
return self;
}
, "priv handling", unescape("defaultAction%0D%09Transcript%20show%3A%20self%20messageText%3B%20cr.%0D%09super%20defaultAction"));
smalltalk.bind(smalltalk.StCompileException, unescape("line%3A"), "line_", function StCompileException__line_(lineInt){
const self = this; self['@line']=lineInt;
self['@messageText']=((unescape("%0Dline%3A%20")._comma((self['@line'].asString())))._comma(unescape("%0D")))._comma(self['@messageText']);
return self;
}
, "accessing", unescape("line%3A%20lineInt%0D%09line%20%3A%3D%20lineInt.%0D%09messageText%20%3A%3D%20%27%0Dline%3A%20%27%20%2C%20line%20asString%20%2C%27%0D%27%20%2C%20messageText"));
smalltalk.bind(smalltalk.StCompileException, unescape("line%3AlinePositition%3A"), "line_linePositition_", function StCompileException__line_linePositition_(lineInt,positionInt){
const self = this; self['@line']=lineInt;
self['@linePosition']=positionInt;
self['@messageText']=(((" line: "._comma((self['@line'].asString())))._comma(unescape("%2C")))._comma((self['@linePosition'].asString())))._comma(self['@messageText']);
return self;
}
, "accessing", unescape("line%3A%20lineInt%20linePositition%3A%20positionInt%0D%09line%20%3A%3D%20lineInt.%0D%09linePosition%20%3A%3D%20positionInt.%0D%09messageText%20%3A%3D%20%27%20line%3A%20%27%20%2C%20line%20asString%20%2C%20%27%2C%27%20%2C%20linePosition%20asString%20%2C%20messageText"));
smalltalk.addClass("StDoItChunk", smalltalk.StChunk, ['source'], 'Compiler-JS-Support');
smalltalk.StDoItChunk.$classVariableNames=("");
smalltalk.bind(smalltalk.StDoItChunk, unescape("source%3A"), "source_", function StDoItChunk__source_(sourceText){
const self = this; self['@source']=sourceText;
return self;
}
, "as yet unclassified", unescape("source%3A%20sourceText%0D%09source%20%3A%3D%20sourceText"));
smalltalk.StDoItChunk.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StDoItChunk.$klass, unescape("source%3A"), "source_", function StDoItChunk_class__source_(sourceText){
const self = this; return (self.$$new()).source_(sourceText);
}
, "as yet unclassified", unescape("source%3A%20sourceText%0D%09%5Eself%20new%20source%3A%20sourceText"));
smalltalk.addClass("StEnvironment", smalltalk.Object, ['bindings', 'undeclared', 'allowUndeclared'], 'Compiler-JS-Support');
smalltalk.StEnvironment.$classVariableNames=("");
smalltalk.bind(smalltalk.StEnvironment, unescape("initialize"), "initialize", function StEnvironment__initialize(){
const self = this; self['@bindings']=smalltalk.Dictionary.$$new();
self['@undeclared']=smalltalk.Dictionary.$$new();
self['@allowUndeclared']=false;
return self;
}
, "initialize-release", unescape("initialize%0D%09bindings%20%3A%3D%20Dictionary%20new.%0D%09undeclared%20%3A%3D%20Dictionary%20new.%0D%09allowUndeclared%20%3A%3D%20false"));
smalltalk.bind(smalltalk.StEnvironment, unescape("addAllFrom%3A"), "addAllFrom_", function StEnvironment__addAllFrom_(environment){
const self = this; environment.bindingsKeyAndValuesDo_((function StEnvironment__(key,value){
return self.bindingsAt_put_(key,value);
}
));
return self;
}
, "binding", unescape("addAllFrom%3A%20environment%0D%09environment%20bindingsKeyAndValuesDo%3A%20%5B%3Akey%20%3Avalue%20%7C%0D%09%09self%20bindingsAt%3A%20key%20put%3A%20value%5D"));
smalltalk.bind(smalltalk.StEnvironment, unescape("addClassDefinition%3A"), "addClassDefinition_", function StEnvironment__addClassDefinition_(classDefinition){
var className = nil;
var metaClass = nil;
const self = this; className=(classDefinition.className()).asSymbol();
if ((self['@undeclared'].includesKey_(className)).valueOf()) {self['@undeclared'].removeKey_(className)};
self.bindingsAt_put_(className,classDefinition);
metaClass=smalltalk.StMetaClassDefinition.nonMetaClass_(classDefinition);
self.bindingsAt_put_((classDefinition.metaClassName()),(function StEnvironment__(){
return metaClass;
}
));
classDefinition.metaClass_(metaClass);
return self;
}
, "binding", unescape("addClassDefinition%3A%20classDefinition%0D%09%7C%20className%20metaClass%20%7C%0D%09className%20%3A%3D%20classDefinition%20className%20asSymbol.%0D%22%09allow%20overwriting%20class%20definitions%09%0D%09%28bindings%20includesKey%3A%20className%29%0D%09%09ifTrue%3A%20%5B%5Eself%5D.%0D%22%09%28undeclared%20includesKey%3A%20className%29%0D%09%09ifTrue%3A%20%5Bundeclared%20removeKey%3A%20className%5D.%0D%09self%20bindingsAt%3A%20className%20put%3A%20classDefinition.%0D%0D%09metaClass%20%3A%3D%20StMetaClassDefinition%20nonMetaClass%3A%20classDefinition.%0D%09self%20%0D%09%09bindingsAt%3A%20classDefinition%20metaClassName%0D%09%09put%3A%20%5BmetaClass%5D.%0D%09classDefinition%20metaClass%3A%20metaClass"));
smalltalk.bind(smalltalk.StEnvironment, unescape("addMetaClassDefinition%3A"), "addMetaClassDefinition_", function StEnvironment__addMetaClassDefinition_(classDefinition){
var className = nil;
const self = this; className=(classDefinition.className()).asSymbol();
if ((self['@undeclared'].includesKey_(className)).valueOf()) {self['@undeclared'].removeKey_(className)};
self.bindingsAt_put_(className,classDefinition);
(classDefinition.theNonMetaClass()).metaClass_(classDefinition);
return self;
}
, "binding", unescape("addMetaClassDefinition%3A%20classDefinition%0D%09%7C%20className%20%7C%0D%09className%20%3A%3D%20classDefinition%20className%20asSymbol.%0D%09%28undeclared%20includesKey%3A%20className%29%0D%09%09ifTrue%3A%20%5Bundeclared%20removeKey%3A%20className%5D.%0D%09self%20bindingsAt%3A%20className%20put%3A%20classDefinition.%0D%0D%09classDefinition%20theNonMetaClass%20metaClass%3A%20classDefinition"));
smalltalk.bind(smalltalk.StEnvironment, unescape("allowUndeclared%3A"), "allowUndeclared_", function StEnvironment__allowUndeclared_(aBoolean){
const self = this; self['@allowUndeclared']=aBoolean;
return self;
}
, "binding", unescape("allowUndeclared%3A%20aBoolean%0D%09allowUndeclared%20%3A%3D%20aBoolean"));
smalltalk.bind(smalltalk.StEnvironment, unescape("bindingOf%3A"), "bindingOf_", function StEnvironment__bindingOf_(aSymbolOrString){
const self = this; return self.bindingOf_ifAbsent_((aSymbolOrString.asSymbol()),(function StEnvironment__(){
if ((self['@allowUndeclared']).valueOf()) {return nil} else {return smalltalk.StCompileException.signal_(("No binding for "._comma(aSymbolOrString)))};
}
));
}
, "binding", unescape("bindingOf%3A%20aSymbolOrString%0D%09%5Eself%0D%09%09bindingOf%3A%20aSymbolOrString%20asSymbol%0D%09%09ifAbsent%3A%20%5B%0D%09%09%09allowUndeclared%0D%09%09%09%09ifTrue%3A%20%5Bnil%5D%0D%09%09%09%09ifFalse%3A%20%5BStCompileException%20signal%3A%20%27No%20binding%20for%20%27%20%2C%20aSymbolOrString%5D%5D"));
smalltalk.bind(smalltalk.StEnvironment, unescape("bindingOf%3AifAbsent%3A"), "bindingOf_ifAbsent_", function StEnvironment__bindingOf_ifAbsent_(aSymbolOrString,aBlock){
const self = this; return self['@bindings'].at_ifAbsent_((aSymbolOrString.asSymbol()),aBlock);
}
, "binding", unescape("bindingOf%3A%20aSymbolOrString%20ifAbsent%3A%20aBlock%0D%09%5Ebindings%0D%09%09at%3A%20aSymbolOrString%20asSymbol%0D%09%09ifAbsent%3A%20aBlock"));
smalltalk.bind(smalltalk.StEnvironment, unescape("bindingsAt%3Aput%3A"), "bindingsAt_put_", function StEnvironment__bindingsAt_put_(key,value){
const self = this; self['@bindings'].at_put_(key,value);
return self;
}
, "binding", unescape("bindingsAt%3A%20key%20put%3A%20value%0D%09bindings%20at%3A%20key%20put%3A%20value"));
smalltalk.bind(smalltalk.StEnvironment, unescape("bindingsKeyAndValuesDo%3A"), "bindingsKeyAndValuesDo_", function StEnvironment__bindingsKeyAndValuesDo_(aBlock){
const self = this; self['@bindings'].keysAndValuesDo_(aBlock);
return self;
}
, "binding", unescape("bindingsKeyAndValuesDo%3A%20aBlock%0D%09bindings%20keysAndValuesDo%3A%20aBlock"));
smalltalk.bind(smalltalk.StEnvironment, unescape("undeclare%3A"), "undeclare_", function StEnvironment__undeclare_(aSymbol){
const self = this; if ((self['@allowUndeclared'].or_((function StEnvironment__(){
return (aSymbol.first()).isUppercase();
}
))).valueOf()) {return self['@undeclared'].at_ifAbsentPut_(aSymbol,(function StEnvironment__(){
self['@undeclared'].at_put_(aSymbol,(smalltalk.StClassDefinition.undeclared_(aSymbol)));
return self['@undeclared'].at_(aSymbol);
}
))} else {return nil};
}
, "binding", unescape("undeclare%3A%20aSymbol%0D%09%22we%20allow%20globals%20to%20be%20undeclared%22%0D%09%5E%28allowUndeclared%20or%3A%20%5BaSymbol%20first%20isUppercase%5D%29%0D%09%09ifTrue%3A%20%5B%0D%09%09%09undeclared%0D%09%09%09%09at%3A%20aSymbol%0D%09%09%09%09ifAbsentPut%3A%20%5B%0D%09%09%09%09%09undeclared%20at%3A%20aSymbol%20put%3A%20%28StClassDefinition%20undeclared%3A%20aSymbol%29.%0D%09%09%09%09%09undeclared%20at%3A%20aSymbol%5D%5D%0D%09%09ifFalse%3A%20%5Bnil%5D"));
smalltalk.bind(smalltalk.StEnvironment, unescape("readBindings%3AfromFileNamed%3A"), "readBindings_fromFileNamed_", function StEnvironment__readBindings_fromFileNamed_(environmentBuilder,fileName){
var chunkReader = nil;
const self = this; chunkReader=environmentBuilder.onFileNamed_environment_(fileName,self);
chunkReader.readAllChunks();
return self;
}
, "reading", unescape("readBindings%3A%20environmentBuilder%20fromFileNamed%3A%20fileName%0D%09%7C%20chunkReader%20%7C%0D%09chunkReader%20%3A%3D%20environmentBuilder%20onFileNamed%3A%20fileName%20environment%3A%20self.%0D%09chunkReader%20readAllChunks"));
smalltalk.bind(smalltalk.StEnvironment, unescape("readBindingsFrom%3A"), "readBindingsFrom_", function StEnvironment__readBindingsFrom_(readStream){
var chunkReader = nil;
const self = this; chunkReader=smalltalk.StEnvironmentBuilder.on_environment_(readStream,self);
chunkReader.readAllChunks();
return self;
}
, "reading", unescape("readBindingsFrom%3A%20readStream%0D%09%7C%20chunkReader%20%7C%0D%09chunkReader%20%3A%3D%20StEnvironmentBuilder%20on%3A%20readStream%20environment%3A%20self.%0D%09chunkReader%20readAllChunks"));
smalltalk.bind(smalltalk.StEnvironment, unescape("readBindingsFromFileNamed%3A"), "readBindingsFromFileNamed_", function StEnvironment__readBindingsFromFileNamed_(fileName){
var chunkReader = nil;
const self = this; chunkReader=smalltalk.StEnvironmentBuilder.onFileNamed_environment_(fileName,self);
chunkReader.readAllChunks();
return self;
}
, "reading", unescape("readBindingsFromFileNamed%3A%20fileName%0D%09%7C%20chunkReader%20%7C%0D%09chunkReader%20%3A%3D%20StEnvironmentBuilder%20onFileNamed%3A%20fileName%20environment%3A%20self.%0D%09chunkReader%20readAllChunks"));
smalltalk.bind(smalltalk.StEnvironment, unescape("storeOn%3A"), "storeOn_", function StEnvironment__storeOn_(stream){
const self = this; self;
return self;
}
, "storing", "storeOn: stream");
smalltalk.StEnvironment.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StEnvironment.$klass, unescape("bootstrap"), "bootstrap", function StEnvironment_class__bootstrap(){
var stEnvironment = nil;
var object = nil;
const self = this; object=smalltalk.StClassDefinition.name_superclass_category_("Object",nil,"Kernel");
stEnvironment=self.$$new();
(function StEnvironment_class__($1$){
$1$.addClassDefinition_(object);
$1$.addClassDefinition_((smalltalk.StClassDefinition.name_superclass_category_("UndefinedObject",object,"Kernel")));
return $1$.yourself()}
)(stEnvironment);
return stEnvironment;
}
, "instance creation", unescape("bootstrap%0D%09%7C%20stEnvironment%20object%20%7C%0D%09object%20%3A%3D%20StClassDefinition%20name%3A%20%27Object%27%20superclass%3A%20nil%20category%3A%20%27Kernel%27.%0D%09stEnvironment%20%3A%3D%20self%20new.%0D%09stEnvironment%0D%09%09addClassDefinition%3A%20object%3B%0D%09%09addClassDefinition%3A%20%28StClassDefinition%20name%3A%20%27UndefinedObject%27%20superclass%3A%20object%20category%3A%20%27Kernel%27%29%3B%0D%22%09%09addClassDefinition%3A%20StClassDefinition%20object%3B%0D%09%09addClassDefinition%3A%20StClassDefinition%20undefined%3B%0D%09%09addClassDefinition%3A%20StClassDefinition%20exception%3B%0D%09%09addClassDefinition%3A%20StClassDefinition%20error%3B%0D%09%09addClassDefinition%3A%20StClassDefinition%20collection%3B%0D%09%09addClassDefinition%3A%20StClassDefinition%20sequenceableCollection%3B%0D%09%09addClassDefinition%3A%20StClassDefinition%20orderedCollection%3B%0D%09%09addClassDefinition%3A%20StClassDefinition%20string%3B%0D%09%09addClassDefinition%3A%20StClassDefinition%20character%3B%0D%09%09addClassDefinition%3A%20StClassDefinition%20stream%3B%0D%09%09addClassDefinition%3A%20StClassDefinition%20fileStream%3B%0D%22%09%09yourself.%0D%09%5EstEnvironment"));
smalltalk.bind(smalltalk.StEnvironment.$klass, unescape("fromEnvironment"), "fromEnvironment", function StEnvironment_class__fromEnvironment(){
var stEnvironment = nil;
const self = this; stEnvironment=self.$$new();
smalltalk.Object.withAllSubclassesDo_((function StEnvironment_class__(each){
var superDef = nil;
var instVarNames = nil;
superDef=(function(){var $1$; $1$ = each.superclass(); if (!nil.isNil_($1$)) { return stEnvironment.bindingOf_(((each.superclass()).name())) } else { return $1$; }})();
instVarNames=smalltalk.String.streamContents_((function StEnvironment_class__(stream){
return (each.instVarNames()).do_andBetweenDo_((function StEnvironment_class__(varName){
return stream.nextPutAll_(varName);
}
),(function StEnvironment_class__(){
return stream.space();
}
));
}
));
return stEnvironment.addClassDefinition_((smalltalk.StClassDefinition.name_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_((each.name()),superDef,instVarNames,(each.classVariablesString()),((each.poolDictionaryNames()).asJavascript()),(each.category()))));
}
));
return stEnvironment;
}
, "instance creation", unescape("fromEnvironment%0D%09%22Initialize%20the%20environment%20from%20the%20current%20live%20%28JS%29%20environment%22%0D%0D%09%7C%20stEnvironment%20%7C%0D%09stEnvironment%20%3A%3D%20self%20new.%0D%09Object%20withAllSubclassesDo%3A%20%5B%3Aeach%20%7C%20%0D%09%09%7C%20superDef%20instVarNames%20%7C%0D%09%09superDef%20%3A%3D%20each%20superclass%20ifNotNil%3A%20%5BstEnvironment%20bindingOf%3A%20each%20superclass%20name%5D.%0D%09%09instVarNames%20%3A%3D%20String%20streamContents%3A%20%5B%20%3Astream%20%7C%20%0D%09%09each%20instVarNames%0D%09%09%09do%3A%20%5B%20%3AvarName%20%7C%20stream%20nextPutAll%3A%20varName%20%5D%0D%09%09%09andBetweenDo%3A%20%5B%20stream%20space%20%5D%20%5D.%0D%09%09stEnvironment%0D%09%09%09addClassDefinition%3A%20%28StClassDefinition%20%0D%09%09%09%09name%3A%20each%20name%0D%09%09%09%09superclass%3A%20superDef%0D%09%09%09%09instanceVariableNames%3A%20instVarNames%0D%09%09%09%09classVariableNames%3A%20each%20classVariablesString%0D%09%09%09%09poolDictionaries%3A%20each%20poolDictionaryNames%20asJavascript%0D%09%09%09%09category%3A%20each%20category%29%0D%09%09%09%22name%3A%20each%20name%20superclass%3A%20superDef%20category%3A%20%27Kernel%27%29%22%5D.%0D%09%5EstEnvironment"));
smalltalk.bind(smalltalk.StEnvironment.$klass, unescape("new"), "$$new", function StEnvironment_class__$$new(){
const self = this; return (smalltalk.superImplementor(smalltalk.StEnvironment.$klass,'$$new').apply(self, [])).initialize();
}
, "instance creation", unescape("new%0D%09%5Esuper%20new%20initialize"));
smalltalk.bind(smalltalk.StEnvironment.$klass, unescape("readBindingsFrom%3A"), "readBindingsFrom_", function StEnvironment_class__readBindingsFrom_(sourceString){
var stEnvironment = nil;
const self = this; stEnvironment=smalltalk.StEnvironment.bootstrap();
stEnvironment.readBindingsFrom_((sourceString.asStream()));
return stEnvironment;
}
, "instance creation", unescape("readBindingsFrom%3A%20sourceString%0D%09%7C%20stEnvironment%20%7C%0D%09stEnvironment%20%3A%3D%20StEnvironment%20bootstrap.%0D%09stEnvironment%20readBindingsFrom%3A%20sourceString%20asStream.%0D%09%5EstEnvironment%0D"));
smalltalk.bind(smalltalk.StEnvironment.$klass, unescape("readFromFilesNamed%3A"), "readFromFilesNamed_", function StEnvironment_class__readFromFilesNamed_(listOfFileNames){
var stEnvironment = nil;
const self = this; stEnvironment=smalltalk.StEnvironment.bootstrap();
stEnvironment.allowUndeclared_(true);
listOfFileNames.do_((function StEnvironment_class__(fileName){
return stEnvironment.readBindingsFromFileNamed_(fileName);
}
));
return stEnvironment;
}
, "instance creation", unescape("readFromFilesNamed%3A%20listOfFileNames%0D%09%7C%20stEnvironment%20%7C%0D%09stEnvironment%20%3A%3D%20StEnvironment%20bootstrap.%0D%09stEnvironment%20allowUndeclared%3A%20true.%0D%09listOfFileNames%20do%3A%20%5B%3AfileName%20%7C%0D%09%09stEnvironment%20readBindingsFromFileNamed%3A%20fileName%5D.%0D%09%5EstEnvironment%0D"));
smalltalk.addClass("StEnvironmentBuilder", smalltalk.StChunkReader, ['environment'], 'Compiler-JS-Support');
smalltalk.StEnvironmentBuilder.$classVariableNames=("");
smalltalk.bind(smalltalk.StEnvironmentBuilder, unescape("compilerClass"), "compilerClass", function StEnvironmentBuilder__compilerClass(){
const self = this; return smalltalk.StCompiler;
}
, "private", unescape("compilerClass%0D%09%5EStCompiler"));
smalltalk.bind(smalltalk.StEnvironmentBuilder, unescape("updateFilePosition%3A"), "updateFilePosition_", function StEnvironmentBuilder__updateFilePosition_(c){
const self = this; self;
return self;
}
, "private", unescape("updateFilePosition%3A%20c%0D"));
smalltalk.bind(smalltalk.StEnvironmentBuilder, unescape("handleChunk%3A"), "handleChunk_", function StEnvironmentBuilder__handleChunk_(chunk){
var result = nil;
const self = this; result=(self.compilerClass()).environment_parseChunk_(self['@environment'],chunk);
result.readChunksThrough_(self);
return self;
}
, "chunk processing", unescape("handleChunk%3A%20chunk%0D%09%22process%20an%20expression%20delimited%20by%20%21%22%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20compilerClass%20environment%3A%20environment%20parseChunk%3A%20chunk.%0D%09result%20readChunksThrough%3A%20self"));
smalltalk.bind(smalltalk.StEnvironmentBuilder, unescape("processChunk%3A"), "processChunk_", function StEnvironmentBuilder__processChunk_(chunk){
var result = nil;
const self = this; var $early={name:"stReturn"};
try {
if ((chunk.isEmpty()).valueOf()) {return nil};
result=(self.compilerClass()).environment_parseChunk_(self['@environment'],chunk);
(function(){var $1$; $1$ = result; if (nil.isNil_($1$)) { return (function StEnvironmentBuilder__(){
$early.result=nil; throw ($early);
}
)() } else { return $1$; }})();
result.applyTo_(self['@environment']);
return result;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "chunk processing", unescape("processChunk%3A%20chunk%0D%09%22process%20an%20expression%20ending%20in%20%21%22%0D%09%7C%20result%20%7C%0D%09chunk%20isEmpty%20ifTrue%3A%20%5B%5Enil%5D.%0D%09result%20%3A%3D%20self%20compilerClass%20environment%3A%20environment%20parseChunk%3A%20chunk.%0D%09result%20ifNil%3A%20%5B%5Enil%5D.%0D%09result%20applyTo%3A%20environment.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.StEnvironmentBuilder, unescape("processMethodChunks%3Aprotocol%3A"), "processMethodChunks_protocol_", function StEnvironmentBuilder__processMethodChunks_protocol_(methodClass,methodProtocol){
var methodText = nil;
const self = this; while(((function StEnvironmentBuilder__(){
methodText=self.nextChunk();
return (methodText.size())._gt((0));
}
)()).valueOf()){nil};;
return self;
}
, "chunk processing", unescape("processMethodChunks%3A%20methodClass%20protocol%3A%20methodProtocol%0D%09%22Process%20methods%20chunks%20for%20current%20category%20in%20readStream%22%0D%09%7C%20methodText%20%7C%0D%09%5BmethodText%20%3A%3D%20self%20nextChunk.%0D%09%20methodText%20size%20%3E%200%5D%0D%09%09whileTrue%3A%20%5B%5D"));
smalltalk.bind(smalltalk.StEnvironmentBuilder, unescape("environment%3A"), "environment_", function StEnvironmentBuilder__environment_(anEnvironment){
const self = this; self['@environment']=anEnvironment;
return self;
}
, "initialize-release", unescape("environment%3A%20anEnvironment%0D%09environment%20%3A%3D%20anEnvironment"));
smalltalk.StEnvironmentBuilder.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StEnvironmentBuilder.$klass, unescape("on%3Aenvironment%3A"), "on_environment_", function StEnvironmentBuilder_class__on_environment_(readStream,environment){
var builder = nil;
const self = this; builder=smalltalk.superImplementor(smalltalk.StEnvironmentBuilder.$klass,'on_').apply(self, [readStream]);
builder.environment_(environment);
return builder;
}
, "instance creation", unescape("on%3A%20readStream%20environment%3A%20environment%0D%09%7C%20builder%20%7C%0D%09builder%20%3A%3D%20super%20on%3A%20readStream.%0D%09builder%20environment%3A%20environment.%0D%09%5Ebuilder"));
smalltalk.bind(smalltalk.StEnvironmentBuilder.$klass, unescape("onFileNamed%3Aenvironment%3A"), "onFileNamed_environment_", function StEnvironmentBuilder_class__onFileNamed_environment_(fileName,stEnvironment){
var builder = nil;
const self = this; builder=smalltalk.superImplementor(smalltalk.StEnvironmentBuilder.$klass,'onFileNamed_').apply(self, [fileName]);
builder.environment_(stEnvironment);
return builder;
}
, "instance creation", unescape("onFileNamed%3A%20fileName%20environment%3A%20stEnvironment%0D%09%7C%20builder%20%7C%0D%09builder%20%3A%3D%20super%20onFileNamed%3A%20fileName.%0D%09builder%20environment%3A%20stEnvironment.%0D%09%5Ebuilder"));
smalltalk.addClass("StMetaClassChunk", smalltalk.StChunk, ['classDefinition', 'variables'], 'Compiler-JS-Support');
smalltalk.StMetaClassChunk.$classVariableNames=("");
smalltalk.bind(smalltalk.StMetaClassChunk, unescape("applyTo%3A"), "applyTo_", function StMetaClassChunk__applyTo_(stEnvironment){
const self = this; self['@classDefinition'].instanceVariableNames_(self['@variables']);
stEnvironment.addMetaClassDefinition_(self['@classDefinition']);
return self;
}
, "static compiling", unescape("applyTo%3A%20stEnvironment%0D%09classDefinition%20instanceVariableNames%3A%20variables.%0D%09stEnvironment%20addMetaClassDefinition%3A%20classDefinition"));
smalltalk.bind(smalltalk.StMetaClassChunk, unescape("generateOn%3A"), "generateOn_", function StMetaClassChunk__generateOn_(generator){
const self = this; generator.generateMeta_instanceVariableNames_(self['@classDefinition'],(self['@variables'].subStrings()));
return self;
}
, "static compiling", unescape("generateOn%3A%20generator%0D%09generator%20generateMeta%3A%20classDefinition%20instanceVariableNames%3A%20variables%20subStrings%0D"));
smalltalk.bind(smalltalk.StMetaClassChunk, unescape("receiver%3Aselector%3Aarguments%3A"), "receiver_selector_arguments_", function StMetaClassChunk__receiver_selector_arguments_(receiver,selector,args){
const self = this; if (((nil.is_eqeq_(selector,"instanceVariableNames:"))).valueOf()) {self['@classDefinition']=receiver;
self['@variables']=args.at_((1))};
return self;
}
, "initialize-release", unescape("receiver%3A%20receiver%20selector%3A%20selector%20arguments%3A%20args%0D%09selector%20%3D%3D%20%23instanceVariableNames%3A%0D%09%09ifTrue%3A%20%5B%0D%09%09%09classDefinition%20%3A%3D%20receiver.%0D%09%09%09variables%20%3A%3D%20args%20at%3A%201%5D%0D"));
smalltalk.addClass("StMetaClassDefinition", smalltalk.Object, ['nonMetaClass', 'variables', 'allVariables'], 'Compiler-JS-Support');
smalltalk.StMetaClassDefinition.$classVariableNames=("");
smalltalk.bind(smalltalk.StMetaClassDefinition, unescape("gatherVariables"), "gatherVariables", function StMetaClassDefinition__gatherVariables(){
const self = this; self['@allVariables']=smalltalk.OrderedCollection.$$new();
(function(){var $1$; $1$ = self['@nonMetaClass'].superMeta(); if (!nil.isNil_($1$)) { return (self['@nonMetaClass'].superMeta()).variablesDo_((function StMetaClassDefinition__(varName){
return self['@allVariables'].add_(varName);
}
)) } else { return $1$; }})();
self['@variables'].do_((function StMetaClassDefinition__(varName){
return self['@allVariables'].add_(varName);
}
));
return self;
}
, "compiling", unescape("gatherVariables%0D%09allVariables%20%3A%3D%20OrderedCollection%20new.%0D%09nonMetaClass%20superMeta%20ifNotNil%3A%20%5B%0D%09%09nonMetaClass%20superMeta%20variablesDo%3A%20%5B%3AvarName%20%7C%20allVariables%20add%3A%20varName%5D%5D.%0D%09variables%20do%3A%20%5B%3AvarName%20%7C%20allVariables%20add%3A%20varName%5D"));
smalltalk.bind(smalltalk.StMetaClassDefinition, unescape("variablesDo%3A"), "variablesDo_", function StMetaClassDefinition__variablesDo_(aBlock){
const self = this; (function(){var $1$; $1$ = self['@allVariables']; if (nil.isNil_($1$)) { return self.gatherVariables() } else { return $1$; }})();
self['@allVariables'].do_(aBlock);
return self;
}
, "compiling", unescape("variablesDo%3A%20aBlock%0D%09allVariables%20ifNil%3A%20%5Bself%20gatherVariables%5D.%0D%09allVariables%20do%3A%20aBlock"));
smalltalk.bind(smalltalk.StMetaClassDefinition, unescape("canAssign"), "canAssign", function StMetaClassDefinition__canAssign(){
const self = this; return false;
}
, "testing", unescape("canAssign%0D%09%5Efalse"));
smalltalk.bind(smalltalk.StMetaClassDefinition, unescape("isMeta"), "isMeta", function StMetaClassDefinition__isMeta(){
const self = this; return true;
}
, "testing", unescape("isMeta%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StMetaClassDefinition, unescape("isVariableBinding"), "isVariableBinding", function StMetaClassDefinition__isVariableBinding(){
const self = this; return true;
}
, "testing", unescape("isVariableBinding%0D%09%5Etrue"));
smalltalk.bind(smalltalk.StMetaClassDefinition, unescape("instanceVariableNames%3A"), "instanceVariableNames_", function StMetaClassDefinition__instanceVariableNames_(instVarNames){
const self = this; self['@variables']=instVarNames.subStrings();
return self;
}
, "initialize-release", unescape("instanceVariableNames%3A%20instVarNames%20%0D%09variables%20%3A%3D%20instVarNames%20subStrings"));
smalltalk.bind(smalltalk.StMetaClassDefinition, unescape("nonMetaClass%3AinstanceVariableNames%3A"), "nonMetaClass_instanceVariableNames_", function StMetaClassDefinition__nonMetaClass_instanceVariableNames_(classDefinition,instVarNames){
const self = this; self['@nonMetaClass']=classDefinition;
self.instanceVariableNames_(instVarNames);
return self;
}
, "initialize-release", unescape("nonMetaClass%3A%20classDefinition%20instanceVariableNames%3A%20instVarNames%20%0D%09nonMetaClass%20%3A%3D%20classDefinition.%0D%09self%20instanceVariableNames%3A%20instVarNames"));
smalltalk.bind(smalltalk.StMetaClassDefinition, unescape("bindingOf%3Aenvironment%3A"), "bindingOf_environment_", function StMetaClassDefinition__bindingOf_environment_(varName,stEnvironment){
const self = this; return self['@nonMetaClass'].bindingOf_environment_(varName,stEnvironment);
}
, "accessing", unescape("bindingOf%3A%20varName%20environment%3A%20stEnvironment%0D%09%22Answer%20the%20binding%20of%20some%20variable%20resolved%20in%20the%20scope%20of%20the%20receiver%22%0D%09%5EnonMetaClass%20bindingOf%3A%20varName%20environment%3A%20stEnvironment"));
smalltalk.bind(smalltalk.StMetaClassDefinition, unescape("className"), "className", function StMetaClassDefinition__className(){
const self = this; return self['@nonMetaClass'].metaClassName();
}
, "accessing", unescape("className%0D%09%5EnonMetaClass%20metaClassName"));
smalltalk.bind(smalltalk.StMetaClassDefinition, unescape("theNonMetaClass"), "theNonMetaClass", function StMetaClassDefinition__theNonMetaClass(){
const self = this; return self['@nonMetaClass'];
}
, "accessing", unescape("theNonMetaClass%0D%09%5EnonMetaClass"));
smalltalk.StMetaClassDefinition.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StMetaClassDefinition.$klass, unescape("nonMetaClass%3A"), "nonMetaClass_", function StMetaClassDefinition_class__nonMetaClass_(classDefinition){
const self = this; return self.nonMetaClass_instanceVariableNames_(classDefinition,"");
}
, "instance creation", unescape("nonMetaClass%3A%20classDefinition%0D%09%5Eself%20nonMetaClass%3A%20classDefinition%20instanceVariableNames%3A%20%27%27%20"));
smalltalk.bind(smalltalk.StMetaClassDefinition.$klass, unescape("nonMetaClass%3AinstanceVariableNames%3A"), "nonMetaClass_instanceVariableNames_", function StMetaClassDefinition_class__nonMetaClass_instanceVariableNames_(classDefinition,instVarNames){
const self = this; return (self.$$new()).nonMetaClass_instanceVariableNames_(classDefinition,instVarNames);
}
, "instance creation", unescape("nonMetaClass%3A%20classDefinition%20instanceVariableNames%3A%20instVarNames%20%0D%09%5Eself%20new%20nonMetaClass%3A%20classDefinition%20instanceVariableNames%3A%20instVarNames%20"));
smalltalk.addClass("StMethodsChunk", smalltalk.StChunk, ['className', 'isMeta', 'protocol', 'timeStamp'], 'Compiler-JS-Support');
smalltalk.StMethodsChunk.$classVariableNames=("");
smalltalk.bind(smalltalk.StMethodsChunk, unescape("readChunksThrough%3A"), "readChunksThrough_", function StMethodsChunk__readChunksThrough_(chunkReader){
const self = this; chunkReader.processMethodChunks_protocol_(self['@className'],self['@protocol']);
return self;
}
, "chunk processing", unescape("readChunksThrough%3A%20chunkReader%0D%09chunkReader%20processMethodChunks%3A%20className%20protocol%3A%20protocol"));
smalltalk.bind(smalltalk.StMethodsChunk, unescape("receiver%3Aselector%3Aarguments%3A"), "receiver_selector_arguments_", function StMethodsChunk__receiver_selector_arguments_(receiver,selector,args){
const self = this; self['@isMeta']=false;
if ((selector._eq("methods")).valueOf()) {self['@className']=receiver;
return self};
if ((selector._eq("methodsFor:")).valueOf()) {self['@className']=receiver;
self['@protocol']=args.at_((1));
return self};
if ((selector._eq("methodsFor:stamp:")).valueOf()) {self['@className']=receiver;
self['@protocol']=args.at_((1));
self['@timeStamp']=args.at_((2));
return self};
self.halt();
return self;
}
, "initialize-release", unescape("receiver%3A%20receiver%20selector%3A%20selector%20arguments%3A%20args%0D%09isMeta%20%3A%3D%20false.%0D%09selector%20%3D%20%23methods%0D%09%09ifTrue%3A%20%5B%0D%09%09%09className%20%3A%3D%20receiver.%0D%09%09%09%5Eself%5D.%0D%09selector%20%3D%20%23methodsFor%3A%0D%09%09ifTrue%3A%20%5B%0D%09%09%09className%20%3A%3D%20receiver.%0D%09%09%09protocol%20%3A%3D%20args%20at%3A%201.%0D%09%09%09%5Eself%5D.%0D%09selector%20%3D%20%23methodsFor%3Astamp%3A%0D%09%09ifTrue%3A%20%5B%0D%09%09%09className%20%3A%3D%20receiver.%0D%09%09%09protocol%20%3A%3D%20args%20at%3A%201.%0D%09%09%09timeStamp%20%3A%3D%20args%20at%3A%202.%0D%09%09%09%5Eself%5D.%0D%09self%20halt%0D%09%0D"));
smalltalk.addClass("StStreamCompiler", smalltalk.StChunkReader, ['environment', 'writeStream', 'generator', 'includeSource'], 'Compiler-JS-Support');
smalltalk.StStreamCompiler.$classVariableNames=("");
smalltalk.bind(smalltalk.StStreamCompiler, unescape("compilerClass"), "compilerClass", function StStreamCompiler__compilerClass(){
const self = this; return smalltalk.StCompiler;
}
, "accessing", unescape("compilerClass%0D%09%5EStCompiler"));
smalltalk.bind(smalltalk.StStreamCompiler, unescape("environment%3A"), "environment_", function StStreamCompiler__environment_(anEnvironment){
const self = this; self['@environment']=anEnvironment;
return self;
}
, "initialize-release", unescape("environment%3A%20anEnvironment%0D%09environment%20%3A%3D%20anEnvironment"));
smalltalk.bind(smalltalk.StStreamCompiler, unescape("writeStream%3A"), "writeStream_", function StStreamCompiler__writeStream_(aStream){
const self = this; self['@writeStream']=aStream;
self['@generator']=smalltalk.JSGenerator.on_(self['@writeStream']);
return self;
}
, "initialize-release", unescape("writeStream%3A%20aStream%0D%09writeStream%20%3A%3D%20aStream.%0D%09generator%20%3A%3D%20JSGenerator%20on%3A%20writeStream"));
smalltalk.bind(smalltalk.StStreamCompiler, unescape("includeSource%3A"), "includeSource_", function StStreamCompiler__includeSource_(aBoolean){
const self = this; self['@includeSource']=aBoolean;
return self;
}
, "compiling", unescape("includeSource%3A%20aBoolean%0D%09includeSource%20%3A%3D%20aBoolean"));
smalltalk.bind(smalltalk.StStreamCompiler, unescape("compile"), "compile", function StStreamCompiler__compile(){
const self = this; self['@readStream'].reset();
(function StStreamCompiler__(){
return self.readAllChunks();
}
).ensure_((function StStreamCompiler__(){
return self['@writeStream'].close();
}
));
return self;
}
, "chunk processing", unescape("compile%0D%22%0D%09%7C%20environmentBuilder%20%7C%0D%09environmentBuilder%20%3A%3D%20StEnvironmentBuilder%20on%3A%20readStream%20environment%3A%20environment.%0D%09environmentBuilder%20writeStream%3A%20writeStream.%0D%09environmentBuilder%20readAllChunks.%0D%22%0D%09readStream%20reset.%0D%09%5Bself%20readAllChunks%5D%20ensure%3A%20%5BwriteStream%20close%5D"));
smalltalk.bind(smalltalk.StStreamCompiler, unescape("handleChunk%3A"), "handleChunk_", function StStreamCompiler__handleChunk_(chunk){
var result = nil;
const self = this; result=(self.compilerClass()).environment_parseChunk_(self['@environment'],chunk);
result.readChunksThrough_(self);
return self;
}
, "chunk processing", unescape("handleChunk%3A%20chunk%0D%09%22process%20an%20expression%20delimited%20by%20%21%22%0D%09%7C%20result%20%7C%0D%09result%20%3A%3D%20self%20compilerClass%20environment%3A%20environment%20parseChunk%3A%20chunk.%0D%09result%20readChunksThrough%3A%20self"));
smalltalk.bind(smalltalk.StStreamCompiler, unescape("processChunk%3A"), "processChunk_", function StStreamCompiler__processChunk_(chunk){
var result = nil;
const self = this; var $early={name:"stReturn"};
try {
if ((chunk.isEmpty()).valueOf()) {return nil};
result=(self.compilerClass()).environment_parseChunk_(self['@environment'],chunk);
(function(){var $1$; $1$ = result; if (nil.isNil_($1$)) { return (function StStreamCompiler__(){
$early.result=nil; throw ($early);
}
)() } else { return $1$; }})();
result.applyTo_(self['@environment']);
(function(){var $2$; $2$ = self['@generator']; if (!nil.isNil_($2$)) { return result.generateOn_(self['@generator']) } else { return $2$; }})();
result;
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "chunk processing", unescape("processChunk%3A%20chunk%0D%09%7C%20result%20%7C%0D%09chunk%20isEmpty%20ifTrue%3A%20%5B%5Enil%5D.%0D%09result%20%3A%3D%20self%20compilerClass%20environment%3A%20environment%20parseChunk%3A%20chunk.%0D%09result%20ifNil%3A%20%5B%5Enil%5D.%0D%09result%20applyTo%3A%20environment.%0D%09generator%20ifNotNil%3A%20%5Bresult%20generateOn%3A%20generator%5D.%0D%09result"));
smalltalk.bind(smalltalk.StStreamCompiler, unescape("processMethodChunk%3Aclass%3Aprotocol%3A"), "processMethodChunk_class_protocol_", function StStreamCompiler__processMethodChunk_class_protocol_(methodText,methodClass,methodProtocol){
const self = this; ((self.compilerClass()).$$new()).compileMethodChunk_protocol_class_environment_includeSource_generateOn_(methodText,methodProtocol,methodClass,self['@environment'],self['@includeSource'],self['@generator']);
return self;
}
, "chunk processing", unescape("processMethodChunk%3A%20methodText%20class%3A%20methodClass%20protocol%3A%20methodProtocol%0D%09self%20compilerClass%20new%0D%09%09compileMethodChunk%3A%20methodText%0D%09%09protocol%3A%20methodProtocol%0D%09%09class%3A%20methodClass%0D%09%09environment%3A%20environment%0D%09%09includeSource%3A%20includeSource%0D%09%09generateOn%3A%20generator"));
smalltalk.StStreamCompiler.$klass.$iVarNames = [];
smalltalk.bind(smalltalk.StStreamCompiler.$klass, unescape("on%3Aenvironment%3A"), "on_environment_", function StStreamCompiler_class__on_environment_(readStream,environment){
var builder = nil;
const self = this; builder=smalltalk.superImplementor(smalltalk.StStreamCompiler.$klass,'on_').apply(self, [readStream]);
builder.environment_(environment);
return builder;
}
, "instance creation", unescape("on%3A%20readStream%20environment%3A%20environment%0D%09%7C%20builder%20%7C%0D%09builder%20%3A%3D%20super%20on%3A%20readStream.%0D%09builder%20environment%3A%20environment.%0D%09%5Ebuilder"));
smalltalk.bind(smalltalk.StStreamCompiler.$klass, unescape("onFileNamed%3Aenvironment%3A"), "onFileNamed_environment_", function StStreamCompiler_class__onFileNamed_environment_(fileName,stEnvironment){
var builder = nil;
const self = this; builder=smalltalk.superImplementor(smalltalk.StStreamCompiler.$klass,'onFileNamed_').apply(self, [fileName]);
builder.environment_(stEnvironment);
return builder;
}
, "instance creation", unescape("onFileNamed%3A%20fileName%20environment%3A%20stEnvironment%0D%09%7C%20builder%20%7C%0D%09builder%20%3A%3D%20super%20onFileNamed%3A%20fileName.%0D%09builder%20environment%3A%20stEnvironment.%0D%09%5Ebuilder"));
smalltalk.bind(smalltalk.StStreamCompiler.$klass, unescape("compile%3Ain%3A"), "compile_in_", function StStreamCompiler_class__compile_in_(sourceString,stEnvironment){
var compiler = nil;
var readStream = nil;
var writeStream = nil;
const self = this; readStream=sourceString.readStream();
compiler=self.on_environment_(readStream,stEnvironment);
compiler.includeSource_(true);
writeStream="".writeStream();
compiler.writeStream_(writeStream);
compiler.compile();
return writeStream.contents();
}
, "compiling", unescape("compile%3A%20sourceString%20in%3A%20stEnvironment%0D%09%7C%20compiler%20readStream%20writeStream%20%7C%0D%09readStream%20%3A%3D%20sourceString%20readStream.%0D%09compiler%20%3A%3D%20self%20on%3A%20readStream%20environment%3A%20stEnvironment.%0D%09compiler%20includeSource%3A%20true.%0D%09writeStream%20%3A%3D%20%27%27%20writeStream.%0D%09compiler%20writeStream%3A%20writeStream.%0D%09compiler%20compile.%0D%09%5EwriteStream%20contents"));
smalltalk.bind(smalltalk.StStreamCompiler.$klass, unescape("compile%3Ain%3AincludeSource%3A"), "compile_in_includeSource_", function StStreamCompiler_class__compile_in_includeSource_(sourceString,stEnvironment,aBoolean){
var compiler = nil;
var readStream = nil;
var writeStream = nil;
const self = this; readStream=sourceString.asStream();
compiler=self.on_environment_(readStream,stEnvironment);
compiler.includeSource_(aBoolean);
writeStream="".writeStream();
compiler.writeStream_(writeStream);
compiler.compile();
return writeStream.contents();
}
, "compiling", unescape("compile%3A%20sourceString%20in%3A%20stEnvironment%20includeSource%3A%20aBoolean%0D%09%7C%20compiler%20readStream%20writeStream%20%7C%0D%09readStream%20%3A%3D%20sourceString%20asStream.%0D%09compiler%20%3A%3D%20self%20on%3A%20readStream%20environment%3A%20stEnvironment.%0D%09compiler%20includeSource%3A%20aBoolean.%0D%09writeStream%20%3A%3D%20%27%27%20writeStream.%0D%09compiler%20writeStream%3A%20writeStream.%0D%09compiler%20compile.%0D%09%5EwriteStream%20contents"));
smalltalk.addClass("StSubclassChunk", smalltalk.StChunk, ['className', 'isMeta', 'superclassName', 'instVarNames', 'classVarNames', 'pools', 'category'], 'Compiler-JS-Support');
smalltalk.StSubclassChunk.$classVariableNames=("");
smalltalk.bind(smalltalk.StSubclassChunk, unescape("applyTo%3A"), "applyTo_", function StSubclassChunk__applyTo_(stEnvironment){
var classDefinition = nil;
var superclass = nil;
const self = this; superclass=(function(){var $1$; $1$ = self['@superclassName']; if (!nil.isNil_($1$)) { return stEnvironment.bindingOf_(self['@superclassName']) } else { return $1$; }})();
classDefinition=smalltalk.StClassDefinition.name_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_(self['@className'],superclass,self['@instVarNames'],self['@classVarNames'],self['@pools'],self['@category']);
stEnvironment.addClassDefinition_(classDefinition);
return self;
}
, "static compiling", unescape("applyTo%3A%20stEnvironment%0D%09%7C%20classDefinition%20superclass%20%7C%0D%09superclass%20%3A%3D%20superclassName%20ifNotNil%3A%20%5BstEnvironment%20bindingOf%3A%20superclassName%5D.%0D%09classDefinition%20%3A%3D%20StClassDefinition%0D%09%09name%3A%20className%0D%09%09superclass%3A%20superclass%0D%09%09instanceVariableNames%3A%20instVarNames%0D%09%09classVariableNames%3A%20classVarNames%0D%09%09poolDictionaries%3A%20pools%0D%09%09category%3A%20category.%0D%09stEnvironment%20addClassDefinition%3A%20classDefinition"));
smalltalk.bind(smalltalk.StSubclassChunk, unescape("generateOn%3A"), "generateOn_", function StSubclassChunk__generateOn_(generator){
const self = this; var $early={name:"stReturn"};
try {
(function(){var $1$; $1$ = self['@superclassName']; if (nil.isNil_($1$)) { return (function StSubclassChunk__(){
$early.result=self; throw ($early);
}
)() } else { return $1$; }})();
if ((self['@isMeta']).valueOf()) {generator.generateMetaFor_instanceVariableNames_((self['@className'].asString()),(self['@instVarNames'].subStrings()))} else {generator.generate_superclass_instanceVariableNames_classVariableNames_poolDictionaries_category_((self['@className'].asString()),(self['@superclassName'].asString()),(self['@instVarNames'].subStrings()),(self['@classVarNames'].subStrings()),(self['@pools'].subStrings()),(self['@category'].asString()))};
return self;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "static compiling", unescape("generateOn%3A%20generator%0D%09superclassName%20ifNil%3A%20%5B%5Eself%5D.%0D%09isMeta%0D%09%09ifTrue%3A%20%5Bgenerator%20generateMetaFor%3A%20className%20asString%20instanceVariableNames%3A%20instVarNames%20subStrings%5D%0D%09%09ifFalse%3A%20%5B%0D%09%09%09generator%0D%09%09%09%09generate%3A%20className%20asString%0D%09%09%09%09superclass%3A%20superclassName%20asString%0D%09%09%09%09instanceVariableNames%3A%20instVarNames%20subStrings%0D%09%09%09%09classVariableNames%3A%20classVarNames%20subStrings%0D%09%09%09%09poolDictionaries%3A%20pools%20subStrings%0D%09%09%09%09category%3A%20category%20asString%5D"));
smalltalk.bind(smalltalk.StSubclassChunk, unescape("receiver%3Aselector%3Aarguments%3A"), "receiver_selector_arguments_", function StSubclassChunk__receiver_selector_arguments_(receiver,selector,args){
const self = this; self['@instVarNames']="";
self['@classVarNames']="";
self['@pools']="";
self['@isMeta']=false;
self['@className']=args.at_((1));
self['@superclassName']=(function(){var $1$; $1$ = receiver; if (!nil.isNil_($1$)) { return receiver.className() } else { return $1$; }})();
if (((nil.is_eqeq_(selector,"subclass:"))).valueOf()) {return self};
if (((nil.is_eqeq_(selector,"subclass:instanceVariableNames:"))).valueOf()) {self['@instVarNames']=args.at_((2));
return self};
if (((nil.is_eqeq_(selector,"subclass:category:"))).valueOf()) {return self};
if (((nil.is_eqeq_(selector,"subclass:instanceVariableNames:category:"))).valueOf()) {self['@instVarNames']=args.at_((2));
self['@category']=args.at_((3));
return self};
if (((nil.is_eqeq_(selector,"subclass:instanceVariableNames:classVariableNames:category:"))).valueOf()) {self['@instVarNames']=args.at_((2));
self['@classVarNames']=args.at_((3));
self['@category']=args.at_((4));
return self};
if (((nil.is_eqeq_(selector,"subclass:instanceVariableNames:classVariableNames:poolDictionaries:"))).valueOf()) {self['@instVarNames']=args.at_((2));
self['@classVarNames']=args.at_((3));
self['@pools']=args.at_((4));
return self};
if ((((nil.is_eqeq_(selector,"subclass:instanceVariableNames:classVariableNames:poolDictionaries:category:"))).or_((function StSubclassChunk__(){
return (nil.is_eqeq_(selector,"variableSubclass:instanceVariableNames:classVariableNames:poolDictionaries:category:"));
}
))).valueOf()) {self['@instVarNames']=args.at_((2));
self['@classVarNames']=args.at_((3));
self['@pools']=args.at_((4));
self['@category']=args.at_((5));
return self};
self.halt();
return self;
}
, "initialize-release", unescape("receiver%3A%20receiver%20selector%3A%20selector%20arguments%3A%20args%0D%09instVarNames%20%3A%3D%20%27%27.%0D%09classVarNames%20%3A%3D%20%27%27.%0D%09pools%20%3A%3D%20%27%27.%0D%09isMeta%20%3A%3D%20false.%0D%09className%20%3A%3D%20args%20at%3A%201.%0D%09superclassName%20%3A%3D%20receiver%20ifNotNil%3A%20%5Breceiver%20className%5D.%0D%09selector%20%3D%3D%20%23subclass%3A%0D%09%09ifTrue%3A%20%5B%0D%09%09%09%5Eself%5D.%0D%09selector%20%3D%3D%20%23subclass%3AinstanceVariableNames%3A%0D%09%09ifTrue%3A%20%5B%0D%09%09%09instVarNames%20%3A%3D%20args%20at%3A%202.%0D%09%09%09%5Eself%5D.%0D%09selector%20%3D%3D%20%23subclass%3Acategory%3A%0D%09%09ifTrue%3A%20%5B%0D%09%09%09%5Eself%5D.%0D%09selector%20%3D%3D%20%23subclass%3AinstanceVariableNames%3Acategory%3A%0D%09%09ifTrue%3A%20%5B%0D%09%09%09instVarNames%20%3A%3D%20args%20at%3A%202.%0D%09%09%09category%20%3A%3D%20args%20at%3A%203.%0D%09%09%09%5Eself%5D.%0D%09selector%20%3D%3D%20%23subclass%3AinstanceVariableNames%3AclassVariableNames%3Acategory%3A%0D%09%09ifTrue%3A%20%5B%0D%09%09%09instVarNames%20%3A%3D%20args%20at%3A%202.%0D%09%09%09classVarNames%20%3A%3D%20args%20at%3A%203.%0D%09%09%09category%20%3A%3D%20args%20at%3A%204.%0D%09%09%09%5Eself%5D.%0D%09selector%20%3D%3D%20%23subclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3A%0D%09%09ifTrue%3A%20%5B%0D%09%09%09instVarNames%20%3A%3D%20args%20at%3A%202.%0D%09%09%09classVarNames%20%3A%3D%20args%20at%3A%203.%0D%09%09%09pools%20%3A%3D%20args%20at%3A%204.%0D%09%09%09%5Eself%5D.%0D%09%28selector%20%3D%3D%20%23subclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3Acategory%3A%0D%09%09or%3A%20%5Bselector%20%3D%3D%20%23variableSubclass%3AinstanceVariableNames%3AclassVariableNames%3ApoolDictionaries%3Acategory%3A%5D%29%0D%09%09ifTrue%3A%20%5B%0D%09%09%09instVarNames%20%3A%3D%20args%20at%3A%202.%0D%09%09%09classVarNames%20%3A%3D%20args%20at%3A%203.%0D%09%09%09pools%20%3A%3D%20args%20at%3A%204.%0D%09%09%09category%20%3A%3D%20args%20at%3A%205.%0D%09%09%09%5Eself%5D.%0D%09self%20halt%0D"));
smalltalk.bind(smalltalk.Smalltalk, unescape("compilerSupport"), "compilerSupport", function Smalltalk__compilerSupport(){
const self = this; return smalltalk.StCompiler;
}
, "Compiler-accessing", unescape("compilerSupport%0D%09%22Returns%20the%20compiler%20support%20for%20the%20receiver%22%0D%0D%09%5EStCompiler"));
smalltalk.bind(smalltalk.UndefinedObject, unescape("generateOn%3A"), "generateOn_", function UndefinedObject__generateOn_(generator){
const self = this; generator.generateNilLiteral_((self.asString()));
return self;
}
, "*Compiler-JS", unescape("generateOn%3A%20generator%0D%09generator%20generateNilLiteral%3A%20self%20asString"));
smalltalk.bind(smalltalk.Boolean, unescape("generateOn%3A"), "generateOn_", function Boolean__generateOn_(generator){
const self = this; generator.generateBooleanLiteral_(self);
return self;
}
, "*Compiler-JS", unescape("generateOn%3A%20generator%0D%09generator%20generateBooleanLiteral%3A%20self"));
smalltalk.bind(smalltalk.Array, unescape("generateOn%3A"), "generateOn_", function Array__generateOn_(generator){
const self = this; generator.generateArrayLiteral_(self);
return self;
}
, "*Compiler-JS", unescape("generateOn%3A%20generator%0D%09generator%20generateArrayLiteral%3A%20self"));
smalltalk.bind(smalltalk.String, unescape("generateOn%3A"), "generateOn_", function String__generateOn_(generator){
const self = this; generator.generateStringLiteral_(self);
return self;
}
, "*Compiler-JS", unescape("generateOn%3A%20generator%0D%09generator%20generateStringLiteral%3A%20self"));
smalltalk.bind(smalltalk.Number, unescape("generateOn%3A"), "generateOn_", function Number__generateOn_(generator){
const self = this; generator.generateNumberLiteral_(self);
return self;
}
, "*Compiler-JS", unescape("generateOn%3A%20generator%0D%09generator%20generateNumberLiteral%3A%20self"));
smalltalk.bind(smalltalk.Object, unescape("isVariableBinding"), "isVariableBinding", function Object__isVariableBinding(){
const self = this; return false;
}
, "testing", unescape("isVariableBinding%0D%09%22Return%20true%20if%20I%20represent%20a%20literal%20variable%20binding%22%0D%09%5Efalse%0D%09"));
smalltalk.bind(smalltalk.Smalltalk, unescape("compilerSupport"), "compilerSupport", function Smalltalk__compilerSupport(){
const self = this; return smalltalk.StCompiler;
}
, "Compiler-accessing", unescape("compilerSupport%0D%09%22Returns%20the%20compiler%20support%20for%20the%20receiver%22%0D%0D%09%5EStCompiler"));
smalltalk.launchImage();smalltalk.addClass("TestCase", smalltalk.Object, ['assertCount'], 'SUnit');
smalltalk.TestCase.$classVariableNames=("");
smalltalk.addClass("TestResult", smalltalk.Object, ['runningInHudson', 'timestamp', 'runs', 'passed', 'errors', 'failures', 'total'], 'SUnit');
smalltalk.TestResult.$classVariableNames=("");
smalltalk.addClass("TestFailure", smalltalk.Error, [], 'SUnit');
smalltalk.TestFailure.$classVariableNames=("");
smalltalk.addClass("TestRunner", smalltalk.Object, ['result', 'progress', 'timeout', 'notificationBlock'], 'SUnit');
smalltalk.TestRunner.$classVariableNames=("");
smalltalk.bind(smalltalk.TestCase, unescape("assertCount"), "assertCount", function TestCase__assertCount(){
const self = this; return self['@assertCount'];
}
, "accessing", unescape("assertCount%0D%0D%09%5EassertCount"));
smalltalk.bind(smalltalk.TestCase, unescape("assertCount%3A"), "assertCount_", function TestCase__assertCount_(anInteger){
const self = this; self['@assertCount']=anInteger;
return self;
}
, "accessing", unescape("assertCount%3A%20anInteger%0D%0D%09assertCount%20%3A%3D%20anInteger"));
smalltalk.bind(smalltalk.TestCase, unescape("resetAssertCount"), "resetAssertCount", function TestCase__resetAssertCount(){
const self = this; self.assertCount_((0));
return self;
}
, "record keeping", unescape("resetAssertCount%0D%0D%09self%20assertCount%3A%200"));
smalltalk.bind(smalltalk.TestCase, unescape("incrementAssertionCount"), "incrementAssertionCount", function TestCase__incrementAssertionCount(){
const self = this; self.assertCount_(((self.assertCount())._plus((1))));
return self;
}
, "record keeping", unescape("incrementAssertionCount%0D%0D%09self%20assertCount%3A%20self%20assertCount%20+%201"));
smalltalk.bind(smalltalk.TestCase.$klass, unescape("run"), "run", function TestCase_class__run(){
const self = this; return smalltalk.TestRunner.run_(self);
}
, "testing", unescape("run%0D%09%22%20Run%20the%20test%20case%20selectors%20implemented%20by%20the%20receiver.%20%22%0D%0D%09%5ETestRunner%20run%3A%20self"));
smalltalk.bind(smalltalk.TestCase.$klass, unescape("runAll"), "runAll", function TestCase_class__runAll(){
const self = this; return smalltalk.TestRunner.runAll_((self.withAllSubclasses()));
}
, "testing", unescape("runAll%0D%09%22%20Run%20the%20test%20case%20selectors%20implemented%20by%20the%20receiver%20and%20its%20subclasses.%20%22%0D%0D%09%5ETestRunner%20runAll%3A%20self%20withAllSubclasses"));
smalltalk.bind(smalltalk.TestCase.$klass, unescape("runCases%3Afor%3Adoing%3A"), "runCases_for_doing_", function TestCase_class__runCases_for_doing_(selectors,aTestResult,aBlock){
const self = this; return (self.$$new()).runCases_for_doing_(selectors,aTestResult,aBlock);
}
, "executing", unescape("runCases%3A%20selectors%20for%3A%20aTestResult%20doing%3A%20aBlock%0D%09%22%20Run%20test%20case%20with%20selectors.%20%22%0D%0D%09%5Eself%20new%20runCases%3A%20selectors%20for%3A%20aTestResult%20doing%3A%20aBlock"));
smalltalk.bind(smalltalk.TestCase.$klass, unescape("ownedTestSelectors"), "ownedTestSelectors", function TestCase_class__ownedTestSelectors(){
const self = this; return ((self.methodDictionary()).keys()).select_((function TestCase_class__(each){
return each.match_(unescape("%5Etest"));
}
));
}
, "private", unescape("ownedTestSelectors%0D%09%22%20Return%20the%20test%20selectors%20implemented%20by%20the%20receiver.%20%22%0D%0D%09%5Eself%20methodDictionary%20keys%20select%3A%20%5B%3Aeach%20%7C%20each%20match%3A%20%27%5Etest%27%20%5D"));
smalltalk.bind(smalltalk.TestCase.$klass, unescape("withTestSuperclasses"), "withTestSuperclasses", function TestCase_class__withTestSuperclasses(){
var superclasses = nil;
const self = this; superclasses=(self.allSuperclasses()).select_((function TestCase_class__(each){
return each.inheritsFrom_(smalltalk.TestCase);
}
));
return (smalltalk.Array.with_(self))._comma(superclasses);
}
, "private", unescape("withTestSuperclasses%0D%09%22%20Return%20the%20receiver%20with%20all%20test%20superclasses.%20%22%0D%0D%09%7C%20superclasses%20%7C%0D%09superclasses%20%3A%3D%20self%20allSuperclasses%20select%3A%20%5B%3Aeach%20%7C%20each%20inheritsFrom%3A%20TestCase%5D.%0D%09%5E%28Array%20with%3A%20self%29%2C%20superclasses"));
smalltalk.bind(smalltalk.TestCase.$klass, unescape("selectorsForTest"), "selectorsForTest", function TestCase_class__selectorsForTest(){
const self = this; return (self.withTestSuperclasses()).inject_into_((smalltalk.Array.$$new()),(function TestCase_class__(total,each){
return total._comma((each.ownedTestSelectors()));
}
));
}
, "private", unescape("selectorsForTest%0D%09%22%20Return%20the%20test%20selectors%20implemented%20by%20the%20receiver.%0D%09The%20default%20action%20return%20the%20message%20selectors%20matching%20test%20pattern%20implemented%20by%20the%20receiver%27s%20class%20and%20its%20test%20superclasses.%0D%09%22%0D%0D%09%5Eself%20withTestSuperclasses%20inject%3A%20Array%20new%20into%3A%20%5B%3Atotal%20%3Aeach%7C%20total%20%2C%20each%20ownedTestSelectors%20%5D"));
smalltalk.bind(smalltalk.TestCase, unescape("cleanUp"), "cleanUp", function TestCase__cleanUp(){
const self = this; ((self.$klass).instanceVariableNames()).do_((function TestCase__(each){
if ((["testSelector"].includes_(each)).not()) {return self.instVarAt_put_(each,nil)} else {return nil};
}
));
return self;
}
, "private", unescape("cleanUp%0D%09%22%20Private%20-%20CleanUp%20the%20instance%20variables%20of%20the%20receiver.%20%22%0D%0D%09self%20class%20instanceVariableNames%20do%3A%20%5B%3Aeach%7C%0D%09%09%28%23%28%20%23testSelector%20%29%20includes%3A%20each%29%20ifFalse%3A%20%5B%0D%09%09%09self%20instVarAt%3A%20each%20put%3A%20nil%0D%09%09%5D.%0D%09%5D"));
smalltalk.bind(smalltalk.TestCase, unescape("signalFailure%3A"), "signalFailure_", function TestCase__signalFailure_(aString){
const self = this; smalltalk.TestFailure.signal_(aString);
return self;
}
, "private", unescape("signalFailure%3A%20aString%0D%09%22%20Private%20-%20Signal%20a%20test%20failure.%20%22%0D%0D%09TestFailure%20signal%3A%20aString"));
smalltalk.bind(smalltalk.TestCase, unescape("setUp"), "setUp", function TestCase__setUp(){
const self = this; self.resetAssertCount();
return self;
}
, "executing", unescape("setUp%0D%09%22%20Setup%20the%20receiver%20to%20perform%20a%20test.%0D%09This%20method%20can%20be%20refined%20by%20subclasses%20to%20ensure%20correct%20testing%20context.%0D%09%22%0D%09self%20resetAssertCount"));
smalltalk.bind(smalltalk.TestCase, unescape("tearDown"), "tearDown", function TestCase__tearDown(){
const self = this; self;
return self;
}
, "executing", unescape("tearDown%0D%09%22%20Release%20the%20receiver%27s%20resources.%0D%09The%20default%20action%20do%20nothing.%0D%09This%20method%20can%20be%20refined%20by%20subclasses%20to%20clean%20up%20resources%20allocated%20for%20testing.%0D%09%22"));
smalltalk.bind(smalltalk.TestCase, unescape("selectorsForTest"), "selectorsForTest", function TestCase__selectorsForTest(){
const self = this; return (self.$klass).selectorsForTest();
}
, "executing", unescape("selectorsForTest%0D%09%22%20Return%20the%20test%20selectors%20implemented%20by%20the%20receiver.%20%22%0D%0D%09%5Eself%20class%20selectorsForTest"));
smalltalk.bind(smalltalk.TestCase, unescape("runCaseFor%3A"), "runCaseFor_", function TestCase__runCaseFor_(aTestResult){
const self = this; self.runCases_for_doing_((self.selectorsForTest()),aTestResult,nil);
return self;
}
, "executing", unescape("runCaseFor%3A%20aTestResult%0D%09%22%20Run%20a%20test%20case.%20%22%0D%0D%09self%20runCases%3A%20self%20selectorsForTest%20for%3A%20aTestResult%20doing%3A%20nil"));
smalltalk.bind(smalltalk.TestCase, unescape("runCases%3Afor%3Adoing%3A"), "runCases_for_doing_", function TestCase__runCases_for_doing_(selectors,aTestResult,aBlock){
const self = this; self.performTests_for_doing_(selectors,aTestResult,aBlock);
return self;
}
, "executing", unescape("runCases%3A%20selectors%20for%3A%20aTestResult%20doing%3A%20aBlock%0D%09%22%20Run%20test%20case%20with%20selectors.%20%22%0D%0D%09self%20performTests%3A%20selectors%20for%3A%20aTestResult%20doing%3A%20aBlock"));
smalltalk.bind(smalltalk.TestCase, unescape("performTests%3Afor%3Adoing%3A"), "performTests_for_doing_", function TestCase__performTests_for_doing_(selectors,aResult,aBlock){
const self = this; selectors.do_((function TestCase__(each){
if (((nil.is_eqeq_(each,"testSelectors"))).not()) {return (function TestCase__(){
self.setUp();
return self.perform_testFor_doing_(each,aResult,aBlock);
}
).ensure_((function TestCase__(){
return (function TestCase__($1$){
$1$.tearDown();
return $1$.cleanUp()}
)(self);
}
))} else {return nil};
}
));
return self;
}
, "private", unescape("performTests%3A%20selectors%20for%3A%20aResult%20doing%3A%20aBlock%0D%09%22%20Evaluate%20the%20tests%20defined%20by%20the%20receiver.%20%22%0D%0D%09selectors%0D%09%09do%3A%20%20%5B%3Aeach%7C%0D%09%09%09each%20%3D%3D%20%23testSelectors%0D%09%09%09%09ifFalse%3A%20%5B%0D%09%09%09%09%09%5Bself%20setUp.%0D%09%09%09%09%09self%20perform%3A%20each%20testFor%3A%20aResult%20doing%3A%20aBlock%5D%0D%09%09%09%09%09%09ensure%3A%0D%09%09%09%09%09%09%09%5Bself%0D%09%09%09%09%09%09%09%09tearDown%3B%0D%09%09%09%09%09%09%09%09cleanUp%5D%0D%09%09%09%09%09%5D%5D"));
smalltalk.bind(smalltalk.TestCase, unescape("perform%3AtestFor%3Adoing%3A"), "perform_testFor_doing_", function TestCase__perform_testFor_doing_(selector,aResult,aBlock){
var didPass = nil;
const self = this; didPass=true;
(function TestCase__(){
return (function TestCase__(){
(function(){var $1$; $1$ = aBlock; if (!nil.isNil_($1$)) { return aBlock.value_value_(self,selector) } else { return $1$; }})();
return self.perform_(selector);
}
).on_do_(smalltalk.TestFailure,(function TestCase__(failure){
didPass=false;
(function TestCase__($2$){
$2$.print_(unescape("%09Fail%21"));
return $2$.print_((unescape("%09")._comma((failure.description()))))}
)(self);
return aResult.addFailure_class_test_(failure,((self.$klass).name()),selector);
}
));
}
).on_do_(smalltalk.Error,(function TestCase__(error){
didPass=false;
(function TestCase__($3$){
$3$.print_(unescape("%09Fail%21"));
return $3$.print_((unescape("%09")._comma((error.description()))))}
)(self);
return aResult.addError_class_test_(error,((self.$klass).name()),selector);
}
));
if ((didPass).valueOf()) {aResult.addPassed_test_(((self.$klass).name()),selector)};
aResult.finished();
return self;
}
, "private", unescape("perform%3A%20selector%20testFor%3A%20aResult%20doing%3A%20aBlock%0D%09%22%20Evaluate%20the%20tests%20implemented%20as%20selector%20in%20the%20receiver.%20%22%0D%0D%09%7C%20didPass%20%7C%0D%09didPass%20%3A%3D%20true.%0D%09%5B%5BaBlock%0D%09%09ifNotNil%3A%0D%09%09%09%5BaBlock%0D%09%09%09%09value%3A%20self%0D%09%09%09%09value%3A%20selector%5D.%0D%09self%20perform%3A%20selector.%5D%0D%09%09on%3A%20TestFailure%0D%09%09do%3A%20%5B%3Afailure%7C%0D%09%09%09didPass%20%3A%3D%20false.%0D%09%09%09self%0D%09%09%09%09print%3A%20%27%09Fail%21%27%3B%0D%09%09%09%09print%3A%20%27%09%27%2C%20failure%20description.%0D%09%09%09aResult%20addFailure%3A%20failure%20class%3A%20self%20class%20name%20test%3A%20selector.%0D%09%09%09%22aResult%20addFailure%3A%20failure%20at%3A%20self%20class%20name%2C%20%27%3E%3E%23%27%2C%20selector%22%5D%5D%0D%09%09on%3A%20Error%0D%09%09do%3A%20%5B%3Aerror%7C%0D%09%09didPass%20%3A%3D%20false.%0D%09%09%09self%0D%09%09%09%09print%3A%20%27%09Fail%21%27%3B%0D%09%09%09%09print%3A%20%27%09%27%2C%20error%20description.%0D%09%09%09aResult%20addError%3A%20error%20class%3A%20self%20class%20name%20test%3A%20selector.%0D%09%09%09%22aResult%20addError%3A%20error%20at%3A%20self%20class%20name%2C%20%27%3E%3E%23%27%2C%20selector%22%5D.%0D%09didPass%0D%09%09ifTrue%3A%20%5B%0D%09%09%09aResult%20addPassed%3A%20self%20class%20name%20test%3A%20selector.%0D%09%09%09%22aResult%20addPassed%3A%20self%20class%20name%2C%20%27%3E%3E%23%27%2C%20selector%22%5D.%0D%09aResult%20finished."));
smalltalk.bind(smalltalk.TestCase, unescape("assert%3A"), "assert_", function TestCase__assert_(aBoolean){
const self = this; self.incrementAssertionCount();
if ((aBoolean).not()) {self.signalFailure_((("Assertion "._comma(((self.assertCount()).printString())))._comma(unescape("%20failed%21"))))};
return self;
}
, "testing", unescape("assert%3A%20aBoolean%0D%09%22%20Test%20an%20assertion.%20%22%0D%0D%09self%20incrementAssertionCount.%0D%09aBoolean%20ifFalse%3A%20%5B%20self%20signalFailure%3A%20%27Assertion%20%27%2C%20self%20assertCount%20printString%2C%20%27%20failed%21%27%20%5D"));
smalltalk.bind(smalltalk.TestCase, unescape("assert%3Amessage%3A"), "assert_message_", function TestCase__assert_message_(aBoolean,message){
const self = this; if ((aBoolean).not()) {self.signalFailure_(("Assertion failed: "._comma(message)))};
return self;
}
, "testing", unescape("assert%3A%20aBoolean%20message%3A%20message%0D%20%20%20%09%22%20Test%20an%20assertion.%20%22%0D%0D%20%20%20%09aBoolean%20ifFalse%3A%20%5B%20self%20signalFailure%3A%20%27Assertion%20failed%3A%20%27%2C%20message%20%5D"));
smalltalk.bind(smalltalk.TestCase, unescape("assert%3Adescription%3A"), "assert_description_", function TestCase__assert_description_(aBoolean,message){
const self = this; self.assert_message_(aBoolean,message);
return self;
}
, "testing", unescape("assert%3A%20aBoolean%20description%3A%20message%0D%20%20%20%09%22%20Test%20an%20assertion.%20%22%0D%09self%20assert%3A%20aBoolean%20message%3A%20message"));
smalltalk.bind(smalltalk.TestCase, unescape("deny%3A"), "deny_", function TestCase__deny_(aBoolean){
const self = this; self.assert_((aBoolean.not()));
return self;
}
, "testing", unescape("deny%3A%20aBoolean%0D%09%22%20Test%20a%20negative%20assertion.%20%22%0D%0D%09self%20assert%3A%20aBoolean%20not"));
smalltalk.bind(smalltalk.TestCase, unescape("deny%3Amessage%3A"), "deny_message_", function TestCase__deny_message_(aBoolean,message){
const self = this; if ((aBoolean).valueOf()) {self.signalFailure_(("Assertion failed: "._comma(message)))};
return self;
}
, "testing", unescape("deny%3A%20aBoolean%20message%3A%20message%0D%20%20%20%09%22%20Test%20an%20assertion.%20%22%0D%0D%20%20%20%09aBoolean%20ifTrue%3A%20%5B%20self%20signalFailure%3A%20%27Assertion%20failed%3A%20%27%2C%20message%20%5D"));
smalltalk.bind(smalltalk.TestCase, unescape("assert%3Aequals%3A"), "assert_equals_", function TestCase__assert_equals_(anObject,bObject){
const self = this; self.assert_((anObject._eq(bObject)));
return self;
}
, "testing", unescape("assert%3A%20anObject%0Dequals%3A%20bObject%0D%09%22%20Test%20an%20assertion.%20%22%0D%0D%09self%20assert%3A%20anObject%20%3D%20bObject"));
smalltalk.bind(smalltalk.TestCase, unescape("deny%3Aequals%3A"), "deny_equals_", function TestCase__deny_equals_(anObject,bObject){
const self = this; self.deny_((anObject._eq(bObject)));
return self;
}
, "testing", unescape("deny%3A%20anObject%0Dequals%3A%20bObject%0D%09%22%20Test%20an%20assertion.%20%22%0D%0D%09self%20deny%3A%20anObject%20%3D%20bObject"));
smalltalk.bind(smalltalk.TestCase, unescape("executeShould%3AinScopeOf%3A"), "executeShould_inScopeOf_", function TestCase__executeShould_inScopeOf_(aBlock,anException){
const self = this; var $early={name:"stReturn"};
try {
aBlock.on_do_(anException,(function TestCase__(ex){
$early.result=true; throw ($early);
}
));
return false;
} catch($ex) {
	if($ex===$early) { return $ex.result;}
	throw $ex
}
}
, "asserting", unescape("executeShould%3A%20aBlock%0DinScopeOf%3A%20anException%0D%0D%09aBlock%0D%09%09on%3A%20anException%0D%09%09do%3A%20%5B%3Aex%20%7C%20%5Etrue%5D.%0D%09%5Efalse"));
smalltalk.bind(smalltalk.TestCase, unescape("should%3Araise%3A"), "should_raise_", function TestCase__should_raise_(aBlock,anException){
const self = this; self.assert_((self.executeShould_inScopeOf_(aBlock,anException)));
return self;
}
, "asserting", unescape("should%3A%20aBlock%0Draise%3A%20anException%0D%0D%09self%20assert%3A%20%28self%20executeShould%3A%20aBlock%20inScopeOf%3A%20anException%29"));
smalltalk.bind(smalltalk.TestCase, unescape("shouldnt%3Araise%3A"), "shouldnt_raise_", function TestCase__shouldnt_raise_(aBlock,anException){
const self = this; self.deny_((self.executeShould_inScopeOf_(aBlock,anException)));
return self;
}
, "asserting", unescape("shouldnt%3A%20aBlock%0Draise%3A%20anException%0D%0D%09self%20deny%3A%20%28self%20executeShould%3A%20aBlock%20inScopeOf%3A%20anException%29"));
smalltalk.bind(smalltalk.TestResult, unescape("timestamp"), "timestamp", function TestResult__timestamp(){
const self = this; return self['@timestamp'];
}
, "accessing", unescape("timestamp%0D%09%22%20Return%20the%20timestamp%20of%20the%20receiver.%20%22%0D%0D%09%5Etimestamp"));
smalltalk.bind(smalltalk.TestResult, unescape("errors"), "errors", function TestResult__errors(){
const self = this; return self['@errors'];
}
, "accessing", unescape("errors%0D%09%22%20Return%20the%20errors%20of%20the%20receiver.%20%22%0D%0D%09%5Eerrors"));
smalltalk.bind(smalltalk.TestResult, unescape("failures"), "failures", function TestResult__failures(){
const self = this; return self['@failures'];
}
, "accessing", unescape("failures%0D%09%22%20Return%20the%20failures%20of%20the%20receiver.%20%22%0D%0D%09%5Efailures"));
smalltalk.bind(smalltalk.TestResult, unescape("passed"), "passed", function TestResult__passed(){
const self = this; return self['@passed'];
}
, "accessing", unescape("passed%0D%09%22%20Return%20the%20passed%20of%20the%20receiver.%20%22%0D%0D%09%5Epassed"));
smalltalk.bind(smalltalk.TestResult, unescape("total"), "total", function TestResult__total(){
const self = this; return self['@total'];
}
, "accessing", unescape("total%0D%09%22%20Return%20the%20total%20of%20the%20receiver.%20%22%0D%0D%09%5Etotal"));
smalltalk.bind(smalltalk.TestResult, unescape("total%3A"), "total_", function TestResult__total_(aNumber){
const self = this; self['@total']=aNumber;
return self;
}
, "accessing", unescape("total%3A%20aNumber%0D%09%22%20Set%20the%20total%20of%20the%20receiver.%20%22%0D%0D%09total%20%3A%3D%20aNumber"));
smalltalk.bind(smalltalk.TestResult, unescape("addError%3Aclass%3Atest%3A"), "addError_class_test_", function TestResult__addError_class_test_(error,className,testSelector){
const self = this; (self.errors()).add_((smalltalk.Array.with_with_(error,((((self.$klass).name())._comma(unescape("%3E%3E%23")))._comma(testSelector)))));
return self;
}
, "accessing", unescape("addError%3A%20error%20class%3A%20className%20test%3A%20testSelector%0D%09%22%20Record%20the%20error%20at%20current%20test%20stage.%20%22%0D%09self%20errors%20add%3A%20%28Array%20with%3A%20error%20with%3A%20self%20class%20name%2C%20%27%3E%3E%23%27%2C%20testSelector%29"));
smalltalk.bind(smalltalk.TestResult, unescape("addPassed%3Atest%3A"), "addPassed_test_", function TestResult__addPassed_test_(className,testSelector){
const self = this; (self.passed()).add_(((((self.$klass).name())._comma(unescape("%3E%3E%23")))._comma(testSelector)));
return self;
}
, "accessing", unescape("addPassed%3A%20className%20test%3A%20testSelector%0D%09%22%20Record%20the%20pass%20at%20current%20test%20stage.%20%22%0D%0D%09self%20passed%20add%3A%20%28self%20class%20name%2C%20%27%3E%3E%23%27%2C%20testSelector%29"));
smalltalk.bind(smalltalk.TestResult, unescape("addFailure%3Aclass%3Atest%3A"), "addFailure_class_test_", function TestResult__addFailure_class_test_(failure,className,testSelector){
const self = this; (self.failures()).add_((smalltalk.Array.with_with_(failure,((((self.$klass).name())._comma(unescape("%3E%3E%23")))._comma(testSelector)))));
return self;
}
, "accessing", unescape("addFailure%3A%20failure%20class%3A%20className%20test%3A%20testSelector%0D%09%22%20Record%20the%20failure%20at%20current%20test%20stage.%20%22%0D%0D%09self%20failures%20add%3A%20%28Array%20with%3A%20failure%20with%3A%20self%20class%20name%2C%20%27%3E%3E%23%27%2C%20testSelector%29"));
smalltalk.bind(smalltalk.TestResult, unescape("runs"), "runs", function TestResult__runs(){
const self = this; return self['@runs'];
}
, "accessing", unescape("runs%0D%09%22%20Return%20the%20run%20count%20of%20the%20receiver.%20%22%0D%0D%09%5Eruns"));
smalltalk.bind(smalltalk.TestResult, unescape("finished"), "finished", function TestResult__finished(){
const self = this; self['@runs']=self['@runs']._plus((1));
return self;
}
, "accessing", unescape("finished%0D%09%22%20The%20test%20has%20finished.%20%22%0D%0D%09runs%20%3A%3D%20runs%20+%201"));
smalltalk.bind(smalltalk.TestResult, unescape("status"), "status", function TestResult__status(){
const self = this; if (((self.errors()).notEmpty()).valueOf()) {return "error"};
if (((self.failures()).isEmpty()).valueOf()) {return "success"};
return "failure";
}
, "accessing", unescape("status%0D%09%22%20Return%20the%20status%20of%20the%20receiver.%20%22%0D%0D%09self%20errors%20notEmpty%20ifTrue%3A%20%5B%20%5E%23error%20%5D.%0D%09self%20failures%20isEmpty%20ifTrue%3A%20%5B%20%5E%23success%20%5D.%0D%09%5E%23failure"));
smalltalk.bind(smalltalk.TestResult, unescape("passes"), "passes", function TestResult__passes(){
const self = this; return (self.total())._minus((((self.errors()).size())._plus(((self.failures()).size()))));
}
, "accessing", unescape("passes%0D%09%22%20Return%20the%20number%20of%20tests%20that%20run%20ok.%20%22%0D%0D%09%5Eself%20total%20-%20%28self%20errors%20size%20+%20self%20failures%20size%29"));
smalltalk.bind(smalltalk.TestResult, unescape("initialize"), "initialize", function TestResult__initialize(){
const self = this; smalltalk.superImplementor(smalltalk.TestResult,'initialize').apply(self, []);
self['@timestamp']=smalltalk.DateTime.now();
self['@runs']=self['@total']=(0);
self['@passed']=smalltalk.Array.$$new();
self['@errors']=smalltalk.Array.$$new();
self['@failures']=smalltalk.Array.$$new();
return self;
}
, "initialize", unescape("initialize%0D%09%22%20Private%20-%20Initialize%20the%20receiver.%20%22%0D%0D%09super%20initialize.%0D%09timestamp%20%3A%3D%20DateTime%20now.%0D%09runs%20%3A%3D%20total%20%3A%3D%200.%0D%09passed%20%3A%3D%20Array%20new.%0D%09errors%20%3A%3D%20Array%20new.%0D%09failures%20%3A%3D%20Array%20new."));
smalltalk.bind(smalltalk.TestResult, unescape("toString"), "toString", function TestResult__toString(){
const self = this; if (((nil.isNil_(self['@total']))).valueOf()) {return "a"._comma(((self.$klass).name()))};
return ((((((((((((self.$klass).name())._comma(unescape("%20%5B")))._comma((self.status())))._comma(unescape("%5D%20")))._comma(((self.passes()).asString())))._comma(unescape("%20ok%2C%20")))._comma((((self.failures()).size()).asString())))._comma(unescape("%20failed%2C%20")))._comma((((self.errors()).size()).asString())))._comma(" errors"))._comma(unescape("%0D")))._comma((self.description()));
}
, "printing", unescape("toString%0D%09%22%20Return%20the%20string%20representation%20of%20the%20receiver.%20%22%0D%0D%09total%20isNil%20ifTrue%3A%20%5B%20%5E%27a%27%2Cself%20class%20name%20%5D.%0D%09%5Eself%20class%20name%20%2C%27%20%5B%27%2C%20self%20status%2C%27%5D%20%27%0D%09%09%2Cself%20passes%20asString%2C%27%20ok%2C%20%27%0D%09%09%2Cself%20failures%20size%20asString%2C%27%20failed%2C%20%27%0D%09%09%2Cself%20errors%20size%20asString%2C%27%20errors%27%0D%09%09%2C%27%0D%27%0D%09%09%2Cself%20description"));
smalltalk.bind(smalltalk.TestResult, unescape("description"), "description", function TestResult__description(){
var stream = nil;
const self = this; stream=(smalltalk.String.$$new()).stream();
(function TestResult__($1$){
$1$.nextPutAll_((unescape("status%3D")._comma((self.status()))));
return $1$.cr()}
)(stream);
(function TestResult__($2$){
$2$.cr();
$2$.nextPutAll_("failures:");
return $2$.cr()}
)(stream);
(self.failures()).do_((function TestResult__(tuple){
return (function TestResult__($3$){
$3$.cr();
return $3$.nextPutAll_((((unescape("%09")._comma((tuple.last())))._comma(unescape("%09")))._comma(((tuple.first()).description()))))}
)(stream);
}
));
(function TestResult__($4$){
$4$.cr();
$4$.nextPutAll_("errors:");
return $4$.cr()}
)(stream);
(self.errors()).do_((function TestResult__(tuple){
return (function TestResult__($5$){
$5$.cr();
return $5$.nextPutAll_((((unescape("%09")._comma((tuple.last())))._comma(unescape("%09")))._comma(((tuple.first()).description()))))}
)(stream);
}
));
(function TestResult__($6$){
$6$.cr();
$6$.nextPutAll_("passed:");
return $6$.cr()}
)(stream);
(self.passed()).do_((function TestResult__(stage){
return (function TestResult__($7$){
$7$.cr();
return $7$.nextPutAll_((unescape("%09")._comma(stage)))}
)(stream);
}
));
return stream.contents();
}
, "printing", unescape("description%0D%09%22%20Return%20the%20description%20of%20the%20receiver.%20%22%0D%0D%09%7C%20stream%20%7C%0D%09stream%20%3A%3D%20String%20new%20stream.%0D%09stream%20nextPutAll%3A%20%27status%3D%27%2C%20self%20status%3Bcr.%0D%09stream%20cr%3B%20nextPutAll%3A%20%27failures%3A%27%3Bcr.%0D%09self%20failures%20do%3A%20%5B%3Atuple%7C%0D%09%09stream%20cr%3BnextPutAll%3A%20%27%09%27%2Ctuple%20last%20%2C%27%09%27%20%2Ctuple%20first%20description%0D%09%5D.%0D%09stream%20cr%3B%20nextPutAll%3A%20%27errors%3A%27%3Bcr.%0D%09self%20errors%20do%3A%20%5B%3Atuple%7C%0D%09%09stream%20cr%3BnextPutAll%3A%20%27%09%27%2Ctuple%20last%20%2C%27%09%27%20%2Ctuple%20first%20description%0D%09%5D.%0D%09stream%20cr%3B%20nextPutAll%3A%20%27passed%3A%27%3Bcr.%0D%09self%20passed%20do%3A%20%5B%3Astage%7C%0D%09%09stream%20cr%3BnextPutAll%3A%20%27%09%27%2Cstage%0D%09%5D.%0D%09%5Estream%20contents"));
smalltalk.bind(smalltalk.TestRunner.$klass, unescape("runAll"), "runAll", function TestRunner_class__runAll(){
const self = this; return self.runAll_((smalltalk.TestCase.allSubclasses()));
}
, "testing", unescape("runAll%0D%09%22%20Run%20all%20test%20cases.%20%22%0D%0D%09%5Eself%20runAll%3A%20TestCase%20allSubclasses"));
smalltalk.bind(smalltalk.TestRunner.$klass, unescape("runCategories%3A"), "runCategories_", function TestRunner_class__runCategories_(categories){
const self = this; return self.runAll_(((smalltalk.TestCase.allSubclasses()).select_((function TestRunner_class__(each){
return categories.includes_((each.category()));
}
))));
}
, "testing", unescape("runCategories%3A%20categories%0D%09%22%20Run%20all%20test%20cases%20defined%20in%20TestCase%20subclasses%20matching%20categories.%20%22%0D%0D%09%5Eself%20runAll%3A%20%28TestCase%20allSubclasses%0D%09%09select%3A%20%5B%3Aeach%7C%20categories%20includes%3A%20each%20category%20%5D%29"));
smalltalk.bind(smalltalk.TestRunner.$klass, unescape("runAll%3A"), "runAll_", function TestRunner_class__runAll_(aCollection){
const self = this; return (self.$$new()).runClasses_(aCollection);
}
, "testing", unescape("runAll%3A%20aCollection%0D%09%22%20Run%20all%20test%20cases%20defined%20in%20aCollection%20%28of%20TestCase%20subclasses%29.%20%22%0D%0D%09%5Eself%20new%20runClasses%3A%20aCollection"));
smalltalk.bind(smalltalk.TestRunner.$klass, unescape("run%3A"), "run_", function TestRunner_class__run_(aTestCase){
const self = this; return (self.$$new()).runAll_((smalltalk.Array.with_(aTestCase)));
}
, "testing", unescape("run%3A%20aTestCase%0D%09%22%20Run%20a%20test%20case.%20%22%0D%0D%09%5Eself%20new%20runAll%3A%20%28Array%20with%3A%20aTestCase%29"));
smalltalk.bind(smalltalk.TestRunner, unescape("progress"), "progress", function TestRunner__progress(){
const self = this; return self['@progress'];
}
, "accessing", unescape("progress%0D%09%22%20Return%20the%20progress%20indicator%20of%20the%20receiver%20%28or%20nil%29.%20%22%0D%0D%09%5Eprogress"));
smalltalk.bind(smalltalk.TestRunner, unescape("progress%3A"), "progress_", function TestRunner__progress_(aProgress){
const self = this; self['@progress']=aProgress;
return self;
}
, "accessing", unescape("progress%3A%20aProgress%0D%09%22%20Set%20the%20progress%20indicator%20of%20the%20receiver.%20%22%0D%0D%09progress%20%3A%3D%20aProgress"));
smalltalk.bind(smalltalk.TestRunner, unescape("timeout"), "timeout", function TestRunner__timeout(){
const self = this; return self['@timeout'];
}
, "accessing", unescape("timeout%0D%09%22%20Return%20the%20timeout%20of%20the%20receiver%20%28or%20nil%29.%20%22%0D%0D%09%5Etimeout"));
smalltalk.bind(smalltalk.TestRunner, unescape("percent"), "percent", function TestRunner__percent(){
var runs = nil;
var total = nil;
const self = this; if (((nil.isNil_(self['@result']))).valueOf()) {return (0)};
runs=self['@result'].runs();
total=self['@result'].total();
if (((nil.is_eqeq_(total,(0)))).valueOf()) {return (0)};
return ((100)._star(runs))._slash(total);
}
, "accessing", unescape("percent%0D%09%22%20Return%20the%20percent%20of%20advance%20in%20the%20current%20test%20set.%20%22%0D%09%7C%20runs%20total%20%7C%0D%09result%20isNil%20ifTrue%3A%20%5B%20%5E0%20%5D.%0D%09runs%20%3A%3D%20result%20runs.%0D%09total%20%3A%3D%20result%20total.%0D%09total%20%3D%3D%200%20ifTrue%3A%20%5B%20%5E0%20%5D.%0D%09%22work%20around%20a%20fraction%20issue%20for%20now%22%0D%09%5E100.0%20*%20runs%20/%20total"));
smalltalk.bind(smalltalk.TestRunner, unescape("timeout%3A"), "timeout_", function TestRunner__timeout_(aNumber){
const self = this; self['@timeout']=aNumber;
return self;
}
, "accessing", unescape("timeout%3A%20aNumber%0D%09%22%20Set%20the%20timeout%20of%20the%20receiver.%0D%09WARNING%3A%20do%20not%20set%20the%20timeout%20if%20the%20platform%20do%20not%20support%20setTimeout%28%29.%0D%09%22%0D%0D%09timeout%20%3A%3D%20aNumber"));
smalltalk.bind(smalltalk.TestRunner, unescape("notificationBlock"), "notificationBlock", function TestRunner__notificationBlock(){
const self = this; if (((nil.isNil_(self['@notificationBlock']))).valueOf()) {return (function TestRunner__(test,selector){
return self.print_(((((test.$klass).name())._comma(unescape("%3E%3E%23")))._comma(selector)));
}
)};
return self['@notificationBlock'];
}
, "accessing", unescape("notificationBlock%0D%09%22%20Return%20the%20notificationBlock%20of%20the%20receiver%20%28or%20default%20printing%20block%29.%20%22%0D%0D%09notificationBlock%20isNil%20ifTrue%3A%20%5B%0D%09%09%5E%5B%3Atest%20%3Aselector%20%7C%20self%20print%3A%20test%20class%20name%2C%27%3E%3E%23%27%2Cselector%20%5D%0D%09%5D.%0D%09%5EnotificationBlock"));
smalltalk.bind(smalltalk.TestRunner, unescape("notificationBlock%3A"), "notificationBlock_", function TestRunner__notificationBlock_(aTwoArgumentBlock){
const self = this; self['@notificationBlock']=aTwoArgumentBlock;
return self;
}
, "accessing", unescape("notificationBlock%3A%20aTwoArgumentBlock%0D%09%22%20Set%20the%20notificationBlock%20of%20the%20receiver.%20%22%0D%0D%09notificationBlock%20%3A%3D%20aTwoArgumentBlock"));
smalltalk.bind(smalltalk.TestRunner, unescape("runClasses%3A"), "runClasses_", function TestRunner__runClasses_(aCollection){
const self = this; return self.runTests_(aCollection);
}
, "testing", unescape("runClasses%3A%20aCollection%0D%09%22%20Run%20all%20test%20cases%20defined%20in%20aCollection%20%28of%20TestCase%20subclasses%29.%20%22%0D%0D%09%5Eself%20runTests%3A%20aCollection"));
smalltalk.bind(smalltalk.TestRunner, unescape("initTestResult"), "initTestResult", function TestRunner__initTestResult(){
const self = this; self['@result']=smalltalk.TestResult.$$new();
return self;
}
, "private", unescape("initTestResult%0D%09result%20%3A%3D%20TestResult%20new"));
smalltalk.bind(smalltalk.TestRunner, unescape("runTests%3A"), "runTests_", function TestRunner__runTests_(specification){
var tests = nil;
const self = this; self.percent_((0));
tests=specification.collect_((function TestRunner__(each){
if ((each.isClass()).valueOf()) {return smalltalk.Array.with_with_(each,(each.selectorsForTest()))} else {return each};
}
));
self.initTestResult();
self['@result'].total_((tests.inject_into_((0),(function TestRunner__(total,tuple){
return total._plus(((tuple.last()).size()));
}
))));
tests.do_((function TestRunner__(tuple){
self.percent_((self.percent()));
return self.valueWithTimeout_((function TestRunner__(){
return (tuple.first()).runCases_for_doing_((tuple.last()),self['@result'],(self.notificationBlock()));
}
));
}
));
return self['@result'];
}
, "testing", unescape("runTests%3A%20specification%0D%09%22%20Run%20all%20test%20cases%20defined%20in%20specification.%0D%09Return%20the%20result%20of%20testing.%0D%09specification%20is%20a%20collection%20of%20TestCase%20subclass%20or%20tuples%20of%20%28TestCaseSubclass%20selectors%29%0D%09%22%0D%0D%09%7C%20tests%20%7C%0D%09self%20percent%3A%200.%0D%09tests%20%3A%3D%20specification%20collect%3A%20%5B%3Aeach%7C%0D%09%09each%20isClass%0D%09%09ifTrue%3A%20%5B%20Array%20with%3A%20each%20with%3A%20each%20selectorsForTest%20%5D%0D%09%09ifFalse%3A%20%5B%20each%20%5D%0D%09%5D.%0D%09self%20initTestResult.%0D%09result%20total%3A%20%28tests%20inject%3A%200%20into%3A%20%5B%3Atotal%20%3Atuple%7C%20total%20+%20tuple%20last%20size%20%5D%29.%0D%09tests%20do%3A%20%5B%3Atuple%7C%0D%09%09self%20percent%3A%20self%20percent.%0D%09%09self%20valueWithTimeout%3A%20%5B%0D%09%09%09tuple%20first%0D%09%09%09%09runCases%3A%20tuple%20last%20for%3A%20result%0D%09%09%09%09doing%3A%20self%20notificationBlock%0D%09%09%5D.%0D%09%5D.%0D%09%5Eresult"));
smalltalk.bind(smalltalk.TestRunner, unescape("valueWithTimeout%3A"), "valueWithTimeout_", function TestRunner__valueWithTimeout_(aBlock){
const self = this; if (((nil.isNil_(self.timeout()))).valueOf()) {return aBlock.value()};
return aBlock.valueWithTimeout_((self.timeout()));
}
, "private", unescape("valueWithTimeout%3A%20aBlock%0D%09%22%20Private%20-%20Return%20the%20result%20of%20evaluating%20aBlock%20%28with%20timeout%29.%20%22%0D%0D%09self%20timeout%20isNil%20ifTrue%3A%20%5B%20%5EaBlock%20value%20%5D.%0D%09%5EaBlock%20valueWithTimeout%3A%20self%20timeout"));
smalltalk.bind(smalltalk.TestRunner, unescape("percent%3A"), "percent_", function TestRunner__percent_(aNumber){
const self = this; if (((nil.isNil_(self.progress()))).valueOf()) {return self};
(self.progress()).value_(aNumber);
return self;
}
, "private", unescape("percent%3A%20aNumber%0D%09%22%20Private%20-%20Notify%20the%20percent%20of%20advance%20in%20the%20current%20test%20set.%20%22%0D%0D%09self%20progress%20isNil%20ifTrue%3A%20%5B%20%5Eself%20%5D.%0D%09self%20progress%20value%3A%20aNumber"));
